#NAME products.

def Product_set__element :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  _p_B_element:(cc.eT _p_B_T) ->
  abst_T:cc.uT ->
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) ->
  cc.eT abst_T
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  _p_B_element:(cc.eT _p_B_T) =>
  abst_T:cc.uT =>
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_pair _p_A_element _p_B_element.

def Product_set__equal :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  basics._amper__amper_ (_p_A_equal (abst_first x) (abst_first y)) 
    (_p_B_equal (abst_second x) (abst_second y)).

def Product_set__first_accessibility :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_element:(cc.eT _p_B_T) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_pair_preserves_first:(dk_logic.eP 
                               (dk_logic.forall _p_A_T 
                                  (x:(cc.eT _p_A_T) =>
                                   dk_logic.forall _p_B_T 
                                     (y:(cc.eT _p_B_T) =>
                                      dk_logic.ebP 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x y)) x))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.exists abst_T 
          (s:(cc.eT abst_T) => dk_logic.ebP (_p_A_equal (abst_first s) x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_element:(cc.eT _p_B_T) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_pair_preserves_first:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_A_equal (abst_first (abst_pair x y)) x))))) =>
  (__A_1_LEMMA:
   (x:(cc.eT _p_A_T) ->
    dk_logic.eP 
      (dk_logic.ebP (_p_A_equal (abst_first (abst_pair x _p_B_element)) x))) =>
   zen.nnpp 
     (zen.forall _p_A_T 
        (v_Vzb:(zen.term _p_A_T) =>
         zen.exists abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true (_p_A_equal (abst_first v_Vac) v_Vzb))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_A_T 
               (v_Vzb:(zen.term _p_A_T) =>
                zen.exists abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true (_p_A_equal (abst_first v_Vac) v_Vzb))))))) =>
      zen.Rnotall _p_A_T 
        (v_Vzb:(zen.term _p_A_T) =>
         zen.exists abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true (_p_A_equal (abst_first v_Vac) v_Vzb)))) 
        (v_Vcc:(zen.term _p_A_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.exists abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true (_p_A_equal (abst_first v_Vac) v_Vcc)))))) =>
         zen.Rall _p_A_T 
           (v_Vzb:(zen.term _p_A_T) =>
            zen.triangle 
              (focal.is_true 
                 (_p_A_equal (abst_first (abst_pair v_Vzb _p_B_element)) 
                    v_Vzb))) v_Vcc 
           (v_Vec:
            (zen.proof 
               (zen.triangle 
                  (focal.is_true 
                     (_p_A_equal (abst_first (abst_pair v_Vcc _p_B_element)) 
                        v_Vcc)))) =>
            zen.Rnotex abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true (_p_A_equal (abst_first v_Vac) v_Vcc))) 
              (abst_pair v_Vcc _p_B_element) 
              (v_Vfc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal 
                              (abst_first (abst_pair v_Vcc _p_B_element)) 
                              v_Vcc))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal 
                          (abst_first (abst_pair v_Vcc _p_B_element)) v_Vcc))) 
                 v_Vec v_Vfc) v_Vdc) __A_1_LEMMA) v_Vbc)) 
    (x:(cc.eT _p_A_T) =>
     zen.nnpp 
       (zen.triangle 
          (focal.is_true 
             (_p_A_equal (abst_first (abst_pair x _p_B_element)) x))) 
       (v_Vzb:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (_p_A_equal (abst_first (abst_pair x _p_B_element)) x))))) =>
        zen.Rall _p_A_T 
          (v_Vac:(zen.term _p_A_T) =>
           zen.forall _p_B_T 
             (v_Vbc:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first (abst_pair v_Vac v_Vbc)) v_Vac)))) 
          x 
          (v_Vcc:
           (zen.proof 
              (zen.forall _p_B_T 
                 (v_Vbc:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_first (abst_pair x v_Vbc)) x))))) =>
           zen.Rall _p_B_T 
             (v_Vbc:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first (abst_pair x v_Vbc)) x))) 
             _p_B_element 
             (v_Vdc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal (abst_first (abst_pair x _p_B_element)) x)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_first (abst_pair x _p_B_element)) x))) 
                v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_first)).

def Product_set__equal_reflexive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.ebP (_p_A_equal x x)))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (_p_B_equal x x)))) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.ebP 
          (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
             abst_first abst_second x x)))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true 
             (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
                abst_first abst_second v_Vzb v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true 
                    (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                       abst_T abst_first abst_second v_Vzb v_Vzb)))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.triangle 
          (focal.is_true 
             (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
                abst_first abst_second v_Vzb v_Vzb))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (basics._amper__amper_ 
                       (_p_A_equal (abst_first v_Vbc) (abst_first v_Vbc)) 
                       (_p_B_equal (abst_second v_Vbc) (abst_second v_Vbc))))))) =>
        focal.zenon_focal_notand 
          (_p_A_equal (abst_first v_Vbc) (abst_first v_Vbc)) 
          (_p_B_equal (abst_second v_Vbc) (abst_second v_Vbc)) 
          (v_Vdc:
           (zen.proof 
              (zen.not 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vbc) (abst_first v_Vbc)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vbc) (abst_second v_Vbc))))))) =>
           zen.Rnotand 
             (zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first v_Vbc) (abst_first v_Vbc)))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second v_Vbc) (abst_second v_Vbc)))) 
             (v_Vec:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vbc) (abst_first v_Vbc)))))) =>
              zen.Rall _p_A_T 
                (v_Vfc:(zen.term _p_A_T) =>
                 zen.triangle (focal.is_true (_p_A_equal v_Vfc v_Vfc))) 
                (abst_first v_Vbc) 
                (v_Vgc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vbc) (abst_first v_Vbc))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first v_Vbc) (abst_first v_Vbc)))) 
                   v_Vgc v_Vec) _p_A_equal_reflexive) 
             (v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vbc) (abst_second v_Vbc)))))) =>
              zen.Rall _p_B_T 
                (v_Vic:(zen.term _p_B_T) =>
                 zen.triangle (focal.is_true (_p_B_equal v_Vic v_Vic))) 
                (abst_second v_Vbc) 
                (v_Vjc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vbc) (abst_second v_Vbc))))) =>
                 zen.Raxiom 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_B_equal (abst_second v_Vbc) (abst_second v_Vbc)))) 
                   v_Vjc v_Vhc) _p_B_equal_reflexive) v_Vdc) v_Vcc) v_Vac).

def Product_set__equal_spec :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_first abst_second x y)) 
             (dk_logic.and 
                (dk_logic.ebP (_p_A_equal (abst_first x) (abst_first y))) 
                (dk_logic.ebP (_p_B_equal (abst_second x) (abst_second y)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vzb v_Vac))) 
             (zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_first v_Vzb) (abst_first v_Vac)))) 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal (abst_second v_Vzb) (abst_second v_Vac)))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vzb 
                             v_Vac))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vzb) 
                                (abst_first v_Vac)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vzb) 
                                (abst_second v_Vac)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vzb v_Vac))) 
             (zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_first v_Vzb) (abst_first v_Vac)))) 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal (abst_second v_Vzb) (abst_second v_Vac))))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vcc 
                             v_Vac))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vac)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vac))))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vcc v_Vac))) 
             (zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_first v_Vcc) (abst_first v_Vac)))) 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal (abst_second v_Vcc) (abst_second v_Vac)))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vcc 
                             v_Vec))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec)))))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vcc v_Vec))) 
             (zen.and 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec))))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._amper__amper_ 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec)) 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec))))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))))) =>
              zen.Rand 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec))))) =>
                 v_Vjc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec))))) =>
                 focal.zenon_focal_notand 
                   (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                   (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)) 
                   (v_Vkc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first v_Vcc) 
                                      (abst_first v_Vec)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second v_Vcc) 
                                      (abst_second v_Vec))))))) =>
                    zen.Rnotand 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second v_Vcc) 
                               (abst_second v_Vec)))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first v_Vcc) 
                                      (abst_first v_Vec)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first v_Vcc) 
                                  (abst_first v_Vec)))) v_Vic v_Vlc) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second v_Vcc) 
                                      (abst_second v_Vec)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second v_Vcc) 
                                  (abst_second v_Vec)))) v_Vjc v_Vmc) v_Vkc) 
                   v_Vgc) v_Vhc) 
             (v_Vnc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._amper__amper_ 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))))) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec))))))) =>
              zen.Rnotand 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec)))))) =>
                 focal.zenon_focal_and 
                   (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                   (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first v_Vcc) 
                                   (abst_first v_Vec)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second v_Vcc) 
                                   (abst_second v_Vec)))))) =>
                    zen.Rand 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second v_Vcc) 
                               (abst_second v_Vec)))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first v_Vcc) 
                                   (abst_first v_Vec))))) =>
                       v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second v_Vcc) 
                                   (abst_second v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first v_Vcc) 
                                  (abst_first v_Vec)))) v_Vic v_Vlc) v_Vhc) 
                   v_Vnc) 
                (v_Vmc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec)))))) =>
                 focal.zenon_focal_and 
                   (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                   (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first v_Vcc) 
                                   (abst_first v_Vec)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second v_Vcc) 
                                   (abst_second v_Vec)))))) =>
                    zen.Rand 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second v_Vcc) 
                               (abst_second v_Vec)))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal (abst_first v_Vcc) 
                                   (abst_first v_Vec))))) =>
                       v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second v_Vcc) 
                                   (abst_second v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second v_Vcc) 
                                  (abst_second v_Vec)))) v_Vjc v_Vmc) v_Vhc) 
                   v_Vnc) v_Vkc) v_Vfc) v_Vdc) v_Vbc).

def Product_set__equal_symmetric :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_first abst_second x y)) 
             (dk_logic.ebP 
                (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_first abst_second y x)))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vzb 
                             v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vac 
                             v_Vzb)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vcc 
                             v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vac 
                             v_Vcc))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vac v_Vcc)))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vcc 
                             v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vec 
                             v_Vcc)))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vec v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._amper__amper_ 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._amper__amper_ 
                             (_p_A_equal (abst_first v_Vec) 
                                (abst_first v_Vcc)) 
                             (_p_B_equal (abst_second v_Vec) 
                                (abst_second v_Vcc))))))) =>
              focal.zenon_focal_and 
                (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)) 
                (v_Vic:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec)))))) =>
                 zen.Rand 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec))))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec))))) =>
                    focal.zenon_focal_notand 
                      (_p_A_equal (abst_first v_Vec) (abst_first v_Vcc)) 
                      (_p_B_equal (abst_second v_Vec) (abst_second v_Vcc)) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first v_Vec) 
                                         (abst_first v_Vcc)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal (abst_second v_Vec) 
                                         (abst_second v_Vcc))))))) =>
                       zen.Rnotand 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first v_Vec) 
                                  (abst_first v_Vcc)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second v_Vec) 
                                  (abst_second v_Vcc)))) 
                         (v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (abst_first v_Vec) 
                                         (abst_first v_Vcc)))))) =>
                          zen.Rall _p_A_T 
                            (v_Vnc:(zen.term _p_A_T) =>
                             zen.forall _p_A_T 
                               (v_Voc:(zen.term _p_A_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_A_equal v_Vnc v_Voc))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_A_equal v_Voc v_Vnc))))) 
                            (abst_first v_Vcc) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.forall _p_A_T 
                                   (v_Voc:(zen.term _p_A_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_first v_Vcc) 
                                               v_Voc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal v_Voc 
                                               (abst_first v_Vcc))))))) =>
                             zen.Rall _p_A_T 
                               (v_Voc:(zen.term _p_A_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_first v_Vcc) v_Voc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal v_Voc (abst_first v_Vcc))))) 
                               (abst_first v_Vec) 
                               (v_Vqc:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_first v_Vcc) 
                                               (abst_first v_Vec)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_first v_Vec) 
                                               (abst_first v_Vcc)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_first v_Vcc) 
                                           (abst_first v_Vec)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (abst_first v_Vec) 
                                           (abst_first v_Vcc)))) 
                                  (v_Vrc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (abst_first v_Vcc) 
                                                  (abst_first v_Vec)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal (abst_first v_Vcc) 
                                              (abst_first v_Vec)))) v_Vjc 
                                     v_Vrc) 
                                  (v_Vsc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (abst_first v_Vec) 
                                               (abst_first v_Vcc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal (abst_first v_Vec) 
                                              (abst_first v_Vcc)))) v_Vsc 
                                     v_Vmc) v_Vqc) v_Vpc) 
                            _p_A_equal_symmetric) 
                         (v_Vtc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_B_equal (abst_second v_Vec) 
                                         (abst_second v_Vcc)))))) =>
                          zen.Rall _p_B_T 
                            (v_Vuc:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vvc:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vuc v_Vvc))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vvc v_Vuc))))) 
                            (abst_second v_Vcc) 
                            (v_Vwc:
                             (zen.proof 
                                (zen.forall _p_B_T 
                                   (v_Vvc:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal (abst_second v_Vcc) 
                                               v_Vvc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal v_Vvc 
                                               (abst_second v_Vcc))))))) =>
                             zen.Rall _p_B_T 
                               (v_Vvc:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal (abst_second v_Vcc) v_Vvc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal v_Vvc (abst_second v_Vcc))))) 
                               (abst_second v_Vec) 
                               (v_Vxc:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal (abst_second v_Vcc) 
                                               (abst_second v_Vec)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal (abst_second v_Vec) 
                                               (abst_second v_Vcc)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal (abst_second v_Vcc) 
                                           (abst_second v_Vec)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal (abst_second v_Vec) 
                                           (abst_second v_Vcc)))) 
                                  (v_Vyc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second v_Vcc) 
                                                  (abst_second v_Vec)))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal (abst_second v_Vcc) 
                                              (abst_second v_Vec)))) v_Vkc 
                                     v_Vyc) 
                                  (v_Vzc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal (abst_second v_Vec) 
                                               (abst_second v_Vcc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal (abst_second v_Vec) 
                                              (abst_second v_Vcc)))) v_Vzc 
                                     v_Vtc) v_Vxc) v_Vwc) 
                            _p_B_equal_symmetric) v_Vlc) v_Vhc) v_Vic) v_Vgc) 
             v_Vfc) v_Vdc) v_Vbc).

def Product_set__equal_transitive :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_first abst_second y z)) 
                   (dk_logic.ebP 
                      (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_first abst_second x z)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vvc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vwc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vxc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_first abst_second v_Vvc v_Vwc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vwc 
                            v_Vxc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vvc 
                            v_Vxc)))))))) 
    (v_Vyc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vvc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vwc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vxc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                _p_B_equal abst_T abst_first abst_second 
                                v_Vvc v_Vwc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vwc v_Vxc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vvc v_Vxc)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vvc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vwc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vxc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_first abst_second v_Vvc v_Vwc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vwc 
                            v_Vxc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vvc 
                            v_Vxc))))))) 
       (v_Vzc:(zen.term abst_T) =>
        v_Vad:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vwc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vxc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                _p_B_equal abst_T abst_first abst_second 
                                v_Vzc v_Vwc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vwc v_Vxc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vzc v_Vxc))))))))) =>
        zen.Rnotall abst_T 
          (v_Vwc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vxc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_first abst_second v_Vzc v_Vwc))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vwc 
                            v_Vxc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vzc 
                            v_Vxc)))))) 
          (v_Vbd:(zen.term abst_T) =>
           v_Vcd:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vxc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                _p_B_equal abst_T abst_first abst_second 
                                v_Vzc v_Vbd))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vbd v_Vxc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vzc v_Vxc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vxc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle 
                   (focal.is_true 
                      (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_first abst_second v_Vzc v_Vbd))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vbd 
                            v_Vxc))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vzc 
                            v_Vxc))))) 
             (v_Vdd:(zen.term abst_T) =>
              v_Ved:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                _p_B_equal abst_T abst_first abst_second 
                                v_Vzc v_Vbd))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vbd v_Vdd))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vzc v_Vdd))))))) =>
              zen.Rnotimply 
                (zen.triangle 
                   (focal.is_true 
                      (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                         _p_B_equal abst_T abst_first abst_second v_Vzc v_Vbd))) 
                (zen.imp 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vbd 
                            v_Vdd))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vzc 
                            v_Vdd)))) 
                (v_Vfd:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._amper__amper_ 
                             (_p_A_equal (abst_first v_Vzc) 
                                (abst_first v_Vbd)) 
                             (_p_B_equal (abst_second v_Vzc) 
                                (abst_second v_Vbd)))))) =>
                 v_Vgd:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vbd v_Vdd))) 
                          (zen.triangle 
                             (focal.is_true 
                                (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                   _p_B_equal abst_T abst_first abst_second 
                                   v_Vzc v_Vdd)))))) =>
                 zen.Rnotimply 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vbd 
                            v_Vdd))) 
                   (zen.triangle 
                      (focal.is_true 
                         (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                            _p_B_equal abst_T abst_first abst_second v_Vzc 
                            v_Vdd))) 
                   (v_Vhd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (basics._amper__amper_ 
                                (_p_A_equal (abst_first v_Vbd) 
                                   (abst_first v_Vdd)) 
                                (_p_B_equal (abst_second v_Vbd) 
                                   (abst_second v_Vdd)))))) =>
                    v_Vid:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (basics._amper__amper_ 
                                   (_p_A_equal (abst_first v_Vzc) 
                                      (abst_first v_Vdd)) 
                                   (_p_B_equal (abst_second v_Vzc) 
                                      (abst_second v_Vdd))))))) =>
                    focal.zenon_focal_and 
                      (_p_A_equal (abst_first v_Vzc) (abst_first v_Vbd)) 
                      (_p_B_equal (abst_second v_Vzc) (abst_second v_Vbd)) 
                      (v_Vjd:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first v_Vzc) 
                                      (abst_first v_Vbd)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second v_Vzc) 
                                      (abst_second v_Vbd)))))) =>
                       zen.Rand 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first v_Vzc) 
                                  (abst_first v_Vbd)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second v_Vzc) 
                                  (abst_second v_Vbd)))) 
                         (v_Vkd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (abst_first v_Vzc) 
                                      (abst_first v_Vbd))))) =>
                          v_Vld:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (abst_second v_Vzc) 
                                      (abst_second v_Vbd))))) =>
                          focal.zenon_focal_and 
                            (_p_A_equal (abst_first v_Vbd) (abst_first v_Vdd)) 
                            (_p_B_equal (abst_second v_Vbd) 
                               (abst_second v_Vdd)) 
                            (v_Vmd:
                             (zen.proof 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first v_Vbd) 
                                            (abst_first v_Vdd)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal (abst_second v_Vbd) 
                                            (abst_second v_Vdd)))))) =>
                             zen.Rand 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_A_equal (abst_first v_Vbd) 
                                        (abst_first v_Vdd)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal (abst_second v_Vbd) 
                                        (abst_second v_Vdd)))) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_A_equal (abst_first v_Vbd) 
                                            (abst_first v_Vdd))))) =>
                                v_Vod:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal (abst_second v_Vbd) 
                                            (abst_second v_Vdd))))) =>
                                focal.zenon_focal_notand 
                                  (_p_A_equal (abst_first v_Vzc) 
                                     (abst_first v_Vdd)) 
                                  (_p_B_equal (abst_second v_Vzc) 
                                     (abst_second v_Vdd)) 
                                  (v_Vpd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first v_Vzc) 
                                                     (abst_first v_Vdd)))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second v_Vzc) 
                                                     (abst_second v_Vdd))))))) =>
                                   zen.Rnotand 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal (abst_first v_Vzc) 
                                              (abst_first v_Vdd)))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal (abst_second v_Vzc) 
                                              (abst_second v_Vdd)))) 
                                     (v_Vqd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (abst_first v_Vzc) 
                                                     (abst_first v_Vdd)))))) =>
                                      zen.Rcut 
                                        (zen.and 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_A_T 
                                                    (abst_first v_Vzc) 
                                                    (abst_first v_Vzc)))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first v_Vzc) 
                                                       (abst_first v_Vzc)))))) 
                                        (v_Vrd:
                                         (zen.proof 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_first v_Vzc) 
                                                        (abst_first v_Vzc)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first v_Vzc) 
                                                           (abst_first v_Vzc))))))) =>
                                         zen.Rand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_A_T 
                                                    (abst_first v_Vzc) 
                                                    (abst_first v_Vzc)))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first v_Vzc) 
                                                       (abst_first v_Vzc))))) 
                                           (v_Vsd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_first v_Vzc) 
                                                        (abst_first v_Vzc))))) =>
                                            v_Vtd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first v_Vzc) 
                                                           (abst_first v_Vzc)))))) =>
                                            zen.Rnoteq _p_A_T 
                                              (abst_first v_Vzc) v_Vsd) v_Vrd) 
                                        (v_Vud:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.and 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T 
                                                           (abst_first v_Vzc) 
                                                           (abst_first v_Vzc)))) 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first 
                                                                 v_Vzc) 
                                                              (abst_first 
                                                                 v_Vzc)))))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first v_Vbd) 
                                                 (abst_first v_Vdd))) 
                                           (v_Vvd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (abst_first v_Vbd) 
                                                     (abst_first v_Vdd)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vwd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vwd)) 
                                              (_p_A_equal (abst_first v_Vzc) 
                                                 (abst_first v_Vbd)) 
                                              (_p_A_equal (abst_first v_Vzc) 
                                                 (abst_first v_Vdd)) 
                                              (v_Vxd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_A_equal 
                                                              (abst_first 
                                                                 v_Vzc) 
                                                              (abst_first 
                                                                 v_Vbd)) 
                                                           (_p_A_equal 
                                                              (abst_first 
                                                                 v_Vzc) 
                                                              (abst_first 
                                                                 v_Vdd)))))) =>
                                               zen.Rsubst _p_A_T 
                                                 (v_Vyd:(zen.term _p_A_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_A_equal v_Vyd 
                                                             (abst_first 
                                                                v_Vbd)) 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                v_Vzc) 
                                                             (abst_first 
                                                                v_Vdd))))) 
                                                 (abst_first v_Vzc) 
                                                 (abst_first v_Vzc) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (abst_first 
                                                                 v_Vzc) 
                                                              (abst_first 
                                                                 v_Vzc))))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_first 
                                                                v_Vzc) 
                                                             (abst_first 
                                                                v_Vzc)))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   v_Vzc) 
                                                                (abst_first 
                                                                   v_Vzc))))) 
                                                    (v_Vzd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    abst_first 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_first 
                                                                    v_Vzc)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_first 
                                                                v_Vzc) 
                                                             (abst_first 
                                                                v_Vzc))) 
                                                       (v_Vae:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_first 
                                                                    v_Vzc) 
                                                                 (abst_first 
                                                                    v_Vzc)))) =>
                                                        zen.Rcut 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_A_T 
                                                                (abst_first 
                                                                   v_Vzc) 
                                                                (abst_first 
                                                                   v_Vzc))) 
                                                          (v_Vae0:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    abst_first 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_first 
                                                                    v_Vzc)))) =>
                                                           zen.Rsubst _p_A_T 
                                                             (v_Vbe:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   v_Vbe 
                                                                   (abst_first 
                                                                    v_Vzc))) 
                                                             (abst_first 
                                                                v_Vzc) 
                                                             (abst_first 
                                                                v_Vzc) 
                                                             (v_Vsd0:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))) 
                                                                v_Vae0 v_Vsd0) 
                                                             (v_Vae0:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) =>
                                                              zen.Rsubst 
                                                                _p_A_T 
                                                                (v_Vce:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.triangle 
                                                                   (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vce)) 
                                                                (abst_first 
                                                                   v_Vzc) 
                                                                (abst_first 
                                                                   v_Vzc) 
                                                                (v_Vsd0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))) =>
                                                                 zen.Rnoteq 
                                                                   _p_A_T 
                                                                   (abst_first 
                                                                    v_Vzc) 
                                                                   v_Vsd0) 
                                                                (v_Vae0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))) 
                                                                   v_Vae0 
                                                                   v_Vsd) 
                                                                v_Vae0) 
                                                             v_Vae0) 
                                                          (v_Vsd0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))) =>
                                                           zen.Rnoteq _p_A_T 
                                                             (abst_first 
                                                                v_Vzc) v_Vsd0)) 
                                                       v_Vzd) 
                                                    (v_Vde:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   v_Vzc) 
                                                                (abst_first 
                                                                   v_Vzc)))) 
                                                       (v_Vee:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_first 
                                                                    v_Vzc))))) =>
                                                        zen.Rall _p_A_T 
                                                          (v_Vfe:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vge:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.forall 
                                                                _p_A_T 
                                                                (v_Vhe:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vfe 
                                                                    v_Vhe))))))) 
                                                          (abst_first v_Vzc) 
                                                          (v_Vie:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vge:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.forall 
                                                                    _p_A_T 
                                                                    (
                                                                    v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vge))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe)))))))) =>
                                                           zen.Rall _p_A_T 
                                                             (v_Vge:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.forall 
                                                                _p_A_T 
                                                                (v_Vhe:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vge))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe)))))) 
                                                             (abst_first 
                                                                v_Vzc) 
                                                             (v_Vje:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_A_T 
                                                                    (
                                                                    v_Vhe:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))))))) =>
                                                              zen.Rall 
                                                                _p_A_T 
                                                                (v_Vhe:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))))) 
                                                                (abst_first 
                                                                   v_Vbd) 
                                                                (v_Vke:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd))))) 
                                                                   (v_Vtd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    v_Vee 
                                                                    v_Vtd) 
                                                                   (v_Vle:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                                    v_Vkd 
                                                                    v_Vme) 
                                                                    (v_Vkd0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vwd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)) 
                                                                    (v_Vxd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vyd 
                                                                    (abst_first 
                                                                    v_Vbd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (v_Vsd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vsd0) 
                                                                    (v_Vxd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vne) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd) 
                                                                    (v_Voe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd))) 
                                                                    v_Vvd 
                                                                    v_Voe) 
                                                                    (v_Vpe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)) 
                                                                    v_Vpe) 
                                                                    v_Vxd0) 
                                                                    v_Vxd0) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                    v_Vqe 
                                                                    v_Vqd) 
                                                                    v_Vkd0) 
                                                                    v_Vle) 
                                                                   v_Vke) 
                                                                v_Vje) v_Vie) 
                                                          _p_A_equal_transitive) 
                                                       v_Vde) v_Vud) 
                                                 (v_Vxd0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_A_equal 
                                                                 (abst_first 
                                                                    v_Vzc) 
                                                                 (abst_first 
                                                                    v_Vbd)) 
                                                              (_p_A_equal 
                                                                 (abst_first 
                                                                    v_Vzc) 
                                                                 (abst_first 
                                                                    v_Vdd)))))) =>
                                                  zen.Rsubst _p_A_T 
                                                    (v_Vne:
                                                     (zen.term _p_A_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   v_Vzc) 
                                                                v_Vne) 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   v_Vzc) 
                                                                (abst_first 
                                                                   v_Vdd))))) 
                                                    (abst_first v_Vbd) 
                                                    (abst_first v_Vdd) 
                                                    (v_Voe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (abst_first 
                                                                    v_Vbd) 
                                                                 (abst_first 
                                                                    v_Vdd))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_first 
                                                                v_Vbd) 
                                                             (abst_first 
                                                                v_Vdd))) 
                                                       v_Vvd v_Voe) 
                                                    (v_Vpe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_first 
                                                                    v_Vdd)) 
                                                                 (_p_A_equal 
                                                                    (
                                                                    abst_first 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_first 
                                                                    v_Vdd)))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (_p_A_equal 
                                                          (abst_first v_Vzc) 
                                                          (abst_first v_Vdd)) 
                                                       v_Vpe) v_Vxd0) v_Vxd) 
                                              (v_Vqe:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first v_Vzc) 
                                                           (abst_first v_Vdd))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first v_Vzc) 
                                                          (abst_first v_Vdd)))) 
                                                 v_Vqe v_Vqd) v_Vkd) 
                                           (v_Voe:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (abst_first v_Vbd) 
                                                        (abst_first v_Vdd))))) =>
                                            zen.Rcut 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first v_Vbd) 
                                                       (abst_first v_Vdd)))) 
                                              (v_Vnd0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (abst_first v_Vbd) 
                                                           (abst_first v_Vdd))))) =>
                                               zen.Rall _p_A_T 
                                                 (v_Vfe:(zen.term _p_A_T) =>
                                                  zen.forall _p_A_T 
                                                    (v_Vge:
                                                     (zen.term _p_A_T) =>
                                                     zen.forall _p_A_T 
                                                       (v_Vhe:
                                                        (zen.term _p_A_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vfe 
                                                                   v_Vge))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    v_Vfe 
                                                                    v_Vhe))))))) 
                                                 (abst_first v_Vzc) 
                                                 (v_Vie:
                                                  (zen.proof 
                                                     (zen.forall _p_A_T 
                                                        (v_Vge:
                                                         (zen.term _p_A_T) =>
                                                         zen.forall _p_A_T 
                                                           (v_Vhe:
                                                            (zen.term _p_A_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vge))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe)))))))) =>
                                                  zen.Rall _p_A_T 
                                                    (v_Vge:
                                                     (zen.term _p_A_T) =>
                                                     zen.forall _p_A_T 
                                                       (v_Vhe:
                                                        (zen.term _p_A_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    v_Vzc) 
                                                                   v_Vge))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe)))))) 
                                                    (abst_first v_Vbd) 
                                                    (v_Vre:
                                                     (zen.proof 
                                                        (zen.forall _p_A_T 
                                                           (v_Vhe:
                                                            (zen.term _p_A_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    v_Vhe))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))))))) =>
                                                     zen.Rall _p_A_T 
                                                       (v_Vhe:
                                                        (zen.term _p_A_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    v_Vzc) 
                                                                   (abst_first 
                                                                    v_Vbd)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    v_Vhe))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))))) 
                                                       (abst_first v_Vdd) 
                                                       (v_Vse:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    v_Vzc) 
                                                                   (abst_first 
                                                                    v_Vbd)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) 
                                                          (v_Vme:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vbd)))) 
                                                             v_Vkd v_Vme) 
                                                          (v_Vte:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                             (v_Vue:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vbd) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                v_Vnd0 v_Vue) 
                                                             (v_Vqe:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) =>
                                                              zen.Rsubst 
                                                                basics.bool__t 
                                                                (v_Vwd:
                                                                 (zen.term 
                                                                    basics.bool__t) =>
                                                                 zen.triangle 
                                                                   (focal.is_true 
                                                                    v_Vwd)) 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    v_Vzc) 
                                                                   (abst_first 
                                                                    v_Vdd)) 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    v_Vzc) 
                                                                   (abst_first 
                                                                    v_Vdd)) 
                                                                (v_Vpe:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                                 zen.Rsubst 
                                                                   _p_A_T 
                                                                   (v_Vve:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vve 
                                                                    (abst_first 
                                                                    v_Vdd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) 
                                                                   (abst_first 
                                                                    v_Vzc) 
                                                                   (abst_first 
                                                                    v_Vzc) 
                                                                   (v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) =>
                                                                    zen.Reqsym 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vae 
                                                                    v_Vsd) 
                                                                    v_Vzd) 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vfe 
                                                                    v_Vhe))))))) 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (v_Vie0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vge))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vge))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vge 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe)))))) 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vhe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vhe))))) 
                                                                    (abst_first 
                                                                    v_Vdd) 
                                                                    (v_Vwe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) 
                                                                    (v_Vtd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vzc)))) 
                                                                    v_Vee 
                                                                    v_Vtd) 
                                                                    (v_Vxe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                    (v_Vqd0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                    v_Vqe 
                                                                    v_Vqd0) 
                                                                    (v_Vqe0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                    v_Vqe0 
                                                                    v_Vqd) 
                                                                    v_Vxe) 
                                                                    v_Vwe) 
                                                                    v_Vje) 
                                                                    v_Vie0) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vde) 
                                                                    v_Vud) 
                                                                   (v_Vpe0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    v_Vne) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) 
                                                                    (abst_first 
                                                                    v_Vdd) 
                                                                    (abst_first 
                                                                    v_Vdd) 
                                                                    (v_Vye:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vdd) 
                                                                    (abst_first 
                                                                    v_Vdd))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    v_Vdd) 
                                                                    v_Vye) 
                                                                    (v_Vpe0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)) 
                                                                    v_Vpe0) 
                                                                    v_Vpe0) 
                                                                   v_Vpe) 
                                                                (v_Vqe0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    v_Vzc) 
                                                                    (abst_first 
                                                                    v_Vdd)))) 
                                                                   v_Vqe0 
                                                                   v_Vqd) 
                                                                v_Vqe) v_Vte) 
                                                          v_Vse) v_Vre) v_Vie) 
                                                 _p_A_equal_transitive) 
                                              (v_Vue:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (abst_first 
                                                                 v_Vbd) 
                                                              (abst_first 
                                                                 v_Vdd)))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first v_Vbd) 
                                                          (abst_first v_Vdd)))) 
                                                 v_Vnd v_Vue)))) 
                                     (v_Vze:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second v_Vzc) 
                                                     (abst_second v_Vdd)))))) =>
                                      zen.Rcut 
                                        (zen.and 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_B_T 
                                                    (abst_second v_Vzc) 
                                                    (abst_second v_Vzc)))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second v_Vzc) 
                                                       (abst_second v_Vzc)))))) 
                                        (v_Vaf:
                                         (zen.proof 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second v_Vzc) 
                                                        (abst_second v_Vzc)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second v_Vzc) 
                                                           (abst_second v_Vzc))))))) =>
                                         zen.Rand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_B_T 
                                                    (abst_second v_Vzc) 
                                                    (abst_second v_Vzc)))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second v_Vzc) 
                                                       (abst_second v_Vzc))))) 
                                           (v_Vbf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second v_Vzc) 
                                                        (abst_second v_Vzc))))) =>
                                            v_Vcf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second v_Vzc) 
                                                           (abst_second v_Vzc)))))) =>
                                            zen.Rnoteq _p_B_T 
                                              (abst_second v_Vzc) v_Vbf) 
                                           v_Vaf) 
                                        (v_Vdf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.and 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_second v_Vzc) 
                                                           (abst_second v_Vzc)))) 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 v_Vzc) 
                                                              (abst_second 
                                                                 v_Vzc)))))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_second v_Vbd) 
                                                 (abst_second v_Vdd))) 
                                           (v_Vef:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_second v_Vbd) 
                                                     (abst_second v_Vdd)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vwd:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vwd)) 
                                              (_p_B_equal 
                                                 (abst_second v_Vzc) 
                                                 (abst_second v_Vbd)) 
                                              (_p_B_equal 
                                                 (abst_second v_Vzc) 
                                                 (abst_second v_Vdd)) 
                                              (v_Vff:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 v_Vzc) 
                                                              (abst_second 
                                                                 v_Vbd)) 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 v_Vzc) 
                                                              (abst_second 
                                                                 v_Vdd)))))) =>
                                               zen.Rsubst _p_B_T 
                                                 (v_Vgf:(zen.term _p_B_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_B_equal v_Vgf 
                                                             (abst_second 
                                                                v_Vbd)) 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                v_Vzc) 
                                                             (abst_second 
                                                                v_Vdd))))) 
                                                 (abst_second v_Vzc) 
                                                 (abst_second v_Vzc) 
                                                 (v_Vbf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_second 
                                                                 v_Vzc) 
                                                              (abst_second 
                                                                 v_Vzc))))) =>
                                                  zen.Rnotand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             (abst_second 
                                                                v_Vzc) 
                                                             (abst_second 
                                                                v_Vzc)))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   v_Vzc) 
                                                                (abst_second 
                                                                   v_Vzc))))) 
                                                    (v_Vhf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    abst_second 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_second 
                                                                    v_Vzc)))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             (abst_second 
                                                                v_Vzc) 
                                                             (abst_second 
                                                                v_Vzc))) 
                                                       (v_Vif:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second 
                                                                    v_Vzc) 
                                                                 (abst_second 
                                                                    v_Vzc)))) =>
                                                        zen.Rcut 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T 
                                                                (abst_second 
                                                                   v_Vzc) 
                                                                (abst_second 
                                                                   v_Vzc))) 
                                                          (v_Vif0:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    abst_second 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_second 
                                                                    v_Vzc)))) =>
                                                           zen.Rsubst _p_B_T 
                                                             (v_Vjf:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   _p_B_T 
                                                                   v_Vjf 
                                                                   (abst_second 
                                                                    v_Vzc))) 
                                                             (abst_second 
                                                                v_Vzc) 
                                                             (abst_second 
                                                                v_Vzc) 
                                                             (v_Vbf0:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))) 
                                                                v_Vif0 v_Vbf0) 
                                                             (v_Vif0:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) =>
                                                              zen.Rsubst 
                                                                _p_B_T 
                                                                (v_Vkf:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.triangle 
                                                                   (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vkf)) 
                                                                (abst_second 
                                                                   v_Vzc) 
                                                                (abst_second 
                                                                   v_Vzc) 
                                                                (v_Vbf0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))) =>
                                                                 zen.Rnoteq 
                                                                   _p_B_T 
                                                                   (abst_second 
                                                                    v_Vzc) 
                                                                   v_Vbf0) 
                                                                (v_Vif0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))) 
                                                                   v_Vif0 
                                                                   v_Vbf) 
                                                                v_Vif0) 
                                                             v_Vif0) 
                                                          (v_Vbf0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))) =>
                                                           zen.Rnoteq _p_B_T 
                                                             (abst_second 
                                                                v_Vzc) v_Vbf0)) 
                                                       v_Vhf) 
                                                    (v_Vlf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))))) =>
                                                     zen.Rnotnot 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   v_Vzc) 
                                                                (abst_second 
                                                                   v_Vzc)))) 
                                                       (v_Vmf:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_second 
                                                                    v_Vzc))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vnf:
                                                           (zen.term _p_B_T) =>
                                                           zen.forall _p_B_T 
                                                             (v_Vof:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.forall 
                                                                _p_B_T 
                                                                (v_Vpf:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vnf 
                                                                    v_Vof))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vnf 
                                                                    v_Vpf))))))) 
                                                          (abst_second v_Vzc) 
                                                          (v_Vqf:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_B_T 
                                                                 (v_Vof:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.forall 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vpf:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vof))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf)))))))) =>
                                                           zen.Rall _p_B_T 
                                                             (v_Vof:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.forall 
                                                                _p_B_T 
                                                                (v_Vpf:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vof))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf)))))) 
                                                             (abst_second 
                                                                v_Vzc) 
                                                             (v_Vrf:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vpf:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))))))) =>
                                                              zen.Rall 
                                                                _p_B_T 
                                                                (v_Vpf:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))))) 
                                                                (abst_second 
                                                                   v_Vbd) 
                                                                (v_Vsf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd))))) 
                                                                   (v_Vcf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    v_Vmf 
                                                                    v_Vcf) 
                                                                   (v_Vtf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                                    (v_Vuf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                                    v_Vld 
                                                                    v_Vuf) 
                                                                    (v_Vld0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vwd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vwd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)) 
                                                                    (v_Vff0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vgf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vgf 
                                                                    (abst_second 
                                                                    v_Vbd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (v_Vbf0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vbf0) 
                                                                    (v_Vff0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vvf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vvf) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd) 
                                                                    (v_Vwf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd))) 
                                                                    v_Vef 
                                                                    v_Vwf) 
                                                                    (v_Vxf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)) 
                                                                    v_Vxf) 
                                                                    v_Vff0) 
                                                                    v_Vff0) 
                                                                    (v_Vyf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                    v_Vyf 
                                                                    v_Vze) 
                                                                    v_Vld0) 
                                                                    v_Vtf) 
                                                                   v_Vsf) 
                                                                v_Vrf) v_Vqf) 
                                                          _p_B_equal_transitive) 
                                                       v_Vlf) v_Vdf) 
                                                 (v_Vff0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    v_Vzc) 
                                                                 (abst_second 
                                                                    v_Vbd)) 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    v_Vzc) 
                                                                 (abst_second 
                                                                    v_Vdd)))))) =>
                                                  zen.Rsubst _p_B_T 
                                                    (v_Vvf:
                                                     (zen.term _p_B_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   v_Vzc) 
                                                                v_Vvf) 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   v_Vzc) 
                                                                (abst_second 
                                                                   v_Vdd))))) 
                                                    (abst_second v_Vbd) 
                                                    (abst_second v_Vdd) 
                                                    (v_Vwf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second 
                                                                    v_Vbd) 
                                                                 (abst_second 
                                                                    v_Vdd))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             (abst_second 
                                                                v_Vbd) 
                                                             (abst_second 
                                                                v_Vdd))) 
                                                       v_Vef v_Vwf) 
                                                    (v_Vxf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_second 
                                                                    v_Vdd)) 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    v_Vzc) 
                                                                    (
                                                                    abst_second 
                                                                    v_Vdd)))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (_p_B_equal 
                                                          (abst_second v_Vzc) 
                                                          (abst_second v_Vdd)) 
                                                       v_Vxf) v_Vff0) v_Vff) 
                                              (v_Vyf:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second v_Vzc) 
                                                           (abst_second v_Vdd))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second v_Vzc) 
                                                          (abst_second v_Vdd)))) 
                                                 v_Vyf v_Vze) v_Vld) 
                                           (v_Vwf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second v_Vbd) 
                                                        (abst_second v_Vdd))))) =>
                                            zen.Rcut 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second v_Vbd) 
                                                       (abst_second v_Vdd)))) 
                                              (v_Vod0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second v_Vbd) 
                                                           (abst_second v_Vdd))))) =>
                                               zen.Rall _p_B_T 
                                                 (v_Vnf:(zen.term _p_B_T) =>
                                                  zen.forall _p_B_T 
                                                    (v_Vof:
                                                     (zen.term _p_B_T) =>
                                                     zen.forall _p_B_T 
                                                       (v_Vpf:
                                                        (zen.term _p_B_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   v_Vnf 
                                                                   v_Vof))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vnf 
                                                                    v_Vpf))))))) 
                                                 (abst_second v_Vzc) 
                                                 (v_Vqf:
                                                  (zen.proof 
                                                     (zen.forall _p_B_T 
                                                        (v_Vof:
                                                         (zen.term _p_B_T) =>
                                                         zen.forall _p_B_T 
                                                           (v_Vpf:
                                                            (zen.term _p_B_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vof))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf)))))))) =>
                                                  zen.Rall _p_B_T 
                                                    (v_Vof:
                                                     (zen.term _p_B_T) =>
                                                     zen.forall _p_B_T 
                                                       (v_Vpf:
                                                        (zen.term _p_B_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    v_Vzc) 
                                                                   v_Vof))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf)))))) 
                                                    (abst_second v_Vbd) 
                                                    (v_Vzf:
                                                     (zen.proof 
                                                        (zen.forall _p_B_T 
                                                           (v_Vpf:
                                                            (zen.term _p_B_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    v_Vpf))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vpf:
                                                        (zen.term _p_B_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    v_Vzc) 
                                                                   (abst_second 
                                                                    v_Vbd)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    v_Vpf))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))))) 
                                                       (abst_second v_Vdd) 
                                                       (v_Vag:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    v_Vzc) 
                                                                   (abst_second 
                                                                    v_Vbd)))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) 
                                                          (v_Vuf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vbd)))) 
                                                             v_Vld v_Vuf) 
                                                          (v_Vbg:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                             (v_Vcg:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vbd) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                v_Vod0 v_Vcg) 
                                                             (v_Vyf:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) =>
                                                              zen.Rsubst 
                                                                basics.bool__t 
                                                                (v_Vwd:
                                                                 (zen.term 
                                                                    basics.bool__t) =>
                                                                 zen.triangle 
                                                                   (focal.is_true 
                                                                    v_Vwd)) 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    v_Vzc) 
                                                                   (abst_second 
                                                                    v_Vdd)) 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    v_Vzc) 
                                                                   (abst_second 
                                                                    v_Vdd)) 
                                                                (v_Vxf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                                 zen.Rsubst 
                                                                   _p_B_T 
                                                                   (v_Vdg:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vdg 
                                                                    (abst_second 
                                                                    v_Vdd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) 
                                                                   (abst_second 
                                                                    v_Vzc) 
                                                                   (abst_second 
                                                                    v_Vzc) 
                                                                   (v_Vbf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))) 
                                                                    (v_Vhf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))) 
                                                                    (v_Vif:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vif 
                                                                    v_Vbf) 
                                                                    v_Vhf) 
                                                                    (v_Vlf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    (v_Vmf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vnf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vof:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vpf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vnf 
                                                                    v_Vof))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vnf 
                                                                    v_Vpf))))))) 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (v_Vqf0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vof:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vpf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vof))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vof:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vpf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vof))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vof 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf)))))) 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (v_Vrf:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vpf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vpf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vpf))))) 
                                                                    (abst_second 
                                                                    v_Vdd) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vzc)))) 
                                                                    v_Vmf 
                                                                    v_Vcf) 
                                                                    (v_Vfg:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                    (v_Vze0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                    v_Vyf 
                                                                    v_Vze0) 
                                                                    (v_Vyf0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                    v_Vyf0 
                                                                    v_Vze) 
                                                                    v_Vfg) 
                                                                    v_Veg) 
                                                                    v_Vrf) 
                                                                    v_Vqf0) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Vlf) 
                                                                    v_Vdf) 
                                                                   (v_Vxf0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vvf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    v_Vvf) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) 
                                                                    (abst_second 
                                                                    v_Vdd) 
                                                                    (abst_second 
                                                                    v_Vdd) 
                                                                    (v_Vgg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vdd) 
                                                                    (abst_second 
                                                                    v_Vdd))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    v_Vdd) 
                                                                    v_Vgg) 
                                                                    (v_Vxf0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)) 
                                                                    v_Vxf0) 
                                                                    v_Vxf0) 
                                                                   v_Vxf) 
                                                                (v_Vyf0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    v_Vzc) 
                                                                    (abst_second 
                                                                    v_Vdd)))) 
                                                                   v_Vyf0 
                                                                   v_Vze) 
                                                                v_Vyf) v_Vbg) 
                                                          v_Vag) v_Vzf) v_Vqf) 
                                                 _p_B_equal_transitive) 
                                              (v_Vcg:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 v_Vbd) 
                                                              (abst_second 
                                                                 v_Vdd)))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second v_Vbd) 
                                                          (abst_second v_Vdd)))) 
                                                 v_Vod v_Vcg)))) v_Vpd) v_Vid) 
                               v_Vmd) v_Vhd) v_Vjd) v_Vfd) v_Vgd) v_Ved) 
             v_Vcd) v_Vad) v_Vyc).

def Product_set__first_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_first abst_second x y)) 
             (dk_logic.ebP (_p_A_equal (abst_first x) (abst_first y))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first v_Vzb) (abst_first v_Vac))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vzb 
                             v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vzb) (abst_first v_Vac))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first v_Vzb) (abst_first v_Vac)))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vcc 
                             v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vac)))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first v_Vcc) (abst_first v_Vac))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vcc 
                             v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec))))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._amper__amper_ 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))))) =>
              focal.zenon_focal_and 
                (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)) 
                (v_Vic:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec)))))) =>
                 zen.Rand 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec))))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                      v_Vjc v_Vhc) v_Vic) v_Vgc) v_Vfc) v_Vdc) v_Vbc).

def Product_set__second_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                   abst_T abst_first abst_second x y)) 
             (dk_logic.ebP (_p_B_equal (abst_second x) (abst_second y))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second v_Vzb) (abst_second v_Vac))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vzb 
                             v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vzb) (abst_second v_Vac))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vzb v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second v_Vzb) (abst_second v_Vac)))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vcc 
                             v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vac)))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.imp 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vcc v_Vac))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second v_Vcc) (abst_second v_Vac))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second v_Vcc 
                             v_Vec))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec))))))) =>
           zen.Rnotimply 
             (zen.triangle 
                (focal.is_true 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second v_Vcc v_Vec))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._amper__amper_ 
                          (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))))) =>
              focal.zenon_focal_and 
                (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)) 
                (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)) 
                (v_Vic:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec)))))) =>
                 zen.Rand 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first v_Vcc) (abst_first v_Vec)))) 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_B_equal (abst_second v_Vcc) (abst_second v_Vec)))) 
                   (v_Vjc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first v_Vcc) 
                                (abst_first v_Vec))))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second v_Vcc) 
                                (abst_second v_Vec))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second v_Vcc) 
                               (abst_second v_Vec)))) v_Vkc v_Vhc) v_Vic) 
                v_Vgc) v_Vfc) v_Vdc) v_Vbc).

def Product_set__pair_left_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (_p_B_equal x x)))) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_pair_preserves_first:(dk_logic.eP 
                               (dk_logic.forall _p_A_T 
                                  (x:(cc.eT _p_A_T) =>
                                   dk_logic.forall _p_B_T 
                                     (y:(cc.eT _p_B_T) =>
                                      dk_logic.ebP 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x y)) x))))) ->
  abst_pair_preserves_second:(dk_logic.eP 
                                (dk_logic.forall _p_A_T 
                                   (x:(cc.eT _p_A_T) =>
                                    dk_logic.forall _p_B_T 
                                      (y:(cc.eT _p_B_T) =>
                                       dk_logic.ebP 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x y)) y))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x_1:(cc.eT _p_A_T) =>
        dk_logic.forall _p_A_T 
          (x_2:(cc.eT _p_A_T) =>
           dk_logic.forall _p_B_T 
             (y:(cc.eT _p_B_T) =>
              dk_logic.imp (dk_logic.ebP (_p_A_equal x_1 x_2)) 
                (dk_logic.ebP 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second (abst_pair x_1 y) 
                      (abst_pair x_2 y)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_pair_preserves_first:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_A_equal (abst_first (abst_pair x y)) x))))) =>
  abst_pair_preserves_second:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_B_equal (abst_second (abst_pair x y)) y))))) =>
  (__H_1_LEMMA:
   (x_1:(cc.eT _p_A_T) ->
    x_2:(cc.eT _p_A_T) ->
    y:(cc.eT _p_B_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_A_equal x_1 x_2))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
            abst_first abst_second (abst_pair x_1 y) (abst_pair x_2 y)))) =>
   zen.nnpp 
     (zen.forall _p_A_T 
        (v_Vzb:(zen.term _p_A_T) =>
         zen.forall _p_A_T 
           (v_Vac:(zen.term _p_A_T) =>
            zen.forall _p_B_T 
              (v_Vbc:(zen.term _p_B_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_first abst_second 
                          (abst_pair v_Vzb v_Vbc) (abst_pair v_Vac v_Vbc)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_A_T 
               (v_Vzb:(zen.term _p_A_T) =>
                zen.forall _p_A_T 
                  (v_Vac:(zen.term _p_A_T) =>
                   zen.forall _p_B_T 
                     (v_Vbc:(zen.term _p_B_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
                        (zen.triangle 
                           (focal.is_true 
                              (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                 _p_B_equal abst_T abst_first abst_second 
                                 (abst_pair v_Vzb v_Vbc) 
                                 (abst_pair v_Vac v_Vbc)))))))))) =>
      zen.Raxiom 
        (zen.forall _p_A_T 
           (v_Vzb:(zen.term _p_A_T) =>
            zen.forall _p_A_T 
              (v_Vac:(zen.term _p_A_T) =>
               zen.forall _p_B_T 
                 (v_Vbc:(zen.term _p_B_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vac))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second 
                             (abst_pair v_Vzb v_Vbc) (abst_pair v_Vac v_Vbc)))))))) 
        __H_1_LEMMA v_Vcc)) 
    (x_1:(cc.eT _p_A_T) =>
     x_2:(cc.eT _p_A_T) =>
     y:(cc.eT _p_B_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_A_equal x_1 x_2))) =>
     (__H_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (_p_A_equal (abst_first (abst_pair x_1 y)) 
               (abst_first (abst_pair x_2 y))))) =>
      (__H_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_B_equal (abst_second (abst_pair x_1 y)) 
                (abst_second (abst_pair x_2 y))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                  abst_T abst_first abst_second (abst_pair x_1 y) 
                  (abst_pair x_2 y)))) 
         (v_Vzb:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (basics._amper__amper_ 
                         (_p_A_equal (abst_first (abst_pair x_1 y)) 
                            (abst_first (abst_pair x_2 y))) 
                         (_p_B_equal (abst_second (abst_pair x_1 y)) 
                            (abst_second (abst_pair x_2 y)))))))) =>
          focal.zenon_focal_notand 
            (_p_A_equal (abst_first (abst_pair x_1 y)) 
               (abst_first (abst_pair x_2 y))) 
            (_p_B_equal (abst_second (abst_pair x_1 y)) 
               (abst_second (abst_pair x_2 y))) 
            (v_Vac:
             (zen.proof 
                (zen.not 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first (abst_pair x_1 y)) 
                               (abst_first (abst_pair x_2 y))))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x_1 y)) 
                               (abst_second (abst_pair x_2 y)))))))) =>
             zen.Rnotand 
               (zen.triangle 
                  (focal.is_true 
                     (_p_A_equal (abst_first (abst_pair x_1 y)) 
                        (abst_first (abst_pair x_2 y))))) 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal (abst_second (abst_pair x_1 y)) 
                        (abst_second (abst_pair x_2 y))))) 
               (v_Vbc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first (abst_pair x_1 y)) 
                               (abst_first (abst_pair x_2 y))))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal (abst_first (abst_pair x_1 y)) 
                           (abst_first (abst_pair x_2 y))))) __H_1_1_LEMMA 
                  v_Vbc) 
               (v_Vcc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x_1 y)) 
                               (abst_second (abst_pair x_2 y))))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_B_equal (abst_second (abst_pair x_1 y)) 
                           (abst_second (abst_pair x_2 y))))) __H_1_2_LEMMA 
                  v_Vcc) v_Vac) v_Vzb)) 
        ((__H_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP (_p_B_equal (abst_second (abst_pair x_1 y)) y))) =>
          (__H_1_2_2_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP (_p_B_equal (abst_second (abst_pair x_2 y)) y))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second (abst_pair x_1 y)) 
                      (abst_second (abst_pair x_2 y))))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second (abst_pair x_1 y)) 
                             (abst_second (abst_pair x_2 y))))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_B_T (abst_second (abst_pair x_1 y)) 
                            (abst_second (abst_pair x_1 y))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x_1 y)) 
                               (abst_second (abst_pair x_1 y))))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (abst_second (abst_pair x_1 y)) 
                                (abst_second (abst_pair x_1 y))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second (abst_pair x_1 y)) 
                                   (abst_second (abst_pair x_1 y)))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_B_T (abst_second (abst_pair x_1 y)) 
                            (abst_second (abst_pair x_1 y))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x_1 y)) 
                               (abst_second (abst_pair x_1 y)))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (abst_second (abst_pair x_1 y)) 
                                (abst_second (abst_pair x_1 y)))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second (abst_pair x_1 y)) 
                                   (abst_second (abst_pair x_1 y))))))) =>
                    zen.Rnoteq _p_B_T (abst_second (abst_pair x_1 y)) v_Vmc) 
                   v_Vlc) 
                (v_Voc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_B_T 
                                   (abst_second (abst_pair x_1 y)) 
                                   (abst_second (abst_pair x_1 y))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_second (abst_pair x_1 y)) 
                                      (abst_second (abst_pair x_1 y))))))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (zen.equal _p_B_T y (abst_second (abst_pair x_2 y)))) 
                   (v_Vpc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal _p_B_T y (abst_second (abst_pair x_2 y))))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vqc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vqc)) 
                      (_p_B_equal (abst_second (abst_pair x_1 y)) y) 
                      (_p_B_equal (abst_second (abst_pair x_1 y)) 
                         (abst_second (abst_pair x_2 y))) 
                      (v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_B_equal 
                                      (abst_second (abst_pair x_1 y)) y) 
                                   (_p_B_equal 
                                      (abst_second (abst_pair x_1 y)) 
                                      (abst_second (abst_pair x_2 y))))))) =>
                       zen.Rsubst _p_B_T 
                         (v_Vsc:(zen.term _p_B_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_B_equal v_Vsc y) 
                                  (_p_B_equal 
                                     (abst_second (abst_pair x_1 y)) 
                                     (abst_second (abst_pair x_2 y)))))) 
                         (abst_second (abst_pair x_1 y)) 
                         (abst_second (abst_pair x_1 y)) 
                         (v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_B_T 
                                      (abst_second (abst_pair x_1 y)) 
                                      (abst_second (abst_pair x_1 y)))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_second (abst_pair x_1 y)) 
                                     (abst_second (abst_pair x_1 y))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x_1 y)) 
                                        (abst_second (abst_pair x_1 y)))))) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_second (abst_pair x_1 y)) 
                                            (abst_second (abst_pair x_1 y))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_second (abst_pair x_1 y)) 
                                     (abst_second (abst_pair x_1 y)))) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal _p_B_T 
                                         (abst_second (abst_pair x_1 y)) 
                                         (abst_second (abst_pair x_1 y))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal _p_B_T 
                                        (abst_second (abst_pair x_1 y)) 
                                        (abst_second (abst_pair x_1 y)))) 
                                  (v_Vuc0:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_second (abst_pair x_1 y)) 
                                            (abst_second (abst_pair x_1 y))))) =>
                                   zen.Rsubst _p_B_T 
                                     (v_Vvc:(zen.term _p_B_T) =>
                                      zen.triangle 
                                        (zen.equal _p_B_T v_Vvc 
                                           (abst_second (abst_pair x_1 y)))) 
                                     (abst_second (abst_pair x_1 y)) 
                                     (abst_second (abst_pair x_1 y)) 
                                     (v_Vmc0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_second 
                                                     (abst_pair x_1 y)) 
                                                  (abst_second 
                                                     (abst_pair x_1 y)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_second (abst_pair x_1 y)) 
                                              (abst_second (abst_pair x_1 y)))) 
                                        v_Vuc0 v_Vmc0) 
                                     (v_Vuc0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_second (abst_pair x_1 y)) 
                                               (abst_second (abst_pair x_1 y))))) =>
                                      zen.Rsubst _p_B_T 
                                        (v_Vwc:(zen.term _p_B_T) =>
                                         zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_second (abst_pair x_1 y)) 
                                              v_Vwc)) 
                                        (abst_second (abst_pair x_1 y)) 
                                        (abst_second (abst_pair x_1 y)) 
                                        (v_Vmc0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_second 
                                                        (abst_pair x_1 y)) 
                                                     (abst_second 
                                                        (abst_pair x_1 y)))))) =>
                                         zen.Rnoteq _p_B_T 
                                           (abst_second (abst_pair x_1 y)) 
                                           v_Vmc0) 
                                        (v_Vuc0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_second 
                                                     (abst_pair x_1 y)) 
                                                  (abst_second 
                                                     (abst_pair x_1 y))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_second 
                                                    (abst_pair x_1 y)) 
                                                 (abst_second 
                                                    (abst_pair x_1 y)))) 
                                           v_Vuc0 v_Vmc) v_Vuc0) v_Vuc0) 
                                  (v_Vmc0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_second (abst_pair x_1 y)) 
                                               (abst_second (abst_pair x_1 y)))))) =>
                                   zen.Rnoteq _p_B_T 
                                     (abst_second (abst_pair x_1 y)) v_Vmc0)) 
                               v_Vtc) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x_1 y)) 
                                               (abst_second (abst_pair x_1 y)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x_1 y)) 
                                        (abst_second (abst_pair x_1 y))))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x_1 y)) 
                                            (abst_second (abst_pair x_1 y)))))) =>
                                zen.Rall _p_B_T 
                                  (v_Vzc:(zen.term _p_B_T) =>
                                   zen.forall _p_B_T 
                                     (v_Vad:(zen.term _p_B_T) =>
                                      zen.forall _p_B_T 
                                        (v_Vbd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal v_Vzc v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vzc v_Vbd))))))) 
                                  (abst_second (abst_pair x_1 y)) 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.forall _p_B_T 
                                         (v_Vad:(zen.term _p_B_T) =>
                                          zen.forall _p_B_T 
                                            (v_Vbd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x_1 y)) 
                                                        v_Vad))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal v_Vad 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) v_Vbd)))))))) =>
                                   zen.Rall _p_B_T 
                                     (v_Vad:(zen.term _p_B_T) =>
                                      zen.forall _p_B_T 
                                        (v_Vbd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       v_Vbd)))))) 
                                     (abst_second (abst_pair x_1 y)) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.forall _p_B_T 
                                            (v_Vbd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x_1 y)) 
                                                        (abst_second 
                                                           (abst_pair x_1 y))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) v_Vbd))))))) =>
                                      zen.Rall _p_B_T 
                                        (v_Vbd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (abst_second 
                                                       (abst_pair x_1 y))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       v_Vbd))))) y 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x_1 y)) 
                                                        (abst_second 
                                                           (abst_pair x_1 y))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) y))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) y)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (abst_second 
                                                       (abst_pair x_1 y))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       y))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       y)))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       (abst_second 
                                                          (abst_pair x_1 y))))) 
                                              v_Vyc v_Vnc) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) y))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) y))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       y))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       y))) 
                                              (v_Vgd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_1 y)) y))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x_1 y)) 
                                                          y))) 
                                                 __H_1_2_1_LEMMA v_Vgd) 
                                              (__H_1_2_1_LEMMA0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) y)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vqc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vqc)) 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) y) 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (abst_second 
                                                       (abst_pair x_2 y))) 
                                                 (v_Vrc0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x_1 y)) y) 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x_1 y)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x_2 y))))))) =>
                                                  zen.Rsubst _p_B_T 
                                                    (v_Vsc:
                                                     (zen.term _p_B_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_B_equal 
                                                                v_Vsc y) 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x_1 y)) 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x_2 y)))))) 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (v_Vmc0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x_1 y)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x_1 y)))))) =>
                                                     zen.Rnoteq _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       v_Vmc0) 
                                                    (v_Vrc0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) y) 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                     zen.Rsubst _p_B_T 
                                                       (v_Vhd:
                                                        (zen.term _p_B_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                   v_Vhd) 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                   (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y)))))) 
                                                       y 
                                                       (abst_second 
                                                          (abst_pair x_2 y)) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T y 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T y 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x_2 y)))) 
                                                          v_Vpc v_Vid) 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))) 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair 
                                                                   x_1 y)) 
                                                             (abst_second 
                                                                (abst_pair 
                                                                   x_2 y))) 
                                                          v_Vjd) v_Vrc0) 
                                                    v_Vrc0) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_1 y)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_2 y)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair 
                                                                   x_1 y)) 
                                                             (abst_second 
                                                                (abst_pair 
                                                                   x_2 y))))) 
                                                    v_Vkd v_Vkc) 
                                                 __H_1_2_1_LEMMA0) v_Vfd) 
                                           v_Ved) v_Vdd) v_Vcd) 
                                  _p_B_equal_transitive) v_Vxc) v_Voc) 
                         (v_Vrc0:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_B_equal 
                                         (abst_second (abst_pair x_1 y)) y) 
                                      (_p_B_equal 
                                         (abst_second (abst_pair x_1 y)) 
                                         (abst_second (abst_pair x_2 y))))))) =>
                          zen.Rsubst _p_B_T 
                            (v_Vhd:(zen.term _p_B_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x_1 y)) v_Vhd) 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x_1 y)) 
                                        (abst_second (abst_pair x_2 y)))))) 
                            y (abst_second (abst_pair x_2 y)) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_B_T y 
                                         (abst_second (abst_pair x_2 y)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal _p_B_T y 
                                     (abst_second (abst_pair x_2 y)))) v_Vpc 
                               v_Vid) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x_1 y)) 
                                            (abst_second (abst_pair x_2 y))) 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x_1 y)) 
                                            (abst_second (abst_pair x_2 y))))))) =>
                             zen.Rnoteq basics.bool__t 
                               (_p_B_equal (abst_second (abst_pair x_1 y)) 
                                  (abst_second (abst_pair x_2 y))) v_Vjd) 
                            v_Vrc0) v_Vrc) 
                      (v_Vkd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second (abst_pair x_1 y)) 
                                   (abst_second (abst_pair x_2 y)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second (abst_pair x_1 y)) 
                                  (abst_second (abst_pair x_2 y))))) v_Vkd 
                         v_Vkc) __H_1_2_1_LEMMA) 
                   (v_Vid:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T y 
                                (abst_second (abst_pair x_2 y)))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal y (abst_second (abst_pair x_2 y))))) 
                      (v_Vld:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal y (abst_second (abst_pair x_2 y)))))) =>
                       zen.Rall _p_B_T 
                         (v_Vzc:(zen.term _p_B_T) =>
                          zen.forall _p_B_T 
                            (v_Vad:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vbd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vzc v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vzc v_Vbd))))))) 
                         (abst_second (abst_pair x_1 y)) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vad:(zen.term _p_B_T) =>
                                 zen.forall _p_B_T 
                                   (v_Vbd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x_1 y)) 
                                               v_Vad))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal v_Vad v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x_1 y)) v_Vbd)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vad:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vbd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x_1 y)) 
                                           v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x_1 y)) 
                                              v_Vbd)))))) y 
                            (v_Vmd:
                             (zen.proof 
                                (zen.forall _p_B_T 
                                   (v_Vbd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x_1 y)) 
                                               y))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal y v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x_1 y)) v_Vbd))))))) =>
                             zen.Rall _p_B_T 
                               (v_Vbd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x_1 y)) y))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (_p_B_equal y v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x_1 y)) 
                                              v_Vbd))))) 
                               (abst_second (abst_pair x_2 y)) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x_1 y)) 
                                               y))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal y 
                                                  (abst_second 
                                                     (abst_pair x_2 y))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x_1 y)) 
                                                  (abst_second 
                                                     (abst_pair x_2 y)))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x_1 y)) y))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal y 
                                              (abst_second (abst_pair x_2 y))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x_1 y)) 
                                              (abst_second (abst_pair x_2 y)))))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x_1 y)) y))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x_1 y)) 
                                              y))) __H_1_2_1_LEMMA v_Vgd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal y 
                                                  (abst_second 
                                                     (abst_pair x_2 y))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x_1 y)) 
                                                  (abst_second 
                                                     (abst_pair x_2 y))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal y 
                                              (abst_second (abst_pair x_2 y))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x_1 y)) 
                                              (abst_second (abst_pair x_2 y))))) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal y 
                                                     (abst_second 
                                                        (abst_pair x_2 y))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal y 
                                                 (abst_second 
                                                    (abst_pair x_2 y))))) 
                                        v_Vld v_Vpd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x_1 y)) 
                                                  (abst_second 
                                                     (abst_pair x_2 y)))))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vqc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vqc)) 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x_1 y)) 
                                           (abst_second (abst_pair x_2 y))) 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x_1 y)) 
                                           (abst_second (abst_pair x_2 y))) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x_1 y)) 
                                                        (abst_second 
                                                           (abst_pair x_2 y))) 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x_1 y)) 
                                                        (abst_second 
                                                           (abst_pair x_2 y))))))) =>
                                         zen.Rsubst _p_B_T 
                                           (v_Vqd:(zen.term _p_B_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_B_equal v_Vqd 
                                                       (abst_second 
                                                          (abst_pair x_2 y))) 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       (abst_second 
                                                          (abst_pair x_2 y)))))) 
                                           (abst_second (abst_pair x_1 y)) 
                                           (abst_second (abst_pair x_1 y)) 
                                           (v_Vmc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second 
                                                           (abst_pair x_1 y)) 
                                                        (abst_second 
                                                           (abst_pair x_1 y)))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       (abst_second 
                                                          (abst_pair x_1 y))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x_1 y)) 
                                                          (abst_second 
                                                             (abst_pair x_1 y)))))) 
                                              (v_Vtc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_1 y)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_1 y))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       (abst_second 
                                                          (abst_pair x_1 y)))) 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y))))) =>
                                                  zen.Reqsym _p_B_T 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    v_Vuc v_Vmc) v_Vtc) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x_1 y)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x_1 y)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x_1 y)) 
                                                          (abst_second 
                                                             (abst_pair x_1 y))))) 
                                                 (v_Vyc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_1 y)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_1 y)))))) =>
                                                  zen.Rall _p_B_T 
                                                    (v_Vzc:
                                                     (zen.term _p_B_T) =>
                                                     zen.forall _p_B_T 
                                                       (v_Vad:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vbd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (v_Vcd0:
                                                     (zen.proof 
                                                        (zen.forall _p_B_T 
                                                           (v_Vad:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vad))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vbd)))))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vad:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vbd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vbd)))))) 
                                                       (abst_second 
                                                          (abst_pair x_1 y)) 
                                                       (v_Vdd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_B_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vbd))))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vbd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vbd))))) 
                                                          (abst_second 
                                                             (abst_pair x_2 y)) 
                                                          (v_Vrd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y)))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y)))))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                                v_Vyc v_Vnc) 
                                                             (v_Vsd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                (v_Vkc0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                   v_Vkd 
                                                                   v_Vkc0) 
                                                                (v_Vkd0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                   v_Vkd0 
                                                                   v_Vkc) 
                                                                v_Vsd) v_Vrd) 
                                                          v_Vdd) v_Vcd0) 
                                                    _p_B_equal_transitive) 
                                                 v_Vxc) v_Voc) 
                                           (v_Vjd0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) 
                                                           (abst_second 
                                                              (abst_pair x_2 
                                                                 y))) 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x_1 
                                                                 y)) 
                                                           (abst_second 
                                                              (abst_pair x_2 
                                                                 y))))))) =>
                                            zen.Rsubst _p_B_T 
                                              (v_Vtd:(zen.term _p_B_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x_1 y)) 
                                                          v_Vtd) 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x_1 y)) 
                                                          (abst_second 
                                                             (abst_pair x_2 y)))))) 
                                              (abst_second (abst_pair x_2 y)) 
                                              (abst_second (abst_pair x_2 y)) 
                                              (v_Vud:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_second 
                                                              (abst_pair x_2 
                                                                 y)) 
                                                           (abst_second 
                                                              (abst_pair x_2 
                                                                 y)))))) =>
                                               zen.Rnoteq _p_B_T 
                                                 (abst_second 
                                                    (abst_pair x_2 y)) v_Vud) 
                                              (v_Vjd0:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_1 y)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_2 y))) 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_1 y)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x_2 y))))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (abst_second 
                                                       (abst_pair x_2 y))) 
                                                 v_Vjd0) v_Vjd0) v_Vjd) 
                                        (v_Vkd0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second 
                                                        (abst_pair x_1 y)) 
                                                     (abst_second 
                                                        (abst_pair x_2 y)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x_1 y)) 
                                                    (abst_second 
                                                       (abst_pair x_2 y))))) 
                                           v_Vkd0 v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                               v_Vmd) v_Vcd) _p_B_equal_transitive) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal y 
                                      (abst_second (abst_pair x_2 y))))))) =>
                       zen.Rall _p_B_T 
                         (v_Vzc:(zen.term _p_B_T) =>
                          zen.forall _p_B_T 
                            (v_Vad:(zen.term _p_B_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vzc v_Vad))) 
                               (zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vad v_Vzc))))) 
                         (abst_second (abst_pair x_2 y)) 
                         (v_Vvd:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vad:(zen.term _p_B_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x_2 y)) 
                                            v_Vad))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal v_Vad 
                                            (abst_second (abst_pair x_2 y)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vad:(zen.term _p_B_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x_2 y)) v_Vad))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal v_Vad 
                                        (abst_second (abst_pair x_2 y)))))) 
                            y 
                            (v_Vwd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x_2 y)) y))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal y 
                                            (abst_second (abst_pair x_2 y))))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x_2 y)) y))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal y 
                                        (abst_second (abst_pair x_2 y))))) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x_2 y)) 
                                               y))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x_2 y)) y))) 
                                  __H_1_2_2_LEMMA v_Vxd) 
                               (v_Vld:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal y 
                                            (abst_second (abst_pair x_2 y)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal y 
                                           (abst_second (abst_pair x_2 y))))) 
                                  v_Vld v_Vpd) v_Vwd) v_Vvd) 
                         _p_B_equal_symmetric))))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal (abst_second (abst_pair x_2 y)) y))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x_2 y)) y))))) =>
                zen.Rall _p_A_T 
                  (v_Vac:(zen.term _p_A_T) =>
                   zen.forall _p_B_T 
                     (v_Vbc:(zen.term _p_B_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_second (abst_pair v_Vac v_Vbc)) 
                              v_Vbc)))) x_2 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall _p_B_T 
                         (v_Vbc:(zen.term _p_B_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (abst_second (abst_pair x_2 v_Vbc)) v_Vbc))))) =>
                   zen.Rall _p_B_T 
                     (v_Vbc:(zen.term _p_B_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_second (abst_pair x_2 v_Vbc)) 
                              v_Vbc))) y 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second (abst_pair x_2 y)) y)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_second (abst_pair x_2 y)) y))) 
                        v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_second))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_B_equal (abst_second (abst_pair x_1 y)) y))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_second (abst_pair x_1 y)) y))))) =>
               zen.Rall _p_A_T 
                 (v_Vac:(zen.term _p_A_T) =>
                  zen.forall _p_B_T 
                    (v_Vbc:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second (abst_pair v_Vac v_Vbc)) 
                             v_Vbc)))) x_1 
                 (v_Vcc:
                  (zen.proof 
                     (zen.forall _p_B_T 
                        (v_Vbc:(zen.term _p_B_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (abst_second (abst_pair x_1 v_Vbc)) v_Vbc))))) =>
                  zen.Rall _p_B_T 
                    (v_Vbc:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second (abst_pair x_1 v_Vbc)) 
                             v_Vbc))) y 
                    (v_Vdc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_second (abst_pair x_1 y)) y)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second (abst_pair x_1 y)) y))) 
                       v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_second)))) 
       ((__H_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP (_p_A_equal (abst_first (abst_pair x_1 y)) x_1))) =>
         (__H_1_1_2_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP (_p_A_equal (abst_first (abst_pair x_2 y)) x_2))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_A_equal (abst_first (abst_pair x_1 y)) 
                     (abst_first (abst_pair x_2 y))))) 
            (v_Vvc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first (abst_pair x_1 y)) 
                            (abst_first (abst_pair x_2 y))))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal _p_A_T (abst_first (abst_pair x_1 y)) 
                           (abst_first (abst_pair x_1 y))))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_first (abst_pair x_1 y)) 
                              (abst_first (abst_pair x_1 y))))))) 
               (v_Vwc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_A_T (abst_first (abst_pair x_1 y)) 
                               (abst_first (abst_pair x_1 y))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                  (abst_first (abst_pair x_1 y)))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal _p_A_T (abst_first (abst_pair x_1 y)) 
                           (abst_first (abst_pair x_1 y))))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_first (abst_pair x_1 y)) 
                              (abst_first (abst_pair x_1 y)))))) 
                  (v_Vxc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_A_T (abst_first (abst_pair x_1 y)) 
                               (abst_first (abst_pair x_1 y)))))) =>
                   v_Vyc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                  (abst_first (abst_pair x_1 y))))))) =>
                   zen.Rnoteq _p_A_T (abst_first (abst_pair x_1 y)) v_Vxc) 
                  v_Vwc) 
               (v_Vzc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_A_T 
                                  (abst_first (abst_pair x_1 y)) 
                                  (abst_first (abst_pair x_1 y))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                     (abst_first (abst_pair x_1 y))))))))) =>
                zen.Rcut 
                  (zen.triangle 
                     (zen.equal _p_A_T x_1 (abst_first (abst_pair x_2 y)))) 
                  (v_Vad:
                   (zen.proof 
                      (zen.triangle 
                         (zen.equal _p_A_T x_1 (abst_first (abst_pair x_2 y))))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vbd:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vbd)) 
                     (_p_A_equal (abst_first (abst_pair x_1 y)) x_1) 
                     (_p_A_equal (abst_first (abst_pair x_1 y)) 
                        (abst_first (abst_pair x_2 y))) 
                     (v_Vcd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                     x_1) 
                                  (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                     (abst_first (abst_pair x_2 y))))))) =>
                      zen.Rsubst _p_A_T 
                        (v_Vdd:(zen.term _p_A_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (_p_A_equal v_Vdd x_1) 
                                 (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                    (abst_first (abst_pair x_2 y)))))) 
                        (abst_first (abst_pair x_1 y)) 
                        (abst_first (abst_pair x_1 y)) 
                        (v_Vxc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_A_T 
                                     (abst_first (abst_pair x_1 y)) 
                                     (abst_first (abst_pair x_1 y)))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_A_T 
                                    (abst_first (abst_pair x_1 y)) 
                                    (abst_first (abst_pair x_1 y))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x_1 y)) 
                                       (abst_first (abst_pair x_1 y)))))) 
                           (v_Ved:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_A_T 
                                           (abst_first (abst_pair x_1 y)) 
                                           (abst_first (abst_pair x_1 y))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal _p_A_T 
                                    (abst_first (abst_pair x_1 y)) 
                                    (abst_first (abst_pair x_1 y)))) 
                              (v_Vfd:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal _p_A_T 
                                        (abst_first (abst_pair x_1 y)) 
                                        (abst_first (abst_pair x_1 y))))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal _p_A_T 
                                       (abst_first (abst_pair x_1 y)) 
                                       (abst_first (abst_pair x_1 y)))) 
                                 (v_Vfd0:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal _p_A_T 
                                           (abst_first (abst_pair x_1 y)) 
                                           (abst_first (abst_pair x_1 y))))) =>
                                  zen.Rsubst _p_A_T 
                                    (v_Vgd:(zen.term _p_A_T) =>
                                     zen.triangle 
                                       (zen.equal _p_A_T v_Vgd 
                                          (abst_first (abst_pair x_1 y)))) 
                                    (abst_first (abst_pair x_1 y)) 
                                    (abst_first (abst_pair x_1 y)) 
                                    (v_Vxc0:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first 
                                                    (abst_pair x_1 y)) 
                                                 (abst_first 
                                                    (abst_pair x_1 y)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_first (abst_pair x_1 y)) 
                                             (abst_first (abst_pair x_1 y)))) 
                                       v_Vfd0 v_Vxc0) 
                                    (v_Vfd0:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal _p_A_T 
                                              (abst_first (abst_pair x_1 y)) 
                                              (abst_first (abst_pair x_1 y))))) =>
                                     zen.Rsubst _p_A_T 
                                       (v_Vhd:(zen.term _p_A_T) =>
                                        zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_first (abst_pair x_1 y)) 
                                             v_Vhd)) 
                                       (abst_first (abst_pair x_1 y)) 
                                       (abst_first (abst_pair x_1 y)) 
                                       (v_Vxc0:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_A_T 
                                                    (abst_first 
                                                       (abst_pair x_1 y)) 
                                                    (abst_first 
                                                       (abst_pair x_1 y)))))) =>
                                        zen.Rnoteq _p_A_T 
                                          (abst_first (abst_pair x_1 y)) 
                                          v_Vxc0) 
                                       (v_Vfd0:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first 
                                                    (abst_pair x_1 y)) 
                                                 (abst_first 
                                                    (abst_pair x_1 y))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal _p_A_T 
                                                (abst_first (abst_pair x_1 y)) 
                                                (abst_first (abst_pair x_1 y)))) 
                                          v_Vfd0 v_Vxc) v_Vfd0) v_Vfd0) 
                                 (v_Vxc0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_A_T 
                                              (abst_first (abst_pair x_1 y)) 
                                              (abst_first (abst_pair x_1 y)))))) =>
                                  zen.Rnoteq _p_A_T 
                                    (abst_first (abst_pair x_1 y)) v_Vxc0)) 
                              v_Ved) 
                           (v_Vid:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x_1 y)) 
                                              (abst_first (abst_pair x_1 y)))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x_1 y)) 
                                       (abst_first (abst_pair x_1 y))))) 
                              (v_Vjd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x_1 y)) 
                                           (abst_first (abst_pair x_1 y)))))) =>
                               zen.Rall _p_A_T 
                                 (v_Vkd:(zen.term _p_A_T) =>
                                  zen.forall _p_A_T 
                                    (v_Vld:(zen.term _p_A_T) =>
                                     zen.forall _p_A_T 
                                       (v_Vmd:(zen.term _p_A_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal v_Vkd v_Vld))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal v_Vld v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal v_Vkd v_Vmd))))))) 
                                 (abst_first (abst_pair x_1 y)) 
                                 (v_Vnd:
                                  (zen.proof 
                                     (zen.forall _p_A_T 
                                        (v_Vld:(zen.term _p_A_T) =>
                                         zen.forall _p_A_T 
                                           (v_Vmd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x_1 y)) 
                                                       v_Vld))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vld 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          v_Vmd)))))))) =>
                                  zen.Rall _p_A_T 
                                    (v_Vld:(zen.term _p_A_T) =>
                                     zen.forall _p_A_T 
                                       (v_Vmd:(zen.term _p_A_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   v_Vld))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal v_Vld v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      v_Vmd)))))) 
                                    (abst_first (abst_pair x_1 y)) 
                                    (v_Vod:
                                     (zen.proof 
                                        (zen.forall _p_A_T 
                                           (v_Vmd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x_1 y)) 
                                                       (abst_first 
                                                          (abst_pair x_1 y))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          v_Vmd))))))) =>
                                     zen.Rall _p_A_T 
                                       (v_Vmd:(zen.term _p_A_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (abst_first 
                                                      (abst_pair x_1 y))))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      v_Vmd))))) x_1 
                                       (v_Vpd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x_1 y)) 
                                                       (abst_first 
                                                          (abst_pair x_1 y))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          x_1))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          x_1)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (abst_first 
                                                      (abst_pair x_1 y))))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      x_1))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      x_1)))) 
                                          (v_Vyc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          (abst_first 
                                                             (abst_pair x_1 y))))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      (abst_first 
                                                         (abst_pair x_1 y))))) 
                                             v_Vjd v_Vyc) 
                                          (v_Vqd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          x_1))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          x_1))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      x_1))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      x_1))) 
                                             (v_Vrd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_1 y)) 
                                                             x_1))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_1 y)) 
                                                         x_1))) 
                                                __H_1_1_1_LEMMA v_Vrd) 
                                             (__H_1_1_1_LEMMA0:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          x_1)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vbd:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vbd)) 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) x_1) 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (abst_first 
                                                      (abst_pair x_2 y))) 
                                                (v_Vcd0:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_1 y)) 
                                                                x_1) 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_1 y)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y))))))) =>
                                                 zen.Rsubst _p_A_T 
                                                   (v_Vdd:
                                                    (zen.term _p_A_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_A_equal 
                                                               v_Vdd x_1) 
                                                            (_p_A_equal 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_1 y)) 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)))))) 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (v_Vxc0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_A_T 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_1 y)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_1 y)))))) =>
                                                    zen.Rnoteq _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      v_Vxc0) 
                                                   (v_Vcd0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                   x_1) 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                    zen.Rsubst _p_A_T 
                                                      (v_Vsd:
                                                       (zen.term _p_A_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_A_equal 
                                                                  (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                  v_Vsd) 
                                                               (_p_A_equal 
                                                                  (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                  (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) 
                                                      x_1 
                                                      (abst_first 
                                                         (abst_pair x_2 y)) 
                                                      (v_Vtd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   x_1 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T x_1 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)))) 
                                                         v_Vad v_Vtd) 
                                                      (v_Vud:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))) 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_1 y)) 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y))) 
                                                         v_Vud) v_Vcd0) 
                                                   v_Vcd0) 
                                                (v_Vvd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_1 y)) 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y)))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_1 y)) 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y))))) 
                                                   v_Vvd v_Vvc) 
                                                __H_1_1_1_LEMMA0) v_Vqd) 
                                          v_Vpd) v_Vod) v_Vnd) 
                                 _p_A_equal_transitive) v_Vid) v_Vzc) 
                        (v_Vcd0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_A_equal 
                                        (abst_first (abst_pair x_1 y)) x_1) 
                                     (_p_A_equal 
                                        (abst_first (abst_pair x_1 y)) 
                                        (abst_first (abst_pair x_2 y))))))) =>
                         zen.Rsubst _p_A_T 
                           (v_Vsd:(zen.term _p_A_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x_1 y)) v_Vsd) 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x_1 y)) 
                                       (abst_first (abst_pair x_2 y)))))) 
                           x_1 (abst_first (abst_pair x_2 y)) 
                           (v_Vtd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_A_T x_1 
                                        (abst_first (abst_pair x_2 y)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (zen.equal _p_A_T x_1 
                                    (abst_first (abst_pair x_2 y)))) v_Vad 
                              v_Vtd) 
                           (v_Vud:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x_1 y)) 
                                           (abst_first (abst_pair x_2 y))) 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x_1 y)) 
                                           (abst_first (abst_pair x_2 y))))))) =>
                            zen.Rnoteq basics.bool__t 
                              (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                 (abst_first (abst_pair x_2 y))) v_Vud) 
                           v_Vcd0) v_Vcd) 
                     (v_Vvd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                  (abst_first (abst_pair x_2 y)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_A_equal (abst_first (abst_pair x_1 y)) 
                                 (abst_first (abst_pair x_2 y))))) v_Vvd 
                        v_Vvc) __H_1_1_1_LEMMA) 
                  (v_Vtd:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_A_T x_1 
                               (abst_first (abst_pair x_2 y)))))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal x_1 (abst_first (abst_pair x_2 y))))) 
                     (v_Vwd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal x_1 (abst_first (abst_pair x_2 y)))))) =>
                      zen.Rall _p_A_T 
                        (v_Vkd:(zen.term _p_A_T) =>
                         zen.forall _p_A_T 
                           (v_Vld:(zen.term _p_A_T) =>
                            zen.forall _p_A_T 
                              (v_Vmd:(zen.term _p_A_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_A_equal v_Vkd v_Vld))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal v_Vld v_Vmd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal v_Vkd v_Vmd))))))) 
                        (abst_first (abst_pair x_1 y)) 
                        (v_Vnd:
                         (zen.proof 
                            (zen.forall _p_A_T 
                               (v_Vld:(zen.term _p_A_T) =>
                                zen.forall _p_A_T 
                                  (v_Vmd:(zen.term _p_A_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x_1 y)) 
                                              v_Vld))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal v_Vld v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x_1 y)) v_Vmd)))))))) =>
                         zen.Rall _p_A_T 
                           (v_Vld:(zen.term _p_A_T) =>
                            zen.forall _p_A_T 
                              (v_Vmd:(zen.term _p_A_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x_1 y)) 
                                          v_Vld))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal v_Vld v_Vmd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x_1 y)) 
                                             v_Vmd)))))) x_1 
                           (v_Vxd:
                            (zen.proof 
                               (zen.forall _p_A_T 
                                  (v_Vmd:(zen.term _p_A_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x_1 y)) 
                                              x_1))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal x_1 v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x_1 y)) v_Vmd))))))) =>
                            zen.Rall _p_A_T 
                              (v_Vmd:(zen.term _p_A_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x_1 y)) x_1))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_A_equal x_1 v_Vmd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x_1 y)) 
                                             v_Vmd))))) 
                              (abst_first (abst_pair x_2 y)) 
                              (v_Vyd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x_1 y)) 
                                              x_1))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal x_1 
                                                 (abst_first 
                                                    (abst_pair x_2 y))))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x_1 y)) 
                                                 (abst_first 
                                                    (abst_pair x_2 y)))))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x_1 y)) x_1))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal x_1 
                                             (abst_first (abst_pair x_2 y))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x_1 y)) 
                                             (abst_first (abst_pair x_2 y)))))) 
                                 (v_Vrd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x_1 y)) x_1))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x_1 y)) 
                                             x_1))) __H_1_1_1_LEMMA v_Vrd) 
                                 (v_Vzd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal x_1 
                                                 (abst_first 
                                                    (abst_pair x_2 y))))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x_1 y)) 
                                                 (abst_first 
                                                    (abst_pair x_2 y))))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal x_1 
                                             (abst_first (abst_pair x_2 y))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x_1 y)) 
                                             (abst_first (abst_pair x_2 y))))) 
                                    (v_Vae:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal x_1 
                                                    (abst_first 
                                                       (abst_pair x_2 y))))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal x_1 
                                                (abst_first (abst_pair x_2 y))))) 
                                       v_Vwd v_Vae) 
                                    (v_Vvd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x_1 y)) 
                                                 (abst_first 
                                                    (abst_pair x_2 y)))))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vbd:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vbd)) 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x_1 y)) 
                                          (abst_first (abst_pair x_2 y))) 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x_1 y)) 
                                          (abst_first (abst_pair x_2 y))) 
                                       (v_Vud:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x_1 y)) 
                                                       (abst_first 
                                                          (abst_pair x_2 y))) 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x_1 y)) 
                                                       (abst_first 
                                                          (abst_pair x_2 y))))))) =>
                                        zen.Rsubst _p_A_T 
                                          (v_Vbe:(zen.term _p_A_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_A_equal v_Vbe 
                                                      (abst_first 
                                                         (abst_pair x_2 y))) 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      (abst_first 
                                                         (abst_pair x_2 y)))))) 
                                          (abst_first (abst_pair x_1 y)) 
                                          (abst_first (abst_pair x_1 y)) 
                                          (v_Vxc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_A_T 
                                                       (abst_first 
                                                          (abst_pair x_1 y)) 
                                                       (abst_first 
                                                          (abst_pair x_1 y)))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      (abst_first 
                                                         (abst_pair x_1 y))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_1 y)) 
                                                         (abst_first 
                                                            (abst_pair x_1 y)))))) 
                                             (v_Ved:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_1 y)) 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_1 y))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      (abst_first 
                                                         (abst_pair x_1 y)))) 
                                                (v_Vfd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          (abst_first 
                                                             (abst_pair x_1 y))))) =>
                                                 zen.Reqsym _p_A_T 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   v_Vfd v_Vxc) v_Ved) 
                                             (v_Vid:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_1 y)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_1 y)))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_1 y)) 
                                                         (abst_first 
                                                            (abst_pair x_1 y))))) 
                                                (v_Vjd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_1 y)) 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_1 y)))))) =>
                                                 zen.Rall _p_A_T 
                                                   (v_Vkd:
                                                    (zen.term _p_A_T) =>
                                                    zen.forall _p_A_T 
                                                      (v_Vld:
                                                       (zen.term _p_A_T) =>
                                                       zen.forall _p_A_T 
                                                         (v_Vmd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (v_Vnd0:
                                                    (zen.proof 
                                                       (zen.forall _p_A_T 
                                                          (v_Vld:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vmd)))))))) =>
                                                    zen.Rall _p_A_T 
                                                      (v_Vld:
                                                       (zen.term _p_A_T) =>
                                                       zen.forall _p_A_T 
                                                         (v_Vmd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vmd)))))) 
                                                      (abst_first 
                                                         (abst_pair x_1 y)) 
                                                      (v_Vod:
                                                       (zen.proof 
                                                          (zen.forall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vmd))))))) =>
                                                       zen.Rall _p_A_T 
                                                         (v_Vmd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    v_Vmd))))) 
                                                         (abst_first 
                                                            (abst_pair x_2 y)) 
                                                         (v_Vce:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) 
                                                            (v_Vyc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y))))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y))))) 
                                                               v_Vjd v_Vyc) 
                                                            (v_Vde:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                               (v_Vvc0:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                  v_Vvd 
                                                                  v_Vvc0) 
                                                               (v_Vvd0:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_1 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                  v_Vvd0 
                                                                  v_Vvc) 
                                                               v_Vde) v_Vce) 
                                                         v_Vod) v_Vnd0) 
                                                   _p_A_equal_transitive) 
                                                v_Vid) v_Vzc) 
                                          (v_Vud0:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          (abst_first 
                                                             (abst_pair x_2 y))) 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_1 y)) 
                                                          (abst_first 
                                                             (abst_pair x_2 y))))))) =>
                                           zen.Rsubst _p_A_T 
                                             (v_Vsd:(zen.term _p_A_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_1 y)) 
                                                         v_Vsd) 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_1 y)) 
                                                         (abst_first 
                                                            (abst_pair x_2 y)))))) 
                                             (abst_first (abst_pair x_2 y)) 
                                             (abst_first (abst_pair x_2 y)) 
                                             (v_Vee:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_first 
                                                             (abst_pair x_2 y)) 
                                                          (abst_first 
                                                             (abst_pair x_2 y)))))) =>
                                              zen.Rnoteq _p_A_T 
                                                (abst_first (abst_pair x_2 y)) 
                                                v_Vee) 
                                             (v_Vud0:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_1 y)) 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y))) 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_1 y)) 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y))))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (abst_first 
                                                      (abst_pair x_2 y))) 
                                                v_Vud0) v_Vud0) v_Vud) 
                                       (v_Vvd0:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first 
                                                       (abst_pair x_1 y)) 
                                                    (abst_first 
                                                       (abst_pair x_2 y)))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_1 y)) 
                                                   (abst_first 
                                                      (abst_pair x_2 y))))) 
                                          v_Vvd0 v_Vvc) v_Vvd) v_Vzd) v_Vyd) 
                              v_Vxd) v_Vnd) _p_A_equal_transitive) 
                     (v_Vae:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal x_1 
                                     (abst_first (abst_pair x_2 y))))))) =>
                      zen.Rall _p_A_T 
                        (v_Vkd:(zen.term _p_A_T) =>
                         zen.forall _p_A_T 
                           (v_Vld:(zen.term _p_A_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (_p_A_equal v_Vkd v_Vld))) 
                              (zen.triangle 
                                 (focal.is_true (_p_A_equal v_Vld v_Vkd))))) 
                        (abst_first (abst_pair x_2 y)) 
                        (v_Vfe:
                         (zen.proof 
                            (zen.forall _p_A_T 
                               (v_Vld:(zen.term _p_A_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x_2 y)) 
                                           v_Vld))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal v_Vld 
                                           (abst_first (abst_pair x_2 y)))))))) =>
                         zen.Rall _p_A_T 
                           (v_Vld:(zen.term _p_A_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x_2 y)) v_Vld))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal v_Vld 
                                       (abst_first (abst_pair x_2 y)))))) 
                           x_1 
                           (v_Vge:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x_2 y)) x_1))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal x_1 
                                           (abst_first (abst_pair x_2 y))))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x_2 y)) x_1))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal x_1 
                                       (abst_first (abst_pair x_2 y))))) 
                              (v_Vhe:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x_2 y)) 
                                              x_1))))) =>
                               zen.Rcut 
                                 (zen.and 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_first (abst_pair x_2 y)) 
                                             (abst_first (abst_pair x_2 y))))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_first (abst_pair x_2 y)) 
                                                (abst_first (abst_pair x_2 y))))))) 
                                 (v_Vie:
                                  (zen.proof 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first 
                                                    (abst_pair x_2 y)) 
                                                 (abst_first 
                                                    (abst_pair x_2 y))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first 
                                                       (abst_pair x_2 y)) 
                                                    (abst_first 
                                                       (abst_pair x_2 y)))))))) =>
                                  zen.Rand 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_first (abst_pair x_2 y)) 
                                             (abst_first (abst_pair x_2 y))))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal 
                                                (abst_first (abst_pair x_2 y)) 
                                                (abst_first (abst_pair x_2 y)))))) 
                                    (v_Vee:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first 
                                                    (abst_pair x_2 y)) 
                                                 (abst_first 
                                                    (abst_pair x_2 y)))))) =>
                                     v_Vje:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first 
                                                       (abst_pair x_2 y)) 
                                                    (abst_first 
                                                       (abst_pair x_2 y))))))) =>
                                     zen.Rnoteq _p_A_T 
                                       (abst_first (abst_pair x_2 y)) v_Vee) 
                                    v_Vie) 
                                 (v_Vke:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.and 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_A_T 
                                                    (abst_first 
                                                       (abst_pair x_2 y)) 
                                                    (abst_first 
                                                       (abst_pair x_2 y))))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x_2 y)) 
                                                       (abst_first 
                                                          (abst_pair x_2 y))))))))) =>
                                  zen.Rcut 
                                    (zen.triangle (zen.equal _p_A_T x_2 x_1)) 
                                    (v_Vle:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal _p_A_T x_2 x_1))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vbd:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vbd)) 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x_2 y)) x_2) 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x_2 y)) x_1) 
                                       (v_Vme:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x_2 y)) 
                                                       x_2) 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x_2 y)) 
                                                       x_1))))) =>
                                        zen.Rsubst _p_A_T 
                                          (v_Vne:(zen.term _p_A_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_A_equal v_Vne x_2) 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x_2 y)) 
                                                      x_1)))) 
                                          (abst_first (abst_pair x_2 y)) 
                                          (abst_first (abst_pair x_2 y)) 
                                          (v_Vee:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_A_T 
                                                       (abst_first 
                                                          (abst_pair x_2 y)) 
                                                       (abst_first 
                                                          (abst_pair x_2 y)))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x_2 y)) 
                                                      (abst_first 
                                                         (abst_pair x_2 y))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_2 y)) 
                                                         (abst_first 
                                                            (abst_pair x_2 y)))))) 
                                             (v_Voe:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y)) 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x_2 y)) 
                                                      (abst_first 
                                                         (abst_pair x_2 y)))) 
                                                (v_Vpe:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_first 
                                                             (abst_pair x_2 y)) 
                                                          (abst_first 
                                                             (abst_pair x_2 y))))) =>
                                                 zen.Rcut 
                                                   (zen.triangle 
                                                      (zen.equal _p_A_T 
                                                         (abst_first 
                                                            (abst_pair x_2 y)) 
                                                         (abst_first 
                                                            (abst_pair x_2 y)))) 
                                                   (v_Vpe0:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y)) 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y))))) =>
                                                    zen.Rsubst _p_A_T 
                                                      (v_Vqe:
                                                       (zen.term _p_A_T) =>
                                                       zen.triangle 
                                                         (zen.equal _p_A_T 
                                                            v_Vqe 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)))) 
                                                      (abst_first 
                                                         (abst_pair x_2 y)) 
                                                      (abst_first 
                                                         (abst_pair x_2 y)) 
                                                      (v_Vee0:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)) 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)))) 
                                                         v_Vpe0 v_Vee0) 
                                                      (v_Vpe0:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_A_T 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y))))) =>
                                                       zen.Rsubst _p_A_T 
                                                         (v_Vre:
                                                          (zen.term _p_A_T) =>
                                                          zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)) 
                                                               v_Vre)) 
                                                         (abst_first 
                                                            (abst_pair x_2 y)) 
                                                         (abst_first 
                                                            (abst_pair x_2 y)) 
                                                         (v_Vee0:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                          zen.Rnoteq _p_A_T 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)) 
                                                            v_Vee0) 
                                                         (v_Vpe0:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_A_T 
                                                                  (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                  (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))) 
                                                            v_Vpe0 v_Vee) 
                                                         v_Vpe0) v_Vpe0) 
                                                   (v_Vee0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_A_T 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y)))))) =>
                                                    zen.Rnoteq _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x_2 y)) 
                                                      v_Vee0)) v_Voe) 
                                             (v_Vse:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y)))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_2 y)) 
                                                         (abst_first 
                                                            (abst_pair x_2 y))))) 
                                                (v_Vte:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y)) 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y)))))) =>
                                                 zen.Rall _p_A_T 
                                                   (v_Vkd:
                                                    (zen.term _p_A_T) =>
                                                    zen.forall _p_A_T 
                                                      (v_Vld:
                                                       (zen.term _p_A_T) =>
                                                       zen.forall _p_A_T 
                                                         (v_Vmd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                   (abst_first 
                                                      (abst_pair x_2 y)) 
                                                   (v_Vue:
                                                    (zen.proof 
                                                       (zen.forall _p_A_T 
                                                          (v_Vld:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))))) =>
                                                    zen.Rall _p_A_T 
                                                      (v_Vld:
                                                       (zen.term _p_A_T) =>
                                                       zen.forall _p_A_T 
                                                         (v_Vmd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))) 
                                                      (abst_first 
                                                         (abst_pair x_2 y)) 
                                                      (v_Vve:
                                                       (zen.proof 
                                                          (zen.forall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd))))))) =>
                                                       zen.Rall _p_A_T 
                                                         (v_Vmd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd))))) 
                                                         x_2 
                                                         (v_Vwe:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2)))) 
                                                            (v_Vje:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                               v_Vte v_Vje) 
                                                            (v_Vxe:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                               (v_Vye:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2))) 
                                                                  __H_1_1_2_LEMMA 
                                                                  v_Vye) 
                                                               (__H_1_1_2_LEMMA0:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2)))) =>
                                                                zen.Rsubst 
                                                                  basics.bool__t 
                                                                  (v_Vbd:
                                                                   (zen.term 
                                                                    basics.bool__t) =>
                                                                   zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vbd)) 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2) 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                  (v_Vme0:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                   zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vne x_2) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (v_Vee0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vee0) 
                                                                    (v_Vme0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_2) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vze:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vze) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                                    x_2 x_1 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    x_2 x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    x_2 x_1)) 
                                                                    v_Vle 
                                                                    v_Vaf) 
                                                                    (v_Vbf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    v_Vbf) 
                                                                    v_Vme0) 
                                                                    v_Vme0) 
                                                                  (v_Vcf:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                  __H_1_1_2_LEMMA0) 
                                                               v_Vxe) v_Vwe) 
                                                         v_Vve) v_Vue) 
                                                   _p_A_equal_transitive) 
                                                v_Vse) v_Vke) 
                                          (v_Vme0:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_2 y)) 
                                                          x_2) 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x_2 y)) 
                                                          x_1))))) =>
                                           zen.Rsubst _p_A_T 
                                             (v_Vze:(zen.term _p_A_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_2 y)) 
                                                         v_Vze) 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x_2 y)) 
                                                         x_1)))) x_2 x_1 
                                             (v_Vaf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T x_2 
                                                          x_1)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T x_2 x_1)) 
                                                v_Vle v_Vaf) 
                                             (v_Vbf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y)) 
                                                             x_1) 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair 
                                                                   x_2 y)) 
                                                             x_1))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_2 y)) x_1) 
                                                v_Vbf) v_Vme0) v_Vme) 
                                       (v_Vcf:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first 
                                                       (abst_pair x_2 y)) x_1)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x_2 y)) x_1))) 
                                          v_Vcf v_Vhe) __H_1_1_2_LEMMA) 
                                    (v_Vaf:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T x_2 x_1)))) =>
                                     zen.Rcut 
                                       (zen.triangle 
                                          (focal.is_true (_p_A_equal x_2 x_1))) 
                                       (v_Vdf:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal x_2 x_1)))) =>
                                        zen.Rall _p_A_T 
                                          (v_Vkd:(zen.term _p_A_T) =>
                                           zen.forall _p_A_T 
                                             (v_Vld:(zen.term _p_A_T) =>
                                              zen.forall _p_A_T 
                                                (v_Vmd:(zen.term _p_A_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal v_Vkd 
                                                            v_Vld))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               v_Vld v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               v_Vkd v_Vmd))))))) 
                                          (abst_first (abst_pair x_2 y)) 
                                          (v_Vue:
                                           (zen.proof 
                                              (zen.forall _p_A_T 
                                                 (v_Vld:(zen.term _p_A_T) =>
                                                  zen.forall _p_A_T 
                                                    (v_Vmd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y)) 
                                                                v_Vld))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vld 
                                                                   v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                   v_Vmd)))))))) =>
                                           zen.Rall _p_A_T 
                                             (v_Vld:(zen.term _p_A_T) =>
                                              zen.forall _p_A_T 
                                                (v_Vmd:(zen.term _p_A_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)) 
                                                            v_Vld))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               v_Vld v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)) 
                                                               v_Vmd)))))) 
                                             x_2 
                                             (v_Vef:
                                              (zen.proof 
                                                 (zen.forall _p_A_T 
                                                    (v_Vmd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y)) 
                                                                x_2))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   x_2 v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                   v_Vmd))))))) =>
                                              zen.Rall _p_A_T 
                                                (v_Vmd:(zen.term _p_A_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)) x_2))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal x_2 
                                                               v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)) 
                                                               v_Vmd))))) 
                                                x_1 
                                                (v_Vff:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x_2 y)) 
                                                                x_2))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   x_2 x_1))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                   x_1)))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)) x_2))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal x_2 
                                                               x_1))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)) 
                                                               x_1)))) 
                                                   (v_Vye:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                   x_2))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)) 
                                                               x_2))) 
                                                      __H_1_1_2_LEMMA v_Vye) 
                                                   (v_Vgf:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   x_2 x_1))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                   x_1))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal x_2 
                                                               x_1))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_A_equal 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x_2 y)) 
                                                               x_1))) 
                                                      (v_Vhf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    x_2 x_1))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_A_equal 
                                                                  x_2 x_1))) 
                                                         v_Vdf v_Vhf) 
                                                      (v_Vcf:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                   x_1)))) =>
                                                       zen.Rsubst 
                                                         basics.bool__t 
                                                         (v_Vbd:
                                                          (zen.term 
                                                             basics.bool__t) =>
                                                          zen.triangle 
                                                            (focal.is_true 
                                                               v_Vbd)) 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)) x_1) 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)) x_1) 
                                                         (v_Vbf:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                          zen.Rsubst _p_A_T 
                                                            (v_Vdd:
                                                             (zen.term _p_A_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vdd x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)) 
                                                            (abst_first 
                                                               (abst_pair 
                                                                  x_2 y)) 
                                                            (v_Vee:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                             zen.Rnotand 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) 
                                                               (v_Voe:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                                zen.Rnotnot 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))) 
                                                                  (v_Vpe:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) =>
                                                                   zen.Reqsym 
                                                                    _p_A_T 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vpe 
                                                                    v_Vee) 
                                                                  v_Voe) 
                                                               (v_Vse:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))))) =>
                                                                zen.Rnotnot 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                  (v_Vte:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)))))) =>
                                                                   zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (v_Vue0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd)))))) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vmd))))) 
                                                                    x_1 
                                                                    (v_Vif:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y))))) 
                                                                    v_Vte 
                                                                    v_Vje) 
                                                                    (v_Vjf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    (v_Vhe0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe0) 
                                                                    (v_Vcf0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                                    v_Vcf0 
                                                                    v_Vhe) 
                                                                    v_Vjf) 
                                                                    v_Vif) 
                                                                    v_Vve) 
                                                                    v_Vue0) 
                                                                    _p_A_equal_transitive) 
                                                                  v_Vse) 
                                                               v_Vke) 
                                                            (v_Vbf0:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                             zen.Rsubst 
                                                               _p_A_T 
                                                               (v_Vze:
                                                                (zen.term 
                                                                   _p_A_T) =>
                                                                zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    v_Vze) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))) 
                                                               x_1 x_1 
                                                               (v_Vkf:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    x_1 x_1)))) =>
                                                                zen.Rnoteq 
                                                                  _p_A_T x_1 
                                                                  v_Vkf) 
                                                               (v_Vbf0:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))))) =>
                                                                zen.Rnoteq 
                                                                  basics.bool__t 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1) 
                                                                  v_Vbf0) 
                                                               v_Vbf0) v_Vbf) 
                                                         (v_Vcf0:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x_2 y)) 
                                                                    x_1))) 
                                                            v_Vcf0 v_Vhe) 
                                                         v_Vcf) v_Vgf) v_Vff) 
                                                v_Vef) v_Vue) 
                                          _p_A_equal_transitive) 
                                       (v_Vhf:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal x_2 x_1))))) =>
                                        zen.Rall _p_A_T 
                                          (v_Vkd:(zen.term _p_A_T) =>
                                           zen.forall _p_A_T 
                                             (v_Vld:(zen.term _p_A_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal v_Vkd v_Vld))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal v_Vld v_Vkd))))) 
                                          x_1 
                                          (v_Vlf:
                                           (zen.proof 
                                              (zen.forall _p_A_T 
                                                 (v_Vld:(zen.term _p_A_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal x_1 
                                                             v_Vld))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vld 
                                                             x_1)))))) =>
                                           zen.Rall _p_A_T 
                                             (v_Vld:(zen.term _p_A_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal x_1 v_Vld))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal v_Vld x_1)))) 
                                             x_2 
                                             (v_Vmf:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal x_1 x_2))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal x_2 x_1))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal x_1 x_2))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal x_2 x_1))) 
                                                (v_Vnf:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal x_1 
                                                                x_2))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x_1 x_2))) 
                                                   H v_Vnf) 
                                                (v_Vdf:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal x_2 x_1)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal x_2 x_1))) 
                                                   v_Vdf v_Vhf) v_Vmf) v_Vlf) 
                                          _p_A_equal_symmetric)))) 
                              (v_Vwd:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal x_1 
                                           (abst_first (abst_pair x_2 y)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal x_1 
                                          (abst_first (abst_pair x_2 y))))) 
                                 v_Vwd v_Vae) v_Vge) v_Vfe) 
                        _p_A_equal_symmetric))))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_A_equal (abst_first (abst_pair x_2 y)) x_2))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_first (abst_pair x_2 y)) x_2))))) =>
               zen.Rall _p_A_T 
                 (v_Vac:(zen.term _p_A_T) =>
                  zen.forall _p_B_T 
                    (v_Vbc:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first (abst_pair v_Vac v_Vbc)) 
                             v_Vac)))) x_2 
                 (v_Vcc:
                  (zen.proof 
                     (zen.forall _p_B_T 
                        (v_Vbc:(zen.term _p_B_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_A_equal (abst_first (abst_pair x_2 v_Vbc)) 
                                 x_2))))) =>
                  zen.Rall _p_B_T 
                    (v_Vbc:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first (abst_pair x_2 v_Vbc)) x_2))) 
                    y 
                    (v_Vdc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_A_equal (abst_first (abst_pair x_2 y)) x_2)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first (abst_pair x_2 y)) x_2))) 
                       v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_first))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_A_equal (abst_first (abst_pair x_1 y)) x_1))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first (abst_pair x_1 y)) x_1))))) =>
              zen.Rall _p_A_T 
                (v_Vac:(zen.term _p_A_T) =>
                 zen.forall _p_B_T 
                   (v_Vbc:(zen.term _p_B_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first (abst_pair v_Vac v_Vbc)) 
                            v_Vac)))) x_1 
                (v_Vcc:
                 (zen.proof 
                    (zen.forall _p_B_T 
                       (v_Vbc:(zen.term _p_B_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first (abst_pair x_1 v_Vbc)) 
                                x_1))))) =>
                 zen.Rall _p_B_T 
                   (v_Vbc:(zen.term _p_B_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first (abst_pair x_1 v_Vbc)) x_1))) 
                   y 
                   (v_Vdc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first (abst_pair x_1 y)) x_1)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first (abst_pair x_1 y)) x_1))) 
                      v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_first)))).

def Product_set__pair_right_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.ebP (_p_A_equal x x)))) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) ->
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_pair_preserves_first:(dk_logic.eP 
                               (dk_logic.forall _p_A_T 
                                  (x:(cc.eT _p_A_T) =>
                                   dk_logic.forall _p_B_T 
                                     (y:(cc.eT _p_B_T) =>
                                      dk_logic.ebP 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x y)) x))))) ->
  abst_pair_preserves_second:(dk_logic.eP 
                                (dk_logic.forall _p_A_T 
                                   (x:(cc.eT _p_A_T) =>
                                    dk_logic.forall _p_B_T 
                                      (y:(cc.eT _p_B_T) =>
                                       dk_logic.ebP 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x y)) y))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.forall _p_B_T 
          (y_1:(cc.eT _p_B_T) =>
           dk_logic.forall _p_B_T 
             (y_2:(cc.eT _p_B_T) =>
              dk_logic.imp (dk_logic.ebP (_p_B_equal y_1 y_2)) 
                (dk_logic.ebP 
                   (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                      abst_T abst_first abst_second (abst_pair x y_1) 
                      (abst_pair x y_2)))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_first:((cc.eT abst_T) -> cc.eT _p_A_T) =>
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_pair_preserves_first:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_A_equal (abst_first (abst_pair x y)) x))))) =>
  abst_pair_preserves_second:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_B_equal (abst_second (abst_pair x y)) y))))) =>
  (__I_1_LEMMA:
   (x:(cc.eT _p_A_T) ->
    y_1:(cc.eT _p_B_T) ->
    y_2:(cc.eT _p_B_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_B_equal y_1 y_2))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal abst_T 
            abst_first abst_second (abst_pair x y_1) (abst_pair x y_2)))) =>
   zen.nnpp 
     (zen.forall _p_A_T 
        (v_Vzb:(zen.term _p_A_T) =>
         zen.forall _p_B_T 
           (v_Vac:(zen.term _p_B_T) =>
            zen.forall _p_B_T 
              (v_Vbc:(zen.term _p_B_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_B_equal v_Vac v_Vbc))) 
                 (zen.triangle 
                    (focal.is_true 
                       (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                          _p_B_equal abst_T abst_first abst_second 
                          (abst_pair v_Vzb v_Vac) (abst_pair v_Vzb v_Vbc)))))))) 
     (v_Vcc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_A_T 
               (v_Vzb:(zen.term _p_A_T) =>
                zen.forall _p_B_T 
                  (v_Vac:(zen.term _p_B_T) =>
                   zen.forall _p_B_T 
                     (v_Vbc:(zen.term _p_B_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (_p_B_equal v_Vac v_Vbc))) 
                        (zen.triangle 
                           (focal.is_true 
                              (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                                 _p_B_equal abst_T abst_first abst_second 
                                 (abst_pair v_Vzb v_Vac) 
                                 (abst_pair v_Vzb v_Vbc)))))))))) =>
      zen.Raxiom 
        (zen.forall _p_A_T 
           (v_Vzb:(zen.term _p_A_T) =>
            zen.forall _p_B_T 
              (v_Vac:(zen.term _p_B_T) =>
               zen.forall _p_B_T 
                 (v_Vbc:(zen.term _p_B_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (_p_B_equal v_Vac v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true 
                          (Product_set__equal _p_A_T _p_B_T _p_A_equal 
                             _p_B_equal abst_T abst_first abst_second 
                             (abst_pair v_Vzb v_Vac) (abst_pair v_Vzb v_Vbc)))))))) 
        __I_1_LEMMA v_Vcc)) 
    (x:(cc.eT _p_A_T) =>
     y_1:(cc.eT _p_B_T) =>
     y_2:(cc.eT _p_B_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_B_equal y_1 y_2))) =>
     (__I_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (_p_A_equal (abst_first (abst_pair x y_1)) 
               (abst_first (abst_pair x y_2))))) =>
      (__I_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_B_equal (abst_second (abst_pair x y_1)) 
                (abst_second (abst_pair x y_2))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
                  abst_T abst_first abst_second (abst_pair x y_1) 
                  (abst_pair x y_2)))) 
         (v_Vzb:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (basics._amper__amper_ 
                         (_p_A_equal (abst_first (abst_pair x y_1)) 
                            (abst_first (abst_pair x y_2))) 
                         (_p_B_equal (abst_second (abst_pair x y_1)) 
                            (abst_second (abst_pair x y_2)))))))) =>
          focal.zenon_focal_notand 
            (_p_A_equal (abst_first (abst_pair x y_1)) 
               (abst_first (abst_pair x y_2))) 
            (_p_B_equal (abst_second (abst_pair x y_1)) 
               (abst_second (abst_pair x y_2))) 
            (v_Vac:
             (zen.proof 
                (zen.not 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first (abst_pair x y_1)) 
                               (abst_first (abst_pair x y_2))))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x y_1)) 
                               (abst_second (abst_pair x y_2)))))))) =>
             zen.Rnotand 
               (zen.triangle 
                  (focal.is_true 
                     (_p_A_equal (abst_first (abst_pair x y_1)) 
                        (abst_first (abst_pair x y_2))))) 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal (abst_second (abst_pair x y_1)) 
                        (abst_second (abst_pair x y_2))))) 
               (v_Vbc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first (abst_pair x y_1)) 
                               (abst_first (abst_pair x y_2))))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal (abst_first (abst_pair x y_1)) 
                           (abst_first (abst_pair x y_2))))) __I_1_1_LEMMA 
                  v_Vbc) 
               (v_Vcc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x y_1)) 
                               (abst_second (abst_pair x y_2))))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_B_equal (abst_second (abst_pair x y_1)) 
                           (abst_second (abst_pair x y_2))))) __I_1_2_LEMMA 
                  v_Vcc) v_Vac) v_Vzb)) 
        ((__I_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP (_p_B_equal (abst_second (abst_pair x y_1)) y_1))) =>
          (__I_1_2_2_LEMMA:
           (dk_logic.eP 
              (dk_logic.ebP (_p_B_equal (abst_second (abst_pair x y_2)) y_2))) =>
           zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second (abst_pair x y_1)) 
                      (abst_second (abst_pair x y_2))))) 
             (v_Vvc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second (abst_pair x y_1)) 
                             (abst_second (abst_pair x y_2))))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_B_T (abst_second (abst_pair x y_1)) 
                            (abst_second (abst_pair x y_1))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x y_1)) 
                               (abst_second (abst_pair x y_1))))))) 
                (v_Vwc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (abst_second (abst_pair x y_1)) 
                                (abst_second (abst_pair x y_1))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second (abst_pair x y_1)) 
                                   (abst_second (abst_pair x y_1)))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_B_T (abst_second (abst_pair x y_1)) 
                            (abst_second (abst_pair x y_1))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x y_1)) 
                               (abst_second (abst_pair x y_1)))))) 
                   (v_Vxc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (abst_second (abst_pair x y_1)) 
                                (abst_second (abst_pair x y_1)))))) =>
                    v_Vyc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second (abst_pair x y_1)) 
                                   (abst_second (abst_pair x y_1))))))) =>
                    zen.Rnoteq _p_B_T (abst_second (abst_pair x y_1)) v_Vxc) 
                   v_Vwc) 
                (v_Vzc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_B_T 
                                   (abst_second (abst_pair x y_1)) 
                                   (abst_second (abst_pair x y_1))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (abst_second (abst_pair x y_1)) 
                                      (abst_second (abst_pair x y_1))))))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (zen.equal _p_B_T y_1 (abst_second (abst_pair x y_2)))) 
                   (v_Vad:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal _p_B_T y_1 
                             (abst_second (abst_pair x y_2))))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vbd:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vbd)) 
                      (_p_B_equal (abst_second (abst_pair x y_1)) y_1) 
                      (_p_B_equal (abst_second (abst_pair x y_1)) 
                         (abst_second (abst_pair x y_2))) 
                      (v_Vcd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_B_equal 
                                      (abst_second (abst_pair x y_1)) y_1) 
                                   (_p_B_equal 
                                      (abst_second (abst_pair x y_1)) 
                                      (abst_second (abst_pair x y_2))))))) =>
                       zen.Rsubst _p_B_T 
                         (v_Vdd:(zen.term _p_B_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_B_equal v_Vdd y_1) 
                                  (_p_B_equal 
                                     (abst_second (abst_pair x y_1)) 
                                     (abst_second (abst_pair x y_2)))))) 
                         (abst_second (abst_pair x y_1)) 
                         (abst_second (abst_pair x y_1)) 
                         (v_Vxc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_B_T 
                                      (abst_second (abst_pair x y_1)) 
                                      (abst_second (abst_pair x y_1)))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_second (abst_pair x y_1)) 
                                     (abst_second (abst_pair x y_1))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x y_1)) 
                                        (abst_second (abst_pair x y_1)))))) 
                            (v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_second (abst_pair x y_1)) 
                                            (abst_second (abst_pair x y_1))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal _p_B_T 
                                     (abst_second (abst_pair x y_1)) 
                                     (abst_second (abst_pair x y_1)))) 
                               (v_Vfd:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal _p_B_T 
                                         (abst_second (abst_pair x y_1)) 
                                         (abst_second (abst_pair x y_1))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal _p_B_T 
                                        (abst_second (abst_pair x y_1)) 
                                        (abst_second (abst_pair x y_1)))) 
                                  (v_Vfd0:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (abst_second (abst_pair x y_1)) 
                                            (abst_second (abst_pair x y_1))))) =>
                                   zen.Rsubst _p_B_T 
                                     (v_Vgd:(zen.term _p_B_T) =>
                                      zen.triangle 
                                        (zen.equal _p_B_T v_Vgd 
                                           (abst_second (abst_pair x y_1)))) 
                                     (abst_second (abst_pair x y_1)) 
                                     (abst_second (abst_pair x y_1)) 
                                     (v_Vxc0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_second 
                                                     (abst_pair x y_1)) 
                                                  (abst_second 
                                                     (abst_pair x y_1)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_second (abst_pair x y_1)) 
                                              (abst_second (abst_pair x y_1)))) 
                                        v_Vfd0 v_Vxc0) 
                                     (v_Vfd0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_second (abst_pair x y_1)) 
                                               (abst_second (abst_pair x y_1))))) =>
                                      zen.Rsubst _p_B_T 
                                        (v_Vhd:(zen.term _p_B_T) =>
                                         zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_second (abst_pair x y_1)) 
                                              v_Vhd)) 
                                        (abst_second (abst_pair x y_1)) 
                                        (abst_second (abst_pair x y_1)) 
                                        (v_Vxc0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_second 
                                                        (abst_pair x y_1)) 
                                                     (abst_second 
                                                        (abst_pair x y_1)))))) =>
                                         zen.Rnoteq _p_B_T 
                                           (abst_second (abst_pair x y_1)) 
                                           v_Vxc0) 
                                        (v_Vfd0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_second 
                                                     (abst_pair x y_1)) 
                                                  (abst_second 
                                                     (abst_pair x y_1))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_B_T 
                                                 (abst_second 
                                                    (abst_pair x y_1)) 
                                                 (abst_second 
                                                    (abst_pair x y_1)))) 
                                           v_Vfd0 v_Vxc) v_Vfd0) v_Vfd0) 
                                  (v_Vxc0:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (abst_second (abst_pair x y_1)) 
                                               (abst_second (abst_pair x y_1)))))) =>
                                   zen.Rnoteq _p_B_T 
                                     (abst_second (abst_pair x y_1)) v_Vxc0)) 
                               v_Ved) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x y_1)) 
                                               (abst_second (abst_pair x y_1)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x y_1)) 
                                        (abst_second (abst_pair x y_1))))) 
                               (v_Vjd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x y_1)) 
                                            (abst_second (abst_pair x y_1)))))) =>
                                zen.Rall _p_B_T 
                                  (v_Vkd:(zen.term _p_B_T) =>
                                   zen.forall _p_B_T 
                                     (v_Vld:(zen.term _p_B_T) =>
                                      zen.forall _p_B_T 
                                        (v_Vmd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal v_Vkd v_Vld))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vld v_Vmd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vkd v_Vmd))))))) 
                                  (abst_second (abst_pair x y_1)) 
                                  (v_Vnd:
                                   (zen.proof 
                                      (zen.forall _p_B_T 
                                         (v_Vld:(zen.term _p_B_T) =>
                                          zen.forall _p_B_T 
                                            (v_Vmd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x y_1)) 
                                                        v_Vld))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal v_Vld 
                                                           v_Vmd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) v_Vmd)))))))) =>
                                   zen.Rall _p_B_T 
                                     (v_Vld:(zen.term _p_B_T) =>
                                      zen.forall _p_B_T 
                                        (v_Vmd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    v_Vld))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal v_Vld v_Vmd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       v_Vmd)))))) 
                                     (abst_second (abst_pair x y_1)) 
                                     (v_Vod:
                                      (zen.proof 
                                         (zen.forall _p_B_T 
                                            (v_Vmd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x y_1)) 
                                                        (abst_second 
                                                           (abst_pair x y_1))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) v_Vmd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) v_Vmd))))))) =>
                                      zen.Rall _p_B_T 
                                        (v_Vmd:(zen.term _p_B_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (abst_second 
                                                       (abst_pair x y_1))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       v_Vmd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       v_Vmd))))) y_1 
                                        (v_Vpd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x y_1)) 
                                                        (abst_second 
                                                           (abst_pair x y_1))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) y_1))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) y_1)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (abst_second 
                                                       (abst_pair x y_1))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       y_1))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       y_1)))) 
                                           (v_Vyc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       (abst_second 
                                                          (abst_pair x y_1))))) 
                                              v_Vjd v_Vyc) 
                                           (v_Vqd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) y_1))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) y_1))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       y_1))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       y_1))) 
                                              (v_Vrd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_1)) 
                                                              y_1))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_1)) 
                                                          y_1))) 
                                                 __I_1_2_1_LEMMA v_Vrd) 
                                              (__I_1_2_1_LEMMA0:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) y_1)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vbd:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vbd)) 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_1)) y_1) 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (abst_second 
                                                       (abst_pair x y_2))) 
                                                 (v_Vcd0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_1)) 
                                                                 y_1) 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_1)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2))))))) =>
                                                  zen.Rsubst _p_B_T 
                                                    (v_Vdd:
                                                     (zen.term _p_B_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_B_equal 
                                                                v_Vdd y_1) 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_1)) 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)))))) 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (v_Vxc0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_1)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_1)))))) =>
                                                     zen.Rnoteq _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       v_Vxc0) 
                                                    (v_Vcd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    y_1) 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                     zen.Rsubst _p_B_T 
                                                       (v_Vsd:
                                                        (zen.term _p_B_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                   v_Vsd) 
                                                                (_p_B_equal 
                                                                   (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                   (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) 
                                                       y_1 
                                                       (abst_second 
                                                          (abst_pair x y_2)) 
                                                       (v_Vtd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    y_1 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T y_1 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)))) 
                                                          v_Vad v_Vtd) 
                                                       (v_Vud:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))) 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_1)) 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2))) 
                                                          v_Vud) v_Vcd0) 
                                                    v_Vcd0) 
                                                 (v_Vvd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_1)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_1)) 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2))))) 
                                                    v_Vvd v_Vvc) 
                                                 __I_1_2_1_LEMMA0) v_Vqd) 
                                           v_Vpd) v_Vod) v_Vnd) 
                                  _p_B_equal_transitive) v_Vid) v_Vzc) 
                         (v_Vcd0:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_B_equal 
                                         (abst_second (abst_pair x y_1)) y_1) 
                                      (_p_B_equal 
                                         (abst_second (abst_pair x y_1)) 
                                         (abst_second (abst_pair x y_2))))))) =>
                          zen.Rsubst _p_B_T 
                            (v_Vsd:(zen.term _p_B_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x y_1)) v_Vsd) 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x y_1)) 
                                        (abst_second (abst_pair x y_2)))))) 
                            y_1 (abst_second (abst_pair x y_2)) 
                            (v_Vtd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_B_T y_1 
                                         (abst_second (abst_pair x y_2)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal _p_B_T y_1 
                                     (abst_second (abst_pair x y_2)))) v_Vad 
                               v_Vtd) 
                            (v_Vud:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x y_1)) 
                                            (abst_second (abst_pair x y_2))) 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x y_1)) 
                                            (abst_second (abst_pair x y_2))))))) =>
                             zen.Rnoteq basics.bool__t 
                               (_p_B_equal (abst_second (abst_pair x y_1)) 
                                  (abst_second (abst_pair x y_2))) v_Vud) 
                            v_Vcd0) v_Vcd) 
                      (v_Vvd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (abst_second (abst_pair x y_1)) 
                                   (abst_second (abst_pair x y_2)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second (abst_pair x y_1)) 
                                  (abst_second (abst_pair x y_2))))) v_Vvd 
                         v_Vvc) __I_1_2_1_LEMMA) 
                   (v_Vtd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T y_1 
                                (abst_second (abst_pair x y_2)))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal y_1 (abst_second (abst_pair x y_2))))) 
                      (v_Vwd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal y_1 
                                   (abst_second (abst_pair x y_2)))))) =>
                       zen.Rall _p_B_T 
                         (v_Vkd:(zen.term _p_B_T) =>
                          zen.forall _p_B_T 
                            (v_Vld:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vmd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vkd v_Vld))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vld v_Vmd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vkd v_Vmd))))))) 
                         (abst_second (abst_pair x y_1)) 
                         (v_Vnd:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vld:(zen.term _p_B_T) =>
                                 zen.forall _p_B_T 
                                   (v_Vmd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x y_1)) 
                                               v_Vld))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal v_Vld v_Vmd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x y_1)) v_Vmd)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vld:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vmd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x y_1)) 
                                           v_Vld))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vld v_Vmd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x y_1)) 
                                              v_Vmd)))))) y_1 
                            (v_Vxd:
                             (zen.proof 
                                (zen.forall _p_B_T 
                                   (v_Vmd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x y_1)) 
                                               y_1))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal y_1 v_Vmd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x y_1)) v_Vmd))))))) =>
                             zen.Rall _p_B_T 
                               (v_Vmd:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x y_1)) 
                                           y_1))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (_p_B_equal y_1 v_Vmd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x y_1)) 
                                              v_Vmd))))) 
                               (abst_second (abst_pair x y_2)) 
                               (v_Vyd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x y_1)) 
                                               y_1))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal y_1 
                                                  (abst_second 
                                                     (abst_pair x y_2))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x y_1)) 
                                                  (abst_second 
                                                     (abst_pair x y_2)))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x y_1)) 
                                           y_1))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal y_1 
                                              (abst_second (abst_pair x y_2))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x y_1)) 
                                              (abst_second (abst_pair x y_2)))))) 
                                  (v_Vrd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x y_1)) y_1))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x y_1)) 
                                              y_1))) __I_1_2_1_LEMMA v_Vrd) 
                                  (v_Vzd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal y_1 
                                                  (abst_second 
                                                     (abst_pair x y_2))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x y_1)) 
                                                  (abst_second 
                                                     (abst_pair x y_2))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal y_1 
                                              (abst_second (abst_pair x y_2))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal 
                                              (abst_second (abst_pair x y_1)) 
                                              (abst_second (abst_pair x y_2))))) 
                                     (v_Vae:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal y_1 
                                                     (abst_second 
                                                        (abst_pair x y_2))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal y_1 
                                                 (abst_second 
                                                    (abst_pair x y_2))))) 
                                        v_Vwd v_Vae) 
                                     (v_Vvd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (abst_second 
                                                     (abst_pair x y_1)) 
                                                  (abst_second 
                                                     (abst_pair x y_2)))))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vbd:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vbd)) 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x y_1)) 
                                           (abst_second (abst_pair x y_2))) 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x y_1)) 
                                           (abst_second (abst_pair x y_2))) 
                                        (v_Vud:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x y_1)) 
                                                        (abst_second 
                                                           (abst_pair x y_2))) 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x y_1)) 
                                                        (abst_second 
                                                           (abst_pair x y_2))))))) =>
                                         zen.Rsubst _p_B_T 
                                           (v_Vbe:(zen.term _p_B_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_B_equal v_Vbe 
                                                       (abst_second 
                                                          (abst_pair x y_2))) 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       (abst_second 
                                                          (abst_pair x y_2)))))) 
                                           (abst_second (abst_pair x y_1)) 
                                           (abst_second (abst_pair x y_1)) 
                                           (v_Vxc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second 
                                                           (abst_pair x y_1)) 
                                                        (abst_second 
                                                           (abst_pair x y_1)))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       (abst_second 
                                                          (abst_pair x y_1))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_1)) 
                                                          (abst_second 
                                                             (abst_pair x y_1)))))) 
                                              (v_Ved:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_1)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_1))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       (abst_second 
                                                          (abst_pair x y_1)))) 
                                                 (v_Vfd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1))))) =>
                                                  zen.Reqsym _p_B_T 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    v_Vfd v_Vxc) v_Ved) 
                                              (v_Vid:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_1)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_1)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_1)) 
                                                          (abst_second 
                                                             (abst_pair x y_1))))) 
                                                 (v_Vjd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_1)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_1)))))) =>
                                                  zen.Rall _p_B_T 
                                                    (v_Vkd:
                                                     (zen.term _p_B_T) =>
                                                     zen.forall _p_B_T 
                                                       (v_Vld:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (v_Vnd0:
                                                     (zen.proof 
                                                        (zen.forall _p_B_T 
                                                           (v_Vld:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vld))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vmd)))))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vld:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vld))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vmd)))))) 
                                                       (abst_second 
                                                          (abst_pair x y_1)) 
                                                       (v_Vod:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vmd))))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vmd))))) 
                                                          (abst_second 
                                                             (abst_pair x y_2)) 
                                                          (v_Vce:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) 
                                                             (v_Vyc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                                v_Vjd v_Vyc) 
                                                             (v_Vde:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                (v_Vvc0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                   v_Vvd 
                                                                   v_Vvc0) 
                                                                (v_Vvd0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                   v_Vvd0 
                                                                   v_Vvc) 
                                                                v_Vde) v_Vce) 
                                                          v_Vod) v_Vnd0) 
                                                    _p_B_equal_transitive) 
                                                 v_Vid) v_Vzc) 
                                           (v_Vud0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_2))) 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_1)) 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_2))))))) =>
                                            zen.Rsubst _p_B_T 
                                              (v_Vsd:(zen.term _p_B_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_1)) 
                                                          v_Vsd) 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_1)) 
                                                          (abst_second 
                                                             (abst_pair x y_2)))))) 
                                              (abst_second (abst_pair x y_2)) 
                                              (abst_second (abst_pair x y_2)) 
                                              (v_Vee:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_2)) 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_2)))))) =>
                                               zen.Rnoteq _p_B_T 
                                                 (abst_second 
                                                    (abst_pair x y_2)) v_Vee) 
                                              (v_Vud0:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_1)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2))) 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_1)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2))))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (abst_second 
                                                       (abst_pair x y_2))) 
                                                 v_Vud0) v_Vud0) v_Vud) 
                                        (v_Vvd0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second 
                                                        (abst_pair x y_1)) 
                                                     (abst_second 
                                                        (abst_pair x y_2)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_1)) 
                                                    (abst_second 
                                                       (abst_pair x y_2))))) 
                                           v_Vvd0 v_Vvc) v_Vvd) v_Vzd) v_Vyd) 
                               v_Vxd) v_Vnd) _p_B_equal_transitive) 
                      (v_Vae:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal y_1 
                                      (abst_second (abst_pair x y_2))))))) =>
                       zen.Rall _p_B_T 
                         (v_Vkd:(zen.term _p_B_T) =>
                          zen.forall _p_B_T 
                            (v_Vld:(zen.term _p_B_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vkd v_Vld))) 
                               (zen.triangle 
                                  (focal.is_true (_p_B_equal v_Vld v_Vkd))))) 
                         (abst_second (abst_pair x y_2)) 
                         (v_Vfe:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vld:(zen.term _p_B_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x y_2)) 
                                            v_Vld))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal v_Vld 
                                            (abst_second (abst_pair x y_2)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vld:(zen.term _p_B_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x y_2)) v_Vld))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal v_Vld 
                                        (abst_second (abst_pair x y_2)))))) 
                            y_1 
                            (v_Vge:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x y_2)) 
                                            y_1))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal y_1 
                                            (abst_second (abst_pair x y_2))))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal 
                                        (abst_second (abst_pair x y_2)) y_1))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_B_equal y_1 
                                        (abst_second (abst_pair x y_2))))) 
                               (v_Vhe:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (abst_second (abst_pair x y_2)) 
                                               y_1))))) =>
                                zen.Rcut 
                                  (zen.and 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_second (abst_pair x y_2)) 
                                              (abst_second (abst_pair x y_2))))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second 
                                                    (abst_pair x y_2)) 
                                                 (abst_second 
                                                    (abst_pair x y_2))))))) 
                                  (v_Vie:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_second 
                                                     (abst_pair x y_2)) 
                                                  (abst_second 
                                                     (abst_pair x y_2))))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second 
                                                        (abst_pair x y_2)) 
                                                     (abst_second 
                                                        (abst_pair x y_2)))))))) =>
                                   zen.Rand 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_B_T 
                                              (abst_second (abst_pair x y_2)) 
                                              (abst_second (abst_pair x y_2))))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal 
                                                 (abst_second 
                                                    (abst_pair x y_2)) 
                                                 (abst_second 
                                                    (abst_pair x y_2)))))) 
                                     (v_Vee:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (abst_second 
                                                     (abst_pair x y_2)) 
                                                  (abst_second 
                                                     (abst_pair x y_2)))))) =>
                                      v_Vje:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second 
                                                        (abst_pair x y_2)) 
                                                     (abst_second 
                                                        (abst_pair x y_2))))))) =>
                                      zen.Rnoteq _p_B_T 
                                        (abst_second (abst_pair x y_2)) v_Vee) 
                                     v_Vie) 
                                  (v_Vke:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (abst_second 
                                                        (abst_pair x y_2)) 
                                                     (abst_second 
                                                        (abst_pair x y_2))))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x y_2)) 
                                                        (abst_second 
                                                           (abst_pair x y_2))))))))) =>
                                   zen.Rcut 
                                     (zen.triangle (zen.equal _p_B_T y_2 y_1)) 
                                     (v_Vle:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_B_T y_2 y_1))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vbd:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vbd)) 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x y_2)) 
                                           y_2) 
                                        (_p_B_equal 
                                           (abst_second (abst_pair x y_2)) 
                                           y_1) 
                                        (v_Vme:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x y_2)) 
                                                        y_2) 
                                                     (_p_B_equal 
                                                        (abst_second 
                                                           (abst_pair x y_2)) 
                                                        y_1))))) =>
                                         zen.Rsubst _p_B_T 
                                           (v_Vne:(zen.term _p_B_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_B_equal v_Vne y_2) 
                                                    (_p_B_equal 
                                                       (abst_second 
                                                          (abst_pair x y_2)) 
                                                       y_1)))) 
                                           (abst_second (abst_pair x y_2)) 
                                           (abst_second (abst_pair x y_2)) 
                                           (v_Vee:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_B_T 
                                                        (abst_second 
                                                           (abst_pair x y_2)) 
                                                        (abst_second 
                                                           (abst_pair x y_2)))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x y_2)) 
                                                       (abst_second 
                                                          (abst_pair x y_2))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_2)) 
                                                          (abst_second 
                                                             (abst_pair x y_2)))))) 
                                              (v_Voe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x y_2)) 
                                                       (abst_second 
                                                          (abst_pair x y_2)))) 
                                                 (v_Vpe:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_2)) 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_2))))) =>
                                                  zen.Rcut 
                                                    (zen.triangle 
                                                       (zen.equal _p_B_T 
                                                          (abst_second 
                                                             (abst_pair x y_2)) 
                                                          (abst_second 
                                                             (abst_pair x y_2)))) 
                                                    (v_Vpe0:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2))))) =>
                                                     zen.Rsubst _p_B_T 
                                                       (v_Vqe:
                                                        (zen.term _p_B_T) =>
                                                        zen.triangle 
                                                          (zen.equal _p_B_T 
                                                             v_Vqe 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)))) 
                                                       (abst_second 
                                                          (abst_pair x y_2)) 
                                                       (abst_second 
                                                          (abst_pair x y_2)) 
                                                       (v_Vee0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)) 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)))) 
                                                          v_Vpe0 v_Vee0) 
                                                       (v_Vpe0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2))))) =>
                                                        zen.Rsubst _p_B_T 
                                                          (v_Vre:
                                                           (zen.term _p_B_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                _p_B_T 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)) 
                                                                v_Vre)) 
                                                          (abst_second 
                                                             (abst_pair x y_2)) 
                                                          (abst_second 
                                                             (abst_pair x y_2)) 
                                                          (v_Vee0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                           zen.Rnoteq _p_B_T 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)) 
                                                             v_Vee0) 
                                                          (v_Vpe0:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_B_T 
                                                                   (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                   (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))) 
                                                             v_Vpe0 v_Vee) 
                                                          v_Vpe0) v_Vpe0) 
                                                    (v_Vee0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2)))))) =>
                                                     zen.Rnoteq _p_B_T 
                                                       (abst_second 
                                                          (abst_pair x y_2)) 
                                                       v_Vee0)) v_Voe) 
                                              (v_Vse:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2)) 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_2)) 
                                                          (abst_second 
                                                             (abst_pair x y_2))))) 
                                                 (v_Vte:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2)) 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2)))))) =>
                                                  zen.Rall _p_B_T 
                                                    (v_Vkd:
                                                     (zen.term _p_B_T) =>
                                                     zen.forall _p_B_T 
                                                       (v_Vld:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                    (abst_second 
                                                       (abst_pair x y_2)) 
                                                    (v_Vue:
                                                     (zen.proof 
                                                        (zen.forall _p_B_T 
                                                           (v_Vld:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vld))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd)))))))) =>
                                                     zen.Rall _p_B_T 
                                                       (v_Vld:
                                                        (zen.term _p_B_T) =>
                                                        zen.forall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vld))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd)))))) 
                                                       (abst_second 
                                                          (abst_pair x y_2)) 
                                                       (v_Vve:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))))))) =>
                                                        zen.Rall _p_B_T 
                                                          (v_Vmd:
                                                           (zen.term _p_B_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))))) 
                                                          y_2 
                                                          (v_Vwe:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2)))) 
                                                             (v_Vje:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                v_Vte v_Vje) 
                                                             (v_Vxe:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                (v_Vye:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))) 
                                                                   __I_1_2_2_LEMMA 
                                                                   v_Vye) 
                                                                (__I_1_2_2_LEMMA0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2)))) =>
                                                                 zen.Rsubst 
                                                                   basics.bool__t 
                                                                   (v_Vbd:
                                                                    (
                                                                    zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vbd)) 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2) 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                   (v_Vme0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vne:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vne y_2) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (v_Vee0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vee0) 
                                                                    (v_Vme0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vze:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vze) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                                    y_2 y_1 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    y_2 y_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    y_2 y_1)) 
                                                                    v_Vle 
                                                                    v_Vaf) 
                                                                    (v_Vbf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    v_Vbf) 
                                                                    v_Vme0) 
                                                                    v_Vme0) 
                                                                   (v_Vcf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe) 
                                                                   __I_1_2_2_LEMMA0) 
                                                                v_Vxe) v_Vwe) 
                                                          v_Vve) v_Vue) 
                                                    _p_B_equal_transitive) 
                                                 v_Vse) v_Vke) 
                                           (v_Vme0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_2)) y_2) 
                                                        (_p_B_equal 
                                                           (abst_second 
                                                              (abst_pair x 
                                                                 y_2)) y_1))))) =>
                                            zen.Rsubst _p_B_T 
                                              (v_Vze:(zen.term _p_B_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_2)) 
                                                          v_Vze) 
                                                       (_p_B_equal 
                                                          (abst_second 
                                                             (abst_pair x y_2)) 
                                                          y_1)))) y_2 y_1 
                                              (v_Vaf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           y_2 y_1)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_B_T y_2 y_1)) 
                                                 v_Vle v_Vaf) 
                                              (v_Vbf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2)) 
                                                              y_1) 
                                                           (_p_B_equal 
                                                              (abst_second 
                                                                 (abst_pair 
                                                                    x y_2)) 
                                                              y_1))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_2)) y_1) 
                                                 v_Vbf) v_Vme0) v_Vme) 
                                        (v_Vcf:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (abst_second 
                                                        (abst_pair x y_2)) 
                                                     y_1)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_B_equal 
                                                    (abst_second 
                                                       (abst_pair x y_2)) y_1))) 
                                           v_Vcf v_Vhe) __I_1_2_2_LEMMA) 
                                     (v_Vaf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T y_2 y_1)))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_B_equal y_2 y_1))) 
                                        (v_Vdf:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal y_2 y_1)))) =>
                                         zen.Rall _p_B_T 
                                           (v_Vkd:(zen.term _p_B_T) =>
                                            zen.forall _p_B_T 
                                              (v_Vld:(zen.term _p_B_T) =>
                                               zen.forall _p_B_T 
                                                 (v_Vmd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal v_Vkd 
                                                             v_Vld))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                v_Vld v_Vmd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                v_Vkd v_Vmd))))))) 
                                           (abst_second (abst_pair x y_2)) 
                                           (v_Vue:
                                            (zen.proof 
                                               (zen.forall _p_B_T 
                                                  (v_Vld:(zen.term _p_B_T) =>
                                                   zen.forall _p_B_T 
                                                     (v_Vmd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2)) 
                                                                 v_Vld))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd)))))))) =>
                                            zen.Rall _p_B_T 
                                              (v_Vld:(zen.term _p_B_T) =>
                                               zen.forall _p_B_T 
                                                 (v_Vmd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)) 
                                                             v_Vld))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                v_Vld v_Vmd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)) 
                                                                v_Vmd)))))) 
                                              y_2 
                                              (v_Vef:
                                               (zen.proof 
                                                  (zen.forall _p_B_T 
                                                     (v_Vmd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2)) 
                                                                 y_2))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    y_2 v_Vmd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))))))) =>
                                               zen.Rall _p_B_T 
                                                 (v_Vmd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)) y_2))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal y_2 
                                                                v_Vmd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)) 
                                                                v_Vmd))))) 
                                                 y_1 
                                                 (v_Vff:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (abst_second 
                                                                    (
                                                                    abst_pair 
                                                                    x y_2)) 
                                                                 y_2))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    y_2 y_1))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)) y_2))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal y_2 
                                                                y_1))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)) 
                                                                y_1)))) 
                                                    (v_Vye:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_2))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)) 
                                                                y_2))) 
                                                       __I_1_2_2_LEMMA v_Vye) 
                                                    (v_Vgf:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    y_2 y_1))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal y_2 
                                                                y_1))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_B_equal 
                                                                (abst_second 
                                                                   (abst_pair 
                                                                    x y_2)) 
                                                                y_1))) 
                                                       (v_Vhf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    y_2 y_1))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_B_equal 
                                                                   y_2 y_1))) 
                                                          v_Vdf v_Vhf) 
                                                       (v_Vcf:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) =>
                                                        zen.Rsubst 
                                                          basics.bool__t 
                                                          (v_Vbd:
                                                           (zen.term 
                                                              basics.bool__t) =>
                                                           zen.triangle 
                                                             (focal.is_true 
                                                                v_Vbd)) 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)) y_1) 
                                                          (_p_B_equal 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)) y_1) 
                                                          (v_Vbf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                           zen.Rsubst _p_B_T 
                                                             (v_Vdd:
                                                              (zen.term 
                                                                 _p_B_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vdd y_1) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)) 
                                                             (abst_second 
                                                                (abst_pair x 
                                                                   y_2)) 
                                                             (v_Vee:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                              zen.Rnotand 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) 
                                                                (v_Voe:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                                 zen.Rnotnot 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))) 
                                                                   (v_Vpe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vpe 
                                                                    v_Vee) 
                                                                   v_Voe) 
                                                                (v_Vse:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))))) =>
                                                                 zen.Rnotnot 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                   (v_Vte:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (v_Vue0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd)))))) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vmd))))) 
                                                                    y_1 
                                                                    (v_Vif:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                    v_Vte 
                                                                    v_Vje) 
                                                                    (v_Vjf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    (v_Vhe0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    v_Vcf 
                                                                    v_Vhe0) 
                                                                    (v_Vcf0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                                    v_Vcf0 
                                                                    v_Vhe) 
                                                                    v_Vjf) 
                                                                    v_Vif) 
                                                                    v_Vve) 
                                                                    v_Vue0) 
                                                                    _p_B_equal_transitive) 
                                                                   v_Vse) 
                                                                v_Vke) 
                                                             (v_Vbf0:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                              zen.Rsubst 
                                                                _p_B_T 
                                                                (v_Vze:
                                                                 (zen.term 
                                                                    _p_B_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    v_Vze) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) 
                                                                y_1 y_1 
                                                                (v_Vkf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    y_1 y_1)))) =>
                                                                 zen.Rnoteq 
                                                                   _p_B_T 
                                                                   y_1 v_Vkf) 
                                                                (v_Vbf0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                    (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))))) =>
                                                                 zen.Rnoteq 
                                                                   basics.bool__t 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1) 
                                                                   v_Vbf0) 
                                                                v_Vbf0) v_Vbf) 
                                                          (v_Vcf0:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_B_equal 
                                                                    (abst_second 
                                                                    (abst_pair 
                                                                    x y_2)) 
                                                                    y_1))) 
                                                             v_Vcf0 v_Vhe) 
                                                          v_Vcf) v_Vgf) v_Vff) 
                                                 v_Vef) v_Vue) 
                                           _p_B_equal_transitive) 
                                        (v_Vhf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal y_2 y_1))))) =>
                                         zen.Rall _p_B_T 
                                           (v_Vkd:(zen.term _p_B_T) =>
                                            zen.forall _p_B_T 
                                              (v_Vld:(zen.term _p_B_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal v_Vkd 
                                                          v_Vld))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal v_Vld 
                                                          v_Vkd))))) y_1 
                                           (v_Vlf:
                                            (zen.proof 
                                               (zen.forall _p_B_T 
                                                  (v_Vld:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal y_1 
                                                              v_Vld))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal v_Vld 
                                                              y_1)))))) =>
                                            zen.Rall _p_B_T 
                                              (v_Vld:(zen.term _p_B_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal y_1 v_Vld))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal v_Vld y_1)))) 
                                              y_2 
                                              (v_Vmf:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal y_1 
                                                              y_2))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal y_2 
                                                              y_1))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal y_1 y_2))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_B_equal y_2 y_1))) 
                                                 (v_Vnf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 y_1 y_2))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal y_1 y_2))) 
                                                    H v_Vnf) 
                                                 (v_Vdf:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal y_2 
                                                              y_1)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_B_equal y_2 y_1))) 
                                                    v_Vdf v_Vhf) v_Vmf) v_Vlf) 
                                           _p_B_equal_symmetric)))) 
                               (v_Vwd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal y_1 
                                            (abst_second (abst_pair x y_2)))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_B_equal y_1 
                                           (abst_second (abst_pair x y_2))))) 
                                  v_Vwd v_Vae) v_Vge) v_Vfe) 
                         _p_B_equal_symmetric))))) 
            (zen.nnpp 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal (abst_second (abst_pair x y_2)) y_2))) 
               (v_Vzb:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_B_equal (abst_second (abst_pair x y_2)) y_2))))) =>
                zen.Rall _p_A_T 
                  (v_Vac:(zen.term _p_A_T) =>
                   zen.forall _p_B_T 
                     (v_Vbc:(zen.term _p_B_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_second (abst_pair v_Vac v_Vbc)) 
                              v_Vbc)))) x 
                  (v_Vcc:
                   (zen.proof 
                      (zen.forall _p_B_T 
                         (v_Vbc:(zen.term _p_B_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second (abst_pair x v_Vbc)) 
                                  v_Vbc))))) =>
                   zen.Rall _p_B_T 
                     (v_Vbc:(zen.term _p_B_T) =>
                      zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_second (abst_pair x v_Vbc)) 
                              v_Vbc))) y_2 
                     (v_Vdc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal (abst_second (abst_pair x y_2)) 
                                  y_2)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_second (abst_pair x y_2)) y_2))) 
                        v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_second))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_B_equal (abst_second (abst_pair x y_1)) y_1))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (abst_second (abst_pair x y_1)) y_1))))) =>
               zen.Rall _p_A_T 
                 (v_Vac:(zen.term _p_A_T) =>
                  zen.forall _p_B_T 
                    (v_Vbc:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second (abst_pair v_Vac v_Vbc)) 
                             v_Vbc)))) x 
                 (v_Vcc:
                  (zen.proof 
                     (zen.forall _p_B_T 
                        (v_Vbc:(zen.term _p_B_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_second (abst_pair x v_Vbc)) 
                                 v_Vbc))))) =>
                  zen.Rall _p_B_T 
                    (v_Vbc:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_B_equal (abst_second (abst_pair x v_Vbc)) v_Vbc))) 
                    y_1 
                    (v_Vdc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (abst_second (abst_pair x y_1)) y_1)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_B_equal (abst_second (abst_pair x y_1)) y_1))) 
                       v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_second)))) 
       ((__I_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP (_p_A_equal (abst_first (abst_pair x y_1)) x))) =>
         (__I_1_1_2_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP (_p_A_equal (abst_first (abst_pair x y_2)) x))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_A_equal (abst_first (abst_pair x y_1)) 
                     (abst_first (abst_pair x y_2))))) 
            (v_Vkc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first (abst_pair x y_1)) 
                            (abst_first (abst_pair x y_2))))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal _p_A_T (abst_first (abst_pair x y_1)) 
                           (abst_first (abst_pair x y_1))))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_first (abst_pair x y_1)) 
                              (abst_first (abst_pair x y_1))))))) 
               (v_Vlc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_A_T (abst_first (abst_pair x y_1)) 
                               (abst_first (abst_pair x y_1))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first (abst_pair x y_1)) 
                                  (abst_first (abst_pair x y_1)))))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal _p_A_T (abst_first (abst_pair x y_1)) 
                           (abst_first (abst_pair x y_1))))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_first (abst_pair x y_1)) 
                              (abst_first (abst_pair x y_1)))))) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_A_T (abst_first (abst_pair x y_1)) 
                               (abst_first (abst_pair x y_1)))))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first (abst_pair x y_1)) 
                                  (abst_first (abst_pair x y_1))))))) =>
                   zen.Rnoteq _p_A_T (abst_first (abst_pair x y_1)) v_Vmc) 
                  v_Vlc) 
               (v_Voc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_A_T 
                                  (abst_first (abst_pair x y_1)) 
                                  (abst_first (abst_pair x y_1))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal (abst_first (abst_pair x y_1)) 
                                     (abst_first (abst_pair x y_1))))))))) =>
                zen.Rcut 
                  (zen.triangle 
                     (zen.equal _p_A_T x (abst_first (abst_pair x y_2)))) 
                  (v_Vpc:
                   (zen.proof 
                      (zen.triangle 
                         (zen.equal _p_A_T x (abst_first (abst_pair x y_2))))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vqc:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vqc)) 
                     (_p_A_equal (abst_first (abst_pair x y_1)) x) 
                     (_p_A_equal (abst_first (abst_pair x y_1)) 
                        (abst_first (abst_pair x y_2))) 
                     (v_Vrc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_A_equal (abst_first (abst_pair x y_1)) 
                                     x) 
                                  (_p_A_equal (abst_first (abst_pair x y_1)) 
                                     (abst_first (abst_pair x y_2))))))) =>
                      zen.Rsubst _p_A_T 
                        (v_Vsc:(zen.term _p_A_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (_p_A_equal v_Vsc x) 
                                 (_p_A_equal (abst_first (abst_pair x y_1)) 
                                    (abst_first (abst_pair x y_2)))))) 
                        (abst_first (abst_pair x y_1)) 
                        (abst_first (abst_pair x y_1)) 
                        (v_Vmc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_A_T 
                                     (abst_first (abst_pair x y_1)) 
                                     (abst_first (abst_pair x y_1)))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_A_T 
                                    (abst_first (abst_pair x y_1)) 
                                    (abst_first (abst_pair x y_1))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x y_1)) 
                                       (abst_first (abst_pair x y_1)))))) 
                           (v_Vtc:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_A_T 
                                           (abst_first (abst_pair x y_1)) 
                                           (abst_first (abst_pair x y_1))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal _p_A_T 
                                    (abst_first (abst_pair x y_1)) 
                                    (abst_first (abst_pair x y_1)))) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal _p_A_T 
                                        (abst_first (abst_pair x y_1)) 
                                        (abst_first (abst_pair x y_1))))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal _p_A_T 
                                       (abst_first (abst_pair x y_1)) 
                                       (abst_first (abst_pair x y_1)))) 
                                 (v_Vuc0:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal _p_A_T 
                                           (abst_first (abst_pair x y_1)) 
                                           (abst_first (abst_pair x y_1))))) =>
                                  zen.Rsubst _p_A_T 
                                    (v_Vvc:(zen.term _p_A_T) =>
                                     zen.triangle 
                                       (zen.equal _p_A_T v_Vvc 
                                          (abst_first (abst_pair x y_1)))) 
                                    (abst_first (abst_pair x y_1)) 
                                    (abst_first (abst_pair x y_1)) 
                                    (v_Vmc0:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first 
                                                    (abst_pair x y_1)) 
                                                 (abst_first 
                                                    (abst_pair x y_1)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_first (abst_pair x y_1)) 
                                             (abst_first (abst_pair x y_1)))) 
                                       v_Vuc0 v_Vmc0) 
                                    (v_Vuc0:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal _p_A_T 
                                              (abst_first (abst_pair x y_1)) 
                                              (abst_first (abst_pair x y_1))))) =>
                                     zen.Rsubst _p_A_T 
                                       (v_Vwc:(zen.term _p_A_T) =>
                                        zen.triangle 
                                          (zen.equal _p_A_T 
                                             (abst_first (abst_pair x y_1)) 
                                             v_Vwc)) 
                                       (abst_first (abst_pair x y_1)) 
                                       (abst_first (abst_pair x y_1)) 
                                       (v_Vmc0:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_A_T 
                                                    (abst_first 
                                                       (abst_pair x y_1)) 
                                                    (abst_first 
                                                       (abst_pair x y_1)))))) =>
                                        zen.Rnoteq _p_A_T 
                                          (abst_first (abst_pair x y_1)) 
                                          v_Vmc0) 
                                       (v_Vuc0:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (abst_first 
                                                    (abst_pair x y_1)) 
                                                 (abst_first 
                                                    (abst_pair x y_1))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal _p_A_T 
                                                (abst_first (abst_pair x y_1)) 
                                                (abst_first (abst_pair x y_1)))) 
                                          v_Vuc0 v_Vmc) v_Vuc0) v_Vuc0) 
                                 (v_Vmc0:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_A_T 
                                              (abst_first (abst_pair x y_1)) 
                                              (abst_first (abst_pair x y_1)))))) =>
                                  zen.Rnoteq _p_A_T 
                                    (abst_first (abst_pair x y_1)) v_Vmc0)) 
                              v_Vtc) 
                           (v_Vxc:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x y_1)) 
                                              (abst_first (abst_pair x y_1)))))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x y_1)) 
                                       (abst_first (abst_pair x y_1))))) 
                              (v_Vyc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x y_1)) 
                                           (abst_first (abst_pair x y_1)))))) =>
                               zen.Rall _p_A_T 
                                 (v_Vzc:(zen.term _p_A_T) =>
                                  zen.forall _p_A_T 
                                    (v_Vad:(zen.term _p_A_T) =>
                                     zen.forall _p_A_T 
                                       (v_Vbd:(zen.term _p_A_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal v_Vzc v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal v_Vad v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal v_Vzc v_Vbd))))))) 
                                 (abst_first (abst_pair x y_1)) 
                                 (v_Vcd:
                                  (zen.proof 
                                     (zen.forall _p_A_T 
                                        (v_Vad:(zen.term _p_A_T) =>
                                         zen.forall _p_A_T 
                                           (v_Vbd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x y_1)) 
                                                       v_Vad))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vad 
                                                          v_Vbd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          v_Vbd)))))))) =>
                                  zen.Rall _p_A_T 
                                    (v_Vad:(zen.term _p_A_T) =>
                                     zen.forall _p_A_T 
                                       (v_Vbd:(zen.term _p_A_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   v_Vad))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal v_Vad v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      v_Vbd)))))) 
                                    (abst_first (abst_pair x y_1)) 
                                    (v_Vdd:
                                     (zen.proof 
                                        (zen.forall _p_A_T 
                                           (v_Vbd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x y_1)) 
                                                       (abst_first 
                                                          (abst_pair x y_1))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          v_Vbd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          v_Vbd))))))) =>
                                     zen.Rall _p_A_T 
                                       (v_Vbd:(zen.term _p_A_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (abst_first 
                                                      (abst_pair x y_1))))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      v_Vbd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      v_Vbd))))) x 
                                       (v_Ved:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x y_1)) 
                                                       (abst_first 
                                                          (abst_pair x y_1))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          x)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (abst_first 
                                                      (abst_pair x y_1))))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) x)))) 
                                          (v_Vnc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          (abst_first 
                                                             (abst_pair x y_1))))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      (abst_first 
                                                         (abst_pair x y_1))))) 
                                             v_Vyc v_Vnc) 
                                          (v_Vfd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          x))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          x))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) x))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) x))) 
                                             (v_Vgd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_1)) x))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x y_1)) 
                                                         x))) 
                                                __I_1_1_1_LEMMA v_Vgd) 
                                             (__I_1_1_1_LEMMA0:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          x)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vqc:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vqc)) 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x y_1)) x) 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (abst_first 
                                                      (abst_pair x y_2))) 
                                                (v_Vrc0:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x y_1)) x) 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x y_1)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x y_2))))))) =>
                                                 zen.Rsubst _p_A_T 
                                                   (v_Vsc:
                                                    (zen.term _p_A_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_A_equal 
                                                               v_Vsc x) 
                                                            (_p_A_equal 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x y_1)) 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x y_2)))))) 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (v_Vmc0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_A_T 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x y_1)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x y_1)))))) =>
                                                    zen.Rnoteq _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      v_Vmc0) 
                                                   (v_Vrc0:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) x) 
                                                                (_p_A_equal 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                    zen.Rsubst _p_A_T 
                                                      (v_Vhd:
                                                       (zen.term _p_A_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_A_equal 
                                                                  (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                  v_Vhd) 
                                                               (_p_A_equal 
                                                                  (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                  (abst_first 
                                                                    (abst_pair 
                                                                    x y_2)))))) 
                                                      x 
                                                      (abst_first 
                                                         (abst_pair x y_2)) 
                                                      (v_Vid:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T x 
                                                                   (abst_first 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_A_T x 
                                                               (abst_first 
                                                                  (abst_pair 
                                                                    x y_2)))) 
                                                         v_Vpc v_Vid) 
                                                      (v_Vjd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))) 
                                                                   (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair x 
                                                                  y_1)) 
                                                            (abst_first 
                                                               (abst_pair x 
                                                                  y_2))) 
                                                         v_Vjd) v_Vrc0) 
                                                   v_Vrc0) 
                                                (v_Vkd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_1)) 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_2)))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_A_equal 
                                                            (abst_first 
                                                               (abst_pair x 
                                                                  y_1)) 
                                                            (abst_first 
                                                               (abst_pair x 
                                                                  y_2))))) 
                                                   v_Vkd v_Vkc) 
                                                __I_1_1_1_LEMMA0) v_Vfd) 
                                          v_Ved) v_Vdd) v_Vcd) 
                                 _p_A_equal_transitive) v_Vxc) v_Voc) 
                        (v_Vrc0:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_A_equal 
                                        (abst_first (abst_pair x y_1)) x) 
                                     (_p_A_equal 
                                        (abst_first (abst_pair x y_1)) 
                                        (abst_first (abst_pair x y_2))))))) =>
                         zen.Rsubst _p_A_T 
                           (v_Vhd:(zen.term _p_A_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x y_1)) v_Vhd) 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x y_1)) 
                                       (abst_first (abst_pair x y_2)))))) x 
                           (abst_first (abst_pair x y_2)) 
                           (v_Vid:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_A_T x 
                                        (abst_first (abst_pair x y_2)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (zen.equal _p_A_T x 
                                    (abst_first (abst_pair x y_2)))) v_Vpc 
                              v_Vid) 
                           (v_Vjd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x y_1)) 
                                           (abst_first (abst_pair x y_2))) 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x y_1)) 
                                           (abst_first (abst_pair x y_2))))))) =>
                            zen.Rnoteq basics.bool__t 
                              (_p_A_equal (abst_first (abst_pair x y_1)) 
                                 (abst_first (abst_pair x y_2))) v_Vjd) 
                           v_Vrc0) v_Vrc) 
                     (v_Vkd:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (abst_first (abst_pair x y_1)) 
                                  (abst_first (abst_pair x y_2)))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_A_equal (abst_first (abst_pair x y_1)) 
                                 (abst_first (abst_pair x y_2))))) v_Vkd 
                        v_Vkc) __I_1_1_1_LEMMA) 
                  (v_Vid:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_A_T x 
                               (abst_first (abst_pair x y_2)))))) =>
                   zen.Rcut 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal x (abst_first (abst_pair x y_2))))) 
                     (v_Vld:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal x (abst_first (abst_pair x y_2)))))) =>
                      zen.Rall _p_A_T 
                        (v_Vzc:(zen.term _p_A_T) =>
                         zen.forall _p_A_T 
                           (v_Vad:(zen.term _p_A_T) =>
                            zen.forall _p_A_T 
                              (v_Vbd:(zen.term _p_A_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_A_equal v_Vzc v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal v_Vad v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal v_Vzc v_Vbd))))))) 
                        (abst_first (abst_pair x y_1)) 
                        (v_Vcd:
                         (zen.proof 
                            (zen.forall _p_A_T 
                               (v_Vad:(zen.term _p_A_T) =>
                                zen.forall _p_A_T 
                                  (v_Vbd:(zen.term _p_A_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x y_1)) 
                                              v_Vad))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal v_Vad v_Vbd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x y_1)) v_Vbd)))))))) =>
                         zen.Rall _p_A_T 
                           (v_Vad:(zen.term _p_A_T) =>
                            zen.forall _p_A_T 
                              (v_Vbd:(zen.term _p_A_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x y_1)) 
                                          v_Vad))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal v_Vad v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x y_1)) 
                                             v_Vbd)))))) x 
                           (v_Vmd:
                            (zen.proof 
                               (zen.forall _p_A_T 
                                  (v_Vbd:(zen.term _p_A_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x y_1)) 
                                              x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal x v_Vbd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x y_1)) v_Vbd))))))) =>
                            zen.Rall _p_A_T 
                              (v_Vbd:(zen.term _p_A_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x y_1)) x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_A_equal x v_Vbd))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x y_1)) 
                                             v_Vbd))))) 
                              (abst_first (abst_pair x y_2)) 
                              (v_Vnd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x y_1)) 
                                              x))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal x 
                                                 (abst_first 
                                                    (abst_pair x y_2))))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x y_1)) 
                                                 (abst_first 
                                                    (abst_pair x y_2)))))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x y_1)) x))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal x 
                                             (abst_first (abst_pair x y_2))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x y_1)) 
                                             (abst_first (abst_pair x y_2)))))) 
                                 (v_Vgd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x y_1)) x))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x y_1)) x))) 
                                    __I_1_1_1_LEMMA v_Vgd) 
                                 (v_Vod:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal x 
                                                 (abst_first 
                                                    (abst_pair x y_2))))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x y_1)) 
                                                 (abst_first 
                                                    (abst_pair x y_2))))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal x 
                                             (abst_first (abst_pair x y_2))))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_A_equal 
                                             (abst_first (abst_pair x y_1)) 
                                             (abst_first (abst_pair x y_2))))) 
                                    (v_Vpd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal x 
                                                    (abst_first 
                                                       (abst_pair x y_2))))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_A_equal x 
                                                (abst_first (abst_pair x y_2))))) 
                                       v_Vld v_Vpd) 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (abst_first 
                                                    (abst_pair x y_1)) 
                                                 (abst_first 
                                                    (abst_pair x y_2)))))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vqc:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vqc)) 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x y_1)) 
                                          (abst_first (abst_pair x y_2))) 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x y_1)) 
                                          (abst_first (abst_pair x y_2))) 
                                       (v_Vjd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x y_1)) 
                                                       (abst_first 
                                                          (abst_pair x y_2))) 
                                                    (_p_A_equal 
                                                       (abst_first 
                                                          (abst_pair x y_1)) 
                                                       (abst_first 
                                                          (abst_pair x y_2))))))) =>
                                        zen.Rsubst _p_A_T 
                                          (v_Vqd:(zen.term _p_A_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_A_equal v_Vqd 
                                                      (abst_first 
                                                         (abst_pair x y_2))) 
                                                   (_p_A_equal 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      (abst_first 
                                                         (abst_pair x y_2)))))) 
                                          (abst_first (abst_pair x y_1)) 
                                          (abst_first (abst_pair x y_1)) 
                                          (v_Vmc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_A_T 
                                                       (abst_first 
                                                          (abst_pair x y_1)) 
                                                       (abst_first 
                                                          (abst_pair x y_1)))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      (abst_first 
                                                         (abst_pair x y_1))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x y_1)) 
                                                         (abst_first 
                                                            (abst_pair x y_1)))))) 
                                             (v_Vtc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_1)) 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_1))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal _p_A_T 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      (abst_first 
                                                         (abst_pair x y_1)))) 
                                                (v_Vuc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          (abst_first 
                                                             (abst_pair x y_1))))) =>
                                                 zen.Reqsym _p_A_T 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   v_Vuc v_Vmc) v_Vtc) 
                                             (v_Vxc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x y_1)) 
                                                                (abst_first 
                                                                   (abst_pair 
                                                                    x y_1)))))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x y_1)) 
                                                         (abst_first 
                                                            (abst_pair x y_1))))) 
                                                (v_Vyc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_1)) 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_1)))))) =>
                                                 zen.Rall _p_A_T 
                                                   (v_Vzc:
                                                    (zen.term _p_A_T) =>
                                                    zen.forall _p_A_T 
                                                      (v_Vad:
                                                       (zen.term _p_A_T) =>
                                                       zen.forall _p_A_T 
                                                         (v_Vbd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (v_Vcd0:
                                                    (zen.proof 
                                                       (zen.forall _p_A_T 
                                                          (v_Vad:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vbd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vad))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vbd)))))))) =>
                                                    zen.Rall _p_A_T 
                                                      (v_Vad:
                                                       (zen.term _p_A_T) =>
                                                       zen.forall _p_A_T 
                                                         (v_Vbd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vad))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vbd)))))) 
                                                      (abst_first 
                                                         (abst_pair x y_1)) 
                                                      (v_Vdd:
                                                       (zen.proof 
                                                          (zen.forall _p_A_T 
                                                             (v_Vbd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vbd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vbd))))))) =>
                                                       zen.Rall _p_A_T 
                                                         (v_Vbd:
                                                          (zen.term _p_A_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vbd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    v_Vbd))))) 
                                                         (abst_first 
                                                            (abst_pair x y_2)) 
                                                         (v_Vrd:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2)))))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2)))))) 
                                                            (v_Vnc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1))))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1))))) 
                                                               v_Vyc v_Vnc) 
                                                            (v_Vsd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                               (v_Vkc0:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                  v_Vkd 
                                                                  v_Vkc0) 
                                                               (v_Vkd0:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2)))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_1)) 
                                                                    (abst_first 
                                                                    (abst_pair 
                                                                    x y_2))))) 
                                                                  v_Vkd0 
                                                                  v_Vkc) 
                                                               v_Vsd) v_Vrd) 
                                                         v_Vdd) v_Vcd0) 
                                                   _p_A_equal_transitive) 
                                                v_Vxc) v_Voc) 
                                          (v_Vjd0:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          (abst_first 
                                                             (abst_pair x y_2))) 
                                                       (_p_A_equal 
                                                          (abst_first 
                                                             (abst_pair x y_1)) 
                                                          (abst_first 
                                                             (abst_pair x y_2))))))) =>
                                           zen.Rsubst _p_A_T 
                                             (v_Vtd:(zen.term _p_A_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x y_1)) 
                                                         v_Vtd) 
                                                      (_p_A_equal 
                                                         (abst_first 
                                                            (abst_pair x y_1)) 
                                                         (abst_first 
                                                            (abst_pair x y_2)))))) 
                                             (abst_first (abst_pair x y_2)) 
                                             (abst_first (abst_pair x y_2)) 
                                             (v_Vud:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (abst_first 
                                                             (abst_pair x y_2)) 
                                                          (abst_first 
                                                             (abst_pair x y_2)))))) =>
                                              zen.Rnoteq _p_A_T 
                                                (abst_first (abst_pair x y_2)) 
                                                v_Vud) 
                                             (v_Vjd0:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_1)) 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_2))) 
                                                          (_p_A_equal 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_1)) 
                                                             (abst_first 
                                                                (abst_pair x 
                                                                   y_2))))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (abst_first 
                                                      (abst_pair x y_2))) 
                                                v_Vjd0) v_Vjd0) v_Vjd) 
                                       (v_Vkd0:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (abst_first 
                                                       (abst_pair x y_1)) 
                                                    (abst_first 
                                                       (abst_pair x y_2)))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_A_equal 
                                                   (abst_first 
                                                      (abst_pair x y_1)) 
                                                   (abst_first 
                                                      (abst_pair x y_2))))) 
                                          v_Vkd0 v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                              v_Vmd) v_Vcd) _p_A_equal_transitive) 
                     (v_Vpd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal x 
                                     (abst_first (abst_pair x y_2))))))) =>
                      zen.Rall _p_A_T 
                        (v_Vzc:(zen.term _p_A_T) =>
                         zen.forall _p_A_T 
                           (v_Vad:(zen.term _p_A_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (_p_A_equal v_Vzc v_Vad))) 
                              (zen.triangle 
                                 (focal.is_true (_p_A_equal v_Vad v_Vzc))))) 
                        (abst_first (abst_pair x y_2)) 
                        (v_Vvd:
                         (zen.proof 
                            (zen.forall _p_A_T 
                               (v_Vad:(zen.term _p_A_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x y_2)) 
                                           v_Vad))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal v_Vad 
                                           (abst_first (abst_pair x y_2)))))))) =>
                         zen.Rall _p_A_T 
                           (v_Vad:(zen.term _p_A_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x y_2)) v_Vad))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal v_Vad 
                                       (abst_first (abst_pair x y_2)))))) x 
                           (v_Vwd:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (abst_first (abst_pair x y_2)) x))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal x 
                                           (abst_first (abst_pair x y_2))))))) =>
                            zen.Rimply 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal 
                                       (abst_first (abst_pair x y_2)) x))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_A_equal x 
                                       (abst_first (abst_pair x y_2))))) 
                              (v_Vxd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (abst_first (abst_pair x y_2)) 
                                              x))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal 
                                          (abst_first (abst_pair x y_2)) x))) 
                                 __I_1_1_2_LEMMA v_Vxd) 
                              (v_Vld:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal x 
                                           (abst_first (abst_pair x y_2)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_A_equal x 
                                          (abst_first (abst_pair x y_2))))) 
                                 v_Vld v_Vpd) v_Vwd) v_Vvd) 
                        _p_A_equal_symmetric))))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true (_p_A_equal (abst_first (abst_pair x y_2)) x))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (abst_first (abst_pair x y_2)) x))))) =>
               zen.Rall _p_A_T 
                 (v_Vac:(zen.term _p_A_T) =>
                  zen.forall _p_B_T 
                    (v_Vbc:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first (abst_pair v_Vac v_Vbc)) 
                             v_Vac)))) x 
                 (v_Vcc:
                  (zen.proof 
                     (zen.forall _p_B_T 
                        (v_Vbc:(zen.term _p_B_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_A_equal (abst_first (abst_pair x v_Vbc)) x))))) =>
                  zen.Rall _p_B_T 
                    (v_Vbc:(zen.term _p_B_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first (abst_pair x v_Vbc)) x))) 
                    y_2 
                    (v_Vdc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_A_equal (abst_first (abst_pair x y_2)) x)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first (abst_pair x y_2)) x))) 
                       v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_first))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true (_p_A_equal (abst_first (abst_pair x y_1)) x))) 
             (v_Vzb:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_A_equal (abst_first (abst_pair x y_1)) x))))) =>
              zen.Rall _p_A_T 
                (v_Vac:(zen.term _p_A_T) =>
                 zen.forall _p_B_T 
                   (v_Vbc:(zen.term _p_B_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first (abst_pair v_Vac v_Vbc)) 
                            v_Vac)))) x 
                (v_Vcc:
                 (zen.proof 
                    (zen.forall _p_B_T 
                       (v_Vbc:(zen.term _p_B_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first (abst_pair x v_Vbc)) x))))) =>
                 zen.Rall _p_B_T 
                   (v_Vbc:(zen.term _p_B_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (_p_A_equal (abst_first (abst_pair x v_Vbc)) x))) 
                   y_1 
                   (v_Vdc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (abst_first (abst_pair x y_1)) x)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_A_equal (abst_first (abst_pair x y_1)) x))) 
                      v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_first)))).

def Product_set__second_accessibility :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_element:(cc.eT _p_A_T) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) ->
  abst_pair_preserves_second:(dk_logic.eP 
                                (dk_logic.forall _p_A_T 
                                   (x:(cc.eT _p_A_T) =>
                                    dk_logic.forall _p_B_T 
                                      (y:(cc.eT _p_B_T) =>
                                       dk_logic.ebP 
                                         (_p_B_equal 
                                            (abst_second (abst_pair x y)) y))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_B_T 
       (x:(cc.eT _p_B_T) =>
        dk_logic.exists abst_T 
          (s:(cc.eT abst_T) => dk_logic.ebP (_p_B_equal (abst_second s) x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_second:((cc.eT abst_T) -> cc.eT _p_B_T) =>
  abst_pair_preserves_second:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_B_equal (abst_second (abst_pair x y)) y))))) =>
  (__J_1_LEMMA:
   (x:(cc.eT _p_B_T) ->
    dk_logic.eP 
      (dk_logic.ebP (_p_B_equal (abst_second (abst_pair _p_A_element x)) x))) =>
   zen.nnpp 
     (zen.forall _p_B_T 
        (v_Vzb:(zen.term _p_B_T) =>
         zen.exists abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true (_p_B_equal (abst_second v_Vac) v_Vzb))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_B_T 
               (v_Vzb:(zen.term _p_B_T) =>
                zen.exists abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true (_p_B_equal (abst_second v_Vac) v_Vzb))))))) =>
      zen.Rnotall _p_B_T 
        (v_Vzb:(zen.term _p_B_T) =>
         zen.exists abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.triangle 
              (focal.is_true (_p_B_equal (abst_second v_Vac) v_Vzb)))) 
        (v_Vcc:(zen.term _p_B_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.exists abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.triangle 
                     (focal.is_true (_p_B_equal (abst_second v_Vac) v_Vcc)))))) =>
         zen.Rall _p_B_T 
           (v_Vzb:(zen.term _p_B_T) =>
            zen.triangle 
              (focal.is_true 
                 (_p_B_equal (abst_second (abst_pair _p_A_element v_Vzb)) 
                    v_Vzb))) v_Vcc 
           (v_Vec:
            (zen.proof 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal 
                        (abst_second (abst_pair _p_A_element v_Vcc)) v_Vcc)))) =>
            zen.Rnotex abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle 
                 (focal.is_true (_p_B_equal (abst_second v_Vac) v_Vcc))) 
              (abst_pair _p_A_element v_Vcc) 
              (v_Vfc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (abst_second (abst_pair _p_A_element v_Vcc)) 
                              v_Vcc))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (abst_second (abst_pair _p_A_element v_Vcc)) v_Vcc))) 
                 v_Vec v_Vfc) v_Vdc) __J_1_LEMMA) v_Vbc)) 
    (x:(cc.eT _p_B_T) =>
     zen.nnpp 
       (zen.triangle 
          (focal.is_true 
             (_p_B_equal (abst_second (abst_pair _p_A_element x)) x))) 
       (v_Vzb:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (_p_B_equal (abst_second (abst_pair _p_A_element x)) x))))) =>
        zen.Rall _p_A_T 
          (v_Vac:(zen.term _p_A_T) =>
           zen.forall _p_B_T 
             (v_Vbc:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second (abst_pair v_Vac v_Vbc)) v_Vbc)))) 
          _p_A_element 
          (v_Vcc:
           (zen.proof 
              (zen.forall _p_B_T 
                 (v_Vbc:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (abst_second (abst_pair _p_A_element v_Vbc)) v_Vbc))))) =>
           zen.Rall _p_B_T 
             (v_Vbc:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_B_equal (abst_second (abst_pair _p_A_element v_Vbc)) 
                      v_Vbc))) x 
             (v_Vdc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (abst_second (abst_pair _p_A_element x)) x)))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal (abst_second (abst_pair _p_A_element x)) x))) 
                v_Vdc v_Vzb) v_Vcc) abst_pair_preserves_second)).

def Product_set__pair_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_pair_left_substitution_rule:(dk_logic.eP 
                                      (dk_logic.forall _p_A_T 
                                         (x_1:(cc.eT _p_A_T) =>
                                          dk_logic.forall _p_A_T 
                                            (x_2:(cc.eT _p_A_T) =>
                                             dk_logic.forall _p_B_T 
                                               (y:(cc.eT _p_B_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (_p_A_equal x_1 x_2)) 
                                                  (dk_logic.ebP 
                                                     (abst_equal 
                                                        (abst_pair x_1 y) 
                                                        (abst_pair x_2 y)))))))) ->
  abst_pair_right_substitution_rule:(dk_logic.eP 
                                       (dk_logic.forall _p_A_T 
                                          (x:(cc.eT _p_A_T) =>
                                           dk_logic.forall _p_B_T 
                                             (y_1:(cc.eT _p_B_T) =>
                                              dk_logic.forall _p_B_T 
                                                (y_2:(cc.eT _p_B_T) =>
                                                 dk_logic.imp 
                                                   (dk_logic.ebP 
                                                      (_p_B_equal y_1 y_2)) 
                                                   (dk_logic.ebP 
                                                      (abst_equal 
                                                         (abst_pair x y_1) 
                                                         (abst_pair x y_2)))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x_1:(cc.eT _p_A_T) =>
        dk_logic.forall _p_A_T 
          (x_2:(cc.eT _p_A_T) =>
           dk_logic.forall _p_B_T 
             (y_1:(cc.eT _p_B_T) =>
              dk_logic.forall _p_B_T 
                (y_2:(cc.eT _p_B_T) =>
                 dk_logic.imp (dk_logic.ebP (_p_A_equal x_1 x_2)) 
                   (dk_logic.imp (dk_logic.ebP (_p_B_equal y_1 y_2)) 
                      (dk_logic.ebP 
                         (abst_equal (abst_pair x_1 y_1) (abst_pair x_2 y_2)))))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_pair_left_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x_1:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (x_2:(cc.eT _p_A_T) =>
            dk_logic.forall _p_B_T 
              (y:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x_1 x_2)) 
                 (dk_logic.ebP 
                    (abst_equal (abst_pair x_1 y) (abst_pair x_2 y)))))))) =>
  abst_pair_right_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y_1:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (y_2:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal y_1 y_2)) 
                 (dk_logic.ebP 
                    (abst_equal (abst_pair x y_1) (abst_pair x y_2)))))))) =>
  zen.nnpp 
    (zen.forall _p_A_T 
       (v_Vkc:(zen.term _p_A_T) =>
        zen.forall _p_A_T 
          (v_Vlc:(zen.term _p_A_T) =>
           zen.forall _p_B_T 
             (v_Vmc:(zen.term _p_B_T) =>
              zen.forall _p_B_T 
                (v_Vnc:(zen.term _p_B_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vkc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_pair v_Vkc v_Vmc) 
                               (abst_pair v_Vlc v_Vnc)))))))))) 
    (v_Voc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_A_T 
              (v_Vkc:(zen.term _p_A_T) =>
               zen.forall _p_A_T 
                 (v_Vlc:(zen.term _p_A_T) =>
                  zen.forall _p_B_T 
                    (v_Vmc:(zen.term _p_B_T) =>
                     zen.forall _p_B_T 
                       (v_Vnc:(zen.term _p_B_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_A_equal v_Vkc v_Vlc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_pair v_Vkc v_Vmc) 
                                      (abst_pair v_Vlc v_Vnc)))))))))))) =>
     zen.Rnotall _p_A_T 
       (v_Vkc:(zen.term _p_A_T) =>
        zen.forall _p_A_T 
          (v_Vlc:(zen.term _p_A_T) =>
           zen.forall _p_B_T 
             (v_Vmc:(zen.term _p_B_T) =>
              zen.forall _p_B_T 
                (v_Vnc:(zen.term _p_B_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vkc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_pair v_Vkc v_Vmc) 
                               (abst_pair v_Vlc v_Vnc))))))))) 
       (v_Vpc:(zen.term _p_A_T) =>
        v_Vqc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_A_T 
                 (v_Vlc:(zen.term _p_A_T) =>
                  zen.forall _p_B_T 
                    (v_Vmc:(zen.term _p_B_T) =>
                     zen.forall _p_B_T 
                       (v_Vnc:(zen.term _p_B_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_A_equal v_Vpc v_Vlc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_pair v_Vpc v_Vmc) 
                                      (abst_pair v_Vlc v_Vnc))))))))))) =>
        zen.Rnotall _p_A_T 
          (v_Vlc:(zen.term _p_A_T) =>
           zen.forall _p_B_T 
             (v_Vmc:(zen.term _p_B_T) =>
              zen.forall _p_B_T 
                (v_Vnc:(zen.term _p_B_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vpc v_Vlc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_pair v_Vpc v_Vmc) 
                               (abst_pair v_Vlc v_Vnc)))))))) 
          (v_Vrc:(zen.term _p_A_T) =>
           v_Vsc:
           (zen.proof 
              (zen.not 
                 (zen.forall _p_B_T 
                    (v_Vmc:(zen.term _p_B_T) =>
                     zen.forall _p_B_T 
                       (v_Vnc:(zen.term _p_B_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_A_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_pair v_Vpc v_Vmc) 
                                      (abst_pair v_Vrc v_Vnc)))))))))) =>
           zen.Rnotall _p_B_T 
             (v_Vmc:(zen.term _p_B_T) =>
              zen.forall _p_B_T 
                (v_Vnc:(zen.term _p_B_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_pair v_Vpc v_Vmc) 
                               (abst_pair v_Vrc v_Vnc))))))) 
             (v_Vtc:(zen.term _p_B_T) =>
              v_Vuc:
              (zen.proof 
                 (zen.not 
                    (zen.forall _p_B_T 
                       (v_Vnc:(zen.term _p_B_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_A_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_B_equal v_Vtc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_pair v_Vpc v_Vtc) 
                                      (abst_pair v_Vrc v_Vnc))))))))) =>
              zen.Rnotall _p_B_T 
                (v_Vnc:(zen.term _p_B_T) =>
                 zen.imp 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vtc v_Vnc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_pair v_Vpc v_Vtc) 
                               (abst_pair v_Vrc v_Vnc)))))) 
                (v_Vvc:(zen.term _p_B_T) =>
                 v_Vwc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_A_equal v_Vpc v_Vrc))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_B_equal v_Vtc v_Vvc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_pair v_Vpc v_Vtc) 
                                      (abst_pair v_Vrc v_Vvc)))))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (_p_A_equal v_Vpc v_Vrc))) 
                   (zen.imp 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vtc v_Vvc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_pair v_Vpc v_Vtc) 
                               (abst_pair v_Vrc v_Vvc))))) 
                   (v_Vxc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_A_equal v_Vpc v_Vrc)))) =>
                    v_Vyc:
                    (zen.proof 
                       (zen.not 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_B_equal v_Vtc v_Vvc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_pair v_Vpc v_Vtc) 
                                      (abst_pair v_Vrc v_Vvc))))))) =>
                    zen.Rnotimply 
                      (zen.triangle (focal.is_true (_p_B_equal v_Vtc v_Vvc))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_pair v_Vpc v_Vtc) 
                               (abst_pair v_Vrc v_Vvc)))) 
                      (v_Vzc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (_p_B_equal v_Vtc v_Vvc)))) =>
                       v_Vad:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_pair v_Vpc v_Vtc) 
                                      (abst_pair v_Vrc v_Vvc)))))) =>
                       zen.Rall _p_A_T 
                         (v_Vbd:(zen.term _p_A_T) =>
                          zen.forall _p_B_T 
                            (v_Vmc:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vnc:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_pair v_Vbd v_Vmc) 
                                           (abst_pair v_Vbd v_Vnc))))))) 
                         v_Vrc 
                         (v_Vcd:
                          (zen.proof 
                             (zen.forall _p_B_T 
                                (v_Vmc:(zen.term _p_B_T) =>
                                 zen.forall _p_B_T 
                                   (v_Vnc:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal v_Vmc v_Vnc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_pair v_Vrc v_Vmc) 
                                               (abst_pair v_Vrc v_Vnc)))))))) =>
                          zen.Rall _p_B_T 
                            (v_Vmc:(zen.term _p_B_T) =>
                             zen.forall _p_B_T 
                               (v_Vnc:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vmc v_Vnc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_pair v_Vrc v_Vmc) 
                                           (abst_pair v_Vrc v_Vnc)))))) 
                            v_Vtc 
                            (v_Vdd:
                             (zen.proof 
                                (zen.forall _p_B_T 
                                   (v_Vnc:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal v_Vtc v_Vnc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_pair v_Vrc v_Vtc) 
                                               (abst_pair v_Vrc v_Vnc))))))) =>
                             zen.Rall _p_B_T 
                               (v_Vnc:(zen.term _p_B_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vtc v_Vnc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_pair v_Vrc v_Vtc) 
                                           (abst_pair v_Vrc v_Vnc))))) v_Vvc 
                               (v_Ved:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal v_Vtc v_Vvc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_pair v_Vrc v_Vtc) 
                                               (abst_pair v_Vrc v_Vvc)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true (_p_B_equal v_Vtc v_Vvc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_pair v_Vrc v_Vtc) 
                                           (abst_pair v_Vrc v_Vvc)))) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal v_Vtc v_Vvc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_B_equal v_Vtc v_Vvc))) v_Vzc 
                                     v_Vfd) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_pair v_Vrc v_Vtc) 
                                               (abst_pair v_Vrc v_Vvc))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_pair v_Vpc v_Vtc) 
                                                 (abst_pair v_Vrc v_Vtc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_pair v_Vpc v_Vtc) 
                                                    (abst_pair v_Vrc v_Vtc)))))) 
                                     (v_Vhd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_pair v_Vpc v_Vtc) 
                                                     (abst_pair v_Vrc v_Vtc)))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_pair v_Vpc 
                                                           v_Vtc) 
                                                        (abst_pair v_Vrc 
                                                           v_Vtc))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_pair v_Vpc v_Vtc) 
                                                 (abst_pair v_Vrc v_Vtc)))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_pair v_Vpc v_Vtc) 
                                                    (abst_pair v_Vrc v_Vtc))))) 
                                        (v_Vid:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_pair v_Vpc v_Vtc) 
                                                     (abst_pair v_Vrc v_Vtc))))) =>
                                         v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_pair v_Vpc 
                                                           v_Vtc) 
                                                        (abst_pair v_Vrc 
                                                           v_Vtc)))))) =>
                                         zen.Rall _p_A_T 
                                           (v_Vkc:(zen.term _p_A_T) =>
                                            zen.forall _p_A_T 
                                              (v_Vlc:(zen.term _p_A_T) =>
                                               zen.forall _p_B_T 
                                                 (v_Vkd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vkc 
                                                             v_Vlc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_pair 
                                                                v_Vkc v_Vkd) 
                                                             (abst_pair 
                                                                v_Vlc v_Vkd))))))) 
                                           v_Vpc 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.forall _p_A_T 
                                                  (v_Vlc:(zen.term _p_A_T) =>
                                                   zen.forall _p_B_T 
                                                     (v_Vkd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vpc v_Vlc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vkd) 
                                                                 (abst_pair 
                                                                    v_Vlc 
                                                                    v_Vkd)))))))) =>
                                            zen.Rall _p_A_T 
                                              (v_Vlc:(zen.term _p_A_T) =>
                                               zen.forall _p_B_T 
                                                 (v_Vkd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vpc 
                                                             v_Vlc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_pair 
                                                                v_Vpc v_Vkd) 
                                                             (abst_pair 
                                                                v_Vlc v_Vkd)))))) 
                                              v_Vrc 
                                              (v_Vmd:
                                               (zen.proof 
                                                  (zen.forall _p_B_T 
                                                     (v_Vkd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vpc v_Vrc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vkd) 
                                                                 (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vkd))))))) =>
                                               zen.Rall _p_B_T 
                                                 (v_Vkd:(zen.term _p_B_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vpc 
                                                             v_Vrc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_pair 
                                                                v_Vpc v_Vkd) 
                                                             (abst_pair 
                                                                v_Vrc v_Vkd))))) 
                                                 v_Vtc 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vpc v_Vrc))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vpc 
                                                             v_Vrc))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc) 
                                                             (abst_pair 
                                                                v_Vrc v_Vtc)))) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    v_Vpc 
                                                                    v_Vrc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                v_Vpc v_Vrc))) 
                                                       v_Vxc v_Vod) 
                                                    (v_Vpd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_pair 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vtc)))) 
                                                       v_Vpd v_Vjd) v_Vnd) 
                                                 v_Vmd) v_Vld) 
                                           abst_pair_left_substitution_rule) 
                                        v_Vhd) 
                                     (v_Vqd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_pair v_Vpc 
                                                           v_Vtc) 
                                                        (abst_pair v_Vrc 
                                                           v_Vtc)))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_pair v_Vpc 
                                                              v_Vtc) 
                                                           (abst_pair v_Vrc 
                                                              v_Vtc)))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_pair v_Vrc v_Vvc) 
                                              (abst_pair v_Vrc v_Vvc))) 
                                        (v_Vrd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_pair v_Vrc v_Vvc) 
                                                  (abst_pair v_Vrc v_Vvc)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vsd:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vsd)) 
                                           (abst_equal 
                                              (abst_pair v_Vrc v_Vtc) 
                                              (abst_pair v_Vrc v_Vvc)) 
                                           (abst_equal 
                                              (abst_pair v_Vpc v_Vtc) 
                                              (abst_pair v_Vrc v_Vvc)) 
                                           (v_Vtd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_pair v_Vrc 
                                                              v_Vtc) 
                                                           (abst_pair v_Vrc 
                                                              v_Vvc)) 
                                                        (abst_equal 
                                                           (abst_pair v_Vpc 
                                                              v_Vtc) 
                                                           (abst_pair v_Vrc 
                                                              v_Vvc)))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vud:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal v_Vud 
                                                          (abst_pair v_Vrc 
                                                             v_Vvc)) 
                                                       (abst_equal 
                                                          (abst_pair v_Vpc 
                                                             v_Vtc) 
                                                          (abst_pair v_Vrc 
                                                             v_Vvc))))) 
                                              (abst_pair v_Vrc v_Vtc) 
                                              (abst_pair v_Vpc v_Vtc) 
                                              (v_Vvd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_pair v_Vrc 
                                                              v_Vtc) 
                                                           (abst_pair v_Vpc 
                                                              v_Vtc))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_pair v_Vpc 
                                                             v_Vtc) 
                                                          (abst_pair v_Vrc 
                                                             v_Vtc)))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc) 
                                                             (abst_pair 
                                                                v_Vrc v_Vtc))))) 
                                                 (v_Vwd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_pair v_Vpc 
                                                             v_Vtc) 
                                                          (abst_pair v_Vrc 
                                                             v_Vtc))) 
                                                    (v_Vxd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_pair 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_pair 
                                                                 v_Vrc v_Vtc)))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc) 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc))) 
                                                       (v_Vyd:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vzd:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vzd 
                                                                (abst_pair 
                                                                   v_Vpc 
                                                                   v_Vtc))) 
                                                          (abst_pair v_Vpc 
                                                             v_Vtc) 
                                                          (abst_pair v_Vrc 
                                                             v_Vtc) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                             v_Vxd v_Vid) 
                                                          (v_Vae:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vbe:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vbe)) 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc) 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc) 
                                                             (v_Vce:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                              zen.Rnoteq 
                                                                abst_T 
                                                                (abst_pair 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                v_Vce) 
                                                             (v_Vae:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc))) 
                                                                v_Vae v_Vvd) 
                                                             v_Vae) v_Vyd) 
                                                       (v_Vce:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                        zen.Rnoteq abst_T 
                                                          (abst_pair v_Vpc 
                                                             v_Vtc) v_Vce)) 
                                                    v_Vwd) 
                                                 (v_Vde:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc) 
                                                             (abst_pair 
                                                                v_Vrc v_Vtc)))) 
                                                    (v_Vpd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vee:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vfe:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vge:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vee 
                                                                    v_Vfe))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vee 
                                                                    v_Vge))))))) 
                                                       (abst_pair v_Vpc v_Vtc) 
                                                       (v_Vhe:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vfe:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vge:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vge)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vfe:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vge:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vge)))))) 
                                                          (abst_pair v_Vrc 
                                                             v_Vtc) 
                                                          (v_Vie:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vge:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vge))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vge))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vge:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vge))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vge))))) 
                                                             (abst_pair 
                                                                v_Vrc v_Vvc) 
                                                             (v_Vje:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                (v_Vjd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                   v_Vpd 
                                                                   v_Vjd) 
                                                                (v_Vke:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                   (v_Vle:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vgd 
                                                                    v_Vle) 
                                                                   (v_Vme:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vsd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vsd)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vud:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vud 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vce) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Voe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Voe) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (v_Vpe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))) 
                                                                    v_Vrd 
                                                                    v_Vpe) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    v_Vne) 
                                                                    v_Vne) 
                                                                    v_Vne) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vme 
                                                                    v_Vad) 
                                                                    v_Vme) 
                                                                   v_Vke) 
                                                                v_Vje) v_Vie) 
                                                          v_Vhe) 
                                                       abst_equal_transitive) 
                                                    v_Vde) v_Vqd) 
                                              (v_Vne:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_pair 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_pair 
                                                                 v_Vrc v_Vvc)) 
                                                           (abst_equal 
                                                              (abst_pair 
                                                                 v_Vpc v_Vtc) 
                                                              (abst_pair 
                                                                 v_Vrc v_Vvc)))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Voe:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc) 
                                                             v_Voe) 
                                                          (abst_equal 
                                                             (abst_pair 
                                                                v_Vpc v_Vtc) 
                                                             (abst_pair 
                                                                v_Vrc v_Vvc))))) 
                                                 (abst_pair v_Vrc v_Vvc) 
                                                 (abst_pair v_Vrc v_Vvc) 
                                                 (v_Vpe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_pair 
                                                                 v_Vrc v_Vvc) 
                                                              (abst_pair 
                                                                 v_Vrc v_Vvc))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          (abst_pair v_Vrc 
                                                             v_Vvc) 
                                                          (abst_pair v_Vrc 
                                                             v_Vvc))) v_Vrd 
                                                    v_Vpe) 
                                                 (v_Vne:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                              (abst_equal 
                                                                 (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                 (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_equal 
                                                       (abst_pair v_Vpc v_Vtc) 
                                                       (abst_pair v_Vrc v_Vvc)) 
                                                    v_Vne) v_Vne) v_Vtd) 
                                           (v_Vme:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_pair v_Vpc 
                                                           v_Vtc) 
                                                        (abst_pair v_Vrc 
                                                           v_Vvc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_pair v_Vpc v_Vtc) 
                                                       (abst_pair v_Vrc v_Vvc)))) 
                                              v_Vme v_Vad) v_Vgd) 
                                        (v_Vpe:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_pair v_Vrc v_Vvc) 
                                                     (abst_pair v_Vrc v_Vvc))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_pair v_Vrc v_Vvc) 
                                                    (abst_pair v_Vrc v_Vvc)))) 
                                           (v_Vqe:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_pair v_Vrc 
                                                           v_Vvc) 
                                                        (abst_pair v_Vrc 
                                                           v_Vvc))))) =>
                                            zen.Rall abst_T 
                                              (v_Vee:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vfe:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vge:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vee v_Vfe))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vfe 
                                                                   v_Vge))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vee 
                                                                   v_Vge))))))) 
                                              (abst_pair v_Vrc v_Vtc) 
                                              (v_Vre:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vfe:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vge:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vge)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vfe:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vge:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                v_Vfe))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Vfe 
                                                                   v_Vge))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vge)))))) 
                                                 (abst_pair v_Vrc v_Vvc) 
                                                 (v_Vse:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vge:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    v_Vge))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vge))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vge:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vvc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   v_Vge))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   v_Vge))))) 
                                                    (abst_pair v_Vrc v_Vvc) 
                                                    (v_Vte:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (
                                                                    abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vvc)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                       (v_Vle:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          v_Vgd v_Vle) 
                                                       (v_Vue:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                          (v_Vve:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                             v_Vqe v_Vve) 
                                                          (v_Vgd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vsd:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vsd)) 
                                                             (abst_equal 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vvc)) 
                                                             (abst_equal 
                                                                (abst_pair 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vvc)) 
                                                             (v_Vtd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vud:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Vud 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                (abst_pair 
                                                                   v_Vrc 
                                                                   v_Vtc) 
                                                                (abst_pair 
                                                                   v_Vpc 
                                                                   v_Vtc) 
                                                                (v_Vvd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))))) 
                                                                   (v_Vwd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))) 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vxd 
                                                                    v_Vvd) 
                                                                    v_Vwd) 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (v_Vpd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vee:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vee 
                                                                    v_Vfe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vee 
                                                                    v_Vge))))))) 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vge)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vfe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vfe))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfe 
                                                                    v_Vge))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vge)))))) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vge))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vge))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vge:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    v_Vge))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Vge))))) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc)))) 
                                                                    v_Vpd 
                                                                    v_Vjd) 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vgd 
                                                                    v_Vle) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                    v_Vme 
                                                                    v_Vad) 
                                                                    v_Vke) 
                                                                    v_Vje) 
                                                                    v_Vie) 
                                                                    v_Vhe) 
                                                                    abst_equal_transitive) 
                                                                    v_Vde) 
                                                                   v_Vqd) 
                                                                (v_Vne:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Voe:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    v_Voe) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                   (v_Vpe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc) 
                                                                    v_Vpe) 
                                                                   (v_Vne:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)) 
                                                                    v_Vne) 
                                                                   v_Vne) 
                                                                v_Vtd) 
                                                             (v_Vme:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_pair 
                                                                    v_Vpc 
                                                                    v_Vtc) 
                                                                    (abst_pair 
                                                                    v_Vrc 
                                                                    v_Vvc)))) 
                                                                v_Vme v_Vad) 
                                                             v_Vgd) v_Vue) 
                                                       v_Vte) v_Vse) v_Vre) 
                                              abst_equal_transitive) 
                                           (v_Vve:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_pair v_Vrc 
                                                              v_Vvc) 
                                                           (abst_pair v_Vrc 
                                                              v_Vvc)))))) =>
                                            zen.Rnoteq abst_T 
                                              (abst_pair v_Vrc v_Vvc) v_Vpe)))) 
                                  v_Ved) v_Vdd) v_Vcd) 
                         abst_pair_right_substitution_rule) v_Vyc) v_Vwc) 
                v_Vuc) v_Vsc) v_Vqc) v_Voc).

def Categorical_property_of_Product_set__morph :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_P_T:cc.uT ->
  _p_E_T:cc.uT ->
  _p_P_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT _p_P_T) ->
  _p_M_a_morph:((cc.eT _p_E_T) -> cc.eT _p_A_T) ->
  _p_M_b_morph:((cc.eT _p_E_T) -> cc.eT _p_B_T) ->
  x:(cc.eT _p_E_T) -> cc.eT _p_P_T
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_P_T:cc.uT =>
  _p_E_T:cc.uT =>
  _p_P_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT _p_P_T) =>
  _p_M_a_morph:((cc.eT _p_E_T) -> cc.eT _p_A_T) =>
  _p_M_b_morph:((cc.eT _p_E_T) -> cc.eT _p_B_T) =>
  x:(cc.eT _p_E_T) => _p_P_pair (_p_M_a_morph x) (_p_M_b_morph x).

def Categorical_property_of_Product_set__morph_first_factorize :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_P_T:cc.uT ->
  _p_E_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_P_first:((cc.eT _p_P_T) -> cc.eT _p_A_T) ->
  _p_P_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT _p_P_T) ->
  _p_P_pair_preserves_first:(dk_logic.eP 
                               (dk_logic.forall _p_A_T 
                                  (x:(cc.eT _p_A_T) =>
                                   dk_logic.forall _p_B_T 
                                     (y:(cc.eT _p_B_T) =>
                                      dk_logic.ebP 
                                        (_p_A_equal 
                                           (_p_P_first (_p_P_pair x y)) x))))) ->
  _p_M_a_morph:((cc.eT _p_E_T) -> cc.eT _p_A_T) ->
  _p_M_b_morph:((cc.eT _p_E_T) -> cc.eT _p_B_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_E_T 
       (x:(cc.eT _p_E_T) =>
        dk_logic.ebP 
          (_p_A_equal 
             (_p_P_first 
                (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                   _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
             (_p_M_a_morph x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_P_T:cc.uT =>
  _p_E_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_P_first:((cc.eT _p_P_T) -> cc.eT _p_A_T) =>
  _p_P_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT _p_P_T) =>
  _p_P_pair_preserves_first:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_A_equal (_p_P_first (_p_P_pair x y)) x))))) =>
  _p_M_a_morph:((cc.eT _p_E_T) -> cc.eT _p_A_T) =>
  _p_M_b_morph:((cc.eT _p_E_T) -> cc.eT _p_B_T) =>
  zen.nnpp 
    (zen.forall _p_E_T 
       (v_Vzb:(zen.term _p_E_T) =>
        zen.triangle 
          (focal.is_true 
             (_p_A_equal 
                (_p_P_first 
                   (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                      _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph v_Vzb)) 
                (_p_M_a_morph v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_E_T 
              (v_Vzb:(zen.term _p_E_T) =>
               zen.triangle 
                 (focal.is_true 
                    (_p_A_equal 
                       (_p_P_first 
                          (Categorical_property_of_Product_set__morph _p_A_T 
                             _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                             _p_M_b_morph v_Vzb)) (_p_M_a_morph v_Vzb))))))) =>
     zen.Rnotall _p_E_T 
       (v_Vzb:(zen.term _p_E_T) =>
        zen.triangle 
          (focal.is_true 
             (_p_A_equal 
                (_p_P_first 
                   (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                      _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph v_Vzb)) 
                (_p_M_a_morph v_Vzb)))) 
       (v_Vbc:(zen.term _p_E_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (_p_A_equal 
                       (_p_P_first 
                          (_p_P_pair (_p_M_a_morph v_Vbc) 
                             (_p_M_b_morph v_Vbc))) (_p_M_a_morph v_Vbc)))))) =>
        zen.Rall _p_A_T 
          (v_Vdc:(zen.term _p_A_T) =>
           zen.forall _p_B_T 
             (v_Vec:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_A_equal (_p_P_first (_p_P_pair v_Vdc v_Vec)) v_Vdc)))) 
          (_p_M_a_morph v_Vbc) 
          (v_Vfc:
           (zen.proof 
              (zen.forall _p_B_T 
                 (v_Vec:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_A_equal 
                          (_p_P_first (_p_P_pair (_p_M_a_morph v_Vbc) v_Vec)) 
                          (_p_M_a_morph v_Vbc)))))) =>
           zen.Rall _p_B_T 
             (v_Vec:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_A_equal 
                      (_p_P_first (_p_P_pair (_p_M_a_morph v_Vbc) v_Vec)) 
                      (_p_M_a_morph v_Vbc)))) (_p_M_b_morph v_Vbc) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal 
                          (_p_P_first 
                             (_p_P_pair (_p_M_a_morph v_Vbc) 
                                (_p_M_b_morph v_Vbc))) (_p_M_a_morph v_Vbc))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal 
                         (_p_P_first 
                            (_p_P_pair (_p_M_a_morph v_Vbc) 
                               (_p_M_b_morph v_Vbc))) (_p_M_a_morph v_Vbc)))) 
                v_Vgc v_Vcc) v_Vfc) _p_P_pair_preserves_first) v_Vac).

def Categorical_property_of_Product_set__morph_second_factorize :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_P_T:cc.uT ->
  _p_E_T:cc.uT ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_P_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT _p_P_T) ->
  _p_P_second:((cc.eT _p_P_T) -> cc.eT _p_B_T) ->
  _p_P_pair_preserves_second:(dk_logic.eP 
                                (dk_logic.forall _p_A_T 
                                   (x:(cc.eT _p_A_T) =>
                                    dk_logic.forall _p_B_T 
                                      (y:(cc.eT _p_B_T) =>
                                       dk_logic.ebP 
                                         (_p_B_equal 
                                            (_p_P_second (_p_P_pair x y)) y))))) ->
  _p_M_a_morph:((cc.eT _p_E_T) -> cc.eT _p_A_T) ->
  _p_M_b_morph:((cc.eT _p_E_T) -> cc.eT _p_B_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_E_T 
       (x:(cc.eT _p_E_T) =>
        dk_logic.ebP 
          (_p_B_equal 
             (_p_P_second 
                (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                   _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
             (_p_M_b_morph x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_P_T:cc.uT =>
  _p_E_T:cc.uT =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_P_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT _p_P_T) =>
  _p_P_second:((cc.eT _p_P_T) -> cc.eT _p_B_T) =>
  _p_P_pair_preserves_second:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_B_equal (_p_P_second (_p_P_pair x y)) y))))) =>
  _p_M_a_morph:((cc.eT _p_E_T) -> cc.eT _p_A_T) =>
  _p_M_b_morph:((cc.eT _p_E_T) -> cc.eT _p_B_T) =>
  zen.nnpp 
    (zen.forall _p_E_T 
       (v_Vzb:(zen.term _p_E_T) =>
        zen.triangle 
          (focal.is_true 
             (_p_B_equal 
                (_p_P_second 
                   (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                      _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph v_Vzb)) 
                (_p_M_b_morph v_Vzb))))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall _p_E_T 
              (v_Vzb:(zen.term _p_E_T) =>
               zen.triangle 
                 (focal.is_true 
                    (_p_B_equal 
                       (_p_P_second 
                          (Categorical_property_of_Product_set__morph _p_A_T 
                             _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                             _p_M_b_morph v_Vzb)) (_p_M_b_morph v_Vzb))))))) =>
     zen.Rnotall _p_E_T 
       (v_Vzb:(zen.term _p_E_T) =>
        zen.triangle 
          (focal.is_true 
             (_p_B_equal 
                (_p_P_second 
                   (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                      _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph v_Vzb)) 
                (_p_M_b_morph v_Vzb)))) 
       (v_Vbc:(zen.term _p_E_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not 
              (zen.triangle 
                 (focal.is_true 
                    (_p_B_equal 
                       (_p_P_second 
                          (_p_P_pair (_p_M_a_morph v_Vbc) 
                             (_p_M_b_morph v_Vbc))) (_p_M_b_morph v_Vbc)))))) =>
        zen.Rall _p_A_T 
          (v_Vdc:(zen.term _p_A_T) =>
           zen.forall _p_B_T 
             (v_Vec:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_B_equal (_p_P_second (_p_P_pair v_Vdc v_Vec)) v_Vec)))) 
          (_p_M_a_morph v_Vbc) 
          (v_Vfc:
           (zen.proof 
              (zen.forall _p_B_T 
                 (v_Vec:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (_p_P_second (_p_P_pair (_p_M_a_morph v_Vbc) v_Vec)) 
                          v_Vec))))) =>
           zen.Rall _p_B_T 
             (v_Vec:(zen.term _p_B_T) =>
              zen.triangle 
                (focal.is_true 
                   (_p_B_equal 
                      (_p_P_second (_p_P_pair (_p_M_a_morph v_Vbc) v_Vec)) 
                      v_Vec))) (_p_M_b_morph v_Vbc) 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (_p_P_second 
                             (_p_P_pair (_p_M_a_morph v_Vbc) 
                                (_p_M_b_morph v_Vbc))) (_p_M_b_morph v_Vbc))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (_p_B_equal 
                         (_p_P_second 
                            (_p_P_pair (_p_M_a_morph v_Vbc) 
                               (_p_M_b_morph v_Vbc))) (_p_M_b_morph v_Vbc)))) 
                v_Vgc v_Vcc) v_Vfc) _p_P_pair_preserves_second) v_Vac).

def Categorical_property_of_Product_set__morph_substitution_rule :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_P_T:cc.uT ->
  _p_E_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.forall _p_A_T 
                                (y:(cc.eT _p_A_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_A_equal x y)) 
                                   (dk_logic.ebP (_p_A_equal y x)))))) ->
  _p_A_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_A_T 
                              (x:(cc.eT _p_A_T) =>
                               dk_logic.forall _p_A_T 
                                 (y:(cc.eT _p_A_T) =>
                                  dk_logic.forall _p_A_T 
                                    (z:(cc.eT _p_A_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_A_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_A_equal y z)) 
                                          (dk_logic.ebP (_p_A_equal x z)))))))) ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.forall _p_B_T 
                                (y:(cc.eT _p_B_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (_p_B_equal x y)) 
                                   (dk_logic.ebP (_p_B_equal y x)))))) ->
  _p_B_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall _p_B_T 
                              (x:(cc.eT _p_B_T) =>
                               dk_logic.forall _p_B_T 
                                 (y:(cc.eT _p_B_T) =>
                                  dk_logic.forall _p_B_T 
                                    (z:(cc.eT _p_B_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (_p_B_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (_p_B_equal y z)) 
                                          (dk_logic.ebP (_p_B_equal x z)))))))) ->
  _p_P_first:((cc.eT _p_P_T) -> cc.eT _p_A_T) ->
  _p_P_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT _p_P_T) ->
  _p_P_second:((cc.eT _p_P_T) -> cc.eT _p_B_T) ->
  _p_P_pair_preserves_first:(dk_logic.eP 
                               (dk_logic.forall _p_A_T 
                                  (x:(cc.eT _p_A_T) =>
                                   dk_logic.forall _p_B_T 
                                     (y:(cc.eT _p_B_T) =>
                                      dk_logic.ebP 
                                        (_p_A_equal 
                                           (_p_P_first (_p_P_pair x y)) x))))) ->
  _p_P_equal:((cc.eT _p_P_T) -> (cc.eT _p_P_T) -> cc.eT basics.bool__t) ->
  _p_P_pair_preserves_second:(dk_logic.eP 
                                (dk_logic.forall _p_A_T 
                                   (x:(cc.eT _p_A_T) =>
                                    dk_logic.forall _p_B_T 
                                      (y:(cc.eT _p_B_T) =>
                                       dk_logic.ebP 
                                         (_p_B_equal 
                                            (_p_P_second (_p_P_pair x y)) y))))) ->
  _p_P_equal_spec:(dk_logic.eP 
                     (dk_logic.forall _p_P_T 
                        (x:(cc.eT _p_P_T) =>
                         dk_logic.forall _p_P_T 
                           (y:(cc.eT _p_P_T) =>
                            dk_logic.eqv (dk_logic.ebP (_p_P_equal x y)) 
                              (dk_logic.and 
                                 (dk_logic.ebP 
                                    (_p_A_equal (_p_P_first x) (_p_P_first y))) 
                                 (dk_logic.ebP 
                                    (_p_B_equal (_p_P_second x) 
                                       (_p_P_second y)))))))) ->
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) ->
  _p_M_a_morph:((cc.eT _p_E_T) -> cc.eT _p_A_T) ->
  _p_M_a_morph_substitution_rule:(dk_logic.eP 
                                    (dk_logic.forall _p_E_T 
                                       (x:(cc.eT _p_E_T) =>
                                        dk_logic.forall _p_E_T 
                                          (y:(cc.eT _p_E_T) =>
                                           dk_logic.imp 
                                             (dk_logic.ebP (_p_E_equal x y)) 
                                             (dk_logic.ebP 
                                                (_p_A_equal (_p_M_a_morph x) 
                                                   (_p_M_a_morph y))))))) ->
  _p_M_b_morph:((cc.eT _p_E_T) -> cc.eT _p_B_T) ->
  _p_M_b_morph_substitution_rule:(dk_logic.eP 
                                    (dk_logic.forall _p_E_T 
                                       (x:(cc.eT _p_E_T) =>
                                        dk_logic.forall _p_E_T 
                                          (y:(cc.eT _p_E_T) =>
                                           dk_logic.imp 
                                             (dk_logic.ebP (_p_E_equal x y)) 
                                             (dk_logic.ebP 
                                                (_p_B_equal (_p_M_b_morph x) 
                                                   (_p_M_b_morph y))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_E_T 
       (x:(cc.eT _p_E_T) =>
        dk_logic.forall _p_E_T 
          (y:(cc.eT _p_E_T) =>
           dk_logic.imp (dk_logic.ebP (_p_E_equal x y)) 
             (dk_logic.ebP 
                (_p_P_equal 
                   (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                      _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph x) 
                   (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                      _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph y))))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_P_T:cc.uT =>
  _p_E_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  _p_P_first:((cc.eT _p_P_T) -> cc.eT _p_A_T) =>
  _p_P_pair:((cc.eT _p_A_T) -> (cc.eT _p_B_T) -> cc.eT _p_P_T) =>
  _p_P_second:((cc.eT _p_P_T) -> cc.eT _p_B_T) =>
  _p_P_pair_preserves_first:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_A_equal (_p_P_first (_p_P_pair x y)) x))))) =>
  _p_P_equal:((cc.eT _p_P_T) -> (cc.eT _p_P_T) -> cc.eT basics.bool__t) =>
  _p_P_pair_preserves_second:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.ebP (_p_B_equal (_p_P_second (_p_P_pair x y)) y))))) =>
  _p_P_equal_spec:
  (dk_logic.eP 
     (dk_logic.forall _p_P_T 
        (x:(cc.eT _p_P_T) =>
         dk_logic.forall _p_P_T 
           (y:(cc.eT _p_P_T) =>
            dk_logic.eqv (dk_logic.ebP (_p_P_equal x y)) 
              (dk_logic.and 
                 (dk_logic.ebP (_p_A_equal (_p_P_first x) (_p_P_first y))) 
                 (dk_logic.ebP (_p_B_equal (_p_P_second x) (_p_P_second y)))))))) =>
  _p_E_equal:((cc.eT _p_E_T) -> (cc.eT _p_E_T) -> cc.eT basics.bool__t) =>
  _p_M_a_morph:((cc.eT _p_E_T) -> cc.eT _p_A_T) =>
  _p_M_a_morph_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_E_T 
        (x:(cc.eT _p_E_T) =>
         dk_logic.forall _p_E_T 
           (y:(cc.eT _p_E_T) =>
            dk_logic.imp (dk_logic.ebP (_p_E_equal x y)) 
              (dk_logic.ebP (_p_A_equal (_p_M_a_morph x) (_p_M_a_morph y))))))) =>
  _p_M_b_morph:((cc.eT _p_E_T) -> cc.eT _p_B_T) =>
  _p_M_b_morph_substitution_rule:
  (dk_logic.eP 
     (dk_logic.forall _p_E_T 
        (x:(cc.eT _p_E_T) =>
         dk_logic.forall _p_E_T 
           (y:(cc.eT _p_E_T) =>
            dk_logic.imp (dk_logic.ebP (_p_E_equal x y)) 
              (dk_logic.ebP (_p_B_equal (_p_M_b_morph x) (_p_M_b_morph y))))))) =>
  (__N_1_LEMMA:
   (x:(cc.eT _p_E_T) ->
    y:(cc.eT _p_E_T) ->
    H:(dk_logic.eP (dk_logic.ebP (_p_E_equal x y))) ->
    dk_logic.eP 
      (dk_logic.ebP 
         (_p_P_equal 
            (Categorical_property_of_Product_set__morph _p_A_T _p_B_T _p_P_T 
               _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph x) 
            (Categorical_property_of_Product_set__morph _p_A_T _p_B_T _p_P_T 
               _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph y)))) =>
   zen.nnpp 
     (zen.forall _p_E_T 
        (v_Vzb:(zen.term _p_E_T) =>
         zen.forall _p_E_T 
           (v_Vac:(zen.term _p_E_T) =>
            zen.imp (zen.triangle (focal.is_true (_p_E_equal v_Vzb v_Vac))) 
              (zen.triangle 
                 (focal.is_true 
                    (_p_P_equal 
                       (Categorical_property_of_Product_set__morph _p_A_T 
                          _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                          _p_M_b_morph v_Vzb) 
                       (Categorical_property_of_Product_set__morph _p_A_T 
                          _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                          _p_M_b_morph v_Vac))))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_E_T 
               (v_Vzb:(zen.term _p_E_T) =>
                zen.forall _p_E_T 
                  (v_Vac:(zen.term _p_E_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (_p_E_equal v_Vzb v_Vac))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_P_equal 
                              (Categorical_property_of_Product_set__morph 
                                 _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                 _p_M_a_morph _p_M_b_morph v_Vzb) 
                              (Categorical_property_of_Product_set__morph 
                                 _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                 _p_M_a_morph _p_M_b_morph v_Vac))))))))) =>
      zen.Raxiom 
        (zen.forall _p_E_T 
           (v_Vzb:(zen.term _p_E_T) =>
            zen.forall _p_E_T 
              (v_Vac:(zen.term _p_E_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (_p_E_equal v_Vzb v_Vac))) 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_P_equal 
                          (Categorical_property_of_Product_set__morph _p_A_T 
                             _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                             _p_M_b_morph v_Vzb) 
                          (Categorical_property_of_Product_set__morph _p_A_T 
                             _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                             _p_M_b_morph v_Vac))))))) __N_1_LEMMA v_Vbc)) 
    (x:(cc.eT _p_E_T) =>
     y:(cc.eT _p_E_T) =>
     H:(dk_logic.eP (dk_logic.ebP (_p_E_equal x y))) =>
     (__N_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (_p_A_equal 
               (_p_P_first 
                  (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                     _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
               (_p_P_first 
                  (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                     _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph y))))) =>
      (__N_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_B_equal 
                (_p_P_second 
                   (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                      _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
                (_p_P_second 
                   (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                      _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph y))))) =>
       zen.nnpp 
         (zen.triangle 
            (focal.is_true 
               (_p_P_equal 
                  (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                     _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph x) 
                  (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                     _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph y)))) 
         (v_Vac:
          (zen.proof 
             (zen.not 
                (zen.triangle 
                   (focal.is_true 
                      (_p_P_equal 
                         (Categorical_property_of_Product_set__morph _p_A_T 
                            _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                            _p_M_b_morph x) 
                         (Categorical_property_of_Product_set__morph _p_A_T 
                            _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                            _p_M_b_morph y)))))) =>
          zen.Rall _p_P_T 
            (v_Vbc:(zen.term _p_P_T) =>
             zen.forall _p_P_T 
               (v_Vcc:(zen.term _p_P_T) =>
                zen.eqv 
                  (zen.triangle (focal.is_true (_p_P_equal v_Vbc v_Vcc))) 
                  (zen.and 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal (_p_P_first v_Vbc) (_p_P_first v_Vcc)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal (_p_P_second v_Vbc) 
                              (_p_P_second v_Vcc))))))) 
            (Categorical_property_of_Product_set__morph _p_A_T _p_B_T _p_P_T 
               _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph x) 
            (v_Vdc:
             (zen.proof 
                (zen.forall _p_P_T 
                   (v_Vcc:(zen.term _p_P_T) =>
                    zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_P_equal 
                               (Categorical_property_of_Product_set__morph 
                                  _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                  _p_M_a_morph _p_M_b_morph x) v_Vcc))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal 
                                  (_p_P_first 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
                                  (_p_P_first v_Vcc)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (_p_P_second 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
                                  (_p_P_second v_Vcc)))))))) =>
             zen.Rall _p_P_T 
               (v_Vcc:(zen.term _p_P_T) =>
                zen.eqv 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_P_equal 
                           (Categorical_property_of_Product_set__morph 
                              _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                              _p_M_a_morph _p_M_b_morph x) v_Vcc))) 
                  (zen.and 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal 
                              (_p_P_first 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph x)) 
                              (_p_P_first v_Vcc)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (_p_P_second 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph x)) 
                              (_p_P_second v_Vcc)))))) 
               (Categorical_property_of_Product_set__morph _p_A_T _p_B_T 
                  _p_P_T _p_E_T _p_P_pair _p_M_a_morph _p_M_b_morph y) 
               (v_Vec:
                (zen.proof 
                   (zen.eqv 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_P_equal 
                               (Categorical_property_of_Product_set__morph 
                                  _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                  _p_M_a_morph _p_M_b_morph x) 
                               (Categorical_property_of_Product_set__morph 
                                  _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                  _p_M_a_morph _p_M_b_morph y)))) 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal 
                                  (_p_P_first 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
                                  (_p_P_first 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph y))))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (_p_P_second 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
                                  (_p_P_second 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph y)))))))) =>
                zen.Requiv 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_P_equal 
                           (Categorical_property_of_Product_set__morph 
                              _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                              _p_M_a_morph _p_M_b_morph x) 
                           (Categorical_property_of_Product_set__morph 
                              _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                              _p_M_a_morph _p_M_b_morph y)))) 
                  (zen.and 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal 
                              (_p_P_first 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph x)) 
                              (_p_P_first 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph y))))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (_p_P_second 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph x)) 
                              (_p_P_second 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph y)))))) 
                  (v_Vac0:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_P_equal 
                                  (Categorical_property_of_Product_set__morph 
                                     _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                     _p_M_a_morph _p_M_b_morph x) 
                                  (Categorical_property_of_Product_set__morph 
                                     _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                     _p_M_a_morph _p_M_b_morph y)))))) =>
                   v_Vfc:
                   (zen.proof 
                      (zen.not 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal 
                                     (_p_P_first 
                                        (Categorical_property_of_Product_set__morph 
                                           _p_A_T _p_B_T _p_P_T _p_E_T 
                                           _p_P_pair _p_M_a_morph 
                                           _p_M_b_morph x)) 
                                     (_p_P_first 
                                        (Categorical_property_of_Product_set__morph 
                                           _p_A_T _p_B_T _p_P_T _p_E_T 
                                           _p_P_pair _p_M_a_morph 
                                           _p_M_b_morph y))))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal 
                                     (_p_P_second 
                                        (Categorical_property_of_Product_set__morph 
                                           _p_A_T _p_B_T _p_P_T _p_E_T 
                                           _p_P_pair _p_M_a_morph 
                                           _p_M_b_morph x)) 
                                     (_p_P_second 
                                        (Categorical_property_of_Product_set__morph 
                                           _p_A_T _p_B_T _p_P_T _p_E_T 
                                           _p_P_pair _p_M_a_morph 
                                           _p_M_b_morph y)))))))) =>
                   zen.Rnotand 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_A_equal 
                              (_p_P_first 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph x)) 
                              (_p_P_first 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph y))))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_B_equal 
                              (_p_P_second 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph x)) 
                              (_p_P_second 
                                 (Categorical_property_of_Product_set__morph 
                                    _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                    _p_M_a_morph _p_M_b_morph y))))) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal 
                                     (_p_P_first 
                                        (Categorical_property_of_Product_set__morph 
                                           _p_A_T _p_B_T _p_P_T _p_E_T 
                                           _p_P_pair _p_M_a_morph 
                                           _p_M_b_morph x)) 
                                     (_p_P_first 
                                        (Categorical_property_of_Product_set__morph 
                                           _p_A_T _p_B_T _p_P_T _p_E_T 
                                           _p_P_pair _p_M_a_morph 
                                           _p_M_b_morph y))))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_A_equal 
                                 (_p_P_first 
                                    (Categorical_property_of_Product_set__morph 
                                       _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                       _p_M_a_morph _p_M_b_morph x)) 
                                 (_p_P_first 
                                    (Categorical_property_of_Product_set__morph 
                                       _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                       _p_M_a_morph _p_M_b_morph y))))) 
                        __N_1_1_LEMMA v_Vgc) 
                     (v_Vhc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal 
                                     (_p_P_second 
                                        (Categorical_property_of_Product_set__morph 
                                           _p_A_T _p_B_T _p_P_T _p_E_T 
                                           _p_P_pair _p_M_a_morph 
                                           _p_M_b_morph x)) 
                                     (_p_P_second 
                                        (Categorical_property_of_Product_set__morph 
                                           _p_A_T _p_B_T _p_P_T _p_E_T 
                                           _p_P_pair _p_M_a_morph 
                                           _p_M_b_morph y))))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (_p_P_second 
                                    (Categorical_property_of_Product_set__morph 
                                       _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                       _p_M_a_morph _p_M_b_morph x)) 
                                 (_p_P_second 
                                    (Categorical_property_of_Product_set__morph 
                                       _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                       _p_M_a_morph _p_M_b_morph y))))) 
                        __N_1_2_LEMMA v_Vhc) v_Vfc) 
                  (v_Vic:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_P_equal 
                               (Categorical_property_of_Product_set__morph 
                                  _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                  _p_M_a_morph _p_M_b_morph x) 
                               (Categorical_property_of_Product_set__morph 
                                  _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                  _p_M_a_morph _p_M_b_morph y))))) =>
                   v_Vjc:
                   (zen.proof 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal 
                                  (_p_P_first 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
                                  (_p_P_first 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph y))))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (_p_P_second 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph x)) 
                                  (_p_P_second 
                                     (Categorical_property_of_Product_set__morph 
                                        _p_A_T _p_B_T _p_P_T _p_E_T 
                                        _p_P_pair _p_M_a_morph _p_M_b_morph y))))))) =>
                   zen.Raxiom 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_P_equal 
                              (Categorical_property_of_Product_set__morph 
                                 _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                 _p_M_a_morph _p_M_b_morph x) 
                              (Categorical_property_of_Product_set__morph 
                                 _p_A_T _p_B_T _p_P_T _p_E_T _p_P_pair 
                                 _p_M_a_morph _p_M_b_morph y)))) v_Vic v_Vac) 
                  v_Vec) v_Vdc) _p_P_equal_spec)) 
        ((__N_1_2_1_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_B_equal 
                   (_p_P_second (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                   (_p_P_second (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_B_equal 
                     (_p_P_second 
                        (Categorical_property_of_Product_set__morph _p_A_T 
                           _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                           _p_M_b_morph x)) 
                     (_p_P_second 
                        (Categorical_property_of_Product_set__morph _p_A_T 
                           _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                           _p_M_b_morph y))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_B_equal 
                            (_p_P_second 
                               (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                            (_p_P_second 
                               (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))))))) =>
             zen.Raxiom 
               (zen.triangle 
                  (focal.is_true 
                     (_p_B_equal 
                        (_p_P_second 
                           (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                        (_p_P_second 
                           (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))))) 
               __N_1_2_1_LEMMA v_Vzb)) 
           ((__N_1_2_1_1_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP (_p_B_equal (_p_M_b_morph x) (_p_M_b_morph y)))) =>
             (__N_1_2_1_2_LEMMA:
              (dk_logic.eP 
                 (dk_logic.ebP 
                    (_p_B_equal 
                       (_p_P_second 
                          (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                       (_p_M_b_morph x)))) =>
              (__N_1_2_1_3_LEMMA:
               (dk_logic.eP 
                  (dk_logic.ebP 
                     (_p_B_equal 
                        (_p_P_second 
                           (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y))) 
                        (_p_M_b_morph y)))) =>
               zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (_p_P_second 
                             (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                          (_p_P_second 
                             (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))))) 
                 (v_Vvc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (_p_P_second 
                                    (_p_P_pair (_p_M_a_morph x) 
                                       (_p_M_b_morph x))) 
                                 (_p_P_second 
                                    (_p_P_pair (_p_M_a_morph y) 
                                       (_p_M_b_morph y)))))))) =>
                  zen.Rcut 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (_p_P_second 
                                   (_p_P_pair (_p_M_a_morph x) 
                                      (_p_M_b_morph x))) 
                                (_p_P_second 
                                   (_p_P_pair (_p_M_a_morph x) 
                                      (_p_M_b_morph x)))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (_p_P_second 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x))) 
                                   (_p_P_second 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x)))))))) 
                    (v_Vwc:
                     (zen.proof 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_B_T 
                                    (_p_P_second 
                                       (_p_P_pair (_p_M_a_morph x) 
                                          (_p_M_b_morph x))) 
                                    (_p_P_second 
                                       (_p_P_pair (_p_M_a_morph x) 
                                          (_p_M_b_morph x)))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph x) 
                                             (_p_M_b_morph x))) 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph x) 
                                             (_p_M_b_morph x))))))))) =>
                     zen.Rand 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_B_T 
                                (_p_P_second 
                                   (_p_P_pair (_p_M_a_morph x) 
                                      (_p_M_b_morph x))) 
                                (_p_P_second 
                                   (_p_P_pair (_p_M_a_morph x) 
                                      (_p_M_b_morph x)))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (_p_P_second 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x))) 
                                   (_p_P_second 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x))))))) 
                       (v_Vxc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_B_T 
                                    (_p_P_second 
                                       (_p_P_pair (_p_M_a_morph x) 
                                          (_p_M_b_morph x))) 
                                    (_p_P_second 
                                       (_p_P_pair (_p_M_a_morph x) 
                                          (_p_M_b_morph x))))))) =>
                        v_Vyc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph x) 
                                             (_p_M_b_morph x))) 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph x) 
                                             (_p_M_b_morph x)))))))) =>
                        zen.Rnoteq _p_B_T 
                          (_p_P_second 
                             (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                          v_Vxc) v_Vwc) 
                    (v_Vzc:
                     (zen.proof 
                        (zen.not 
                           (zen.and 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_B_T 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph x) 
                                             (_p_M_b_morph x))) 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph x) 
                                             (_p_M_b_morph x)))))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal 
                                          (_p_P_second 
                                             (_p_P_pair (_p_M_a_morph x) 
                                                (_p_M_b_morph x))) 
                                          (_p_P_second 
                                             (_p_P_pair (_p_M_a_morph x) 
                                                (_p_M_b_morph x)))))))))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (zen.equal _p_B_T (_p_M_b_morph x) 
                             (_p_P_second 
                                (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y))))) 
                       (v_Vad:
                        (zen.proof 
                           (zen.triangle 
                              (zen.equal _p_B_T (_p_M_b_morph x) 
                                 (_p_P_second 
                                    (_p_P_pair (_p_M_a_morph y) 
                                       (_p_M_b_morph y)))))) =>
                        zen.Rsubst basics.bool__t 
                          (v_Vbd:(zen.term basics.bool__t) =>
                           zen.triangle (focal.is_true v_Vbd)) 
                          (_p_B_equal 
                             (_p_P_second 
                                (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                             (_p_M_b_morph x)) 
                          (_p_B_equal 
                             (_p_P_second 
                                (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                             (_p_P_second 
                                (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_B_equal 
                                          (_p_P_second 
                                             (_p_P_pair (_p_M_a_morph x) 
                                                (_p_M_b_morph x))) 
                                          (_p_M_b_morph x)) 
                                       (_p_B_equal 
                                          (_p_P_second 
                                             (_p_P_pair (_p_M_a_morph x) 
                                                (_p_M_b_morph x))) 
                                          (_p_P_second 
                                             (_p_P_pair (_p_M_a_morph y) 
                                                (_p_M_b_morph y)))))))) =>
                           zen.Rsubst _p_B_T 
                             (v_Vdd:(zen.term _p_B_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_B_equal v_Vdd (_p_M_b_morph x)) 
                                      (_p_B_equal 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph y) 
                                               (_p_M_b_morph y))))))) 
                             (_p_P_second 
                                (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                             (_p_P_second 
                                (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                             (v_Vxc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_B_T 
                                          (_p_P_second 
                                             (_p_P_pair (_p_M_a_morph x) 
                                                (_p_M_b_morph x))) 
                                          (_p_P_second 
                                             (_p_P_pair (_p_M_a_morph x) 
                                                (_p_M_b_morph x))))))) =>
                              zen.Rnotand 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_B_T 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x)))))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))))))) 
                                (v_Ved:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_B_T 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph x) 
                                                      (_p_M_b_morph x))) 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph x) 
                                                      (_p_M_b_morph x)))))))) =>
                                 zen.Rnotnot 
                                   (zen.triangle 
                                      (zen.equal _p_B_T 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))))) 
                                   (v_Vfd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal _p_B_T 
                                             (_p_P_second 
                                                (_p_P_pair (_p_M_a_morph x) 
                                                   (_p_M_b_morph x))) 
                                             (_p_P_second 
                                                (_p_P_pair (_p_M_a_morph x) 
                                                   (_p_M_b_morph x)))))) =>
                                    zen.Rcut 
                                      (zen.triangle 
                                         (zen.equal _p_B_T 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))))) 
                                      (v_Vfd0:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal _p_B_T 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph x) 
                                                      (_p_M_b_morph x))) 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph x) 
                                                      (_p_M_b_morph x)))))) =>
                                       zen.Rsubst _p_B_T 
                                         (v_Vgd:(zen.term _p_B_T) =>
                                          zen.triangle 
                                            (zen.equal _p_B_T v_Vgd 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))))) 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (v_Vxc0:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))))) 
                                            v_Vfd0 v_Vxc0) 
                                         (v_Vfd0:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal _p_B_T 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x))) 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x)))))) =>
                                          zen.Rsubst _p_B_T 
                                            (v_Vhd:(zen.term _p_B_T) =>
                                             zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  v_Vhd)) 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (v_Vxc0:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_B_T 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  x) 
                                                               (_p_M_b_morph 
                                                                  x))) 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  x) 
                                                               (_p_M_b_morph 
                                                                  x))))))) =>
                                             zen.Rnoteq _p_B_T 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               v_Vxc0) 
                                            (v_Vfd0:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x)))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (zen.equal _p_B_T 
                                                     (_p_P_second 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     (_p_P_second 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))))) 
                                               v_Vfd0 v_Vxc) v_Vfd0) v_Vfd0) 
                                      (v_Vxc0:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_B_T 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x))) 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x))))))) =>
                                       zen.Rnoteq _p_B_T 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) v_Vxc0)) 
                                   v_Ved) 
                                (v_Vid:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x))) 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x))))))))) =>
                                 zen.Rnotnot 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x)))))) 
                                   (v_Vjd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph x) 
                                                      (_p_M_b_morph x))) 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph x) 
                                                      (_p_M_b_morph x))))))) =>
                                    zen.Rall _p_B_T 
                                      (v_Vkd:(zen.term _p_B_T) =>
                                       zen.forall _p_B_T 
                                         (v_Vld:(zen.term _p_B_T) =>
                                          zen.forall _p_B_T 
                                            (v_Vmd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal v_Vkd v_Vld))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal v_Vld 
                                                           v_Vmd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal v_Vkd 
                                                           v_Vmd))))))) 
                                      (_p_P_second 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x))) 
                                      (v_Vnd:
                                       (zen.proof 
                                          (zen.forall _p_B_T 
                                             (v_Vld:(zen.term _p_B_T) =>
                                              zen.forall _p_B_T 
                                                (v_Vmd:(zen.term _p_B_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x))) 
                                                            v_Vld))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               v_Vld v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               v_Vmd)))))))) =>
                                       zen.Rall _p_B_T 
                                         (v_Vld:(zen.term _p_B_T) =>
                                          zen.forall _p_B_T 
                                            (v_Vmd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        v_Vld))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal v_Vld 
                                                           v_Vmd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           v_Vmd)))))) 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (v_Vod:
                                          (zen.proof 
                                             (zen.forall _p_B_T 
                                                (v_Vmd:(zen.term _p_B_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x))) 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x)))))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               v_Vmd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               v_Vmd))))))) =>
                                          zen.Rall _p_B_T 
                                            (v_Vmd:(zen.term _p_B_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x)))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           v_Vmd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           v_Vmd))))) 
                                            (_p_M_b_morph x) 
                                            (v_Vpd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x))) 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x)))))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_M_b_morph 
                                                                  x)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_M_b_morph 
                                                                  x))))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x)))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_M_b_morph x)))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_M_b_morph x))))) 
                                               (v_Vyc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x)))))) 
                                                  v_Vjd v_Vyc) 
                                               (v_Vqd:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_M_b_morph 
                                                                  x)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_M_b_morph 
                                                                  x)))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_M_b_morph x)))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_M_b_morph x)))) 
                                                  (v_Vrd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                  (_p_M_b_morph 
                                                                    x)))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_M_b_morph x)))) 
                                                     __N_1_2_1_2_LEMMA v_Vrd) 
                                                  (__N_1_2_1_2_LEMMA0:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_M_b_morph 
                                                                  x))))) =>
                                                   zen.Rsubst basics.bool__t 
                                                     (v_Vbd:
                                                      (zen.term 
                                                         basics.bool__t) =>
                                                      zen.triangle 
                                                        (focal.is_true v_Vbd)) 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_M_b_morph x)) 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y)))) 
                                                     (v_Vcd0:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                  (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                      zen.Rsubst _p_B_T 
                                                        (v_Vdd:
                                                         (zen.term _p_B_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_B_equal 
                                                                    v_Vdd 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x)) 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (v_Vxc0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))))))) =>
                                                         zen.Rnoteq _p_B_T 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           v_Vxc0) 
                                                        (v_Vcd0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                         zen.Rsubst _p_B_T 
                                                           (v_Vsd:
                                                            (zen.term _p_B_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vsd) 
                                                                    (
                                                                    _p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) 
                                                           (_p_M_b_morph x) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (v_Vtd:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_M_b_morph 
                                                                    x) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x) 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                              v_Vad v_Vtd) 
                                                           (v_Vud:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                            zen.Rnoteq 
                                                              basics.bool__t 
                                                              (_p_B_equal 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                              v_Vud) v_Vcd0) 
                                                        v_Vcd0) 
                                                     (v_Vvd:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                        v_Vvd v_Vvc) 
                                                     __N_1_2_1_2_LEMMA0) 
                                                  v_Vqd) v_Vpd) v_Vod) v_Vnd) 
                                      _p_B_equal_transitive) v_Vid) v_Vzc) 
                             (v_Vcd0:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_B_equal 
                                             (_p_P_second 
                                                (_p_P_pair (_p_M_a_morph x) 
                                                   (_p_M_b_morph x))) 
                                             (_p_M_b_morph x)) 
                                          (_p_B_equal 
                                             (_p_P_second 
                                                (_p_P_pair (_p_M_a_morph x) 
                                                   (_p_M_b_morph x))) 
                                             (_p_P_second 
                                                (_p_P_pair (_p_M_a_morph y) 
                                                   (_p_M_b_morph y)))))))) =>
                              zen.Rsubst _p_B_T 
                                (v_Vsd:(zen.term _p_B_T) =>
                                 zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_B_equal 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) v_Vsd) 
                                         (_p_B_equal 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph y) 
                                                  (_p_M_b_morph y))))))) 
                                (_p_M_b_morph x) 
                                (_p_P_second 
                                   (_p_P_pair (_p_M_a_morph y) 
                                      (_p_M_b_morph y))) 
                                (v_Vtd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_B_T (_p_M_b_morph x) 
                                             (_p_P_second 
                                                (_p_P_pair (_p_M_a_morph y) 
                                                   (_p_M_b_morph y))))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (zen.equal _p_B_T (_p_M_b_morph x) 
                                         (_p_P_second 
                                            (_p_P_pair (_p_M_a_morph y) 
                                               (_p_M_b_morph y))))) v_Vad 
                                   v_Vtd) 
                                (v_Vud:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_B_equal 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph x) 
                                                      (_p_M_b_morph x))) 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph y) 
                                                      (_p_M_b_morph y)))) 
                                             (_p_B_equal 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph x) 
                                                      (_p_M_b_morph x))) 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph y) 
                                                      (_p_M_b_morph y)))))))) =>
                                 zen.Rnoteq basics.bool__t 
                                   (_p_B_equal 
                                      (_p_P_second 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x))) 
                                      (_p_P_second 
                                         (_p_P_pair (_p_M_a_morph y) 
                                            (_p_M_b_morph y)))) v_Vud) v_Vcd0) 
                             v_Vcd) 
                          (v_Vvd:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph x) 
                                             (_p_M_b_morph x))) 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph y) 
                                             (_p_M_b_morph y))))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (_p_P_second 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x))) 
                                      (_p_P_second 
                                         (_p_P_pair (_p_M_a_morph y) 
                                            (_p_M_b_morph y)))))) v_Vvd v_Vvc) 
                          __N_1_2_1_2_LEMMA) 
                       (v_Vtd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_B_T (_p_M_b_morph x) 
                                    (_p_P_second 
                                       (_p_P_pair (_p_M_a_morph y) 
                                          (_p_M_b_morph y))))))) =>
                        zen.Rcut 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (_p_M_b_morph x) 
                                   (_p_P_second 
                                      (_p_P_pair (_p_M_a_morph y) 
                                         (_p_M_b_morph y)))))) 
                          (v_Vwd:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (_p_M_b_morph x) 
                                       (_p_P_second 
                                          (_p_P_pair (_p_M_a_morph y) 
                                             (_p_M_b_morph y))))))) =>
                           zen.Rall _p_B_T 
                             (v_Vkd:(zen.term _p_B_T) =>
                              zen.forall _p_B_T 
                                (v_Vld:(zen.term _p_B_T) =>
                                 zen.forall _p_B_T 
                                   (v_Vmd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal v_Vkd v_Vld))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal v_Vld v_Vmd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal v_Vkd v_Vmd))))))) 
                             (_p_P_second 
                                (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                             (v_Vnd:
                              (zen.proof 
                                 (zen.forall _p_B_T 
                                    (v_Vld:(zen.term _p_B_T) =>
                                     zen.forall _p_B_T 
                                       (v_Vmd:(zen.term _p_B_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x))) 
                                                   v_Vld))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal v_Vld v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))) 
                                                      v_Vmd)))))))) =>
                              zen.Rall _p_B_T 
                                (v_Vld:(zen.term _p_B_T) =>
                                 zen.forall _p_B_T 
                                   (v_Vmd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) v_Vld))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal v_Vld v_Vmd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  v_Vmd)))))) 
                                (_p_M_b_morph x) 
                                (v_Vxd:
                                 (zen.proof 
                                    (zen.forall _p_B_T 
                                       (v_Vmd:(zen.term _p_B_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x))) 
                                                   (_p_M_b_morph x)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_M_b_morph x) v_Vmd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))) 
                                                      v_Vmd))))))) =>
                                 zen.Rall _p_B_T 
                                   (v_Vmd:(zen.term _p_B_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_M_b_morph x)))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal (_p_M_b_morph x) 
                                                  v_Vmd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  v_Vmd))))) 
                                   (_p_P_second 
                                      (_p_P_pair (_p_M_a_morph y) 
                                         (_p_M_b_morph y))) 
                                   (v_Vyd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph x) 
                                                         (_p_M_b_morph x))) 
                                                   (_p_M_b_morph x)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_M_b_morph x) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y)))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y))))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_M_b_morph x)))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal (_p_M_b_morph x) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y)))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y))))))) 
                                      (v_Vrd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))) 
                                                      (_p_M_b_morph x)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_M_b_morph x)))) 
                                         __N_1_2_1_2_LEMMA v_Vrd) 
                                      (v_Vzd:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_M_b_morph x) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y)))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y)))))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal (_p_M_b_morph x) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y)))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_B_equal 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y)))))) 
                                         (v_Vae:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal 
                                                         (_p_M_b_morph x) 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y)))))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (_p_M_b_morph x) 
                                                     (_p_P_second 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y)))))) 
                                            v_Vwd v_Vae) 
                                         (v_Vvd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_B_equal 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph x) 
                                                            (_p_M_b_morph x))) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y))))))) =>
                                          zen.Rsubst basics.bool__t 
                                            (v_Vbe:
                                             (zen.term basics.bool__t) =>
                                             zen.triangle 
                                               (focal.is_true v_Vbe)) 
                                            (_p_B_equal 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y)))) 
                                            (_p_B_equal 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y)))) 
                                            (v_Vud:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_B_equal 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x))) 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    y)))) 
                                                         (_p_B_equal 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x))) 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    y)))))))) =>
                                             zen.Rsubst _p_B_T 
                                               (v_Vce:(zen.term _p_B_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal v_Vce 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y)))) 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))))))) 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (v_Vxc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_B_T 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x))) 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    x))))))) =>
                                                zen.Rnotand 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x)))))) 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))))))) 
                                                  (v_Ved:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_B_T 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))))) =>
                                                   zen.Rnotnot 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))))) 
                                                     (v_Vfd:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_B_T 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                      zen.Reqsym _p_B_T 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        v_Vfd v_Vxc) v_Ved) 
                                                  (v_Vid:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))))))))) =>
                                                   zen.Rnotnot 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x)))))) 
                                                     (v_Vjd:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))))))) =>
                                                      zen.Rall _p_B_T 
                                                        (v_Vkd:
                                                         (zen.term _p_B_T) =>
                                                         zen.forall _p_B_T 
                                                           (v_Vld:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (v_Vnd0:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               _p_B_T 
                                                               (v_Vld:
                                                                (zen.term 
                                                                   _p_B_T) =>
                                                                zen.forall 
                                                                  _p_B_T 
                                                                  (v_Vmd:
                                                                   (zen.term 
                                                                    _p_B_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd)))))))) =>
                                                         zen.Rall _p_B_T 
                                                           (v_Vld:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vld))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd)))))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (v_Vod:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  _p_B_T 
                                                                  (v_Vmd:
                                                                   (zen.term 
                                                                    _p_B_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd))))))) =>
                                                            zen.Rall _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd))))) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (v_Vde:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) 
                                                                 (v_Vyc:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                    v_Vjd 
                                                                    v_Vyc) 
                                                                 (v_Vee:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (
                                                                    v_Vvc0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    v_Vvd 
                                                                    v_Vvc0) 
                                                                    (
                                                                    v_Vvd0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    v_Vvd0 
                                                                    v_Vvc) 
                                                                    v_Vee) 
                                                                 v_Vde) v_Vod) 
                                                           v_Vnd0) 
                                                        _p_B_equal_transitive) 
                                                     v_Vid) v_Vzc) 
                                               (v_Vud0:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                zen.Rsubst _p_B_T 
                                                  (v_Vfe:(zen.term _p_B_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              v_Vfe) 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))))))) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y))) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y))) 
                                                  (v_Vge:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_B_T 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                   zen.Rnoteq _p_B_T 
                                                     (_p_P_second 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))) 
                                                     v_Vge) 
                                                  (v_Vud0:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_B_equal 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                               (_p_B_equal 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                   zen.Rnoteq basics.bool__t 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y)))) 
                                                     v_Vud0) v_Vud0) v_Vud) 
                                            (v_Vvd0:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  x) 
                                                               (_p_M_b_morph 
                                                                  x))) 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y)))))) 
                                               v_Vvd0 v_Vvc) v_Vvd) v_Vzd) 
                                      v_Vyd) v_Vxd) v_Vnd) 
                             _p_B_equal_transitive) 
                          (v_Vae:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_B_equal (_p_M_b_morph x) 
                                          (_p_P_second 
                                             (_p_P_pair (_p_M_a_morph y) 
                                                (_p_M_b_morph y)))))))) =>
                           zen.Rall _p_B_T 
                             (v_Vkd:(zen.term _p_B_T) =>
                              zen.forall _p_B_T 
                                (v_Vld:(zen.term _p_B_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_B_equal v_Vkd v_Vld))) 
                                   (zen.triangle 
                                      (focal.is_true (_p_B_equal v_Vld v_Vkd))))) 
                             (_p_P_second 
                                (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y))) 
                             (v_Vhe:
                              (zen.proof 
                                 (zen.forall _p_B_T 
                                    (v_Vld:(zen.term _p_B_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph y) 
                                                      (_p_M_b_morph y))) 
                                                v_Vld))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal v_Vld 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph y) 
                                                      (_p_M_b_morph y))))))))) =>
                              zen.Rall _p_B_T 
                                (v_Vld:(zen.term _p_B_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph y) 
                                                  (_p_M_b_morph y))) v_Vld))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal v_Vld 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph y) 
                                                  (_p_M_b_morph y))))))) 
                                (_p_M_b_morph x) 
                                (v_Vie:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph y) 
                                                      (_p_M_b_morph y))) 
                                                (_p_M_b_morph x)))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal (_p_M_b_morph x) 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph y) 
                                                      (_p_M_b_morph y)))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph y) 
                                                  (_p_M_b_morph y))) 
                                            (_p_M_b_morph x)))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_B_equal (_p_M_b_morph x) 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph y) 
                                                  (_p_M_b_morph y)))))) 
                                   (v_Vje:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_B_equal 
                                                   (_p_P_second 
                                                      (_p_P_pair 
                                                         (_p_M_a_morph y) 
                                                         (_p_M_b_morph y))) 
                                                   (_p_M_b_morph x)))))) =>
                                    zen.Rcut 
                                      (zen.and 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y))) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y)))))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (_p_P_second 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))) 
                                                     (_p_P_second 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y)))))))) 
                                      (v_Vke:
                                       (zen.proof 
                                          (zen.and 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y))) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y)))))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y))) 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y))))))))) =>
                                       zen.Rand 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_B_T 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y))) 
                                                  (_p_P_second 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y)))))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (_p_P_second 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))) 
                                                     (_p_P_second 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))))))) 
                                         (v_Vge:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y))) 
                                                      (_p_P_second 
                                                         (_p_P_pair 
                                                            (_p_M_a_morph y) 
                                                            (_p_M_b_morph y))))))) =>
                                          v_Vle:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y))) 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y)))))))) =>
                                          zen.Rnoteq _p_B_T 
                                            (_p_P_second 
                                               (_p_P_pair (_p_M_a_morph y) 
                                                  (_p_M_b_morph y))) v_Vge) 
                                         v_Vke) 
                                      (v_Vme:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.and 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_B_T 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y))) 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y)))))) 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    y))) 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    y)))))))))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (zen.equal _p_B_T 
                                               (_p_M_b_morph y) 
                                               (_p_M_b_morph x))) 
                                         (v_Vne:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal _p_B_T 
                                                   (_p_M_b_morph y) 
                                                   (_p_M_b_morph x)))) =>
                                          zen.Rsubst basics.bool__t 
                                            (v_Vbe:
                                             (zen.term basics.bool__t) =>
                                             zen.triangle 
                                               (focal.is_true v_Vbe)) 
                                            (_p_B_equal 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))) 
                                               (_p_M_b_morph y)) 
                                            (_p_B_equal 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))) 
                                               (_p_M_b_morph x)) 
                                            (v_Voe:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_B_equal 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    y))) 
                                                            (_p_M_b_morph y)) 
                                                         (_p_B_equal 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    y))) 
                                                            (_p_M_b_morph x)))))) =>
                                             zen.Rsubst _p_B_T 
                                               (v_Vpe:(zen.term _p_B_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_B_equal v_Vpe 
                                                           (_p_M_b_morph y)) 
                                                        (_p_B_equal 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (_p_M_b_morph x))))) 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))) 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))) 
                                               (v_Vge:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_B_T 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    y))) 
                                                            (_p_P_second 
                                                               (_p_P_pair 
                                                                  (_p_M_a_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    y))))))) =>
                                                zen.Rnotand 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y)))))) 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))))))) 
                                                  (v_Vqe:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_B_T 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                   zen.Rnotnot 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))))) 
                                                     (v_Vre:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_B_T 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                      zen.Rcut 
                                                        (zen.triangle 
                                                           (zen.equal _p_B_T 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))))) 
                                                        (v_Vre0:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_B_T 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                         zen.Rsubst _p_B_T 
                                                           (v_Vse:
                                                            (zen.term _p_B_T) =>
                                                            zen.triangle 
                                                              (zen.equal 
                                                                 _p_B_T 
                                                                 v_Vse 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (v_Vge0:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                              v_Vre0 v_Vge0) 
                                                           (v_Vre0:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                            zen.Rsubst 
                                                              _p_B_T 
                                                              (v_Vte:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.triangle 
                                                                 (zen.equal 
                                                                    _p_B_T 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vte)) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (v_Vge0:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                               zen.Rnoteq 
                                                                 _p_B_T 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 v_Vge0) 
                                                              (v_Vre0:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                                 v_Vre0 v_Vge) 
                                                              v_Vre0) v_Vre0) 
                                                        (v_Vge0:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                         zen.Rnoteq _p_B_T 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           v_Vge0)) v_Vqe) 
                                                  (v_Vue:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))))) =>
                                                   zen.Rnotnot 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y)))))) 
                                                     (v_Vve:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                      zen.Rall _p_B_T 
                                                        (v_Vkd:
                                                         (zen.term _p_B_T) =>
                                                         zen.forall _p_B_T 
                                                           (v_Vld:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))) 
                                                        (v_Vwe:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               _p_B_T 
                                                               (v_Vld:
                                                                (zen.term 
                                                                   _p_B_T) =>
                                                                zen.forall 
                                                                  _p_B_T 
                                                                  (v_Vmd:
                                                                   (zen.term 
                                                                    _p_B_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))))) =>
                                                         zen.Rall _p_B_T 
                                                           (v_Vld:
                                                            (zen.term _p_B_T) =>
                                                            zen.forall 
                                                              _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))) 
                                                           (_p_P_second 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (v_Vxe:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  _p_B_T 
                                                                  (v_Vmd:
                                                                   (zen.term 
                                                                    _p_B_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))))) =>
                                                            zen.Rall _p_B_T 
                                                              (v_Vmd:
                                                               (zen.term 
                                                                  _p_B_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))) 
                                                              (_p_M_b_morph y) 
                                                              (v_Vye:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                                 (v_Vle:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    v_Vve 
                                                                    v_Vle) 
                                                                 (v_Vze:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                                    (
                                                                    v_Vaf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                                    __N_1_2_1_3_LEMMA 
                                                                    v_Vaf) 
                                                                    (
                                                                    __N_1_2_1_3_LEMMA0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vbe)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                    (v_Voe0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vpe:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vpe 
                                                                    (_p_M_b_morph 
                                                                    y)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (v_Vge0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vge0) 
                                                                    (v_Voe0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_B_T 
                                                                    (v_Vbf:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vbf) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) 
                                                                    (_p_M_b_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    x) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_M_b_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_M_b_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vne 
                                                                    v_Vcf) 
                                                                    (v_Vdf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)) v_Vdf) 
                                                                    v_Voe0) 
                                                                    v_Voe0) 
                                                                    (v_Vef:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                    v_Vef 
                                                                    v_Vje) 
                                                                    __N_1_2_1_3_LEMMA0) 
                                                                    v_Vze) 
                                                                 v_Vye) v_Vxe) 
                                                           v_Vwe) 
                                                        _p_B_equal_transitive) 
                                                     v_Vue) v_Vme) 
                                               (v_Voe0:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                               (_p_M_b_morph 
                                                                  y)) 
                                                            (_p_B_equal 
                                                               (_p_P_second 
                                                                  (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                               (_p_M_b_morph 
                                                                  x)))))) =>
                                                zen.Rsubst _p_B_T 
                                                  (v_Vbf:(zen.term _p_B_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              v_Vbf) 
                                                           (_p_B_equal 
                                                              (_p_P_second 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_M_b_morph x))))) 
                                                  (_p_M_b_morph y) 
                                                  (_p_M_b_morph x) 
                                                  (v_Vcf:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_B_T 
                                                               (_p_M_b_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  x))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (zen.equal _p_B_T 
                                                           (_p_M_b_morph y) 
                                                           (_p_M_b_morph x))) 
                                                     v_Vne v_Vcf) 
                                                  (v_Vdf:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_B_equal 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                  (_p_M_b_morph 
                                                                    x)) 
                                                               (_p_B_equal 
                                                                  (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                  (_p_M_b_morph 
                                                                    x)))))) =>
                                                   zen.Rnoteq basics.bool__t 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))) 
                                                        (_p_M_b_morph x)) 
                                                     v_Vdf) v_Voe0) v_Voe) 
                                            (v_Vef:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal 
                                                         (_p_P_second 
                                                            (_p_P_pair 
                                                               (_p_M_a_morph 
                                                                  y) 
                                                               (_p_M_b_morph 
                                                                  y))) 
                                                         (_p_M_b_morph x))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_B_equal 
                                                        (_p_P_second 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))) 
                                                        (_p_M_b_morph x)))) 
                                               v_Vef v_Vje) __N_1_2_1_3_LEMMA) 
                                         (v_Vcf:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_B_T 
                                                      (_p_M_b_morph y) 
                                                      (_p_M_b_morph x))))) =>
                                          zen.Rcut 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_B_equal 
                                                     (_p_M_b_morph y) 
                                                     (_p_M_b_morph x)))) 
                                            (v_Vff:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_B_equal 
                                                         (_p_M_b_morph y) 
                                                         (_p_M_b_morph x))))) =>
                                             zen.Rall _p_B_T 
                                               (v_Vkd:(zen.term _p_B_T) =>
                                                zen.forall _p_B_T 
                                                  (v_Vld:(zen.term _p_B_T) =>
                                                   zen.forall _p_B_T 
                                                     (v_Vmd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 v_Vkd v_Vld))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))) 
                                               (v_Vwe:
                                                (zen.proof 
                                                   (zen.forall _p_B_T 
                                                      (v_Vld:
                                                       (zen.term _p_B_T) =>
                                                       zen.forall _p_B_T 
                                                         (v_Vmd:
                                                          (zen.term _p_B_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))))) =>
                                                zen.Rall _p_B_T 
                                                  (v_Vld:(zen.term _p_B_T) =>
                                                   zen.forall _p_B_T 
                                                     (v_Vmd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 v_Vld))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))) 
                                                  (_p_M_b_morph y) 
                                                  (v_Vgf:
                                                   (zen.proof 
                                                      (zen.forall _p_B_T 
                                                         (v_Vmd:
                                                          (zen.term _p_B_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_M_b_morph 
                                                                    y) v_Vmd))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))))) =>
                                                   zen.Rall _p_B_T 
                                                     (v_Vmd:
                                                      (zen.term _p_B_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_M_b_morph 
                                                                    y)))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y) v_Vmd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))) 
                                                     (_p_M_b_morph x) 
                                                     (v_Vhf:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_M_b_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_M_b_morph 
                                                                    y)))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x)))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))))) 
                                                        (v_Vaf:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y)))) 
                                                           __N_1_2_1_3_LEMMA 
                                                           v_Vaf) 
                                                        (v_Vif:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_M_b_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x)))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_B_equal 
                                                                    (
                                                                    _p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x)))) 
                                                           (v_Vjf:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_M_b_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_B_equal 
                                                                    (_p_M_b_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                              v_Vff v_Vjf) 
                                                           (v_Vef:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) =>
                                                            zen.Rsubst 
                                                              basics.bool__t 
                                                              (v_Vbe:
                                                               (zen.term 
                                                                  basics.bool__t) =>
                                                               zen.triangle 
                                                                 (focal.is_true 
                                                                    v_Vbe)) 
                                                              (_p_B_equal 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_M_b_morph 
                                                                    x)) 
                                                              (_p_B_equal 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_M_b_morph 
                                                                    x)) 
                                                              (v_Vdf:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                               zen.Rsubst 
                                                                 _p_B_T 
                                                                 (v_Vkf:
                                                                  (zen.term 
                                                                    _p_B_T) =>
                                                                  zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    v_Vkf 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_P_second 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (v_Vge:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                                  zen.Rnotand 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) 
                                                                    (
                                                                    v_Vqe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                                    (v_Vre:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                                    zen.Reqsym 
                                                                    _p_B_T 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vre 
                                                                    v_Vge) 
                                                                    v_Vqe) 
                                                                    (
                                                                    v_Vue:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (v_Vwe0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (v_Vxe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    _p_B_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_B_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))) 
                                                                    (_p_M_b_morph 
                                                                    x) 
                                                                    (v_Vlf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    v_Vve 
                                                                    v_Vle) 
                                                                    (v_Vmf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                    (v_Vje0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                    v_Vef 
                                                                    v_Vje0) 
                                                                    (v_Vef0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                    v_Vef0 
                                                                    v_Vje) 
                                                                    v_Vmf) 
                                                                    v_Vlf) 
                                                                    v_Vxe) 
                                                                    v_Vwe0) 
                                                                    _p_B_equal_transitive) 
                                                                    v_Vue) 
                                                                    v_Vme) 
                                                                 (v_Vdf0:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                                  zen.Rsubst 
                                                                    _p_B_T 
                                                                    (
                                                                    v_Vbf:
                                                                    (
                                                                    zen.term 
                                                                    _p_B_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vbf) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x) 
                                                                    (
                                                                    v_Vnf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_B_T 
                                                                    (_p_M_b_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_B_T 
                                                                    (_p_M_b_morph 
                                                                    x) v_Vnf) 
                                                                    (
                                                                    v_Vdf0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)) 
                                                                    v_Vdf0) 
                                                                    v_Vdf0) 
                                                                 v_Vdf) 
                                                              (v_Vef0:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_B_equal 
                                                                    (_p_P_second 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_b_morph 
                                                                    x)))) 
                                                                 v_Vef0 v_Vje) 
                                                              v_Vef) v_Vif) 
                                                        v_Vhf) v_Vgf) v_Vwe) 
                                               _p_B_equal_transitive) 
                                            (v_Vjf:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_B_equal 
                                                            (_p_M_b_morph y) 
                                                            (_p_M_b_morph x)))))) =>
                                             zen.Rall _p_B_T 
                                               (v_Vkd:(zen.term _p_B_T) =>
                                                zen.forall _p_B_T 
                                                  (v_Vld:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal v_Vkd 
                                                              v_Vld))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal v_Vld 
                                                              v_Vkd))))) 
                                               (_p_M_b_morph x) 
                                               (v_Vof:
                                                (zen.proof 
                                                   (zen.forall _p_B_T 
                                                      (v_Vld:
                                                       (zen.term _p_B_T) =>
                                                       zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (_p_M_b_morph 
                                                                    x) v_Vld))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  v_Vld 
                                                                  (_p_M_b_morph 
                                                                    x))))))) =>
                                                zen.Rall _p_B_T 
                                                  (v_Vld:(zen.term _p_B_T) =>
                                                   zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (_p_M_b_morph x) 
                                                              v_Vld))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal v_Vld 
                                                              (_p_M_b_morph x))))) 
                                                  (_p_M_b_morph y) 
                                                  (v_Vpf:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (_p_M_b_morph 
                                                                    x) 
                                                                  (_p_M_b_morph 
                                                                    y)))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (_p_M_b_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    x)))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (_p_M_b_morph x) 
                                                              (_p_M_b_morph y)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_B_equal 
                                                              (_p_M_b_morph y) 
                                                              (_p_M_b_morph x)))) 
                                                     (v_Vqf:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_B_equal 
                                                                    (_p_M_b_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (_p_M_b_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    y)))) 
                                                        __N_1_2_1_1_LEMMA 
                                                        v_Vqf) 
                                                     (v_Vff:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_B_equal 
                                                                  (_p_M_b_morph 
                                                                    y) 
                                                                  (_p_M_b_morph 
                                                                    x))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_B_equal 
                                                                 (_p_M_b_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    x)))) 
                                                        v_Vff v_Vjf) v_Vpf) 
                                                  v_Vof) _p_B_equal_symmetric)))) 
                                   (v_Vwd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_B_equal (_p_M_b_morph x) 
                                                (_p_P_second 
                                                   (_p_P_pair 
                                                      (_p_M_a_morph y) 
                                                      (_p_M_b_morph y))))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_B_equal (_p_M_b_morph x) 
                                               (_p_P_second 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y)))))) 
                                      v_Vwd v_Vae) v_Vie) v_Vhe) 
                             _p_B_equal_symmetric))))) 
                (zen.nnpp 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_B_equal 
                            (_p_P_second 
                               (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y))) 
                            (_p_M_b_morph y)))) 
                   (v_Vzb:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal 
                                   (_p_P_second 
                                      (_p_P_pair (_p_M_a_morph y) 
                                         (_p_M_b_morph y))) (_p_M_b_morph y)))))) =>
                    zen.Rall _p_A_T 
                      (v_Vac:(zen.term _p_A_T) =>
                       zen.forall _p_B_T 
                         (v_Vbc:(zen.term _p_B_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (_p_P_second (_p_P_pair v_Vac v_Vbc)) v_Vbc)))) 
                      (_p_M_a_morph y) 
                      (v_Vcc:
                       (zen.proof 
                          (zen.forall _p_B_T 
                             (v_Vbc:(zen.term _p_B_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (_p_P_second 
                                         (_p_P_pair (_p_M_a_morph y) v_Vbc)) 
                                      v_Vbc))))) =>
                       zen.Rall _p_B_T 
                         (v_Vbc:(zen.term _p_B_T) =>
                          zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (_p_P_second 
                                     (_p_P_pair (_p_M_a_morph y) v_Vbc)) 
                                  v_Vbc))) (_p_M_b_morph y) 
                         (v_Vdc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal 
                                      (_p_P_second 
                                         (_p_P_pair (_p_M_a_morph y) 
                                            (_p_M_b_morph y))) 
                                      (_p_M_b_morph y))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal 
                                     (_p_P_second 
                                        (_p_P_pair (_p_M_a_morph y) 
                                           (_p_M_b_morph y))) 
                                     (_p_M_b_morph y)))) v_Vdc v_Vzb) v_Vcc) 
                      _p_P_pair_preserves_second))) 
               (zen.nnpp 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_B_equal 
                           (_p_P_second 
                              (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                           (_p_M_b_morph x)))) 
                  (v_Vzb:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_B_equal 
                                  (_p_P_second 
                                     (_p_P_pair (_p_M_a_morph x) 
                                        (_p_M_b_morph x))) (_p_M_b_morph x)))))) =>
                   zen.Rall _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.forall _p_B_T 
                        (v_Vbc:(zen.term _p_B_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (_p_P_second (_p_P_pair v_Vac v_Vbc)) v_Vbc)))) 
                     (_p_M_a_morph x) 
                     (v_Vcc:
                      (zen.proof 
                         (zen.forall _p_B_T 
                            (v_Vbc:(zen.term _p_B_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal 
                                     (_p_P_second 
                                        (_p_P_pair (_p_M_a_morph x) v_Vbc)) 
                                     v_Vbc))))) =>
                      zen.Rall _p_B_T 
                        (v_Vbc:(zen.term _p_B_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_B_equal 
                                 (_p_P_second 
                                    (_p_P_pair (_p_M_a_morph x) v_Vbc)) v_Vbc))) 
                        (_p_M_b_morph x) 
                        (v_Vdc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_B_equal 
                                     (_p_P_second 
                                        (_p_P_pair (_p_M_a_morph x) 
                                           (_p_M_b_morph x))) 
                                     (_p_M_b_morph x))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_B_equal 
                                    (_p_P_second 
                                       (_p_P_pair (_p_M_a_morph x) 
                                          (_p_M_b_morph x))) (_p_M_b_morph x)))) 
                           v_Vdc v_Vzb) v_Vcc) _p_P_pair_preserves_second))) 
              (zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_B_equal (_p_M_b_morph x) (_p_M_b_morph y)))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_B_equal (_p_M_b_morph x) (_p_M_b_morph y)))))) =>
                  zen.Rall _p_E_T 
                    (v_Vac:(zen.term _p_E_T) =>
                     zen.forall _p_E_T 
                       (v_Vbc:(zen.term _p_E_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (_p_E_equal v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (_p_M_b_morph v_Vac) 
                                   (_p_M_b_morph v_Vbc)))))) x 
                    (v_Vcc:
                     (zen.proof 
                        (zen.forall _p_E_T 
                           (v_Vbc:(zen.term _p_E_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (_p_E_equal x v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (_p_M_b_morph x) 
                                       (_p_M_b_morph v_Vbc))))))) =>
                     zen.Rall _p_E_T 
                       (v_Vbc:(zen.term _p_E_T) =>
                        zen.imp 
                          (zen.triangle (focal.is_true (_p_E_equal x v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (_p_M_b_morph x) 
                                   (_p_M_b_morph v_Vbc))))) y 
                       (v_Vdc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle (focal.is_true (_p_E_equal x y))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (_p_M_b_morph x) 
                                       (_p_M_b_morph y)))))) =>
                        zen.Rimply 
                          (zen.triangle (focal.is_true (_p_E_equal x y))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_B_equal (_p_M_b_morph x) (_p_M_b_morph y)))) 
                          (v_Vec:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (_p_E_equal x y))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (_p_E_equal x y))) 
                             H v_Vec) 
                          (v_Vfc:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_B_equal (_p_M_b_morph x) 
                                       (_p_M_b_morph y))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_B_equal (_p_M_b_morph x) 
                                      (_p_M_b_morph y)))) v_Vfc v_Vzb) v_Vdc) 
                       v_Vcc) _p_M_b_morph_substitution_rule))))) 
       ((__N_1_1_1_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (_p_A_equal 
                  (_p_P_first (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                  (_p_P_first (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))))) =>
         zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (_p_A_equal 
                    (_p_P_first 
                       (Categorical_property_of_Product_set__morph _p_A_T 
                          _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                          _p_M_b_morph x)) 
                    (_p_P_first 
                       (Categorical_property_of_Product_set__morph _p_A_T 
                          _p_B_T _p_P_T _p_E_T _p_P_pair _p_M_a_morph 
                          _p_M_b_morph y))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal 
                           (_p_P_first 
                              (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                           (_p_P_first 
                              (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))))))) =>
            zen.Raxiom 
              (zen.triangle 
                 (focal.is_true 
                    (_p_A_equal 
                       (_p_P_first 
                          (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                       (_p_P_first 
                          (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))))) 
              __N_1_1_1_LEMMA v_Vzb)) 
          ((__N_1_1_1_1_LEMMA:
            (dk_logic.eP 
               (dk_logic.ebP (_p_A_equal (_p_M_a_morph x) (_p_M_a_morph y)))) =>
            (__N_1_1_1_2_LEMMA:
             (dk_logic.eP 
                (dk_logic.ebP 
                   (_p_A_equal 
                      (_p_P_first 
                         (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                      (_p_M_a_morph x)))) =>
             (__N_1_1_1_3_LEMMA:
              (dk_logic.eP 
                 (dk_logic.ebP 
                    (_p_A_equal 
                       (_p_P_first 
                          (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y))) 
                       (_p_M_a_morph y)))) =>
              zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal 
                         (_p_P_first 
                            (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                         (_p_P_first 
                            (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))))) 
                (v_Vvc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal 
                                (_p_P_first 
                                   (_p_P_pair (_p_M_a_morph x) 
                                      (_p_M_b_morph x))) 
                                (_p_P_first 
                                   (_p_P_pair (_p_M_a_morph y) 
                                      (_p_M_b_morph y)))))))) =>
                 zen.Rcut 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_A_T 
                               (_p_P_first 
                                  (_p_P_pair (_p_M_a_morph x) 
                                     (_p_M_b_morph x))) 
                               (_p_P_first 
                                  (_p_P_pair (_p_M_a_morph x) 
                                     (_p_M_b_morph x)))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal 
                                  (_p_P_first 
                                     (_p_P_pair (_p_M_a_morph x) 
                                        (_p_M_b_morph x))) 
                                  (_p_P_first 
                                     (_p_P_pair (_p_M_a_morph x) 
                                        (_p_M_b_morph x)))))))) 
                   (v_Vwc:
                    (zen.proof 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_A_T 
                                   (_p_P_first 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x))) 
                                   (_p_P_first 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x)))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x))) 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x))))))))) =>
                    zen.Rand 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_A_T 
                               (_p_P_first 
                                  (_p_P_pair (_p_M_a_morph x) 
                                     (_p_M_b_morph x))) 
                               (_p_P_first 
                                  (_p_P_pair (_p_M_a_morph x) 
                                     (_p_M_b_morph x)))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal 
                                  (_p_P_first 
                                     (_p_P_pair (_p_M_a_morph x) 
                                        (_p_M_b_morph x))) 
                                  (_p_P_first 
                                     (_p_P_pair (_p_M_a_morph x) 
                                        (_p_M_b_morph x))))))) 
                      (v_Vxc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_A_T 
                                   (_p_P_first 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x))) 
                                   (_p_P_first 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x))))))) =>
                       v_Vyc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x))) 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x)))))))) =>
                       zen.Rnoteq _p_A_T 
                         (_p_P_first 
                            (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                         v_Vxc) v_Vwc) 
                   (v_Vzc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_A_T 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x))) 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x)))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal 
                                         (_p_P_first 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (_p_P_first 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x)))))))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (zen.equal _p_A_T (_p_M_a_morph x) 
                            (_p_P_first 
                               (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y))))) 
                      (v_Vad:
                       (zen.proof 
                          (zen.triangle 
                             (zen.equal _p_A_T (_p_M_a_morph x) 
                                (_p_P_first 
                                   (_p_P_pair (_p_M_a_morph y) 
                                      (_p_M_b_morph y)))))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vbd:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vbd)) 
                         (_p_A_equal 
                            (_p_P_first 
                               (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                            (_p_M_a_morph x)) 
                         (_p_A_equal 
                            (_p_P_first 
                               (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                            (_p_P_first 
                               (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y)))) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_A_equal 
                                         (_p_P_first 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (_p_M_a_morph x)) 
                                      (_p_A_equal 
                                         (_p_P_first 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (_p_P_first 
                                            (_p_P_pair (_p_M_a_morph y) 
                                               (_p_M_b_morph y)))))))) =>
                          zen.Rsubst _p_A_T 
                            (v_Vdd:(zen.term _p_A_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_A_equal v_Vdd (_p_M_a_morph x)) 
                                     (_p_A_equal 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x))) 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph y) 
                                              (_p_M_b_morph y))))))) 
                            (_p_P_first 
                               (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                            (_p_P_first 
                               (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_A_T 
                                         (_p_P_first 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))) 
                                         (_p_P_first 
                                            (_p_P_pair (_p_M_a_morph x) 
                                               (_p_M_b_morph x))))))) =>
                             zen.Rnotand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_A_T 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x))) 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x)))))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))) 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))))))) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x)))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (zen.equal _p_A_T 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x))) 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x))))) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_A_T 
                                            (_p_P_first 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (_p_P_first 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x)))))) =>
                                   zen.Rcut 
                                     (zen.triangle 
                                        (zen.equal _p_A_T 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))) 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))))) 
                                     (v_Vfd0:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_A_T 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x)))))) =>
                                      zen.Rsubst _p_A_T 
                                        (v_Vgd:(zen.term _p_A_T) =>
                                         zen.triangle 
                                           (zen.equal _p_A_T v_Vgd 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))))) 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x))) 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x))) 
                                        (v_Vxc0:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph x) 
                                                       (_p_M_b_morph x))) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph x) 
                                                       (_p_M_b_morph x))))) 
                                           v_Vfd0 v_Vxc0) 
                                        (v_Vfd0:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_A_T 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x)))))) =>
                                         zen.Rsubst _p_A_T 
                                           (v_Vhd:(zen.term _p_A_T) =>
                                            zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph x) 
                                                       (_p_M_b_morph x))) 
                                                 v_Vhd)) 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))) 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))) 
                                           (v_Vxc0:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))))))) =>
                                            zen.Rnoteq _p_A_T 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))) v_Vxc0) 
                                           (v_Vfd0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x)))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_A_T 
                                                    (_p_P_first 
                                                       (_p_P_pair 
                                                          (_p_M_a_morph x) 
                                                          (_p_M_b_morph x))) 
                                                    (_p_P_first 
                                                       (_p_P_pair 
                                                          (_p_M_a_morph x) 
                                                          (_p_M_b_morph x))))) 
                                              v_Vfd0 v_Vxc) v_Vfd0) v_Vfd0) 
                                     (v_Vxc0:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_A_T 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))))))) =>
                                      zen.Rnoteq _p_A_T 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x))) v_Vxc0)) 
                                  v_Ved) 
                               (v_Vid:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))) 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x)))))) 
                                  (v_Vjd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))))))) =>
                                   zen.Rall _p_A_T 
                                     (v_Vkd:(zen.term _p_A_T) =>
                                      zen.forall _p_A_T 
                                        (v_Vld:(zen.term _p_A_T) =>
                                         zen.forall _p_A_T 
                                           (v_Vmd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal v_Vkd v_Vld))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vld 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vkd 
                                                          v_Vmd))))))) 
                                     (_p_P_first 
                                        (_p_P_pair (_p_M_a_morph x) 
                                           (_p_M_b_morph x))) 
                                     (v_Vnd:
                                      (zen.proof 
                                         (zen.forall _p_A_T 
                                            (v_Vld:(zen.term _p_A_T) =>
                                             zen.forall _p_A_T 
                                               (v_Vmd:(zen.term _p_A_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           v_Vld))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal v_Vld 
                                                              v_Vmd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              v_Vmd)))))))) =>
                                      zen.Rall _p_A_T 
                                        (v_Vld:(zen.term _p_A_T) =>
                                         zen.forall _p_A_T 
                                           (v_Vmd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       v_Vld))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal v_Vld 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) v_Vmd)))))) 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph x) 
                                              (_p_M_b_morph x))) 
                                        (v_Vod:
                                         (zen.proof 
                                            (zen.forall _p_A_T 
                                               (v_Vmd:(zen.term _p_A_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x)))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              v_Vmd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              v_Vmd))))))) =>
                                         zen.Rall _p_A_T 
                                           (v_Vmd:(zen.term _p_A_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x)))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) v_Vmd))))) 
                                           (_p_M_a_morph x) 
                                           (v_Vpd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x)))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_M_a_morph x)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_M_a_morph x))))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x)))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (_p_M_a_morph x)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (_p_M_a_morph x))))) 
                                              (v_Vyc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x)))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x)))))) 
                                                 v_Vjd v_Vyc) 
                                              (v_Vqd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_M_a_morph x)))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_M_a_morph x)))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (_p_M_a_morph x)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (_p_M_a_morph x)))) 
                                                 (v_Vrd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                 (_p_M_a_morph 
                                                                    x)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_M_b_morph 
                                                                    x))) 
                                                             (_p_M_a_morph x)))) 
                                                    __N_1_1_1_2_LEMMA v_Vrd) 
                                                 (__N_1_1_1_2_LEMMA0:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_M_a_morph x))))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vbd:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vbd)) 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (_p_M_a_morph x)) 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph y) 
                                                             (_p_M_b_morph y)))) 
                                                    (v_Vcd0:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_A_equal 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x)) 
                                                                 (_p_A_equal 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                     zen.Rsubst _p_A_T 
                                                       (v_Vdd:
                                                        (zen.term _p_A_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_A_equal 
                                                                   v_Vdd 
                                                                   (_p_M_a_morph 
                                                                    x)) 
                                                                (_p_A_equal 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (v_Vxc0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))))))) =>
                                                        zen.Rnoteq _p_A_T 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          v_Vxc0) 
                                                       (v_Vcd0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_M_a_morph 
                                                                    x)) 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                        zen.Rsubst _p_A_T 
                                                          (v_Vsd:
                                                           (zen.term _p_A_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vsd) 
                                                                   (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) 
                                                          (_p_M_a_morph x) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))) 
                                                          (v_Vtd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                             v_Vad v_Vtd) 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (_p_A_equal 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                             v_Vud) v_Vcd0) 
                                                       v_Vcd0) 
                                                    (v_Vvd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                       v_Vvd v_Vvc) 
                                                    __N_1_1_1_2_LEMMA0) v_Vqd) 
                                              v_Vpd) v_Vod) v_Vnd) 
                                     _p_A_equal_transitive) v_Vid) v_Vzc) 
                            (v_Vcd0:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_A_equal 
                                            (_p_P_first 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (_p_M_a_morph x)) 
                                         (_p_A_equal 
                                            (_p_P_first 
                                               (_p_P_pair (_p_M_a_morph x) 
                                                  (_p_M_b_morph x))) 
                                            (_p_P_first 
                                               (_p_P_pair (_p_M_a_morph y) 
                                                  (_p_M_b_morph y)))))))) =>
                             zen.Rsubst _p_A_T 
                               (v_Vsd:(zen.term _p_A_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_A_equal 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))) v_Vsd) 
                                        (_p_A_equal 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph x) 
                                                 (_p_M_b_morph x))) 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph y) 
                                                 (_p_M_b_morph y))))))) 
                               (_p_M_a_morph x) 
                               (_p_P_first 
                                  (_p_P_pair (_p_M_a_morph y) 
                                     (_p_M_b_morph y))) 
                               (v_Vtd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_A_T (_p_M_a_morph x) 
                                            (_p_P_first 
                                               (_p_P_pair (_p_M_a_morph y) 
                                                  (_p_M_b_morph y))))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (zen.equal _p_A_T (_p_M_a_morph x) 
                                        (_p_P_first 
                                           (_p_P_pair (_p_M_a_morph y) 
                                              (_p_M_b_morph y))))) v_Vad 
                                  v_Vtd) 
                               (v_Vud:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_A_equal 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y)))) 
                                            (_p_A_equal 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph x) 
                                                     (_p_M_b_morph x))) 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y)))))))) =>
                                zen.Rnoteq basics.bool__t 
                                  (_p_A_equal 
                                     (_p_P_first 
                                        (_p_P_pair (_p_M_a_morph x) 
                                           (_p_M_b_morph x))) 
                                     (_p_P_first 
                                        (_p_P_pair (_p_M_a_morph y) 
                                           (_p_M_b_morph y)))) v_Vud) v_Vcd0) 
                            v_Vcd) 
                         (v_Vvd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph x) 
                                            (_p_M_b_morph x))) 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph y) 
                                            (_p_M_b_morph y))))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal 
                                     (_p_P_first 
                                        (_p_P_pair (_p_M_a_morph x) 
                                           (_p_M_b_morph x))) 
                                     (_p_P_first 
                                        (_p_P_pair (_p_M_a_morph y) 
                                           (_p_M_b_morph y)))))) v_Vvd v_Vvc) 
                         __N_1_1_1_2_LEMMA) 
                      (v_Vtd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_A_T (_p_M_a_morph x) 
                                   (_p_P_first 
                                      (_p_P_pair (_p_M_a_morph y) 
                                         (_p_M_b_morph y))))))) =>
                       zen.Rcut 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (_p_M_a_morph x) 
                                  (_p_P_first 
                                     (_p_P_pair (_p_M_a_morph y) 
                                        (_p_M_b_morph y)))))) 
                         (v_Vwd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (_p_M_a_morph x) 
                                      (_p_P_first 
                                         (_p_P_pair (_p_M_a_morph y) 
                                            (_p_M_b_morph y))))))) =>
                          zen.Rall _p_A_T 
                            (v_Vkd:(zen.term _p_A_T) =>
                             zen.forall _p_A_T 
                               (v_Vld:(zen.term _p_A_T) =>
                                zen.forall _p_A_T 
                                  (v_Vmd:(zen.term _p_A_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal v_Vkd v_Vld))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal v_Vld v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal v_Vkd v_Vmd))))))) 
                            (_p_P_first 
                               (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                            (v_Vnd:
                             (zen.proof 
                                (zen.forall _p_A_T 
                                   (v_Vld:(zen.term _p_A_T) =>
                                    zen.forall _p_A_T 
                                      (v_Vmd:(zen.term _p_A_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  v_Vld))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal v_Vld v_Vmd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     v_Vmd)))))))) =>
                             zen.Rall _p_A_T 
                               (v_Vld:(zen.term _p_A_T) =>
                                zen.forall _p_A_T 
                                  (v_Vmd:(zen.term _p_A_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))) v_Vld))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal v_Vld v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph x) 
                                                       (_p_M_b_morph x))) 
                                                 v_Vmd)))))) 
                               (_p_M_a_morph x) 
                               (v_Vxd:
                                (zen.proof 
                                   (zen.forall _p_A_T 
                                      (v_Vmd:(zen.term _p_A_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_M_a_morph x)))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_M_a_morph x) v_Vmd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     v_Vmd))))))) =>
                                zen.Rall _p_A_T 
                                  (v_Vmd:(zen.term _p_A_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))) 
                                              (_p_M_a_morph x)))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal (_p_M_a_morph x) 
                                                 v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph x) 
                                                       (_p_M_b_morph x))) 
                                                 v_Vmd))))) 
                                  (_p_P_first 
                                     (_p_P_pair (_p_M_a_morph y) 
                                        (_p_M_b_morph y))) 
                                  (v_Vyd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph x) 
                                                        (_p_M_b_morph x))) 
                                                  (_p_M_a_morph x)))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_M_a_morph x) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y)))))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))) 
                                              (_p_M_a_morph x)))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal (_p_M_a_morph x) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y)))))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph x) 
                                                       (_p_M_b_morph x))) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y))))))) 
                                     (v_Vrd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     (_p_M_a_morph x)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph x) 
                                                       (_p_M_b_morph x))) 
                                                 (_p_M_a_morph x)))) 
                                        __N_1_1_1_2_LEMMA v_Vrd) 
                                     (v_Vzd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_M_a_morph x) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y)))))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y)))))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal (_p_M_a_morph x) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y)))))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_A_equal 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph x) 
                                                       (_p_M_b_morph x))) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y)))))) 
                                        (v_Vae:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (_p_M_a_morph x) 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y)))))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (_p_M_a_morph x) 
                                                    (_p_P_first 
                                                       (_p_P_pair 
                                                          (_p_M_a_morph y) 
                                                          (_p_M_b_morph y)))))) 
                                           v_Vwd v_Vae) 
                                        (v_Vvd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_A_equal 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph x) 
                                                           (_p_M_b_morph x))) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))))))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vbe:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vbe)) 
                                           (_p_A_equal 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))) 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph y) 
                                                    (_p_M_b_morph y)))) 
                                           (_p_A_equal 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))) 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph y) 
                                                    (_p_M_b_morph y)))) 
                                           (v_Vud:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_A_equal 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y)))) 
                                                        (_p_A_equal 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y)))))))) =>
                                            zen.Rsubst _p_A_T 
                                              (v_Vce:(zen.term _p_A_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_A_equal v_Vce 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y)))) 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))))))) 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))) 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph x) 
                                                    (_p_M_b_morph x))) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))) 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_b_morph 
                                                                    x))))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x)))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_M_b_morph 
                                                                    x))) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_M_b_morph 
                                                                    x))))))) 
                                                 (v_Ved:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))))) 
                                                    (v_Vfd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x)))))) =>
                                                     zen.Reqsym _p_A_T 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       v_Vfd v_Vxc) v_Ved) 
                                                 (v_Vid:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_M_b_morph 
                                                                    x))) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_M_b_morph 
                                                                    x)))))) 
                                                    (v_Vjd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))))))) =>
                                                     zen.Rall _p_A_T 
                                                       (v_Vkd:
                                                        (zen.term _p_A_T) =>
                                                        zen.forall _p_A_T 
                                                          (v_Vld:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (v_Vnd0:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_A_T 
                                                              (v_Vld:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vld))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd)))))))) =>
                                                        zen.Rall _p_A_T 
                                                          (v_Vld:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd)))))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_b_morph 
                                                                   x))) 
                                                          (v_Vod:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd))))))) =>
                                                           zen.Rall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    v_Vmd))))) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))) 
                                                             (v_Vde:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) 
                                                                (v_Vyc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x)))))) 
                                                                   v_Vjd 
                                                                   v_Vyc) 
                                                                (v_Vee:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                   (v_Vvc0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    v_Vvd 
                                                                    v_Vvc0) 
                                                                   (v_Vvd0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    v_Vvd0 
                                                                    v_Vvc) 
                                                                   v_Vee) 
                                                                v_Vde) v_Vod) 
                                                          v_Vnd0) 
                                                       _p_A_equal_transitive) 
                                                    v_Vid) v_Vzc) 
                                              (v_Vud0:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y)))) 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    x))) 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y)))))))) =>
                                               zen.Rsubst _p_A_T 
                                                 (v_Vfe:(zen.term _p_A_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_M_b_morph 
                                                                    x))) 
                                                             v_Vfe) 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_M_b_morph 
                                                                    x))) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))))))) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y))) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y))) 
                                                 (v_Vge:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))))))) =>
                                                  zen.Rnoteq _p_A_T 
                                                    (_p_P_first 
                                                       (_p_P_pair 
                                                          (_p_M_a_morph y) 
                                                          (_p_M_b_morph y))) 
                                                    v_Vge) 
                                                 (v_Vud0:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_A_equal 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))) 
                                                              (_p_A_equal 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_b_morph 
                                                                    x))) 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph y) 
                                                             (_p_M_b_morph y)))) 
                                                    v_Vud0) v_Vud0) v_Vud) 
                                           (v_Vvd0:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph x) 
                                                              (_p_M_b_morph x))) 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_b_morph x))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph y) 
                                                             (_p_M_b_morph y)))))) 
                                              v_Vvd0 v_Vvc) v_Vvd) v_Vzd) 
                                     v_Vyd) v_Vxd) v_Vnd) 
                            _p_A_equal_transitive) 
                         (v_Vae:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_A_equal (_p_M_a_morph x) 
                                         (_p_P_first 
                                            (_p_P_pair (_p_M_a_morph y) 
                                               (_p_M_b_morph y)))))))) =>
                          zen.Rall _p_A_T 
                            (v_Vkd:(zen.term _p_A_T) =>
                             zen.forall _p_A_T 
                               (v_Vld:(zen.term _p_A_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_A_equal v_Vkd v_Vld))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_A_equal v_Vld v_Vkd))))) 
                            (_p_P_first 
                               (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y))) 
                            (v_Vhe:
                             (zen.proof 
                                (zen.forall _p_A_T 
                                   (v_Vld:(zen.term _p_A_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))) v_Vld))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal v_Vld 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))))))))) =>
                             zen.Rall _p_A_T 
                               (v_Vld:(zen.term _p_A_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph y) 
                                                 (_p_M_b_morph y))) v_Vld))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal v_Vld 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph y) 
                                                 (_p_M_b_morph y))))))) 
                               (_p_M_a_morph x) 
                               (v_Vie:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))) 
                                               (_p_M_a_morph x)))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (_p_M_a_morph x) 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y)))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph y) 
                                                 (_p_M_b_morph y))) 
                                           (_p_M_a_morph x)))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_A_equal (_p_M_a_morph x) 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph y) 
                                                 (_p_M_b_morph y)))))) 
                                  (v_Vje:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_A_equal 
                                                  (_p_P_first 
                                                     (_p_P_pair 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_b_morph y))) 
                                                  (_p_M_a_morph x)))))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y))) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y)))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (_p_P_first 
                                                       (_p_P_pair 
                                                          (_p_M_a_morph y) 
                                                          (_p_M_b_morph y))) 
                                                    (_p_P_first 
                                                       (_p_P_pair 
                                                          (_p_M_a_morph y) 
                                                          (_p_M_b_morph y)))))))) 
                                     (v_Vke:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y)))))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))) 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))))))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_A_T 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y))) 
                                                 (_p_P_first 
                                                    (_p_P_pair 
                                                       (_p_M_a_morph y) 
                                                       (_p_M_b_morph y)))))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (_p_P_first 
                                                       (_p_P_pair 
                                                          (_p_M_a_morph y) 
                                                          (_p_M_b_morph y))) 
                                                    (_p_P_first 
                                                       (_p_P_pair 
                                                          (_p_M_a_morph y) 
                                                          (_p_M_b_morph y))))))) 
                                        (v_Vge:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))) 
                                                     (_p_P_first 
                                                        (_p_P_pair 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_b_morph y))))))) =>
                                         v_Vle:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))) 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y)))))))) =>
                                         zen.Rnoteq _p_A_T 
                                           (_p_P_first 
                                              (_p_P_pair (_p_M_a_morph y) 
                                                 (_p_M_b_morph y))) v_Vge) 
                                        v_Vke) 
                                     (v_Vme:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_A_T 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))) 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y)))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y)))))))))) =>
                                      zen.Rcut 
                                        (zen.triangle 
                                           (zen.equal _p_A_T 
                                              (_p_M_a_morph y) 
                                              (_p_M_a_morph x))) 
                                        (v_Vne:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_A_T 
                                                  (_p_M_a_morph y) 
                                                  (_p_M_a_morph x)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vbe:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vbe)) 
                                           (_p_A_equal 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph y) 
                                                    (_p_M_b_morph y))) 
                                              (_p_M_a_morph y)) 
                                           (_p_A_equal 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph y) 
                                                    (_p_M_b_morph y))) 
                                              (_p_M_a_morph x)) 
                                           (v_Voe:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_A_equal 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (_p_M_a_morph y)) 
                                                        (_p_A_equal 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (_p_M_a_morph x)))))) =>
                                            zen.Rsubst _p_A_T 
                                              (v_Vpe:(zen.term _p_A_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_A_equal v_Vpe 
                                                          (_p_M_a_morph y)) 
                                                       (_p_A_equal 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))) 
                                                          (_p_M_a_morph x))))) 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph y) 
                                                    (_p_M_b_morph y))) 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph y) 
                                                    (_p_M_b_morph y))) 
                                              (v_Vge:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_A_T 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))) 
                                                           (_p_P_first 
                                                              (_p_P_pair 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_b_morph 
                                                                    y))))))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y)))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))))))) 
                                                 (v_Vqe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))))) 
                                                    (v_Vre:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y)))))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal _p_A_T 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))))) 
                                                       (v_Vre0:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_A_T 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                        zen.Rsubst _p_A_T 
                                                          (v_Vse:
                                                           (zen.term _p_A_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                _p_A_T v_Vse 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))) 
                                                          (v_Vge0:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                             v_Vre0 v_Vge0) 
                                                          (v_Vre0:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                           zen.Rsubst _p_A_T 
                                                             (v_Vte:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   _p_A_T 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                   v_Vte)) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))) 
                                                             (v_Vge0:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                              zen.Rnoteq 
                                                                _p_A_T 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                v_Vge0) 
                                                             (v_Vre0:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                                v_Vre0 v_Vge) 
                                                             v_Vre0) v_Vre0) 
                                                       (v_Vge0:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_A_T 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                        zen.Rnoteq _p_A_T 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))) 
                                                          v_Vge0)) v_Vqe) 
                                                 (v_Vue:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))) 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y)))))) 
                                                    (v_Vve:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                     zen.Rall _p_A_T 
                                                       (v_Vkd:
                                                        (zen.term _p_A_T) =>
                                                        zen.forall _p_A_T 
                                                          (v_Vld:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph y) 
                                                             (_p_M_b_morph y))) 
                                                       (v_Vwe:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_A_T 
                                                              (v_Vld:
                                                               (zen.term 
                                                                  _p_A_T) =>
                                                               zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))))) =>
                                                        zen.Rall _p_A_T 
                                                          (v_Vld:
                                                           (zen.term _p_A_T) =>
                                                           zen.forall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))) 
                                                          (_p_P_first 
                                                             (_p_P_pair 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_b_morph 
                                                                   y))) 
                                                          (v_Vxe:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_A_T 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    _p_A_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))))) =>
                                                           zen.Rall _p_A_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_A_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))) 
                                                             (_p_M_a_morph y) 
                                                             (v_Vye:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y))))) 
                                                                (v_Vle:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                   v_Vve 
                                                                   v_Vle) 
                                                                (v_Vze:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))) 
                                                                   (v_Vaf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))) 
                                                                    __N_1_1_1_3_LEMMA 
                                                                    v_Vaf) 
                                                                   (__N_1_1_1_3_LEMMA0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y))))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vbe:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vbe)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)) 
                                                                    (v_Voe0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vpe:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vpe 
                                                                    (_p_M_a_morph 
                                                                    y)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (v_Vge0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vge0) 
                                                                    (v_Voe0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                                    zen.Rsubst 
                                                                    _p_A_T 
                                                                    (v_Vbf:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vbf) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_a_morph 
                                                                    x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_a_morph 
                                                                    x))) 
                                                                    v_Vne 
                                                                    v_Vcf) 
                                                                    (v_Vdf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)) v_Vdf) 
                                                                    v_Voe0) 
                                                                    v_Voe0) 
                                                                    (v_Vef:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                    v_Vef 
                                                                    v_Vje) 
                                                                    __N_1_1_1_3_LEMMA0) 
                                                                   v_Vze) 
                                                                v_Vye) v_Vxe) 
                                                          v_Vwe) 
                                                       _p_A_equal_transitive) 
                                                    v_Vue) v_Vme) 
                                              (v_Voe0:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_M_a_morph y)) 
                                                           (_p_A_equal 
                                                              (_p_P_first 
                                                                 (_p_P_pair 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y) 
                                                                    (
                                                                    _p_M_b_morph 
                                                                    y))) 
                                                              (_p_M_a_morph x)))))) =>
                                               zen.Rsubst _p_A_T 
                                                 (v_Vbf:(zen.term _p_A_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))) 
                                                             v_Vbf) 
                                                          (_p_A_equal 
                                                             (_p_P_first 
                                                                (_p_P_pair 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_b_morph 
                                                                    y))) 
                                                             (_p_M_a_morph x))))) 
                                                 (_p_M_a_morph y) 
                                                 (_p_M_a_morph x) 
                                                 (v_Vcf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal _p_A_T 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_a_morph x))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal _p_A_T 
                                                          (_p_M_a_morph y) 
                                                          (_p_M_a_morph x))) 
                                                    v_Vne v_Vcf) 
                                                 (v_Vdf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_A_equal 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_M_a_morph 
                                                                    x)) 
                                                              (_p_A_equal 
                                                                 (_p_P_first 
                                                                    (
                                                                    _p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                 (_p_M_a_morph 
                                                                    x)))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph y) 
                                                             (_p_M_b_morph y))) 
                                                       (_p_M_a_morph x)) 
                                                    v_Vdf) v_Voe0) v_Voe) 
                                           (v_Vef:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (_p_P_first 
                                                           (_p_P_pair 
                                                              (_p_M_a_morph y) 
                                                              (_p_M_b_morph y))) 
                                                        (_p_M_a_morph x))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_A_equal 
                                                       (_p_P_first 
                                                          (_p_P_pair 
                                                             (_p_M_a_morph y) 
                                                             (_p_M_b_morph y))) 
                                                       (_p_M_a_morph x)))) 
                                              v_Vef v_Vje) __N_1_1_1_3_LEMMA) 
                                        (v_Vcf:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_A_T 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_a_morph x))))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_A_equal 
                                                    (_p_M_a_morph y) 
                                                    (_p_M_a_morph x)))) 
                                           (v_Vff:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_A_equal 
                                                        (_p_M_a_morph y) 
                                                        (_p_M_a_morph x))))) =>
                                            zen.Rall _p_A_T 
                                              (v_Vkd:(zen.term _p_A_T) =>
                                               zen.forall _p_A_T 
                                                 (v_Vld:(zen.term _p_A_T) =>
                                                  zen.forall _p_A_T 
                                                    (v_Vmd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                v_Vkd v_Vld))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vld 
                                                                   v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vkd 
                                                                   v_Vmd))))))) 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph y) 
                                                    (_p_M_b_morph y))) 
                                              (v_Vwe:
                                               (zen.proof 
                                                  (zen.forall _p_A_T 
                                                     (v_Vld:
                                                      (zen.term _p_A_T) =>
                                                      zen.forall _p_A_T 
                                                        (v_Vmd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))))) =>
                                               zen.Rall _p_A_T 
                                                 (v_Vld:(zen.term _p_A_T) =>
                                                  zen.forall _p_A_T 
                                                    (v_Vmd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                v_Vld))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   v_Vld 
                                                                   v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                   v_Vmd)))))) 
                                                 (_p_M_a_morph y) 
                                                 (v_Vgf:
                                                  (zen.proof 
                                                     (zen.forall _p_A_T 
                                                        (v_Vmd:
                                                         (zen.term _p_A_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_M_a_morph 
                                                                    y) v_Vmd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))))) =>
                                                  zen.Rall _p_A_T 
                                                    (v_Vmd:
                                                     (zen.term _p_A_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                (_p_M_a_morph 
                                                                   y)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (_p_M_a_morph 
                                                                    y) v_Vmd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                   v_Vmd))))) 
                                                    (_p_M_a_morph x) 
                                                    (v_Vhf:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    _p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y)))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                (_p_M_a_morph 
                                                                   y)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_a_morph 
                                                                    x)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                   (_p_M_a_morph 
                                                                    x))))) 
                                                       (v_Vaf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    y)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                   (_p_M_a_morph 
                                                                    y)))) 
                                                          __N_1_1_1_3_LEMMA 
                                                          v_Vaf) 
                                                       (v_Vif:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (_p_M_a_morph 
                                                                    y) 
                                                                   (_p_M_a_morph 
                                                                    x)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_A_equal 
                                                                   (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                   (_p_M_a_morph 
                                                                    x)))) 
                                                          (v_Vjf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_A_equal 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                             v_Vff v_Vjf) 
                                                          (v_Vef:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vbe:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vbe)) 
                                                             (_p_A_equal 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                (_p_M_a_morph 
                                                                   x)) 
                                                             (_p_A_equal 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                (_p_M_a_morph 
                                                                   x)) 
                                                             (v_Vdf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                              zen.Rsubst 
                                                                _p_A_T 
                                                                (v_Vkf:
                                                                 (zen.term 
                                                                    _p_A_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    v_Vkf 
                                                                    (_p_M_a_morph 
                                                                    x)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                (_p_P_first 
                                                                   (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                (v_Vge:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) 
                                                                   (v_Vqe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))) 
                                                                    (v_Vre:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) =>
                                                                    zen.Reqsym 
                                                                    _p_A_T 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vre 
                                                                    v_Vge) 
                                                                    v_Vqe) 
                                                                   (v_Vue:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vkd 
                                                                    v_Vmd))))))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (v_Vwe0:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vld:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vld))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    v_Vld 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd)))))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (v_Vxe:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))))) =>
                                                                    zen.Rall 
                                                                    _p_A_T 
                                                                    (v_Vmd:
                                                                    (zen.term 
                                                                    _p_A_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vmd))))) 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (v_Vlf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y)))))) 
                                                                    v_Vve 
                                                                    v_Vle) 
                                                                    (v_Vmf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                    (v_Vje0:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                    v_Vef 
                                                                    v_Vje0) 
                                                                    (v_Vef0:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                    v_Vef0 
                                                                    v_Vje) 
                                                                    v_Vmf) 
                                                                    v_Vlf) 
                                                                    v_Vxe) 
                                                                    v_Vwe0) 
                                                                    _p_A_equal_transitive) 
                                                                    v_Vue) 
                                                                   v_Vme) 
                                                                (v_Vdf0:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                                 zen.Rsubst 
                                                                   _p_A_T 
                                                                   (v_Vbf:
                                                                    (
                                                                    zen.term 
                                                                    _p_A_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    v_Vbf) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (_p_M_a_morph 
                                                                    x) 
                                                                   (v_Vnf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_A_T 
                                                                    (_p_M_a_morph 
                                                                    x) 
                                                                    (_p_M_a_morph 
                                                                    x))))) =>
                                                                    zen.Rnoteq 
                                                                    _p_A_T 
                                                                    (_p_M_a_morph 
                                                                    x) v_Vnf) 
                                                                   (v_Vdf0:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)) 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)) 
                                                                    v_Vdf0) 
                                                                   v_Vdf0) 
                                                                v_Vdf) 
                                                             (v_Vef0:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_A_equal 
                                                                    (_p_P_first 
                                                                    (_p_P_pair 
                                                                    (_p_M_a_morph 
                                                                    y) 
                                                                    (_p_M_b_morph 
                                                                    y))) 
                                                                    (_p_M_a_morph 
                                                                    x)))) 
                                                                v_Vef0 v_Vje) 
                                                             v_Vef) v_Vif) 
                                                       v_Vhf) v_Vgf) v_Vwe) 
                                              _p_A_equal_transitive) 
                                           (v_Vjf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_A_equal 
                                                           (_p_M_a_morph y) 
                                                           (_p_M_a_morph x)))))) =>
                                            zen.Rall _p_A_T 
                                              (v_Vkd:(zen.term _p_A_T) =>
                                               zen.forall _p_A_T 
                                                 (v_Vld:(zen.term _p_A_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vkd 
                                                             v_Vld))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vld 
                                                             v_Vkd))))) 
                                              (_p_M_a_morph x) 
                                              (v_Vof:
                                               (zen.proof 
                                                  (zen.forall _p_A_T 
                                                     (v_Vld:
                                                      (zen.term _p_A_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (_p_M_a_morph 
                                                                    x) v_Vld))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 v_Vld 
                                                                 (_p_M_a_morph 
                                                                    x))))))) =>
                                               zen.Rall _p_A_T 
                                                 (v_Vld:(zen.term _p_A_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (_p_M_a_morph x) 
                                                             v_Vld))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal v_Vld 
                                                             (_p_M_a_morph x))))) 
                                                 (_p_M_a_morph y) 
                                                 (v_Vpf:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (_p_M_a_morph 
                                                                    x) 
                                                                 (_p_M_a_morph 
                                                                    y)))) 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_a_morph 
                                                                    x)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (_p_M_a_morph x) 
                                                             (_p_M_a_morph y)))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_A_equal 
                                                             (_p_M_a_morph y) 
                                                             (_p_M_a_morph x)))) 
                                                    (v_Vqf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_A_equal 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    x) 
                                                                    (
                                                                    _p_M_a_morph 
                                                                    y)))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (_p_M_a_morph 
                                                                   x) 
                                                                (_p_M_a_morph 
                                                                   y)))) 
                                                       __N_1_1_1_1_LEMMA 
                                                       v_Vqf) 
                                                    (v_Vff:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_A_equal 
                                                                 (_p_M_a_morph 
                                                                    y) 
                                                                 (_p_M_a_morph 
                                                                    x))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_A_equal 
                                                                (_p_M_a_morph 
                                                                   y) 
                                                                (_p_M_a_morph 
                                                                   x)))) 
                                                       v_Vff v_Vjf) v_Vpf) 
                                                 v_Vof) _p_A_equal_symmetric)))) 
                                  (v_Vwd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_A_equal (_p_M_a_morph x) 
                                               (_p_P_first 
                                                  (_p_P_pair 
                                                     (_p_M_a_morph y) 
                                                     (_p_M_b_morph y))))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_A_equal (_p_M_a_morph x) 
                                              (_p_P_first 
                                                 (_p_P_pair (_p_M_a_morph y) 
                                                    (_p_M_b_morph y)))))) 
                                     v_Vwd v_Vae) v_Vie) v_Vhe) 
                            _p_A_equal_symmetric))))) 
               (zen.nnpp 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_A_equal 
                           (_p_P_first 
                              (_p_P_pair (_p_M_a_morph y) (_p_M_b_morph y))) 
                           (_p_M_a_morph y)))) 
                  (v_Vzb:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal 
                                  (_p_P_first 
                                     (_p_P_pair (_p_M_a_morph y) 
                                        (_p_M_b_morph y))) (_p_M_a_morph y)))))) =>
                   zen.Rall _p_A_T 
                     (v_Vac:(zen.term _p_A_T) =>
                      zen.forall _p_B_T 
                        (v_Vbc:(zen.term _p_B_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_A_equal 
                                 (_p_P_first (_p_P_pair v_Vac v_Vbc)) v_Vac)))) 
                     (_p_M_a_morph y) 
                     (v_Vcc:
                      (zen.proof 
                         (zen.forall _p_B_T 
                            (v_Vbc:(zen.term _p_B_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal 
                                     (_p_P_first 
                                        (_p_P_pair (_p_M_a_morph y) v_Vbc)) 
                                     (_p_M_a_morph y)))))) =>
                      zen.Rall _p_B_T 
                        (v_Vbc:(zen.term _p_B_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_A_equal 
                                 (_p_P_first 
                                    (_p_P_pair (_p_M_a_morph y) v_Vbc)) 
                                 (_p_M_a_morph y)))) (_p_M_b_morph y) 
                        (v_Vdc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal 
                                     (_p_P_first 
                                        (_p_P_pair (_p_M_a_morph y) 
                                           (_p_M_b_morph y))) 
                                     (_p_M_a_morph y))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (_p_P_first 
                                       (_p_P_pair (_p_M_a_morph y) 
                                          (_p_M_b_morph y))) (_p_M_a_morph y)))) 
                           v_Vdc v_Vzb) v_Vcc) _p_P_pair_preserves_first))) 
              (zen.nnpp 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_A_equal 
                          (_p_P_first 
                             (_p_P_pair (_p_M_a_morph x) (_p_M_b_morph x))) 
                          (_p_M_a_morph x)))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_A_equal 
                                 (_p_P_first 
                                    (_p_P_pair (_p_M_a_morph x) 
                                       (_p_M_b_morph x))) (_p_M_a_morph x)))))) =>
                  zen.Rall _p_A_T 
                    (v_Vac:(zen.term _p_A_T) =>
                     zen.forall _p_B_T 
                       (v_Vbc:(zen.term _p_B_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (_p_A_equal 
                                (_p_P_first (_p_P_pair v_Vac v_Vbc)) v_Vac)))) 
                    (_p_M_a_morph x) 
                    (v_Vcc:
                     (zen.proof 
                        (zen.forall _p_B_T 
                           (v_Vbc:(zen.term _p_B_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (_p_P_first 
                                       (_p_P_pair (_p_M_a_morph x) v_Vbc)) 
                                    (_p_M_a_morph x)))))) =>
                     zen.Rall _p_B_T 
                       (v_Vbc:(zen.term _p_B_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (_p_A_equal 
                                (_p_P_first 
                                   (_p_P_pair (_p_M_a_morph x) v_Vbc)) 
                                (_p_M_a_morph x)))) (_p_M_b_morph x) 
                       (v_Vdc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_A_equal 
                                    (_p_P_first 
                                       (_p_P_pair (_p_M_a_morph x) 
                                          (_p_M_b_morph x))) (_p_M_a_morph x))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_A_equal 
                                   (_p_P_first 
                                      (_p_P_pair (_p_M_a_morph x) 
                                         (_p_M_b_morph x))) (_p_M_a_morph x)))) 
                          v_Vdc v_Vzb) v_Vcc) _p_P_pair_preserves_first))) 
             (zen.nnpp 
                (zen.triangle 
                   (focal.is_true 
                      (_p_A_equal (_p_M_a_morph x) (_p_M_a_morph y)))) 
                (v_Vzb:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_A_equal (_p_M_a_morph x) (_p_M_a_morph y)))))) =>
                 zen.Rall _p_E_T 
                   (v_Vac:(zen.term _p_E_T) =>
                    zen.forall _p_E_T 
                      (v_Vbc:(zen.term _p_E_T) =>
                       zen.imp 
                         (zen.triangle 
                            (focal.is_true (_p_E_equal v_Vac v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (_p_M_a_morph v_Vac) 
                                  (_p_M_a_morph v_Vbc)))))) x 
                   (v_Vcc:
                    (zen.proof 
                       (zen.forall _p_E_T 
                          (v_Vbc:(zen.term _p_E_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_E_equal x v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (_p_M_a_morph x) 
                                      (_p_M_a_morph v_Vbc))))))) =>
                    zen.Rall _p_E_T 
                      (v_Vbc:(zen.term _p_E_T) =>
                       zen.imp 
                         (zen.triangle (focal.is_true (_p_E_equal x v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (_p_M_a_morph x) 
                                  (_p_M_a_morph v_Vbc))))) y 
                      (v_Vdc:
                       (zen.proof 
                          (zen.imp 
                             (zen.triangle (focal.is_true (_p_E_equal x y))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (_p_M_a_morph x) 
                                      (_p_M_a_morph y)))))) =>
                       zen.Rimply 
                         (zen.triangle (focal.is_true (_p_E_equal x y))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_A_equal (_p_M_a_morph x) (_p_M_a_morph y)))) 
                         (v_Vec:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_E_equal x y))))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (_p_E_equal x y))) 
                            H v_Vec) 
                         (v_Vfc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_A_equal (_p_M_a_morph x) 
                                      (_p_M_a_morph y))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_A_equal (_p_M_a_morph x) 
                                     (_p_M_a_morph y)))) v_Vfc v_Vzb) v_Vdc) 
                      v_Vcc) _p_M_a_morph_substitution_rule))))).

Cartesian_product__me_as_species :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) -> Type.

Cartesian_product__mk_record :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  Cartesian_product__rf_T:cc.uT ->
  Cartesian_product__rf_first:((cc.eT Cartesian_product__rf_T) -> cc.eT A_T) ->
  Cartesian_product__rf_pair:((cc.eT A_T) ->
                              (cc.eT B_T) -> cc.eT Cartesian_product__rf_T) ->
  Cartesian_product__rf_parse:((cc.eT basics.string__t) ->
                               cc.eT Cartesian_product__rf_T) ->
  Cartesian_product__rf_print:((cc.eT Cartesian_product__rf_T) ->
                               cc.eT basics.string__t) ->
  Cartesian_product__rf_second:((cc.eT Cartesian_product__rf_T) -> cc.eT B_T) ->
  Cartesian_product__rf_element:(cc.eT Cartesian_product__rf_T) ->
  Cartesian_product__rf_pair_preserves_first:(dk_logic.eP 
                                                (dk_logic.forall A_T 
                                                   (x:(cc.eT A_T) =>
                                                    dk_logic.forall B_T 
                                                      (y:(cc.eT B_T) =>
                                                       dk_logic.ebP 
                                                         (_p_A_equal 
                                                            (Cartesian_product__rf_first 
                                                               (Cartesian_product__rf_pair 
                                                                  x y)) x))))) ->
  Cartesian_product__rf_equal:((cc.eT Cartesian_product__rf_T) ->
                               (cc.eT Cartesian_product__rf_T) ->
                               cc.eT basics.bool__t) ->
  Cartesian_product__rf_pair_preserves_second:(dk_logic.eP 
                                                 (dk_logic.forall A_T 
                                                    (x:(cc.eT A_T) =>
                                                     dk_logic.forall B_T 
                                                       (y:(cc.eT B_T) =>
                                                        dk_logic.ebP 
                                                          (_p_B_equal 
                                                             (Cartesian_product__rf_second 
                                                                (Cartesian_product__rf_pair 
                                                                   x y)) y))))) ->
  Cartesian_product__rf_first_accessibility:(dk_logic.eP 
                                               (dk_logic.forall A_T 
                                                  (x:(cc.eT A_T) =>
                                                   dk_logic.exists 
                                                     Cartesian_product__rf_T 
                                                     (s:
                                                      (cc.eT 
                                                         Cartesian_product__rf_T) =>
                                                      dk_logic.ebP 
                                                        (_p_A_equal 
                                                           (Cartesian_product__rf_first 
                                                              s) x))))) ->
  Cartesian_product__rf_different:((cc.eT Cartesian_product__rf_T) ->
                                   (cc.eT Cartesian_product__rf_T) ->
                                   cc.eT basics.bool__t) ->
  Cartesian_product__rf_equal_reflexive:(dk_logic.eP 
                                           (dk_logic.forall 
                                              Cartesian_product__rf_T 
                                              (x:
                                               (cc.eT Cartesian_product__rf_T) =>
                                               dk_logic.ebP 
                                                 (Cartesian_product__rf_equal 
                                                    x x)))) ->
  Cartesian_product__rf_equal_spec:(dk_logic.eP 
                                      (dk_logic.forall 
                                         Cartesian_product__rf_T 
                                         (x:
                                          (cc.eT Cartesian_product__rf_T) =>
                                          dk_logic.forall 
                                            Cartesian_product__rf_T 
                                            (y:
                                             (cc.eT Cartesian_product__rf_T) =>
                                             dk_logic.eqv 
                                               (dk_logic.ebP 
                                                  (Cartesian_product__rf_equal 
                                                     x y)) 
                                               (dk_logic.and 
                                                  (dk_logic.ebP 
                                                     (_p_A_equal 
                                                        (Cartesian_product__rf_first 
                                                           x) 
                                                        (Cartesian_product__rf_first 
                                                           y))) 
                                                  (dk_logic.ebP 
                                                     (_p_B_equal 
                                                        (Cartesian_product__rf_second 
                                                           x) 
                                                        (Cartesian_product__rf_second 
                                                           y)))))))) ->
  Cartesian_product__rf_equal_symmetric:(dk_logic.eP 
                                           (dk_logic.forall 
                                              Cartesian_product__rf_T 
                                              (x:
                                               (cc.eT Cartesian_product__rf_T) =>
                                               dk_logic.forall 
                                                 Cartesian_product__rf_T 
                                                 (y:
                                                  (cc.eT 
                                                     Cartesian_product__rf_T) =>
                                                  dk_logic.imp 
                                                    (dk_logic.ebP 
                                                       (Cartesian_product__rf_equal 
                                                          x y)) 
                                                    (dk_logic.ebP 
                                                       (Cartesian_product__rf_equal 
                                                          y x)))))) ->
  Cartesian_product__rf_equal_transitive:(dk_logic.eP 
                                            (dk_logic.forall 
                                               Cartesian_product__rf_T 
                                               (x:
                                                (cc.eT 
                                                   Cartesian_product__rf_T) =>
                                                dk_logic.forall 
                                                  Cartesian_product__rf_T 
                                                  (y:
                                                   (cc.eT 
                                                      Cartesian_product__rf_T) =>
                                                   dk_logic.forall 
                                                     Cartesian_product__rf_T 
                                                     (z:
                                                      (cc.eT 
                                                         Cartesian_product__rf_T) =>
                                                      dk_logic.imp 
                                                        (dk_logic.ebP 
                                                           (Cartesian_product__rf_equal 
                                                              x y)) 
                                                        (dk_logic.imp 
                                                           (dk_logic.ebP 
                                                              (Cartesian_product__rf_equal 
                                                                 y z)) 
                                                           (dk_logic.ebP 
                                                              (Cartesian_product__rf_equal 
                                                                 x z)))))))) ->
  Cartesian_product__rf_first_substitution_rule:(dk_logic.eP 
                                                   (dk_logic.forall 
                                                      Cartesian_product__rf_T 
                                                      (x:
                                                       (cc.eT 
                                                          Cartesian_product__rf_T) =>
                                                       dk_logic.forall 
                                                         Cartesian_product__rf_T 
                                                         (y:
                                                          (cc.eT 
                                                             Cartesian_product__rf_T) =>
                                                          dk_logic.imp 
                                                            (dk_logic.ebP 
                                                               (Cartesian_product__rf_equal 
                                                                  x y)) 
                                                            (dk_logic.ebP 
                                                               (_p_A_equal 
                                                                  (Cartesian_product__rf_first 
                                                                    x) 
                                                                  (Cartesian_product__rf_first 
                                                                    y))))))) ->
  Cartesian_product__rf_second_substitution_rule:(dk_logic.eP 
                                                    (dk_logic.forall 
                                                       Cartesian_product__rf_T 
                                                       (x:
                                                        (cc.eT 
                                                           Cartesian_product__rf_T) =>
                                                        dk_logic.forall 
                                                          Cartesian_product__rf_T 
                                                          (y:
                                                           (cc.eT 
                                                              Cartesian_product__rf_T) =>
                                                           dk_logic.imp 
                                                             (dk_logic.ebP 
                                                                (Cartesian_product__rf_equal 
                                                                   x y)) 
                                                             (dk_logic.ebP 
                                                                (_p_B_equal 
                                                                   (Cartesian_product__rf_second 
                                                                    x) 
                                                                   (Cartesian_product__rf_second 
                                                                    y))))))) ->
  Cartesian_product__rf_pair_left_substitution_rule:(dk_logic.eP 
                                                       (dk_logic.forall A_T 
                                                          (x_1:(cc.eT A_T) =>
                                                           dk_logic.forall 
                                                             A_T 
                                                             (x_2:
                                                              (cc.eT A_T) =>
                                                              dk_logic.forall 
                                                                B_T 
                                                                (y:
                                                                 (cc.eT B_T) =>
                                                                 dk_logic.imp 
                                                                   (dk_logic.ebP 
                                                                    (_p_A_equal 
                                                                    x_1 x_2)) 
                                                                   (dk_logic.ebP 
                                                                    (Cartesian_product__rf_equal 
                                                                    (Cartesian_product__rf_pair 
                                                                    x_1 y) 
                                                                    (Cartesian_product__rf_pair 
                                                                    x_2 y)))))))) ->
  Cartesian_product__rf_pair_right_substitution_rule:(dk_logic.eP 
                                                        (dk_logic.forall A_T 
                                                           (x:(cc.eT A_T) =>
                                                            dk_logic.forall 
                                                              B_T 
                                                              (y_1:
                                                               (cc.eT B_T) =>
                                                               dk_logic.forall 
                                                                 B_T 
                                                                 (y_2:
                                                                  (cc.eT B_T) =>
                                                                  dk_logic.imp 
                                                                    (
                                                                    dk_logic.ebP 
                                                                    (_p_B_equal 
                                                                    y_1 y_2)) 
                                                                    (
                                                                    dk_logic.ebP 
                                                                    (Cartesian_product__rf_equal 
                                                                    (Cartesian_product__rf_pair 
                                                                    x y_1) 
                                                                    (Cartesian_product__rf_pair 
                                                                    x y_2)))))))) ->
  Cartesian_product__rf_second_accessibility:(dk_logic.eP 
                                                (dk_logic.forall B_T 
                                                   (x:(cc.eT B_T) =>
                                                    dk_logic.exists 
                                                      Cartesian_product__rf_T 
                                                      (s:
                                                       (cc.eT 
                                                          Cartesian_product__rf_T) =>
                                                       dk_logic.ebP 
                                                         (_p_B_equal 
                                                            (Cartesian_product__rf_second 
                                                               s) x))))) ->
  Cartesian_product__rf_same_is_not_different:(dk_logic.eP 
                                                 (dk_logic.forall 
                                                    Cartesian_product__rf_T 
                                                    (x:
                                                     (cc.eT 
                                                        Cartesian_product__rf_T) =>
                                                     dk_logic.forall 
                                                       Cartesian_product__rf_T 
                                                       (y:
                                                        (cc.eT 
                                                           Cartesian_product__rf_T) =>
                                                        dk_logic.eqv 
                                                          (dk_logic.ebP 
                                                             (Cartesian_product__rf_different 
                                                                x y)) 
                                                          (dk_logic.not 
                                                             (dk_logic.ebP 
                                                                (Cartesian_product__rf_equal 
                                                                   x y))))))) ->
  Cartesian_product__rf_pair_substitution_rule:(dk_logic.eP 
                                                  (dk_logic.forall A_T 
                                                     (x_1:(cc.eT A_T) =>
                                                      dk_logic.forall A_T 
                                                        (x_2:(cc.eT A_T) =>
                                                         dk_logic.forall B_T 
                                                           (y_1:
                                                            (cc.eT B_T) =>
                                                            dk_logic.forall 
                                                              B_T 
                                                              (y_2:
                                                               (cc.eT B_T) =>
                                                               dk_logic.imp 
                                                                 (dk_logic.ebP 
                                                                    (
                                                                    _p_A_equal 
                                                                    x_1 x_2)) 
                                                                 (dk_logic.imp 
                                                                    (
                                                                    dk_logic.ebP 
                                                                    (_p_B_equal 
                                                                    y_1 y_2)) 
                                                                    (
                                                                    dk_logic.ebP 
                                                                    (Cartesian_product__rf_equal 
                                                                    (Cartesian_product__rf_pair 
                                                                    x_1 y_1) 
                                                                    (Cartesian_product__rf_pair 
                                                                    x_2 y_2)))))))))) ->
  Cartesian_product__rf_different_is_complete:(dk_logic.eP 
                                                 (dk_logic.forall 
                                                    Cartesian_product__rf_T 
                                                    (x:
                                                     (cc.eT 
                                                        Cartesian_product__rf_T) =>
                                                     dk_logic.forall 
                                                       Cartesian_product__rf_T 
                                                       (y:
                                                        (cc.eT 
                                                           Cartesian_product__rf_T) =>
                                                        dk_logic.forall 
                                                          Cartesian_product__rf_T 
                                                          (z:
                                                           (cc.eT 
                                                              Cartesian_product__rf_T) =>
                                                           dk_logic.imp 
                                                             (dk_logic.ebP 
                                                                (Cartesian_product__rf_different 
                                                                   x y)) 
                                                             (dk_logic.or 
                                                                (dk_logic.ebP 
                                                                   (Cartesian_product__rf_different 
                                                                    x z)) 
                                                                (dk_logic.ebP 
                                                                   (Cartesian_product__rf_different 
                                                                    y z)))))))) ->
  Cartesian_product__rf_different_is_irreflexive:(dk_logic.eP 
                                                    (dk_logic.forall 
                                                       Cartesian_product__rf_T 
                                                       (x:
                                                        (cc.eT 
                                                           Cartesian_product__rf_T) =>
                                                        dk_logic.not 
                                                          (dk_logic.ebP 
                                                             (Cartesian_product__rf_different 
                                                                x x))))) ->
  Cartesian_product__rf_different_is_symmetric:(dk_logic.eP 
                                                  (dk_logic.forall 
                                                     Cartesian_product__rf_T 
                                                     (x:
                                                      (cc.eT 
                                                         Cartesian_product__rf_T) =>
                                                      dk_logic.forall 
                                                        Cartesian_product__rf_T 
                                                        (y:
                                                         (cc.eT 
                                                            Cartesian_product__rf_T) =>
                                                         dk_logic.imp 
                                                           (dk_logic.ebP 
                                                              (Cartesian_product__rf_different 
                                                                 x y)) 
                                                           (dk_logic.ebP 
                                                              (Cartesian_product__rf_different 
                                                                 y x)))))) ->
  Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal.

def proj_Cartesian_product__rf_T :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  cc.uT.

[Cartesian_product__rf_T]
  proj_Cartesian_product__rf_T _ _ _ _ (Cartesian_product__mk_record _ _ _ _ 
    Cartesian_product__rf_T _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _)
  -->
  Cartesian_product__rf_T.

def proj_Cartesian_product__rf_first :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT A_T.

[Cartesian_product__rf_first]
  proj_Cartesian_product__rf_first _ _ _ _ (Cartesian_product__mk_record _ _ 
    _ _ _ Cartesian_product__rf_first _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _)
  -->
  Cartesian_product__rf_first.

def proj_Cartesian_product__rf_pair :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT A_T) ->
  (cc.eT B_T) ->
  cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record).

[Cartesian_product__rf_pair]
  proj_Cartesian_product__rf_pair _ _ _ _ (Cartesian_product__mk_record _ _ 
    _ _ _ _ Cartesian_product__rf_pair _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _)
  -->
  Cartesian_product__rf_pair.

def proj_Cartesian_product__rf_parse :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT basics.string__t) ->
  cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record).

[Cartesian_product__rf_parse]
  proj_Cartesian_product__rf_parse _ _ _ _ (Cartesian_product__mk_record _ _ 
    _ _ _ _ _ Cartesian_product__rf_parse _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _)
  -->
  Cartesian_product__rf_parse.

def proj_Cartesian_product__rf_print :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT basics.string__t.

[Cartesian_product__rf_print]
  proj_Cartesian_product__rf_print _ _ _ _ (Cartesian_product__mk_record _ _ 
    _ _ _ _ _ _ Cartesian_product__rf_print _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _)
  -->
  Cartesian_product__rf_print.

def proj_Cartesian_product__rf_second :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT B_T.

[Cartesian_product__rf_second]
  proj_Cartesian_product__rf_second _ _ _ _ (Cartesian_product__mk_record _ 
    _ _ _ _ _ _ _ _ Cartesian_product__rf_second _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Cartesian_product__rf_second.

def proj_Cartesian_product__rf_element :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record).

[Cartesian_product__rf_element]
  proj_Cartesian_product__rf_element _ _ _ _ (Cartesian_product__mk_record _ 
    _ _ _ _ _ _ _ _ _ Cartesian_product__rf_element _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_element.

def proj_Cartesian_product__rf_pair_preserves_first :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.forall B_T 
          (y:(cc.eT B_T) =>
           dk_logic.ebP 
             (_p_A_equal 
                (proj_Cartesian_product__rf_first A_T B_T _p_A_equal 
                   _p_B_equal record 
                   (proj_Cartesian_product__rf_pair A_T B_T _p_A_equal 
                      _p_B_equal record x y)) x)))).

[Cartesian_product__rf_pair_preserves_first]
  proj_Cartesian_product__rf_pair_preserves_first _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_pair_preserves_first _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _)
  -->
  Cartesian_product__rf_pair_preserves_first.

def proj_Cartesian_product__rf_equal :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  (cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT basics.bool__t.

[Cartesian_product__rf_equal]
  proj_Cartesian_product__rf_equal _ _ _ _ (Cartesian_product__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ Cartesian_product__rf_equal _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _)
  -->
  Cartesian_product__rf_equal.

def proj_Cartesian_product__rf_pair_preserves_second :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.forall B_T 
          (y:(cc.eT B_T) =>
           dk_logic.ebP 
             (_p_B_equal 
                (proj_Cartesian_product__rf_second A_T B_T _p_A_equal 
                   _p_B_equal record 
                   (proj_Cartesian_product__rf_pair A_T B_T _p_A_equal 
                      _p_B_equal record x y)) y)))).

[Cartesian_product__rf_pair_preserves_second]
  proj_Cartesian_product__rf_pair_preserves_second _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_pair_preserves_second _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _)
  -->
  Cartesian_product__rf_pair_preserves_second.

def proj_Cartesian_product__rf_first_accessibility :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.exists 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (s:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.ebP 
             (_p_A_equal 
                (proj_Cartesian_product__rf_first A_T B_T _p_A_equal 
                   _p_B_equal record s) x)))).

[Cartesian_product__rf_first_accessibility]
  proj_Cartesian_product__rf_first_accessibility _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_first_accessibility _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_first_accessibility.

def proj_Cartesian_product__rf_different :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  (cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  (cc.eT (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) ->
  cc.eT basics.bool__t.

[Cartesian_product__rf_different]
  proj_Cartesian_product__rf_different _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_different _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_different.

def proj_Cartesian_product__rf_equal_reflexive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.ebP 
          (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal _p_B_equal 
             record x x))).

[Cartesian_product__rf_equal_reflexive]
  proj_Cartesian_product__rf_equal_reflexive _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_equal_reflexive _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_equal_reflexive.

def proj_Cartesian_product__rf_equal_spec :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                   _p_B_equal record x y)) 
             (dk_logic.and 
                (dk_logic.ebP 
                   (_p_A_equal 
                      (proj_Cartesian_product__rf_first A_T B_T _p_A_equal 
                         _p_B_equal record x) 
                      (proj_Cartesian_product__rf_first A_T B_T _p_A_equal 
                         _p_B_equal record y))) 
                (dk_logic.ebP 
                   (_p_B_equal 
                      (proj_Cartesian_product__rf_second A_T B_T _p_A_equal 
                         _p_B_equal record x) 
                      (proj_Cartesian_product__rf_second A_T B_T _p_A_equal 
                         _p_B_equal record y))))))).

[Cartesian_product__rf_equal_spec]
  proj_Cartesian_product__rf_equal_spec _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_equal_spec _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_equal_spec.

def proj_Cartesian_product__rf_equal_symmetric :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                   _p_B_equal record x y)) 
             (dk_logic.ebP 
                (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                   _p_B_equal record y x))))).

[Cartesian_product__rf_equal_symmetric]
  proj_Cartesian_product__rf_equal_symmetric _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_equal_symmetric _ _ _ _ _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_equal_symmetric.

def proj_Cartesian_product__rf_equal_transitive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.forall 
             (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                record) 
             (z:
              (cc.eT 
                 (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                    record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                      _p_B_equal record x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                         _p_B_equal record y z)) 
                   (dk_logic.ebP 
                      (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                         _p_B_equal record x z))))))).

[Cartesian_product__rf_equal_transitive]
  proj_Cartesian_product__rf_equal_transitive _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_equal_transitive _ _ _ _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_equal_transitive.

def proj_Cartesian_product__rf_first_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                   _p_B_equal record x y)) 
             (dk_logic.ebP 
                (_p_A_equal 
                   (proj_Cartesian_product__rf_first A_T B_T _p_A_equal 
                      _p_B_equal record x) 
                   (proj_Cartesian_product__rf_first A_T B_T _p_A_equal 
                      _p_B_equal record y)))))).

[Cartesian_product__rf_first_substitution_rule]
  proj_Cartesian_product__rf_first_substitution_rule _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_first_substitution_rule _ _ _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_first_substitution_rule.

def proj_Cartesian_product__rf_second_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                   _p_B_equal record x y)) 
             (dk_logic.ebP 
                (_p_B_equal 
                   (proj_Cartesian_product__rf_second A_T B_T _p_A_equal 
                      _p_B_equal record x) 
                   (proj_Cartesian_product__rf_second A_T B_T _p_A_equal 
                      _p_B_equal record y)))))).

[Cartesian_product__rf_second_substitution_rule]
  proj_Cartesian_product__rf_second_substitution_rule _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Cartesian_product__rf_second_substitution_rule _ _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_second_substitution_rule.

def proj_Cartesian_product__rf_pair_left_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x_1:(cc.eT A_T) =>
        dk_logic.forall A_T 
          (x_2:(cc.eT A_T) =>
           dk_logic.forall B_T 
             (y:(cc.eT B_T) =>
              dk_logic.imp (dk_logic.ebP (_p_A_equal x_1 x_2)) 
                (dk_logic.ebP 
                   (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                      _p_B_equal record 
                      (proj_Cartesian_product__rf_pair A_T B_T _p_A_equal 
                         _p_B_equal record x_1 y) 
                      (proj_Cartesian_product__rf_pair A_T B_T _p_A_equal 
                         _p_B_equal record x_2 y))))))).

[Cartesian_product__rf_pair_left_substitution_rule]
  proj_Cartesian_product__rf_pair_left_substitution_rule _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ Cartesian_product__rf_pair_left_substitution_rule _ _ _ _ _ _ _)
  -->
  Cartesian_product__rf_pair_left_substitution_rule.

def proj_Cartesian_product__rf_pair_right_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x:(cc.eT A_T) =>
        dk_logic.forall B_T 
          (y_1:(cc.eT B_T) =>
           dk_logic.forall B_T 
             (y_2:(cc.eT B_T) =>
              dk_logic.imp (dk_logic.ebP (_p_B_equal y_1 y_2)) 
                (dk_logic.ebP 
                   (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                      _p_B_equal record 
                      (proj_Cartesian_product__rf_pair A_T B_T _p_A_equal 
                         _p_B_equal record x y_1) 
                      (proj_Cartesian_product__rf_pair A_T B_T _p_A_equal 
                         _p_B_equal record x y_2))))))).

[Cartesian_product__rf_pair_right_substitution_rule]
  proj_Cartesian_product__rf_pair_right_substitution_rule _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ Cartesian_product__rf_pair_right_substitution_rule _ _ _ _ _ _)
  -->
  Cartesian_product__rf_pair_right_substitution_rule.

def proj_Cartesian_product__rf_second_accessibility :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall B_T 
       (x:(cc.eT B_T) =>
        dk_logic.exists 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (s:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.ebP 
             (_p_B_equal 
                (proj_Cartesian_product__rf_second A_T B_T _p_A_equal 
                   _p_B_equal record s) x)))).

[Cartesian_product__rf_second_accessibility]
  proj_Cartesian_product__rf_second_accessibility _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ Cartesian_product__rf_second_accessibility _ _ _ _ _)
  -->
  Cartesian_product__rf_second_accessibility.

def proj_Cartesian_product__rf_same_is_not_different :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Cartesian_product__rf_different A_T B_T _p_A_equal 
                   _p_B_equal record x y)) 
             (dk_logic.not 
                (dk_logic.ebP 
                   (proj_Cartesian_product__rf_equal A_T B_T _p_A_equal 
                      _p_B_equal record x y)))))).

[Cartesian_product__rf_same_is_not_different]
  proj_Cartesian_product__rf_same_is_not_different _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ Cartesian_product__rf_same_is_not_different _ _ _ _)
  -->
  Cartesian_product__rf_same_is_not_different.

def proj_Cartesian_product__rf_pair_substitution_rule :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall A_T 
       (x_1:(cc.eT A_T) =>
        dk_logic.forall A_T 
          (x_2:(cc.eT A_T) =>
           dk_logic.forall B_T 
             (y_1:(cc.eT B_T) =>
              dk_logic.forall B_T 
                (y_2:(cc.eT B_T) =>
                 dk_logic.imp (dk_logic.ebP (_p_A_equal x_1 x_2)) 
                   (dk_logic.imp (dk_logic.ebP (_p_B_equal y_1 y_2)) 
                      (dk_logic.ebP 
                         (proj_Cartesian_product__rf_equal A_T B_T 
                            _p_A_equal _p_B_equal record 
                            (proj_Cartesian_product__rf_pair A_T B_T 
                               _p_A_equal _p_B_equal record x_1 y_1) 
                            (proj_Cartesian_product__rf_pair A_T B_T 
                               _p_A_equal _p_B_equal record x_2 y_2))))))))).

[Cartesian_product__rf_pair_substitution_rule]
  proj_Cartesian_product__rf_pair_substitution_rule _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ Cartesian_product__rf_pair_substitution_rule _ _ _)
  -->
  Cartesian_product__rf_pair_substitution_rule.

def proj_Cartesian_product__rf_different_is_complete :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.forall 
             (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                record) 
             (z:
              (cc.eT 
                 (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                    record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Cartesian_product__rf_different A_T B_T _p_A_equal 
                      _p_B_equal record x y)) 
                (dk_logic.or 
                   (dk_logic.ebP 
                      (proj_Cartesian_product__rf_different A_T B_T 
                         _p_A_equal _p_B_equal record x z)) 
                   (dk_logic.ebP 
                      (proj_Cartesian_product__rf_different A_T B_T 
                         _p_A_equal _p_B_equal record y z))))))).

[Cartesian_product__rf_different_is_complete]
  proj_Cartesian_product__rf_different_is_complete _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ Cartesian_product__rf_different_is_complete _ _)
  -->
  Cartesian_product__rf_different_is_complete.

def proj_Cartesian_product__rf_different_is_irreflexive :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.not 
          (dk_logic.ebP 
             (proj_Cartesian_product__rf_different A_T B_T _p_A_equal 
                _p_B_equal record x x)))).

[Cartesian_product__rf_different_is_irreflexive]
  proj_Cartesian_product__rf_different_is_irreflexive _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ Cartesian_product__rf_different_is_irreflexive _)
  -->
  Cartesian_product__rf_different_is_irreflexive.

def proj_Cartesian_product__rf_different_is_symmetric :
  A_T:cc.uT ->
  B_T:cc.uT ->
  _p_A_equal:((cc.eT A_T) -> (cc.eT A_T) -> cc.eT basics.bool__t) ->
  _p_B_equal:((cc.eT B_T) -> (cc.eT B_T) -> cc.eT basics.bool__t) ->
  record:(Cartesian_product__me_as_species A_T B_T _p_A_equal _p_B_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
       (x:
        (cc.eT 
           (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record)) =>
        dk_logic.forall 
          (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal record) 
          (y:
           (cc.eT 
              (proj_Cartesian_product__rf_T A_T B_T _p_A_equal _p_B_equal 
                 record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Cartesian_product__rf_different A_T B_T _p_A_equal 
                   _p_B_equal record x y)) 
             (dk_logic.ebP 
                (proj_Cartesian_product__rf_different A_T B_T _p_A_equal 
                   _p_B_equal record y x))))).

[Cartesian_product__rf_different_is_symmetric]
  proj_Cartesian_product__rf_different_is_symmetric _ _ _ _ 
    (Cartesian_product__mk_record _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ Cartesian_product__rf_different_is_symmetric)
  -->
  Cartesian_product__rf_different_is_symmetric.

def Cartesian_product__first :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT -> x:(cc.eT (dk_tuple.prod _p_A_T _p_B_T)) -> cc.eT _p_A_T
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  x:(cc.eT (dk_tuple.prod _p_A_T _p_B_T)) =>
  dk_tuple.match__pair _p_A_T _p_B_T _p_A_T x 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     pattern_var_1_:(cc.eT _p_B_T) => (r:(cc.eT _p_A_T) => r) pattern_var_0_) 
    (dk_fail.fail _p_A_T).

def Cartesian_product__pair :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  x:(cc.eT _p_A_T) -> y:(cc.eT _p_B_T) -> cc.eT (dk_tuple.prod _p_A_T _p_B_T)
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  x:(cc.eT _p_A_T) => y:(cc.eT _p_B_T) => dk_tuple.pair _p_A_T _p_B_T x y.

def Cartesian_product__second :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT -> x:(cc.eT (dk_tuple.prod _p_A_T _p_B_T)) -> cc.eT _p_B_T
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  x:(cc.eT (dk_tuple.prod _p_A_T _p_B_T)) =>
  dk_tuple.match__pair _p_A_T _p_B_T _p_B_T x 
    (pattern_var_0_:(cc.eT _p_A_T) =>
     pattern_var_1_:(cc.eT _p_B_T) => (r:(cc.eT _p_B_T) => r) pattern_var_1_) 
    (dk_fail.fail _p_B_T).

def Cartesian_product__pair_preserves_first :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) ->
  _p_A_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_A_T 
                             (x:(cc.eT _p_A_T) =>
                              dk_logic.ebP (_p_A_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.forall _p_B_T 
          (y:(cc.eT _p_B_T) =>
           dk_logic.ebP 
             (_p_A_equal 
                (Cartesian_product__first _p_A_T _p_B_T 
                   (Cartesian_product__pair _p_A_T _p_B_T x y)) x))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  zen.nnpp 
    (zen.forall _p_A_T 
       (v_Vzb:(zen.term _p_A_T) =>
        zen.forall _p_B_T 
          (v_Vac:(zen.term _p_B_T) =>
           zen.triangle 
             (focal.is_true 
                (_p_A_equal 
                   (Cartesian_product__first _p_A_T _p_B_T 
                      (Cartesian_product__pair _p_A_T _p_B_T v_Vzb v_Vac)) 
                   v_Vzb))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_A_T 
              (v_Vzb:(zen.term _p_A_T) =>
               zen.forall _p_B_T 
                 (v_Vac:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_A_equal 
                          (Cartesian_product__first _p_A_T _p_B_T 
                             (Cartesian_product__pair _p_A_T _p_B_T v_Vzb 
                                v_Vac)) v_Vzb))))))) =>
     zen.Rnotall _p_A_T 
       (v_Vzb:(zen.term _p_A_T) =>
        zen.forall _p_B_T 
          (v_Vac:(zen.term _p_B_T) =>
           zen.triangle 
             (focal.is_true 
                (_p_A_equal 
                   (Cartesian_product__first _p_A_T _p_B_T 
                      (Cartesian_product__pair _p_A_T _p_B_T v_Vzb v_Vac)) 
                   v_Vzb)))) 
       (v_Vcc:(zen.term _p_A_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_B_T 
                 (v_Vac:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_A_equal 
                          (Cartesian_product__first _p_A_T _p_B_T 
                             (Cartesian_product__pair _p_A_T _p_B_T v_Vcc 
                                v_Vac)) v_Vcc)))))) =>
        zen.Rnotall _p_B_T 
          (v_Vac:(zen.term _p_B_T) =>
           zen.triangle 
             (focal.is_true 
                (_p_A_equal 
                   (Cartesian_product__first _p_A_T _p_B_T 
                      (Cartesian_product__pair _p_A_T _p_B_T v_Vcc v_Vac)) 
                   v_Vcc))) 
          (v_Vec:(zen.term _p_B_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle (focal.is_true (_p_A_equal v_Vcc v_Vcc))))) =>
           zen.Rall _p_A_T 
             (v_Vzb:(zen.term _p_A_T) =>
              zen.triangle (focal.is_true (_p_A_equal v_Vzb v_Vzb))) v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_A_equal v_Vcc v_Vcc)))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (_p_A_equal v_Vcc v_Vcc))) 
                v_Vgc v_Vfc) _p_A_equal_reflexive) v_Vdc) v_Vbc).

def Cartesian_product__pair_preserves_second :
  _p_A_T:cc.uT ->
  _p_B_T:cc.uT ->
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) ->
  _p_B_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall _p_B_T 
                             (x:(cc.eT _p_B_T) =>
                              dk_logic.ebP (_p_B_equal x x)))) ->
  dk_logic.eP 
    (dk_logic.forall _p_A_T 
       (x:(cc.eT _p_A_T) =>
        dk_logic.forall _p_B_T 
          (y:(cc.eT _p_B_T) =>
           dk_logic.ebP 
             (_p_B_equal 
                (Cartesian_product__second _p_A_T _p_B_T 
                   (Cartesian_product__pair _p_A_T _p_B_T x y)) y))))
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  zen.nnpp 
    (zen.forall _p_A_T 
       (v_Vzb:(zen.term _p_A_T) =>
        zen.forall _p_B_T 
          (v_Vac:(zen.term _p_B_T) =>
           zen.triangle 
             (focal.is_true 
                (_p_B_equal 
                   (Cartesian_product__second _p_A_T _p_B_T 
                      (Cartesian_product__pair _p_A_T _p_B_T v_Vzb v_Vac)) 
                   v_Vac))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_A_T 
              (v_Vzb:(zen.term _p_A_T) =>
               zen.forall _p_B_T 
                 (v_Vac:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (Cartesian_product__second _p_A_T _p_B_T 
                             (Cartesian_product__pair _p_A_T _p_B_T v_Vzb 
                                v_Vac)) v_Vac))))))) =>
     zen.Rnotall _p_A_T 
       (v_Vzb:(zen.term _p_A_T) =>
        zen.forall _p_B_T 
          (v_Vac:(zen.term _p_B_T) =>
           zen.triangle 
             (focal.is_true 
                (_p_B_equal 
                   (Cartesian_product__second _p_A_T _p_B_T 
                      (Cartesian_product__pair _p_A_T _p_B_T v_Vzb v_Vac)) 
                   v_Vac)))) 
       (v_Vcc:(zen.term _p_A_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_B_T 
                 (v_Vac:(zen.term _p_B_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (_p_B_equal 
                          (Cartesian_product__second _p_A_T _p_B_T 
                             (Cartesian_product__pair _p_A_T _p_B_T v_Vcc 
                                v_Vac)) v_Vac)))))) =>
        zen.Rnotall _p_B_T 
          (v_Vac:(zen.term _p_B_T) =>
           zen.triangle 
             (focal.is_true 
                (_p_B_equal 
                   (Cartesian_product__second _p_A_T _p_B_T 
                      (Cartesian_product__pair _p_A_T _p_B_T v_Vcc v_Vac)) 
                   v_Vac))) 
          (v_Vec:(zen.term _p_B_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle (focal.is_true (_p_B_equal v_Vec v_Vec))))) =>
           zen.Rall _p_B_T 
             (v_Vgc:(zen.term _p_B_T) =>
              zen.triangle (focal.is_true (_p_B_equal v_Vgc v_Vgc))) v_Vec 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (_p_B_equal v_Vec v_Vec)))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (_p_B_equal v_Vec v_Vec))) 
                v_Vhc v_Vfc) _p_B_equal_reflexive) v_Vdc) v_Vbc).

def Cartesian_product__collection_create
  :=
  _p_A_T:cc.uT =>
  _p_B_T:cc.uT =>
  _p_A_element:(cc.eT _p_A_T) =>
  _p_A_equal:((cc.eT _p_A_T) -> (cc.eT _p_A_T) -> cc.eT basics.bool__t) =>
  _p_A_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) => dk_logic.ebP (_p_A_equal x x)))) =>
  _p_A_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
              (dk_logic.ebP (_p_A_equal y x)))))) =>
  _p_A_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_A_T 
        (x:(cc.eT _p_A_T) =>
         dk_logic.forall _p_A_T 
           (y:(cc.eT _p_A_T) =>
            dk_logic.forall _p_A_T 
              (z:(cc.eT _p_A_T) =>
               dk_logic.imp (dk_logic.ebP (_p_A_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_A_equal y z)) 
                    (dk_logic.ebP (_p_A_equal x z)))))))) =>
  _p_B_element:(cc.eT _p_B_T) =>
  _p_B_equal:((cc.eT _p_B_T) -> (cc.eT _p_B_T) -> cc.eT basics.bool__t) =>
  _p_B_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) => dk_logic.ebP (_p_B_equal x x)))) =>
  _p_B_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
              (dk_logic.ebP (_p_B_equal y x)))))) =>
  _p_B_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_B_T 
        (x:(cc.eT _p_B_T) =>
         dk_logic.forall _p_B_T 
           (y:(cc.eT _p_B_T) =>
            dk_logic.forall _p_B_T 
              (z:(cc.eT _p_B_T) =>
               dk_logic.imp (dk_logic.ebP (_p_B_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_B_equal y z)) 
                    (dk_logic.ebP (_p_B_equal x z)))))))) =>
  Cartesian_product__mk_record _p_A_T _p_B_T _p_A_equal _p_B_equal 
    (dk_tuple.prod _p_A_T _p_B_T) (Cartesian_product__first _p_A_T _p_B_T) 
    (Cartesian_product__pair _p_A_T _p_B_T) 
    (basics.Basic_object__parse (dk_tuple.prod _p_A_T _p_B_T)) 
    (basics.Basic_object__print (dk_tuple.prod _p_A_T _p_B_T)) 
    (Cartesian_product__second _p_A_T _p_B_T) 
    (Product_set__element _p_A_T _p_B_T _p_A_element _p_B_element 
       (dk_tuple.prod _p_A_T _p_B_T) (Cartesian_product__pair _p_A_T _p_B_T)) 
    (Cartesian_product__pair_preserves_first _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_reflexive) 
    (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
       (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T)) 
    (Cartesian_product__pair_preserves_second _p_A_T _p_B_T _p_B_equal 
       _p_B_equal_reflexive) 
    (Product_set__first_accessibility _p_A_T _p_B_T _p_A_equal _p_B_element 
       (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__pair _p_A_T _p_B_T) 
       (Cartesian_product__pair_preserves_first _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_reflexive)) 
    (sets.Setoid__different (dk_tuple.prod _p_A_T _p_B_T) 
       (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T))) 
    (Product_set__equal_reflexive _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_reflexive _p_B_equal _p_B_equal_reflexive 
       (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T)) 
    (Product_set__equal_spec _p_A_T _p_B_T _p_A_equal _p_B_equal 
       (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T)) 
    (Product_set__equal_symmetric _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_symmetric _p_B_equal _p_B_equal_symmetric 
       (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T)) 
    (Product_set__equal_transitive _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_transitive _p_B_equal _p_B_equal_transitive 
       (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T)) 
    (Product_set__first_substitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_B_equal (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T)) 
    (Product_set__second_substitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_B_equal (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T)) 
    (Product_set__pair_left_substitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_symmetric _p_A_equal_transitive _p_B_equal 
       _p_B_equal_reflexive _p_B_equal_symmetric _p_B_equal_transitive 
       (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__pair _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T) 
       (Cartesian_product__pair_preserves_first _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_reflexive) 
       (Cartesian_product__pair_preserves_second _p_A_T _p_B_T _p_B_equal 
          _p_B_equal_reflexive)) 
    (Product_set__pair_right_substitution_rule _p_A_T _p_B_T _p_A_equal 
       _p_A_equal_reflexive _p_A_equal_symmetric _p_A_equal_transitive 
       _p_B_equal _p_B_equal_symmetric _p_B_equal_transitive 
       (dk_tuple.prod _p_A_T _p_B_T) 
       (Cartesian_product__first _p_A_T _p_B_T) 
       (Cartesian_product__pair _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T) 
       (Cartesian_product__pair_preserves_first _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_reflexive) 
       (Cartesian_product__pair_preserves_second _p_A_T _p_B_T _p_B_equal 
          _p_B_equal_reflexive)) 
    (Product_set__second_accessibility _p_A_T _p_B_T _p_A_element _p_B_equal 
       (dk_tuple.prod _p_A_T _p_B_T) (Cartesian_product__pair _p_A_T _p_B_T) 
       (Cartesian_product__second _p_A_T _p_B_T) 
       (Cartesian_product__pair_preserves_second _p_A_T _p_B_T _p_B_equal 
          _p_B_equal_reflexive)) 
    (sets.Setoid__same_is_not_different (dk_tuple.prod _p_A_T _p_B_T) 
       (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T))) 
    (Product_set__pair_substitution_rule _p_A_T _p_B_T _p_A_equal _p_B_equal 
       (dk_tuple.prod _p_A_T _p_B_T) (Cartesian_product__pair _p_A_T _p_B_T) 
       (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (Product_set__equal_transitive _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_transitive _p_B_equal _p_B_equal_transitive 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (Product_set__pair_left_substitution_rule _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_symmetric _p_A_equal_transitive _p_B_equal 
          _p_B_equal_reflexive _p_B_equal_symmetric _p_B_equal_transitive 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__pair _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T) 
          (Cartesian_product__pair_preserves_first _p_A_T _p_B_T _p_A_equal 
             _p_A_equal_reflexive) 
          (Cartesian_product__pair_preserves_second _p_A_T _p_B_T _p_B_equal 
             _p_B_equal_reflexive)) 
       (Product_set__pair_right_substitution_rule _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_reflexive _p_A_equal_symmetric _p_A_equal_transitive 
          _p_B_equal _p_B_equal_symmetric _p_B_equal_transitive 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__pair _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T) 
          (Cartesian_product__pair_preserves_first _p_A_T _p_B_T _p_A_equal 
             _p_A_equal_reflexive) 
          (Cartesian_product__pair_preserves_second _p_A_T _p_B_T _p_B_equal 
             _p_B_equal_reflexive))) 
    (sets.Setoid__different_is_complete (dk_tuple.prod _p_A_T _p_B_T) 
       (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (sets.Setoid__different (dk_tuple.prod _p_A_T _p_B_T) 
          (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (dk_tuple.prod _p_A_T _p_B_T) 
             (Cartesian_product__first _p_A_T _p_B_T) 
             (Cartesian_product__second _p_A_T _p_B_T))) 
       (Product_set__equal_reflexive _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_reflexive _p_B_equal _p_B_equal_reflexive 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (Product_set__equal_symmetric _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_symmetric _p_B_equal _p_B_equal_symmetric 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (Product_set__equal_transitive _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_transitive _p_B_equal _p_B_equal_transitive 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_A_T _p_B_T) 
          (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (dk_tuple.prod _p_A_T _p_B_T) 
             (Cartesian_product__first _p_A_T _p_B_T) 
             (Cartesian_product__second _p_A_T _p_B_T)))) 
    (sets.Setoid__different_is_irreflexive (dk_tuple.prod _p_A_T _p_B_T) 
       (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (sets.Setoid__different (dk_tuple.prod _p_A_T _p_B_T) 
          (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (dk_tuple.prod _p_A_T _p_B_T) 
             (Cartesian_product__first _p_A_T _p_B_T) 
             (Cartesian_product__second _p_A_T _p_B_T))) 
       (Product_set__equal_reflexive _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_reflexive _p_B_equal _p_B_equal_reflexive 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_A_T _p_B_T) 
          (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (dk_tuple.prod _p_A_T _p_B_T) 
             (Cartesian_product__first _p_A_T _p_B_T) 
             (Cartesian_product__second _p_A_T _p_B_T)))) 
    (sets.Setoid__different_is_symmetric (dk_tuple.prod _p_A_T _p_B_T) 
       (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (sets.Setoid__different (dk_tuple.prod _p_A_T _p_B_T) 
          (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (dk_tuple.prod _p_A_T _p_B_T) 
             (Cartesian_product__first _p_A_T _p_B_T) 
             (Cartesian_product__second _p_A_T _p_B_T))) 
       (Product_set__equal_symmetric _p_A_T _p_B_T _p_A_equal 
          _p_A_equal_symmetric _p_B_equal _p_B_equal_symmetric 
          (dk_tuple.prod _p_A_T _p_B_T) 
          (Cartesian_product__first _p_A_T _p_B_T) 
          (Cartesian_product__second _p_A_T _p_B_T)) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_A_T _p_B_T) 
          (Product_set__equal _p_A_T _p_B_T _p_A_equal _p_B_equal 
             (dk_tuple.prod _p_A_T _p_B_T) 
             (Cartesian_product__first _p_A_T _p_B_T) 
             (Cartesian_product__second _p_A_T _p_B_T)))).

