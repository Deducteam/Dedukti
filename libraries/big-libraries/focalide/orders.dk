#NAME orders.

def Pre_order__geq :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) => y:(cc.eT abst_T) => abst_leq y x.

def Pre_order__lt :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) =>
  basics._amper__amper_ (abst_leq x y) (abst_different x y).

def Pre_order__geq_is_leq :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv (dk_logic.ebP (Pre_order__geq abst_T abst_leq x y)) 
             (dk_logic.ebP (abst_leq y x)))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true (Pre_order__geq abst_T abst_leq v_Vzb v_Vac))) 
             (zen.triangle (focal.is_true (abst_leq v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__geq abst_T abst_leq v_Vzb v_Vac))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vac v_Vzb)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true (Pre_order__geq abst_T abst_leq v_Vzb v_Vac))) 
             (zen.triangle (focal.is_true (abst_leq v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__geq abst_T abst_leq v_Vcc v_Vac))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vac v_Vcc))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true (Pre_order__geq abst_T abst_leq v_Vcc v_Vac))) 
             (zen.triangle (focal.is_true (abst_leq v_Vac v_Vcc)))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__geq abst_T abst_leq v_Vcc v_Vec))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc)))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true (Pre_order__geq abst_T abst_leq v_Vcc v_Vec))) 
             (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc)))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) v_Vhc 
                v_Vgc) 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc)))) =>
              v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) v_Vhc 
                v_Vgc) v_Vfc) v_Vdc) v_Vbc).

def Pre_order__leq_reflexive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_reflexive:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.ebP (abst_equal x x)))) ->
  abst_leq_extends_equal:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (y:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_equal x y)) 
                                     (dk_logic.ebP (abst_leq x y)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T (x:(cc.eT abst_T) => dk_logic.ebP (abst_leq x x)))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))) =>
  abst_leq_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_leq x y)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_leq v_Vzb v_Vzb)))) 
    (v_Vac:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.triangle (focal.is_true (abst_leq v_Vzb v_Vzb)))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_leq v_Vzb v_Vzb))) 
       (v_Vbc:(zen.term abst_T) =>
        v_Vcc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vbc))))) =>
        zen.Rall abst_T 
          (v_Vzb:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vdc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vdc))) 
                (zen.triangle (focal.is_true (abst_leq v_Vzb v_Vdc))))) 
          v_Vbc 
          (v_Vec:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vdc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vdc)))))) =>
           zen.Rall abst_T 
             (v_Vdc:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vdc))) 
                (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vdc)))) v_Vbc 
             (v_Vfc:
              (zen.proof 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vbc))))) =>
              zen.Rimply 
                (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))) 
                (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vbc))) 
                (v_Vgc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))))) =>
                 zen.Rall abst_T 
                   (v_Vzb:(zen.term abst_T) =>
                    zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb))) 
                   v_Vbc 
                   (v_Vhc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))) 
                      v_Vhc v_Vgc) abst_equal_reflexive) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vbc)))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vbc))) 
                   v_Vic v_Vcc) v_Vfc) v_Vec) abst_leq_extends_equal) v_Vac).

def Pre_order__gt :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) => y:(cc.eT abst_T) => abst_lt y x.

def Pre_order__lt_is_leq_and_different :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv 
             (dk_logic.ebP (Pre_order__lt abst_T abst_leq abst_different x y)) 
             (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                (dk_logic.ebP (abst_different x y))))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Pre_order__lt abst_T abst_leq abst_different v_Vzb v_Vac))) 
             (zen.and (zen.triangle (focal.is_true (abst_leq v_Vzb v_Vac))) 
                (zen.triangle (focal.is_true (abst_different v_Vzb v_Vac))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__lt abst_T abst_leq abst_different 
                             v_Vzb v_Vac))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vzb v_Vac))) 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vzb v_Vac))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Pre_order__lt abst_T abst_leq abst_different v_Vzb v_Vac))) 
             (zen.and (zen.triangle (focal.is_true (abst_leq v_Vzb v_Vac))) 
                (zen.triangle (focal.is_true (abst_different v_Vzb v_Vac)))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__lt abst_T abst_leq abst_different 
                             v_Vcc v_Vac))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vac))) 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vac)))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Pre_order__lt abst_T abst_leq abst_different v_Vcc v_Vac))) 
             (zen.and (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vac))) 
                (zen.triangle (focal.is_true (abst_different v_Vcc v_Vac))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__lt abst_T abst_leq abst_different 
                             v_Vcc v_Vec))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vec))))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Pre_order__lt abst_T abst_leq abst_different v_Vcc v_Vec))) 
             (zen.and (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                (zen.triangle (focal.is_true (abst_different v_Vcc v_Vec)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._amper__amper_ (abst_leq v_Vcc v_Vec) 
                             (abst_different v_Vcc v_Vec)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.and 
                    (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vcc v_Vec))))) =>
              zen.Rand (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                (zen.triangle (focal.is_true (abst_different v_Vcc v_Vec))) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec)))) =>
                 v_Vjc:
                 (zen.proof 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vcc v_Vec)))) =>
                 focal.zenon_focal_notand (abst_leq v_Vcc v_Vec) 
                   (abst_different v_Vcc v_Vec) 
                   (v_Vkc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vcc v_Vec))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vcc v_Vec)))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vcc v_Vec))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                         v_Vic v_Vlc) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vcc v_Vec))) 
                         v_Vjc v_Vmc) v_Vkc) v_Vgc) v_Vhc) 
             (v_Vnc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._amper__amper_ (abst_leq v_Vcc v_Vec) 
                          (abst_different v_Vcc v_Vec))))) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vec)))))) =>
              zen.Rnotand 
                (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                (zen.triangle (focal.is_true (abst_different v_Vcc v_Vec))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))))) =>
                 focal.zenon_focal_and (abst_leq v_Vcc v_Vec) 
                   (abst_different v_Vcc v_Vec) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vec))))) =>
                    zen.Rand 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vcc v_Vec))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vec)))) =>
                       v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vec)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                         v_Vic v_Vlc) v_Vhc) v_Vnc) 
                (v_Vmc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true (abst_different v_Vcc v_Vec))))) =>
                 focal.zenon_focal_and (abst_leq v_Vcc v_Vec) 
                   (abst_different v_Vcc v_Vec) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vec))))) =>
                    zen.Rand 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vcc v_Vec))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vec)))) =>
                       v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vec)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vcc v_Vec))) 
                         v_Vjc v_Vmc) v_Vhc) v_Vnc) v_Vkc) v_Vfc) v_Vdc) 
       v_Vbc).

def Pre_order__geq_extends_equal :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq_extends_equal:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (y:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_equal x y)) 
                                     (dk_logic.ebP (abst_leq x y)))))) ->
  abst_geq_is_leq:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_geq x y)) 
                              (dk_logic.ebP (abst_leq y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (abst_geq x y)))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_leq x y)))))) =>
  abst_geq_is_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_geq x y)) 
              (dk_logic.ebP (abst_leq y x)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_geq v_Vac v_Vbc)))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_geq v_Vac v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_geq v_Vac v_Vbc))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_geq v_Vdc v_Vbc))))))) =>
        zen.Rnotall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vbc))) 
             (zen.triangle (focal.is_true (abst_geq v_Vdc v_Vbc)))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                    (zen.triangle (focal.is_true (abst_geq v_Vdc v_Vfc)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
             (zen.triangle (focal.is_true (abst_geq v_Vdc v_Vfc))) 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc)))) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_geq v_Vdc v_Vfc))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_geq v_Vac v_Vbc))) 
                      (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vac))))) 
                v_Vdc 
                (v_Vjc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vdc v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vbc v_Vdc)))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_geq v_Vdc v_Vbc))) 
                      (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vdc)))) 
                   v_Vfc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vdc v_Vfc))) 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vfc v_Vdc))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_geq v_Vdc v_Vfc))) 
                      (zen.triangle (focal.is_true (abst_leq v_Vfc v_Vdc))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_geq v_Vdc v_Vfc))))) =>
                       v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vfc v_Vdc))))) =>
                       zen.Rall abst_T 
                         (v_Vac:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vac v_Vbc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vac v_Vbc))))) 
                         v_Vfc 
                         (v_Vmc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vbc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vfc v_Vbc))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vfc v_Vbc)))))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vfc v_Vbc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vfc v_Vbc)))) 
                            v_Vdc 
                            (v_Vnc:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vfc v_Vdc))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vfc v_Vdc))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vfc v_Vdc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vfc v_Vdc))) 
                               (v_Voc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vfc v_Vdc))))) =>
                                zen.Rall abst_T 
                                  (v_Vac:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vbc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vac v_Vbc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vbc v_Vac))))) 
                                  v_Vdc 
                                  (v_Vpc:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vbc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vdc v_Vbc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vbc v_Vdc)))))) =>
                                   zen.Rall abst_T 
                                     (v_Vbc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vdc v_Vbc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vbc v_Vdc)))) 
                                     v_Vfc 
                                     (v_Vqc:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vdc v_Vfc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vfc v_Vdc))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vdc v_Vfc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vfc v_Vdc))) 
                                        (v_Vrc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vdc v_Vfc))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vdc v_Vfc))) 
                                           v_Vhc v_Vrc) 
                                        (v_Vsc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vfc v_Vdc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vfc v_Vdc))) 
                                           v_Vsc v_Voc) v_Vqc) v_Vpc) 
                                  abst_equal_symmetric) 
                               (v_Vtc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vfc v_Vdc)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq v_Vfc v_Vdc))) 
                                  v_Vtc v_Vlc) v_Vnc) v_Vmc) 
                         abst_leq_extends_equal) 
                      (v_Vuc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vdc v_Vfc)))) =>
                       v_Vtc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vfc v_Vdc)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_geq v_Vdc v_Vfc))) 
                         v_Vuc v_Vic) v_Vkc) v_Vjc) abst_geq_is_leq) v_Vgc) 
          v_Vec) v_Vcc).

def Pre_order__geq_transitive :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq_transitive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.forall abst_T 
                               (y:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (z:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.imp 
                                        (dk_logic.ebP (abst_leq y z)) 
                                        (dk_logic.ebP (abst_leq x z)))))))) ->
  abst_geq_is_leq:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_geq x y)) 
                              (dk_logic.ebP (abst_leq y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_geq x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_geq y z)) 
                   (dk_logic.ebP (abst_geq x z)))))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_leq y z)) 
                    (dk_logic.ebP (abst_leq x z)))))))) =>
  abst_geq_is_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_geq x y)) 
              (dk_logic.ebP (abst_leq y x)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vnc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_geq v_Vnc v_Voc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_geq v_Voc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_geq v_Vnc v_Vpc)))))))) 
    (v_Vqc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vnc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Voc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_geq v_Vnc v_Voc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Voc v_Vpc))) 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vnc v_Vpc)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vnc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_geq v_Vnc v_Voc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_geq v_Voc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_geq v_Vnc v_Vpc))))))) 
       (v_Vrc:(zen.term abst_T) =>
        v_Vsc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Voc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_geq v_Vrc v_Voc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Voc v_Vpc))) 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vrc v_Vpc))))))))) =>
        zen.Rnotall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_geq v_Vrc v_Voc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_geq v_Voc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vpc)))))) 
          (v_Vtc:(zen.term abst_T) =>
           v_Vuc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vtc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vtc v_Vpc))) 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vrc v_Vpc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vtc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_geq v_Vtc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vpc))))) 
             (v_Vvc:(zen.term abst_T) =>
              v_Vwc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vtc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vtc v_Vvc))) 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vrc v_Vvc))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vtc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_geq v_Vtc v_Vvc))) 
                   (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vvc)))) 
                (v_Vxc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vtc)))) =>
                 v_Vyc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vtc v_Vvc))) 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vrc v_Vvc)))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (abst_geq v_Vtc v_Vvc))) 
                   (zen.triangle (focal.is_true (abst_geq v_Vrc v_Vvc))) 
                   (v_Vzc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_geq v_Vtc v_Vvc)))) =>
                    v_Vad:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_geq v_Vrc v_Vvc))))) =>
                    zen.Rall abst_T 
                      (v_Vnc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Voc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_geq v_Vnc v_Voc))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Voc v_Vnc))))) 
                      v_Vrc 
                      (v_Vbd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Voc:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_geq v_Vrc v_Voc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Voc v_Vrc)))))) =>
                       zen.Rall abst_T 
                         (v_Voc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_geq v_Vrc v_Voc))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Voc v_Vrc)))) 
                         v_Vtc 
                         (v_Vcd:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_geq v_Vrc v_Vtc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vtc v_Vrc))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (abst_geq v_Vrc v_Vtc))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vtc v_Vrc))) 
                            (v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_geq v_Vrc v_Vtc))))) =>
                             v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vtc v_Vrc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_geq v_Vrc v_Vtc))) 
                               v_Vxc v_Vdd) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_geq v_Vrc v_Vtc)))) =>
                             v_Vfd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vtc v_Vrc)))) =>
                             zen.Rall abst_T 
                               (v_Vnc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Voc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_geq v_Vnc v_Voc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Voc v_Vnc))))) 
                               v_Vtc 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Voc:(zen.term abst_T) =>
                                       zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_geq v_Vtc v_Voc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Voc v_Vtc)))))) =>
                                zen.Rall abst_T 
                                  (v_Voc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_geq v_Vtc v_Voc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Voc v_Vtc)))) 
                                  v_Vvc 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_geq v_Vtc v_Vvc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vvc v_Vtc))))) =>
                                   zen.Requiv 
                                     (zen.triangle 
                                        (focal.is_true (abst_geq v_Vtc v_Vvc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vvc v_Vtc))) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_geq v_Vtc v_Vvc))))) =>
                                      v_Vjd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vvc v_Vtc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_geq v_Vtc v_Vvc))) v_Vzc 
                                        v_Vid) 
                                     (v_Vzc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_geq v_Vtc v_Vvc)))) =>
                                      v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vvc v_Vtc)))) =>
                                      zen.Rall abst_T 
                                        (v_Vnc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Voc:(zen.term abst_T) =>
                                            zen.eqv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_geq v_Vnc v_Voc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Voc v_Vnc))))) 
                                        v_Vrc 
                                        (v_Vbd:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Voc:(zen.term abst_T) =>
                                                zen.eqv 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_geq v_Vrc v_Voc))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Voc v_Vrc)))))) =>
                                         zen.Rall abst_T 
                                           (v_Voc:(zen.term abst_T) =>
                                            zen.eqv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_geq v_Vrc v_Voc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Voc v_Vrc)))) 
                                           v_Vvc 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.eqv 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_geq v_Vrc v_Vvc))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Vvc v_Vrc))))) =>
                                            zen.Requiv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_geq v_Vrc v_Vvc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Vvc v_Vrc))) 
                                              (v_Vad:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_geq v_Vrc 
                                                              v_Vvc))))) =>
                                               v_Vmd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_leq v_Vvc 
                                                              v_Vrc))))) =>
                                               zen.Rcut 
                                                 (zen.and 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             v_Vvc v_Vtc))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vvc 
                                                                v_Vtc))))) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vvc v_Vtc))) 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             v_Vvc v_Vtc))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vvc 
                                                                v_Vtc)))) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vvc v_Vtc)))) =>
                                                     v_Vjd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vvc 
                                                                v_Vtc))) 
                                                       v_Vkd v_Vjd) v_Vnd) 
                                                 (v_Vpd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.and 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))))))) =>
                                                  zen.Rcut 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          v_Vrc v_Vrc)) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Vrc v_Vrc))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vrd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vrd)) 
                                                       (abst_leq v_Vtc v_Vrc) 
                                                       (abst_leq v_Vvc v_Vrc) 
                                                       (v_Vsd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vtd:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_leq 
                                                                    v_Vtd 
                                                                    v_Vrc) 
                                                                   (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                          v_Vtc v_Vvc 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc)))) =>
                                                           zen.Rnotand 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc)))) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                              zen.Rnotnot 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc)) 
                                                                (v_Vwd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) =>
                                                                 zen.Rcut 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc)) 
                                                                   (v_Vxd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vyd 
                                                                    v_Vvc)) 
                                                                    v_Vvc 
                                                                    v_Vtc 
                                                                    (v_Vod:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc)) 
                                                                    v_Vwd 
                                                                    v_Vod) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vae:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vae)) 
                                                                    v_Vvc 
                                                                    v_Vvc 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vbe) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc)) 
                                                                    v_Vzd 
                                                                    v_Vud) 
                                                                    v_Vzd) 
                                                                    v_Vxd) 
                                                                   (v_Vbe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vbe)) 
                                                                v_Vvd) 
                                                             (v_Vce:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc)))))) =>
                                                              zen.Rnotnot 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc)))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vnc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                                   v_Vvc 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vpc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vpc)))))) 
                                                                    v_Vtc 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vpc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vpc))))) 
                                                                    v_Vrc 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    v_Vkd 
                                                                    v_Vjd) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (v_Ved:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vfd 
                                                                    v_Ved) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vrd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vrd)) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vtd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vtd 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    v_Vvc 
                                                                    v_Vvc 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vbe) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vje:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vje) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    v_Vrc 
                                                                    v_Vrc 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)) 
                                                                    v_Vqd 
                                                                    v_Vke) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    v_Vie) 
                                                                    v_Vie) 
                                                                    v_Vie) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    v_Vhe 
                                                                    v_Vmd) 
                                                                    v_Vhe) 
                                                                    v_Vge) 
                                                                    v_Vfe) 
                                                                    v_Vee) 
                                                                    v_Vde) 
                                                                   abst_leq_transitive) 
                                                                v_Vce) v_Vpd) 
                                                          (v_Vie:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vje:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vje) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                             v_Vrc v_Vrc 
                                                             (v_Vke:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)) 
                                                                v_Vqd v_Vke) 
                                                             (v_Vie:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (abst_leq 
                                                                   v_Vvc 
                                                                   v_Vrc) 
                                                                v_Vie) v_Vie) 
                                                          v_Vsd) 
                                                       (v_Vhe:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq 
                                                                   v_Vvc 
                                                                   v_Vrc))) 
                                                          v_Vhe v_Vmd) v_Vfd) 
                                                    (v_Vke:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vrc v_Vrc)))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vrc 
                                                                v_Vrc))) 
                                                       (v_Vle:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vnc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Voc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vpc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                          v_Vtc 
                                                          (v_Vme:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Voc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vpc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vpc)))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Voc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vpc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vpc)))))) 
                                                             v_Vrc 
                                                             (v_Vne:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vpc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vpc))))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vpc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vpc))))) 
                                                                v_Vrc 
                                                                (v_Voe:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                   (v_Ved:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vfd 
                                                                    v_Ved) 
                                                                   (v_Vpe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    v_Vle 
                                                                    v_Vqe) 
                                                                    (v_Vfd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vrd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vrd)) 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vtd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vtd 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    v_Vtc 
                                                                    v_Vvc 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc)))) 
                                                                    (v_Vvd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc)) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc 
                                                                    v_Vwd 
                                                                    v_Vud) 
                                                                    v_Vvd) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (v_Vkd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vnc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                                    v_Vvc 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vpc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vpc)))))) 
                                                                    v_Vtc 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vpc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vpc))))) 
                                                                    v_Vrc 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    v_Vkd 
                                                                    v_Vjd) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (v_Ved:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vfd 
                                                                    v_Ved) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    v_Vhe 
                                                                    v_Vmd) 
                                                                    v_Vge) 
                                                                    v_Vfe) 
                                                                    v_Vee) 
                                                                    v_Vde) 
                                                                    abst_leq_transitive) 
                                                                    v_Vce) 
                                                                    v_Vpd) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vje:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vje) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    v_Vrc 
                                                                    v_Vrc 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vke) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    v_Vie) 
                                                                    v_Vie) 
                                                                    v_Vsd) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    v_Vhe 
                                                                    v_Vmd) 
                                                                    v_Vfd) 
                                                                    v_Vpe) 
                                                                   v_Voe) 
                                                                v_Vne) v_Vme) 
                                                          abst_leq_transitive) 
                                                       (v_Vqe:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vrc 
                                                                    v_Vrc))))) =>
                                                        zen.Rnoteq abst_T 
                                                          v_Vrc v_Vke)))) 
                                              (v_Vre:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_geq v_Vrc v_Vvc)))) =>
                                               v_Vhe:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Vvc v_Vrc)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_geq v_Vrc v_Vvc))) 
                                                 v_Vre v_Vad) v_Vld) v_Vbd) 
                                        abst_geq_is_leq) v_Vhd) v_Vgd) 
                               abst_geq_is_leq) v_Vcd) v_Vbd) abst_geq_is_leq) 
                   v_Vyc) v_Vwc) v_Vuc) v_Vsc) v_Vqc).

def Pre_order__geq_reflexive :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_geq_is_leq:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_geq x y)) 
                              (dk_logic.ebP (abst_leq y x)))))) ->
  abst_leq_reflexive:(dk_logic.eP 
                        (dk_logic.forall abst_T 
                           (x:(cc.eT abst_T) => dk_logic.ebP (abst_leq x x)))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T (x:(cc.eT abst_T) => dk_logic.ebP (abst_geq x x)))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_geq_is_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_geq x y)) 
              (dk_logic.ebP (abst_leq y x)))))) =>
  abst_leq_reflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.ebP (abst_leq x x)))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_geq v_Vac v_Vac)))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle (focal.is_true (abst_geq v_Vac v_Vac)))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_geq v_Vac v_Vac))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vcc))))) =>
        zen.Rall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.eqv (zen.triangle (focal.is_true (abst_geq v_Vac v_Vec))) 
                (zen.triangle (focal.is_true (abst_leq v_Vec v_Vac))))) 
          v_Vcc 
          (v_Vfc:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vec:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vec))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc)))))) =>
           zen.Rall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.eqv (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vec))) 
                (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc)))) v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.eqv 
                    (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))))) =>
              zen.Requiv 
                (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vcc))) 
                (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                (v_Vdc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vcc))))) =>
                 v_Vhc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))))) =>
                 zen.Rall abst_T 
                   (v_Vac:(zen.term abst_T) =>
                    zen.triangle (focal.is_true (abst_leq v_Vac v_Vac))) 
                   v_Vcc 
                   (v_Vic:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc)))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                      v_Vic v_Vhc) abst_leq_reflexive) 
                (v_Vjc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vcc)))) =>
                 v_Vic:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc)))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vcc))) 
                   v_Vjc v_Vdc) v_Vgc) v_Vfc) abst_geq_is_leq) v_Vbc).

def Pre_order__gt_is_lt :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv (dk_logic.ebP (Pre_order__gt abst_T abst_lt x y)) 
             (dk_logic.ebP (abst_lt y x)))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true (Pre_order__gt abst_T abst_lt v_Vzb v_Vac))) 
             (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__gt abst_T abst_lt v_Vzb v_Vac))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb)))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true (Pre_order__gt abst_T abst_lt v_Vzb v_Vac))) 
             (zen.triangle (focal.is_true (abst_lt v_Vac v_Vzb))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__gt abst_T abst_lt v_Vcc v_Vac))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vac v_Vcc))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true (Pre_order__gt abst_T abst_lt v_Vcc v_Vac))) 
             (zen.triangle (focal.is_true (abst_lt v_Vac v_Vcc)))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Pre_order__gt abst_T abst_lt v_Vcc v_Vec))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc)))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true (Pre_order__gt abst_T abst_lt v_Vcc v_Vec))) 
             (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))))) =>
              v_Vhc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc)))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) v_Vhc 
                v_Vgc) 
             (v_Vhc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc)))) =>
              v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))))) =>
              zen.Raxiom 
                (zen.triangle (focal.is_true (abst_lt v_Vec v_Vcc))) v_Vhc 
                v_Vgc) v_Vfc) v_Vdc) v_Vbc).

def Pre_order__lt_refines_different :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_leq_and_different:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.eqv 
                                           (dk_logic.ebP (abst_lt x y)) 
                                           (dk_logic.and 
                                              (dk_logic.ebP (abst_leq x y)) 
                                              (dk_logic.ebP 
                                                 (abst_different x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
             (dk_logic.ebP (abst_different x y)))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_leq_and_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_different x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_different v_Vac v_Vbc)))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vac v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vac v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_different v_Vac v_Vbc))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vdc v_Vbc))))))) =>
        zen.Rnotall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vbc))) 
             (zen.triangle (focal.is_true (abst_different v_Vdc v_Vbc)))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vdc v_Vfc)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
             (zen.triangle (focal.is_true (abst_different v_Vdc v_Vfc))) 
             (v_Vhc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc)))) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vdc v_Vfc))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_lt v_Vac v_Vbc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vac v_Vbc)))))) 
                v_Vdc 
                (v_Vjc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vbc))))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vbc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vdc v_Vbc))))) 
                   v_Vfc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vfc)))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vdc v_Vfc)))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vdc v_Vfc))))) =>
                       v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vdc v_Vfc)))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
                         v_Vhc v_Vlc) 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc)))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vfc))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vdc v_Vfc))) 
                         (v_Voc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc)))) =>
                          v_Vpc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vfc)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_different v_Vdc v_Vfc))) 
                            v_Vpc v_Vic) v_Vnc) v_Vkc) v_Vjc) 
                abst_lt_is_leq_and_different) v_Vgc) v_Vec) v_Vcc).

def Pre_order__lt_refines_leq :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_leq_and_different:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.eqv 
                                           (dk_logic.ebP (abst_lt x y)) 
                                           (dk_logic.and 
                                              (dk_logic.ebP (abst_leq x y)) 
                                              (dk_logic.ebP 
                                                 (abst_different x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
             (dk_logic.ebP (abst_leq x y)))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_leq_and_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_different x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc)))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vac v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vbc))))))) =>
        zen.Rnotall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vbc))) 
             (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vbc)))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
             (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))) 
             (v_Vhc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc)))) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_lt v_Vac v_Vbc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vac v_Vbc)))))) 
                v_Vdc 
                (v_Vjc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vbc))))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vbc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vbc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vdc v_Vbc))))) 
                   v_Vfc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vfc)))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vdc v_Vfc)))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vdc v_Vfc))))) =>
                       v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vdc v_Vfc)))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))) 
                         v_Vhc v_Vlc) 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc)))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vfc))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vdc v_Vfc))) 
                         (v_Voc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc)))) =>
                          v_Vpc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vdc v_Vfc)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vdc v_Vfc))) v_Voc 
                            v_Vic) v_Vnc) v_Vkc) v_Vjc) 
                abst_lt_is_leq_and_different) v_Vgc) v_Vec) v_Vcc).

def Pre_order__lt_is_irreflexive :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt_is_leq_and_different:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.eqv 
                                           (dk_logic.ebP (abst_lt x y)) 
                                           (dk_logic.and 
                                              (dk_logic.ebP (abst_leq x y)) 
                                              (dk_logic.ebP 
                                                 (abst_different x y))))))) ->
  abst_different_is_irreflexive:(dk_logic.eP 
                                   (dk_logic.forall abst_T 
                                      (x:(cc.eT abst_T) =>
                                       dk_logic.not 
                                         (dk_logic.ebP (abst_different x x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_lt x x))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt_is_leq_and_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_different x y))))))) =>
  abst_different_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_different x x))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.not (zen.triangle (focal.is_true (abst_lt v_Vac v_Vac))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.not (zen.triangle (focal.is_true (abst_lt v_Vac v_Vac))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.not (zen.triangle (focal.is_true (abst_lt v_Vac v_Vac)))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.not (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc)))))) =>
        zen.Rnotnot (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))) 
          (v_Vec:
           (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc)))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_lt v_Vac v_Vfc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_leq v_Vac v_Vfc))) 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vac v_Vfc)))))) 
             v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vfc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vfc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vfc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vfc))))))) =>
              zen.Rall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vfc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vfc))) 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vcc v_Vfc))))) 
                v_Vcc 
                (v_Vhc:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vcc)))))) =>
                 zen.Requiv 
                   (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vcc v_Vcc)))) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))))) =>
                    v_Vjc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vcc v_Vcc)))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))) 
                      v_Vec v_Vic) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc)))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vcc))))) =>
                    zen.Rand 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vcc v_Vcc))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vcc)))) =>
                       v_Vmc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_different v_Vcc v_Vcc)))) =>
                       zen.Rall abst_T 
                         (v_Vac:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (focal.is_true (abst_different v_Vac v_Vac)))) 
                         v_Vcc 
                         (v_Vnc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vcc v_Vcc))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_different v_Vcc v_Vcc))) 
                            v_Vmc v_Vnc) abst_different_is_irreflexive) v_Vkc) 
                   v_Vhc) v_Vgc) abst_lt_is_leq_and_different) v_Vdc) v_Vbc).

def Pre_order__gt_refines_different :
  abst_T:cc.uT ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different_is_symmetric:(dk_logic.eP 
                                 (dk_logic.forall abst_T 
                                    (x:(cc.eT abst_T) =>
                                     dk_logic.forall abst_T 
                                       (y:(cc.eT abst_T) =>
                                        dk_logic.imp 
                                          (dk_logic.ebP (abst_different x y)) 
                                          (dk_logic.ebP (abst_different y x)))))) ->
  abst_gt_is_lt:(dk_logic.eP 
                   (dk_logic.forall abst_T 
                      (x:(cc.eT abst_T) =>
                       dk_logic.forall abst_T 
                         (y:(cc.eT abst_T) =>
                          dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
                            (dk_logic.ebP (abst_lt y x)))))) ->
  abst_lt_refines_different:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.forall abst_T 
                                     (y:(cc.eT abst_T) =>
                                      dk_logic.imp 
                                        (dk_logic.ebP (abst_lt x y)) 
                                        (dk_logic.ebP (abst_different x y)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_gt x y)) 
             (dk_logic.ebP (abst_different x y)))))
  :=
  abst_T:cc.uT =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different_is_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_different x y)) 
              (dk_logic.ebP (abst_different y x)))))) =>
  abst_gt_is_lt:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
              (dk_logic.ebP (abst_lt y x)))))) =>
  abst_lt_refines_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.ebP (abst_different x y)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_gt v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_different v_Vac v_Vbc)))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_gt v_Vac v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vac v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_gt v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_different v_Vac v_Vbc))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vbc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vdc v_Vbc))))))) =>
        zen.Rnotall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vbc))) 
             (zen.triangle (focal.is_true (abst_different v_Vdc v_Vbc)))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vfc))) 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vdc v_Vfc)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vfc))) 
             (zen.triangle (focal.is_true (abst_different v_Vdc v_Vfc))) 
             (v_Vhc:
              (zen.proof (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vfc)))) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true (abst_different v_Vdc v_Vfc))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_gt v_Vac v_Vbc))) 
                      (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vac))))) 
                v_Vdc 
                (v_Vjc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vbc))) 
                          (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vdc)))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vbc))) 
                      (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vdc)))) 
                   v_Vfc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vfc))) 
                          (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vdc))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vfc))) 
                      (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vdc))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_gt v_Vdc v_Vfc))))) =>
                       v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vfc v_Vdc))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vfc))) 
                         v_Vhc v_Vlc) 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_gt v_Vdc v_Vfc)))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vdc)))) =>
                       zen.Rall abst_T 
                         (v_Vac:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_lt v_Vac v_Vbc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vac v_Vbc))))) 
                         v_Vfc 
                         (v_Voc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vbc:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt v_Vfc v_Vbc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vfc v_Vbc)))))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_lt v_Vfc v_Vbc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vfc v_Vbc)))) 
                            v_Vdc 
                            (v_Vpc:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt v_Vfc v_Vdc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vfc v_Vdc))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true (abst_lt v_Vfc v_Vdc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_different v_Vfc v_Vdc))) 
                               (v_Vmc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt v_Vfc v_Vdc))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vfc v_Vdc))) 
                                  v_Vnc v_Vmc) 
                               (v_Vqc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_different v_Vfc v_Vdc)))) =>
                                zen.Rall abst_T 
                                  (v_Vac:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vbc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vac v_Vbc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vbc v_Vac))))) 
                                  v_Vfc 
                                  (v_Vrc:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vbc:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vfc v_Vbc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vbc v_Vfc)))))) =>
                                   zen.Rall abst_T 
                                     (v_Vbc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vfc v_Vbc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vbc v_Vfc)))) 
                                     v_Vdc 
                                     (v_Vsc:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vfc v_Vdc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vdc v_Vfc))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vfc v_Vdc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vdc v_Vfc))) 
                                        (v_Vtc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_different v_Vfc 
                                                        v_Vdc))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_different v_Vfc v_Vdc))) 
                                           v_Vqc v_Vtc) 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vdc v_Vfc)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_different v_Vdc v_Vfc))) 
                                           v_Vuc v_Vic) v_Vsc) v_Vrc) 
                                  abst_different_is_symmetric) v_Vpc) v_Voc) 
                         abst_lt_refines_different) v_Vkc) v_Vjc) 
                abst_gt_is_lt) v_Vgc) v_Vec) v_Vcc).

def Pre_order__gt_is_irreflexive :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_gt_is_lt:(dk_logic.eP 
                   (dk_logic.forall abst_T 
                      (x:(cc.eT abst_T) =>
                       dk_logic.forall abst_T 
                         (y:(cc.eT abst_T) =>
                          dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
                            (dk_logic.ebP (abst_lt y x)))))) ->
  abst_lt_is_irreflexive:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.not (dk_logic.ebP (abst_lt x x))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_gt x x))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_gt_is_lt:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
              (dk_logic.ebP (abst_lt y x)))))) =>
  abst_lt_is_irreflexive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) => dk_logic.not (dk_logic.ebP (abst_lt x x))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.not (zen.triangle (focal.is_true (abst_gt v_Vac v_Vac))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.not (zen.triangle (focal.is_true (abst_gt v_Vac v_Vac))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.not (zen.triangle (focal.is_true (abst_gt v_Vac v_Vac)))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.not (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc)))))) =>
        zen.Rnotnot (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))) 
          (v_Vec:
           (zen.proof (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc)))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_gt v_Vac v_Vfc))) 
                   (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vac))))) 
             v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vfc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vfc))) 
                       (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vcc)))))) =>
              zen.Rall abst_T 
                (v_Vfc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vfc))) 
                   (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vcc)))) 
                v_Vcc 
                (v_Vhc:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))) 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))))) =>
                 zen.Requiv 
                   (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))) 
                   (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))))) =>
                    v_Vjc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc))) 
                      v_Vec v_Vic) 
                   (v_Vec:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vcc)))) =>
                    v_Vkc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc)))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle (focal.is_true (abst_lt v_Vac v_Vac)))) 
                      v_Vcc 
                      (v_Vjc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vcc v_Vcc))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vcc))) 
                         v_Vkc v_Vjc) abst_lt_is_irreflexive) v_Vhc) v_Vgc) 
             abst_gt_is_lt) v_Vdc) v_Vbc).

def Partial_order__geq_antisymmetric :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq_antisymmetric:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (y:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.imp 
                                        (dk_logic.ebP (abst_leq y x)) 
                                        (dk_logic.ebP (abst_equal x y))))))) ->
  abst_geq_is_leq:(dk_logic.eP 
                     (dk_logic.forall abst_T 
                        (x:(cc.eT abst_T) =>
                         dk_logic.forall abst_T 
                           (y:(cc.eT abst_T) =>
                            dk_logic.eqv (dk_logic.ebP (abst_geq x y)) 
                              (dk_logic.ebP (abst_leq y x)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_geq x y)) 
             (dk_logic.imp (dk_logic.ebP (abst_geq y x)) 
                (dk_logic.ebP (abst_equal x y))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_geq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq_antisymmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
              (dk_logic.imp (dk_logic.ebP (abst_leq y x)) 
                 (dk_logic.ebP (abst_equal x y))))))) =>
  abst_geq_is_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_geq x y)) 
              (dk_logic.ebP (abst_leq y x)))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_geq v_Vbc v_Vcc))) 
             (zen.imp (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vbc))) 
                (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))))))) 
    (v_Vdc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_geq v_Vbc v_Vcc))) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vbc))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))))))))) =>
     zen.Rnotall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_geq v_Vbc v_Vcc))) 
             (zen.imp (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vbc))) 
                (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
       (v_Vec:(zen.term abst_T) =>
        v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_geq v_Vec v_Vcc))) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vec))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc)))))))) =>
        zen.Rnotall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_geq v_Vec v_Vcc))) 
             (zen.imp (zen.triangle (focal.is_true (abst_geq v_Vcc v_Vec))) 
                (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))))) 
          (v_Vgc:(zen.term abst_T) =>
           v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_geq v_Vec v_Vgc))) 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_geq v_Vgc v_Vec))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_geq v_Vec v_Vgc))) 
             (zen.imp (zen.triangle (focal.is_true (abst_geq v_Vgc v_Vec))) 
                (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc)))) 
             (v_Vic:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_geq v_Vec v_Vgc)))) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_geq v_Vgc v_Vec))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc)))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_geq v_Vgc v_Vec))) 
                (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
                (v_Vkc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_geq v_Vgc v_Vec)))) =>
                 v_Vlc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.forall abst_T 
                      (v_Vcc:(zen.term abst_T) =>
                       zen.eqv 
                         (zen.triangle (focal.is_true (abst_geq v_Vbc v_Vcc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vbc))))) 
                   v_Vec 
                   (v_Vmc:
                    (zen.proof 
                       (zen.forall abst_T 
                          (v_Vcc:(zen.term abst_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true (abst_geq v_Vec v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vcc v_Vec)))))) =>
                    zen.Rall abst_T 
                      (v_Vcc:(zen.term abst_T) =>
                       zen.eqv 
                         (zen.triangle (focal.is_true (abst_geq v_Vec v_Vcc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec)))) 
                      v_Vgc 
                      (v_Vnc:
                       (zen.proof 
                          (zen.eqv 
                             (zen.triangle 
                                (focal.is_true (abst_geq v_Vec v_Vgc))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vgc v_Vec))))) =>
                       zen.Requiv 
                         (zen.triangle (focal.is_true (abst_geq v_Vec v_Vgc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vgc v_Vec))) 
                         (v_Voc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_geq v_Vec v_Vgc))))) =>
                          v_Vpc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vgc v_Vec))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_geq v_Vec v_Vgc))) v_Vic 
                            v_Voc) 
                         (v_Vic:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_geq v_Vec v_Vgc)))) =>
                          v_Vqc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vgc v_Vec)))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true (abst_geq v_Vbc v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq v_Vcc v_Vbc))))) 
                            v_Vgc 
                            (v_Vrc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vcc:(zen.term abst_T) =>
                                    zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_geq v_Vgc v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_leq v_Vcc v_Vgc)))))) =>
                             zen.Rall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true (abst_geq v_Vgc v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq v_Vcc v_Vgc)))) 
                               v_Vec 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_geq v_Vgc v_Vec))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_leq v_Vec v_Vgc))))) =>
                                zen.Requiv 
                                  (zen.triangle 
                                     (focal.is_true (abst_geq v_Vgc v_Vec))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq v_Vec v_Vgc))) 
                                  (v_Vtc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_geq v_Vgc v_Vec))))) =>
                                   v_Vuc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vec v_Vgc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_geq v_Vgc v_Vec))) 
                                     v_Vkc v_Vtc) 
                                  (v_Vkc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_geq v_Vgc v_Vec)))) =>
                                   v_Vvc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_leq v_Vec v_Vgc)))) =>
                                   zen.Rall abst_T 
                                     (v_Vbc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Vbc v_Vcc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Vcc v_Vbc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vbc v_Vcc)))))) 
                                     v_Vec 
                                     (v_Vwc:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vcc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Vec v_Vcc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Vcc v_Vec))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vec 
                                                           v_Vcc))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Vec v_Vcc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Vcc v_Vec))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vec v_Vcc))))) 
                                        v_Vgc 
                                        (v_Vxc:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Vec v_Vgc))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Vgc v_Vec))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vec 
                                                           v_Vgc)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Vec v_Vgc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Vgc v_Vec))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vec v_Vgc)))) 
                                           (v_Vuc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Vec v_Vgc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Vec v_Vgc))) 
                                              v_Vvc v_Vuc) 
                                           (v_Vyc:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Vgc v_Vec))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vec 
                                                           v_Vgc))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Vgc v_Vec))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vec v_Vgc))) 
                                              (v_Vpc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_leq v_Vgc 
                                                              v_Vec))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_leq v_Vgc v_Vec))) 
                                                 v_Vqc v_Vpc) 
                                              (v_Vzc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vec 
                                                           v_Vgc)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal v_Vec 
                                                          v_Vgc))) v_Vzc 
                                                 v_Vlc) v_Vyc) v_Vxc) v_Vwc) 
                                     abst_leq_antisymmetric) v_Vsc) v_Vrc) 
                            abst_geq_is_leq) v_Vnc) v_Vmc) abst_geq_is_leq) 
                v_Vjc) v_Vhc) v_Vfc) v_Vdc).

def Partial_order__lt_is_asymetric :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq_antisymmetric:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (y:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.imp 
                                        (dk_logic.ebP (abst_leq y x)) 
                                        (dk_logic.ebP (abst_equal x y))))))) ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  abst_lt_is_leq_and_different:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.eqv 
                                           (dk_logic.ebP (abst_lt x y)) 
                                           (dk_logic.and 
                                              (dk_logic.ebP (abst_leq x y)) 
                                              (dk_logic.ebP 
                                                 (abst_different x y))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
             (dk_logic.not (dk_logic.ebP (abst_lt y x))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq_antisymmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
              (dk_logic.imp (dk_logic.ebP (abst_leq y x)) 
                 (dk_logic.ebP (abst_equal x y))))))) =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  abst_lt_is_leq_and_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_different x y))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vcc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vdc))) 
             (zen.not (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vcc))))))) 
    (v_Vec:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vcc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vdc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vcc))))))))) =>
     zen.Rnotall abst_T 
       (v_Vcc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vdc))) 
             (zen.not (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vcc)))))) 
       (v_Vfc:(zen.term abst_T) =>
        v_Vgc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vdc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vdc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc)))))))) =>
        zen.Rnotall abst_T 
          (v_Vdc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vdc))) 
             (zen.not (zen.triangle (focal.is_true (abst_lt v_Vdc v_Vfc))))) 
          (v_Vhc:(zen.term abst_T) =>
           v_Vic:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vhc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_lt v_Vhc v_Vfc))))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vhc))) 
             (zen.not (zen.triangle (focal.is_true (abst_lt v_Vhc v_Vfc)))) 
             (v_Vjc:
              (zen.proof (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vhc)))) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_lt v_Vhc v_Vfc)))))) =>
              zen.Rall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vdc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vdc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vdc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vcc v_Vdc)))))) 
                v_Vfc 
                (v_Vlc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vdc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vdc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vfc v_Vdc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vfc v_Vdc))))))) =>
                 zen.Rall abst_T 
                   (v_Vdc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vdc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vfc v_Vdc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vfc v_Vdc))))) 
                   v_Vhc 
                   (v_Vmc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vhc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vfc v_Vhc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vfc v_Vhc)))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vhc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vfc v_Vhc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vfc v_Vhc)))) 
                      (v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vfc v_Vhc))))) =>
                       v_Voc:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vfc v_Vhc))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_different v_Vfc v_Vhc)))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vhc))) 
                         v_Vjc v_Vnc) 
                      (v_Vjc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt v_Vfc v_Vhc)))) =>
                       v_Vpc:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vfc v_Vhc))) 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vfc v_Vhc))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (abst_leq v_Vfc v_Vhc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different v_Vfc v_Vhc))) 
                         (v_Vqc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vfc v_Vhc)))) =>
                          v_Vrc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_different v_Vfc v_Vhc)))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (focal.is_true (abst_lt v_Vhc v_Vfc))) 
                            (v_Vsc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vhc v_Vfc)))) =>
                             zen.Rall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vdc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Vcc v_Vdc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_leq v_Vcc v_Vdc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vcc v_Vdc)))))) 
                               v_Vhc 
                               (v_Vtc:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vdc:(zen.term abst_T) =>
                                       zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Vhc v_Vdc))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vhc v_Vdc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vhc v_Vdc))))))) =>
                                zen.Rall abst_T 
                                  (v_Vdc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Vhc v_Vdc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_leq v_Vhc v_Vdc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vhc v_Vdc))))) 
                                  v_Vfc 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Vhc v_Vfc))) 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vhc v_Vfc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vhc v_Vfc)))))) =>
                                   zen.Requiv 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Vhc v_Vfc))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_leq v_Vhc v_Vfc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vhc v_Vfc)))) 
                                     (v_Vvc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vhc v_Vfc))))) =>
                                      v_Vwc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Vhc v_Vfc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_different v_Vhc 
                                                        v_Vfc)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_lt v_Vhc v_Vfc))) v_Vsc 
                                        v_Vvc) 
                                     (v_Vsc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Vhc v_Vfc)))) =>
                                      v_Vxc:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vhc v_Vfc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vhc v_Vfc))))) =>
                                      zen.Rand 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_leq v_Vhc v_Vfc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_different v_Vhc v_Vfc))) 
                                        (v_Vyc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vhc v_Vfc)))) =>
                                         v_Vzc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_different v_Vhc v_Vfc)))) =>
                                         zen.Rall abst_T 
                                           (v_Vcc:(zen.term abst_T) =>
                                            zen.forall abst_T 
                                              (v_Vdc:(zen.term abst_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vcc 
                                                          v_Vdc))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vcc 
                                                             v_Vdc)))))) 
                                           v_Vhc 
                                           (v_Vad:
                                            (zen.proof 
                                               (zen.forall abst_T 
                                                  (v_Vdc:(zen.term abst_T) =>
                                                   zen.eqv 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vhc v_Vdc))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vhc v_Vdc))))))) =>
                                            zen.Rall abst_T 
                                              (v_Vdc:(zen.term abst_T) =>
                                               zen.eqv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vhc 
                                                          v_Vdc))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vhc 
                                                             v_Vdc))))) 
                                              v_Vfc 
                                              (v_Vbd:
                                               (zen.proof 
                                                  (zen.eqv 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vhc v_Vfc))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vhc v_Vfc)))))) =>
                                               zen.Requiv 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_different v_Vhc 
                                                          v_Vfc))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vhc 
                                                             v_Vfc)))) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_different 
                                                                 v_Vhc v_Vfc))))) =>
                                                  v_Vdd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vfc)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_different 
                                                             v_Vhc v_Vfc))) 
                                                    v_Vzc v_Vcd) 
                                                 (v_Vzc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_different 
                                                              v_Vhc v_Vfc)))) =>
                                                  v_Ved:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vhc v_Vfc))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vcc:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vdc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq 
                                                                   v_Vcc 
                                                                   v_Vdc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_leq 
                                                                    v_Vdc 
                                                                    v_Vcc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vcc 
                                                                    v_Vdc)))))) 
                                                    v_Vhc 
                                                    (v_Vfd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vdc:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vhc 
                                                                    v_Vdc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vdc 
                                                                    v_Vhc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vdc))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vdc:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq 
                                                                   v_Vhc 
                                                                   v_Vdc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_leq 
                                                                    v_Vdc 
                                                                    v_Vhc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vdc))))) 
                                                       v_Vfc 
                                                       (v_Vgd:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vhc 
                                                                    v_Vfc))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vfc 
                                                                    v_Vhc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vfc)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq 
                                                                   v_Vhc 
                                                                   v_Vfc))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_leq 
                                                                    v_Vfc 
                                                                    v_Vhc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vfc)))) 
                                                          (v_Vhd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vhc 
                                                                    v_Vfc))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_leq 
                                                                    v_Vhc 
                                                                    v_Vfc))) 
                                                             v_Vyc v_Vhd) 
                                                          (v_Vid:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vfc 
                                                                    v_Vhc))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vfc))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_leq 
                                                                    v_Vfc 
                                                                    v_Vhc))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vfc))) 
                                                             (v_Vjd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vfc 
                                                                    v_Vhc))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vfc 
                                                                    v_Vhc))) 
                                                                v_Vqc v_Vjd) 
                                                             (v_Vkd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vfc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vhc 
                                                                    v_Vfc))) 
                                                                v_Vkd v_Ved) 
                                                             v_Vid) v_Vgd) 
                                                       v_Vfd) 
                                                    abst_leq_antisymmetric) 
                                                 v_Vbd) v_Vad) 
                                           abst_same_is_not_different) v_Vxc) 
                                     v_Vuc) v_Vtc) 
                               abst_lt_is_leq_and_different) v_Vkc) v_Vpc) 
                      v_Vmc) v_Vlc) abst_lt_is_leq_and_different) v_Vic) 
          v_Vgc) v_Vec).

def Partial_order__gt_is_asymetric :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_gt_is_lt:(dk_logic.eP 
                   (dk_logic.forall abst_T 
                      (x:(cc.eT abst_T) =>
                       dk_logic.forall abst_T 
                         (y:(cc.eT abst_T) =>
                          dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
                            (dk_logic.ebP (abst_lt y x)))))) ->
  abst_lt_is_asymetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
                                   (dk_logic.not (dk_logic.ebP (abst_lt y x))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_gt x y)) 
             (dk_logic.not (dk_logic.ebP (abst_gt y x))))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_gt_is_lt:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
              (dk_logic.ebP (abst_lt y x)))))) =>
  abst_lt_is_asymetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.not (dk_logic.ebP (abst_lt y x))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_gt v_Vbc v_Vcc))) 
             (zen.not (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vbc))))))) 
    (v_Vdc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_gt v_Vbc v_Vcc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vbc))))))))) =>
     zen.Rnotall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_gt v_Vbc v_Vcc))) 
             (zen.not (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vbc)))))) 
       (v_Vec:(zen.term abst_T) =>
        v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_gt v_Vec v_Vcc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vec)))))))) =>
        zen.Rnotall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_gt v_Vec v_Vcc))) 
             (zen.not (zen.triangle (focal.is_true (abst_gt v_Vcc v_Vec))))) 
          (v_Vgc:(zen.term abst_T) =>
           v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_gt v_Vec v_Vgc))) 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_gt v_Vgc v_Vec))))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_gt v_Vec v_Vgc))) 
             (zen.not (zen.triangle (focal.is_true (abst_gt v_Vgc v_Vec)))) 
             (v_Vic:
              (zen.proof (zen.triangle (focal.is_true (abst_gt v_Vec v_Vgc)))) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_gt v_Vgc v_Vec)))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_gt v_Vbc v_Vcc))) 
                      (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vbc))))) 
                v_Vec 
                (v_Vkc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle (focal.is_true (abst_gt v_Vec v_Vcc))) 
                          (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec)))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_gt v_Vec v_Vcc))) 
                      (zen.triangle (focal.is_true (abst_lt v_Vcc v_Vec)))) 
                   v_Vgc 
                   (v_Vlc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle (focal.is_true (abst_gt v_Vec v_Vgc))) 
                          (zen.triangle (focal.is_true (abst_lt v_Vgc v_Vec))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_gt v_Vec v_Vgc))) 
                      (zen.triangle (focal.is_true (abst_lt v_Vgc v_Vec))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_gt v_Vec v_Vgc))))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vgc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_gt v_Vec v_Vgc))) 
                         v_Vic v_Vmc) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_gt v_Vec v_Vgc)))) =>
                       v_Voc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_lt v_Vgc v_Vec)))) =>
                       zen.Rnotnot 
                         (zen.triangle (focal.is_true (abst_gt v_Vgc v_Vec))) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_gt v_Vgc v_Vec)))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true (abst_gt v_Vbc v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vcc v_Vbc))))) 
                            v_Vgc 
                            (v_Vqc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vcc:(zen.term abst_T) =>
                                    zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true (abst_gt v_Vgc v_Vcc))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt v_Vcc v_Vgc)))))) =>
                             zen.Rall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true (abst_gt v_Vgc v_Vcc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vcc v_Vgc)))) 
                               v_Vec 
                               (v_Vrc:
                                (zen.proof 
                                   (zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true (abst_gt v_Vgc v_Vec))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt v_Vec v_Vgc))))) =>
                                zen.Requiv 
                                  (zen.triangle 
                                     (focal.is_true (abst_gt v_Vgc v_Vec))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt v_Vec v_Vgc))) 
                                  (v_Vsc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_gt v_Vgc v_Vec))))) =>
                                   v_Vtc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Vec v_Vgc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_gt v_Vgc v_Vec))) 
                                     v_Vpc v_Vsc) 
                                  (v_Vpc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_gt v_Vgc v_Vec)))) =>
                                   v_Vuc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt v_Vec v_Vgc)))) =>
                                   zen.Rall abst_T 
                                     (v_Vbc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vbc v_Vcc))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vcc v_Vbc)))))) 
                                     v_Vec 
                                     (v_Vvc:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vcc:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt v_Vec v_Vcc))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Vcc v_Vec))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vcc:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vec v_Vcc))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vcc v_Vec))))) 
                                        v_Vgc 
                                        (v_Vwc:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt v_Vec v_Vgc))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Vgc v_Vec)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_lt v_Vec v_Vgc))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vgc v_Vec)))) 
                                           (v_Vtc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Vec v_Vgc))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vec v_Vgc))) 
                                              v_Vuc v_Vtc) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Vgc v_Vec))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vgc v_Vec))) 
                                              v_Voc v_Vnc) v_Vwc) v_Vvc) 
                                     abst_lt_is_asymetric) v_Vrc) v_Vqc) 
                            abst_gt_is_lt) v_Vjc) v_Vlc) v_Vkc) abst_gt_is_lt) 
             v_Vhc) v_Vfc) v_Vdc).

def Partial_order__lt_is_transitive :
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_different:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_symmetric:(dk_logic.eP 
                          (dk_logic.forall abst_T 
                             (x:(cc.eT abst_T) =>
                              dk_logic.forall abst_T 
                                (y:(cc.eT abst_T) =>
                                 dk_logic.imp 
                                   (dk_logic.ebP (abst_equal x y)) 
                                   (dk_logic.ebP (abst_equal y x)))))) ->
  abst_leq_antisymmetric:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (y:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.imp 
                                        (dk_logic.ebP (abst_leq y x)) 
                                        (dk_logic.ebP (abst_equal x y))))))) ->
  abst_leq_extends_equal:(dk_logic.eP 
                            (dk_logic.forall abst_T 
                               (x:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (y:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_equal x y)) 
                                     (dk_logic.ebP (abst_leq x y)))))) ->
  abst_leq_transitive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.forall abst_T 
                               (y:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (z:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.imp 
                                        (dk_logic.ebP (abst_leq y z)) 
                                        (dk_logic.ebP (abst_leq x z)))))))) ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_same_is_not_different:(dk_logic.eP 
                                (dk_logic.forall abst_T 
                                   (x:(cc.eT abst_T) =>
                                    dk_logic.forall abst_T 
                                      (y:(cc.eT abst_T) =>
                                       dk_logic.eqv 
                                         (dk_logic.ebP (abst_different x y)) 
                                         (dk_logic.not 
                                            (dk_logic.ebP (abst_equal x y))))))) ->
  abst_lt_is_leq_and_different:(dk_logic.eP 
                                  (dk_logic.forall abst_T 
                                     (x:(cc.eT abst_T) =>
                                      dk_logic.forall abst_T 
                                        (y:(cc.eT abst_T) =>
                                         dk_logic.eqv 
                                           (dk_logic.ebP (abst_lt x y)) 
                                           (dk_logic.and 
                                              (dk_logic.ebP (abst_leq x y)) 
                                              (dk_logic.ebP 
                                                 (abst_different x y))))))) ->
  abst_lt_refines_different:(dk_logic.eP 
                               (dk_logic.forall abst_T 
                                  (x:(cc.eT abst_T) =>
                                   dk_logic.forall abst_T 
                                     (y:(cc.eT abst_T) =>
                                      dk_logic.imp 
                                        (dk_logic.ebP (abst_lt x y)) 
                                        (dk_logic.ebP (abst_different x y)))))) ->
  abst_lt_refines_leq:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.forall abst_T 
                               (y:(cc.eT abst_T) =>
                                dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
                                  (dk_logic.ebP (abst_leq x y)))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_lt y z)) 
                   (dk_logic.ebP (abst_lt x z)))))))
  :=
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_different:
  ((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_equal y x)))))) =>
  abst_leq_antisymmetric:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
              (dk_logic.imp (dk_logic.ebP (abst_leq y x)) 
                 (dk_logic.ebP (abst_equal x y))))))) =>
  abst_leq_extends_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.ebP (abst_leq x y)))))) =>
  abst_leq_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_leq y z)) 
                    (dk_logic.ebP (abst_leq x z)))))))) =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_same_is_not_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_different x y)) 
              (dk_logic.not (dk_logic.ebP (abst_equal x y))))))) =>
  abst_lt_is_leq_and_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_different x y))))))) =>
  abst_lt_refines_different:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.ebP (abst_different x y)))))) =>
  abst_lt_refines_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
              (dk_logic.ebP (abst_leq x y)))))) =>
  (__P_1_LEMMA:
   (x:(cc.eT abst_T) ->
    y:(cc.eT abst_T) ->
    z:(cc.eT abst_T) ->
    H_xy:(dk_logic.eP (dk_logic.ebP (abst_lt x y))) ->
    H_yz:(dk_logic.eP (dk_logic.ebP (abst_lt y z))) ->
    dk_logic.eP (dk_logic.ebP (abst_lt x z))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vkc:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp (zen.triangle (focal.is_true (abst_lt v_Vkc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vlc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vkc v_Vmc)))))))) 
     (v_Vnc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vkc:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vlc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_lt v_Vkc v_Vlc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Vlc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Vkc v_Vmc)))))))))) =>
      zen.Rnotall abst_T 
        (v_Vkc:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp (zen.triangle (focal.is_true (abst_lt v_Vkc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vlc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_lt v_Vkc v_Vmc))))))) 
        (v_Voc:(zen.term abst_T) =>
         v_Vpc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vlc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_lt v_Voc v_Vlc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Vlc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Voc v_Vmc))))))))) =>
         zen.Rnotall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp (zen.triangle (focal.is_true (abst_lt v_Voc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vlc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_lt v_Voc v_Vmc)))))) 
           (v_Vqc:(zen.term abst_T) =>
            v_Vrc:
            (zen.proof 
               (zen.not 
                  (zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle (focal.is_true (abst_lt v_Voc v_Vqc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Vqc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Voc v_Vmc)))))))) =>
            zen.Rnotall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp (zen.triangle (focal.is_true (abst_lt v_Voc v_Vqc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vqc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_lt v_Voc v_Vmc))))) 
              (v_Vsc:(zen.term abst_T) =>
               v_Vtc:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle (focal.is_true (abst_lt v_Voc v_Vqc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Vqc v_Vsc))) 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Voc v_Vsc))))))) =>
               zen.Rnotimply 
                 (zen.triangle (focal.is_true (abst_lt v_Voc v_Vqc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_lt v_Vqc v_Vsc))) 
                    (zen.triangle (focal.is_true (abst_lt v_Voc v_Vsc)))) 
                 (v_Vuc:
                  (zen.proof 
                     (zen.triangle (focal.is_true (abst_lt v_Voc v_Vqc)))) =>
                  v_Vvc:
                  (zen.proof 
                     (zen.not 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Vqc v_Vsc))) 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Voc v_Vsc)))))) =>
                  zen.Rnotimply 
                    (zen.triangle (focal.is_true (abst_lt v_Vqc v_Vsc))) 
                    (zen.triangle (focal.is_true (abst_lt v_Voc v_Vsc))) 
                    (v_Vwc:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_lt v_Vqc v_Vsc)))) =>
                     v_Vxc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_lt v_Voc v_Vsc))))) =>
                     zen.Rcut 
                       (zen.and 
                          (zen.not 
                             (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Voc v_Voc))))) 
                       (v_Vyc:
                        (zen.proof 
                           (zen.and 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_lt v_Voc v_Voc)))))) =>
                        zen.Rand 
                          (zen.not 
                             (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Voc v_Voc)))) 
                          (v_Vzc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Voc v_Voc)))) =>
                           v_Vad:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_lt v_Voc v_Voc))))) =>
                           zen.Rnoteq abst_T v_Voc v_Vzc) v_Vyc) 
                       (v_Vbd:
                        (zen.proof 
                           (zen.not 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T v_Voc v_Voc))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt v_Voc v_Voc))))))) =>
                        zen.Rcut 
                          (zen.triangle (zen.equal abst_T v_Vqc v_Vsc)) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.triangle (zen.equal abst_T v_Vqc v_Vsc))) =>
                           zen.Rsubst basics.bool__t 
                             (v_Vdd:(zen.term basics.bool__t) =>
                              zen.triangle (focal.is_true v_Vdd)) 
                             (abst_lt v_Voc v_Vqc) (abst_lt v_Voc v_Vsc) 
                             (v_Ved:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_lt v_Voc v_Vqc) 
                                          (abst_lt v_Voc v_Vsc))))) =>
                              zen.Rsubst abst_T 
                                (v_Vfd:(zen.term abst_T) =>
                                 zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_lt v_Vfd v_Vqc) 
                                         (abst_lt v_Voc v_Vsc)))) v_Voc 
                                v_Voc 
                                (v_Vzc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T v_Voc v_Voc)))) =>
                                 zen.Rnotand 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Voc v_Voc))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt v_Voc v_Voc)))) 
                                   (v_Vgd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T v_Voc v_Voc))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Voc v_Voc)) 
                                      (v_Vhd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T v_Voc v_Voc))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (zen.equal abst_T v_Voc v_Voc)) 
                                         (v_Vhd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T v_Voc v_Voc))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vid:(zen.term abst_T) =>
                                             zen.triangle 
                                               (zen.equal abst_T v_Vid v_Voc)) 
                                            v_Voc v_Voc 
                                            (v_Vzc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Voc v_Voc)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (zen.equal abst_T v_Voc 
                                                     v_Voc)) v_Vhd v_Vzc) 
                                            (v_Vhd:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T v_Voc 
                                                      v_Voc))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vjd:(zen.term abst_T) =>
                                                zen.triangle 
                                                  (zen.equal abst_T v_Voc 
                                                     v_Vjd)) v_Voc v_Voc 
                                               (v_Vzc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            v_Voc v_Voc)))) =>
                                                zen.Rnoteq abst_T v_Voc v_Vzc) 
                                               (v_Vhd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Voc v_Voc))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal abst_T v_Voc 
                                                        v_Voc)) v_Vhd v_Vzc) 
                                               v_Vhd) v_Vhd) 
                                         (v_Vzc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T v_Voc 
                                                      v_Voc)))) =>
                                          zen.Rnoteq abst_T v_Voc v_Vzc)) 
                                      v_Vgd) 
                                   (v_Vkd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_lt v_Voc v_Voc)))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt v_Voc v_Voc))) 
                                      (v_Vld:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_lt v_Voc v_Voc)))) =>
                                       zen.Rall abst_T 
                                         (v_Vkc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vlc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Vkc v_Vlc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Vlc 
                                                              v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Vkc 
                                                              v_Vmc))))))) 
                                         v_Voc 
                                         (v_Vmd:
                                          (zen.proof 
                                             (zen.forall abst_T 
                                                (v_Vlc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vmc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_lt v_Voc 
                                                               v_Vlc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Vlc v_Vmc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Vmc)))))))) =>
                                          zen.Rall abst_T 
                                            (v_Vlc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Voc v_Vlc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Vlc 
                                                              v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Voc 
                                                              v_Vmc)))))) 
                                            v_Voc 
                                            (v_Vnd:
                                             (zen.proof 
                                                (zen.forall abst_T 
                                                   (v_Vmc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_lt v_Voc 
                                                               v_Voc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Vmc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Vmc))))))) =>
                                             zen.Rall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Voc v_Voc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Voc 
                                                              v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Voc 
                                                              v_Vmc))))) 
                                               v_Vqc 
                                               (v_Vod:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_lt v_Voc 
                                                               v_Voc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Vqc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Vqc)))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Voc v_Voc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Voc 
                                                              v_Vqc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Voc 
                                                              v_Vqc)))) 
                                                  (v_Vad:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Voc))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Voc 
                                                              v_Voc))) v_Vld 
                                                     v_Vad) 
                                                  (v_Vpd:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Vqc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Vqc))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Voc 
                                                              v_Vqc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Voc 
                                                              v_Vqc))) 
                                                     (v_Vqd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_lt 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_lt v_Voc 
                                                                 v_Vqc))) 
                                                        v_Vuc v_Vqd) 
                                                     (v_Vuc:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_lt 
                                                                  v_Voc v_Vqc)))) =>
                                                      zen.Rsubst 
                                                        basics.bool__t 
                                                        (v_Vdd:
                                                         (zen.term 
                                                            basics.bool__t) =>
                                                         zen.triangle 
                                                           (focal.is_true 
                                                              v_Vdd)) 
                                                        (abst_lt v_Voc v_Vqc) 
                                                        (abst_lt v_Voc v_Vsc) 
                                                        (v_Ved:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vfd:
                                                            (zen.term abst_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_lt 
                                                                    v_Vfd 
                                                                    v_Vqc) 
                                                                    (
                                                                    abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                           v_Voc v_Voc 
                                                           (v_Vzc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                            zen.Rnoteq 
                                                              abst_T v_Voc 
                                                              v_Vzc) 
                                                           (v_Ved:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Vrd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vrd) 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                              v_Vqc v_Vsc 
                                                              (v_Vsd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vqc 
                                                                    v_Vsc)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                 v_Vcd v_Vsd) 
                                                              (v_Vtd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                               zen.Rnoteq 
                                                                 basics.bool__t 
                                                                 (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 v_Vtd) v_Ved) 
                                                           v_Ved) 
                                                        (v_Vud:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                           v_Vud v_Vxc) v_Vuc) 
                                                     v_Vpd) v_Vod) v_Vnd) 
                                            v_Vmd) __P_1_LEMMA) v_Vkd) v_Vbd) 
                                (v_Ved:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (abst_lt v_Voc v_Vqc) 
                                             (abst_lt v_Voc v_Vsc))))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vrd:(zen.term abst_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_lt v_Voc v_Vrd) 
                                            (abst_lt v_Voc v_Vsc)))) v_Vqc 
                                   v_Vsc 
                                   (v_Vsd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T v_Vqc v_Vsc)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Vqc v_Vsc)) 
                                      v_Vcd v_Vsd) 
                                   (v_Vtd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_lt v_Voc v_Vsc) 
                                                (abst_lt v_Voc v_Vsc))))) =>
                                    zen.Rnoteq basics.bool__t 
                                      (abst_lt v_Voc v_Vsc) v_Vtd) v_Ved) 
                                v_Ved) 
                             (v_Vud:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_lt v_Voc v_Vsc)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Voc v_Vsc))) 
                                v_Vud v_Vxc) v_Vuc) 
                          (v_Vsd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Vqc v_Vsc)))) =>
                           zen.Rcut 
                             (zen.triangle 
                                (focal.is_true (abst_lt v_Vqc v_Vsc))) 
                             (v_Vwc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_lt v_Vqc v_Vsc)))) =>
                              zen.Rall abst_T 
                                (v_Vkc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vlc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Vkc v_Vlc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vlc v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vkc v_Vmc))))))) 
                                v_Voc 
                                (v_Vmd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vlc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vmc:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_lt v_Voc v_Vlc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Vlc v_Vmc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Voc v_Vmc)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vlc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Voc v_Vlc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vlc v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Voc v_Vmc)))))) 
                                   v_Vqc 
                                   (v_Vvd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vmc:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_lt v_Voc v_Vqc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Vqc v_Vmc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Voc v_Vmc))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Voc v_Vqc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vqc v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Voc v_Vmc))))) 
                                      v_Vsc 
                                      (v_Vwd:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_lt v_Voc v_Vqc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Vqc v_Vsc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Voc v_Vsc)))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Voc v_Vqc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vqc v_Vsc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Voc v_Vsc)))) 
                                         (v_Vqd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Voc v_Vqc))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Voc v_Vqc))) 
                                            v_Vuc v_Vqd) 
                                         (v_Vxd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Vqc v_Vsc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Voc v_Vsc))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vqc v_Vsc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Voc v_Vsc))) 
                                            (v_Vyd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_lt v_Vqc v_Vsc))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_lt v_Vqc v_Vsc))) 
                                               v_Vwc v_Vyd) 
                                            (v_Vud:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_lt v_Voc v_Vsc)))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vdd:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vdd)) 
                                               (abst_lt v_Voc v_Vsc) 
                                               (abst_lt v_Voc v_Vsc) 
                                               (v_Vtd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_lt v_Voc 
                                                               v_Vsc) 
                                                            (abst_lt v_Voc 
                                                               v_Vsc))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vzd:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_lt v_Vzd 
                                                              v_Vsc) 
                                                           (abst_lt v_Voc 
                                                              v_Vsc)))) 
                                                  v_Voc v_Voc 
                                                  (v_Vzc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T v_Voc 
                                                               v_Voc)))) =>
                                                   zen.Rnotand 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Voc v_Voc))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_lt v_Voc 
                                                                 v_Voc)))) 
                                                     (v_Vgd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    v_Voc 
                                                                    v_Voc))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Voc v_Voc)) 
                                                        (v_Vhd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  v_Voc v_Voc))) =>
                                                         zen.Reqsym abst_T 
                                                           v_Voc v_Voc v_Vhd 
                                                           v_Vzc) v_Vgd) 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Voc)))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_lt v_Voc 
                                                                 v_Voc))) 
                                                        (v_Vld:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_lt 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vkc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                           v_Voc 
                                                           (v_Vmd:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  abst_T 
                                                                  (v_Vlc:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc)))))))) =>
                                                            zen.Rall abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc)))))) 
                                                              v_Voc 
                                                              (v_Vnd:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc))))))) =>
                                                               zen.Rall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vmc))))) 
                                                                 v_Vsc 
                                                                 (v_Vae:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (
                                                                    v_Vad:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    v_Vld 
                                                                    v_Vad) 
                                                                    (
                                                                    v_Vbe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (v_Vxc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud 
                                                                    v_Vxc) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud 
                                                                    v_Vxc) 
                                                                    v_Vbe) 
                                                                    v_Vae) 
                                                                 v_Vnd) v_Vmd) 
                                                           __P_1_LEMMA) v_Vkd) 
                                                     v_Vbd) 
                                                  (v_Vtd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_lt 
                                                                  v_Voc v_Vsc) 
                                                               (abst_lt 
                                                                  v_Voc v_Vsc))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vrd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_lt v_Voc 
                                                                 v_Vrd) 
                                                              (abst_lt v_Voc 
                                                                 v_Vsc)))) 
                                                     v_Vsc v_Vsc 
                                                     (v_Vce:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  v_Vsc v_Vsc)))) =>
                                                      zen.Rnoteq abst_T 
                                                        v_Vsc v_Vce) 
                                                     (v_Vtd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                  (abst_lt 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (abst_lt v_Voc v_Vsc) 
                                                        v_Vtd) v_Vtd) v_Vtd) 
                                               (v_Vud:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_lt v_Voc v_Vsc)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Voc v_Vsc))) 
                                                  v_Vud v_Vxc) v_Vud) v_Vxd) 
                                         v_Vwd) v_Vvd) v_Vmd) __P_1_LEMMA) 
                             (v_Vyd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt v_Vqc v_Vsc))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vqc v_Vsc))) 
                                v_Vwc v_Vyd)))) v_Vvc) v_Vtc) v_Vrc) v_Vpc) 
        v_Vnc)) 
    (x:(cc.eT abst_T) =>
     y:(cc.eT abst_T) =>
     z:(cc.eT abst_T) =>
     H_xy:(dk_logic.eP (dk_logic.ebP (abst_lt x y))) =>
     H_yz:(dk_logic.eP (dk_logic.ebP (abst_lt y z))) =>
     (__P_1_1_LEMMA:(dk_logic.eP (dk_logic.ebP (abst_leq x z))) =>
      (__P_1_2_LEMMA:(dk_logic.eP (dk_logic.ebP (abst_different x z))) =>
       zen.nnpp (zen.triangle (focal.is_true (abst_lt x z))) 
         (v_Vac:
          (zen.proof (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
          zen.Rall abst_T 
            (v_Vbc:(zen.term abst_T) =>
             zen.forall abst_T 
               (v_Vcc:(zen.term abst_T) =>
                zen.eqv (zen.triangle (focal.is_true (abst_lt v_Vbc v_Vcc))) 
                  (zen.and 
                     (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vcc))) 
                     (zen.triangle 
                        (focal.is_true (abst_different v_Vbc v_Vcc)))))) x 
            (v_Vdc:
             (zen.proof 
                (zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv (zen.triangle (focal.is_true (abst_lt x v_Vcc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq x v_Vcc))) 
                         (zen.triangle 
                            (focal.is_true (abst_different x v_Vcc))))))) =>
             zen.Rall abst_T 
               (v_Vcc:(zen.term abst_T) =>
                zen.eqv (zen.triangle (focal.is_true (abst_lt x v_Vcc))) 
                  (zen.and (zen.triangle (focal.is_true (abst_leq x v_Vcc))) 
                     (zen.triangle (focal.is_true (abst_different x v_Vcc))))) 
               z 
               (v_Vec:
                (zen.proof 
                   (zen.eqv (zen.triangle (focal.is_true (abst_lt x z))) 
                      (zen.and (zen.triangle (focal.is_true (abst_leq x z))) 
                         (zen.triangle (focal.is_true (abst_different x z)))))) =>
                zen.Requiv (zen.triangle (focal.is_true (abst_lt x z))) 
                  (zen.and (zen.triangle (focal.is_true (abst_leq x z))) 
                     (zen.triangle (focal.is_true (abst_different x z)))) 
                  (v_Vac:
                   (zen.proof 
                      (zen.not (zen.triangle (focal.is_true (abst_lt x z))))) =>
                   v_Vfc:
                   (zen.proof 
                      (zen.not 
                         (zen.and 
                            (zen.triangle (focal.is_true (abst_leq x z))) 
                            (zen.triangle 
                               (focal.is_true (abst_different x z)))))) =>
                   zen.Rnotand (zen.triangle (focal.is_true (abst_leq x z))) 
                     (zen.triangle (focal.is_true (abst_different x z))) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_leq x z))))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (abst_leq x z))) 
                        __P_1_1_LEMMA v_Vgc) 
                     (v_Vhc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (abst_different x z))))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (abst_different x z))) 
                        __P_1_2_LEMMA v_Vhc) v_Vfc) 
                  (v_Vic:
                   (zen.proof (zen.triangle (focal.is_true (abst_lt x z)))) =>
                   v_Vjc:
                   (zen.proof 
                      (zen.and (zen.triangle (focal.is_true (abst_leq x z))) 
                         (zen.triangle (focal.is_true (abst_different x z))))) =>
                   zen.Raxiom (zen.triangle (focal.is_true (abst_lt x z))) 
                     v_Vic v_Vac) v_Vec) v_Vdc) abst_lt_is_leq_and_different)) 
        ((__P_1_2_1_LEMMA:
          (F:(dk_logic.eP (dk_logic.ebP (abst_equal z x))) ->
           dk_logic.eP (dk_logic.ebP dk_bool.false)) =>
          zen.nnpp (zen.triangle (focal.is_true (abst_different x z))) 
            (v_Vac:
             (zen.proof 
                (zen.not (zen.triangle (focal.is_true (abst_different x z))))) =>
             zen.Rall abst_T 
               (v_Vbc:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vcc:(zen.term abst_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true (abst_different v_Vbc v_Vcc))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vbc v_Vcc)))))) x 
               (v_Vdc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vcc:(zen.term abst_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true (abst_different x v_Vcc))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (abst_equal x v_Vcc))))))) =>
                zen.Rall abst_T 
                  (v_Vcc:(zen.term abst_T) =>
                   zen.eqv 
                     (zen.triangle (focal.is_true (abst_different x v_Vcc))) 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_equal x v_Vcc))))) 
                  z 
                  (v_Vec:
                   (zen.proof 
                      (zen.eqv 
                         (zen.triangle (focal.is_true (abst_different x z))) 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_equal x z)))))) =>
                   zen.Requiv 
                     (zen.triangle (focal.is_true (abst_different x z))) 
                     (zen.not (zen.triangle (focal.is_true (abst_equal x z)))) 
                     (v_Vac:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (abst_different x z))))) =>
                      v_Vfc:
                      (zen.proof 
                         (zen.not 
                            (zen.not 
                               (zen.triangle (focal.is_true (abst_equal x z)))))) =>
                      zen.Rnotnot 
                        (zen.triangle (focal.is_true (abst_equal x z))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.triangle (focal.is_true (abst_equal x z)))) =>
                         zen.Rimply 
                           (zen.triangle (focal.is_true (abst_equal z x))) 
                           (zen.triangle (focal.is_true dk_bool.false)) 
                           (v_Vhc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal z x))))) =>
                            zen.Rall abst_T 
                              (v_Vbc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vcc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vbc v_Vcc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vcc v_Vbc))))) x 
                              (v_Vic:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vcc:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal x v_Vcc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vcc x)))))) =>
                               zen.Rall abst_T 
                                 (v_Vcc:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vcc))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal v_Vcc x)))) 
                                 z 
                                 (v_Vjc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal x z))) 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal z x))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x z))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal z x))) 
                                    (v_Vkc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true (abst_equal x z))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal x z))) 
                                       v_Vgc v_Vkc) 
                                    (v_Vlc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true (abst_equal z x)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal z x))) 
                                       v_Vlc v_Vhc) v_Vjc) v_Vic) 
                              abst_equal_symmetric) 
                           (v_Vmc:(zen.proof zen.False) => zen.Rfalse v_Vmc) 
                           __P_1_2_1_LEMMA) v_Vfc) 
                     (v_Vnc:
                      (zen.proof 
                         (zen.triangle (focal.is_true (abst_different x z)))) =>
                      v_Vkc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (abst_equal x z))))) =>
                      zen.Raxiom 
                        (zen.triangle (focal.is_true (abst_different x z))) 
                        v_Vnc v_Vac) v_Vec) v_Vdc) abst_same_is_not_different)) 
           (F:(dk_logic.eP (dk_logic.ebP (abst_equal z x))) =>
            (__P_1_2_1_1_LEMMA:(dk_logic.eP (dk_logic.ebP (abst_leq z x))) =>
             (__P_1_2_1_2_LEMMA:
              (dk_logic.eP (dk_logic.ebP (abst_leq y x))) =>
              (__P_1_2_1_3_LEMMA:
               (dk_logic.eP (dk_logic.ebP (abst_leq x y))) =>
               (__P_1_2_1_4_LEMMA:
                (dk_logic.eP (dk_logic.ebP (abst_equal x y))) =>
                (__P_1_2_1_5_LEMMA:
                 (dk_logic.eP (dk_logic.ebP (abst_different x y))) =>
                 zen.nnpp (zen.triangle (focal.is_true dk_bool.false)) 
                   (v_Vac:(zen.proof (zen.not zen.False)) =>
                    zen.Rall abst_T 
                      (v_Vbc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_different v_Vbc v_Vcc))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vbc v_Vcc)))))) 
                      x 
                      (v_Vdc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vcc:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_different x v_Vcc))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x v_Vcc))))))) =>
                       zen.Rall abst_T 
                         (v_Vcc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_different x v_Vcc))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (abst_equal x v_Vcc))))) y 
                         (v_Vec:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_different x y))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x y)))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (abst_different x y))) 
                            (zen.not 
                               (zen.triangle (focal.is_true (abst_equal x y)))) 
                            (v_Vfc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_different x y))))) =>
                             v_Vgc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal x y)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_different x y))) 
                               __P_1_2_1_5_LEMMA v_Vfc) 
                            (__P_1_2_1_5_LEMMA:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_different x y)))) =>
                             v_Vhc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x y))))) =>
                             zen.Raxiom 
                               (zen.triangle (focal.is_true (abst_equal x y))) 
                               __P_1_2_1_4_LEMMA v_Vhc) v_Vec) v_Vdc) 
                      abst_same_is_not_different)) 
                  (zen.nnpp 
                     (zen.triangle (focal.is_true (abst_different x y))) 
                     (v_Vzb:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true (abst_different x y))))) =>
                      zen.Rall abst_T 
                        (v_Vac:(zen.term abst_T) =>
                         zen.forall abst_T 
                           (v_Vbc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_lt v_Vac v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true (abst_different v_Vac v_Vbc))))) 
                        x 
                        (v_Vcc:
                         (zen.proof 
                            (zen.forall abst_T 
                               (v_Vbc:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_lt x v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_different x v_Vbc)))))) =>
                         zen.Rall abst_T 
                           (v_Vbc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle (focal.is_true (abst_lt x v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true (abst_different x v_Vbc)))) 
                           y 
                           (v_Vdc:
                            (zen.proof 
                               (zen.imp 
                                  (zen.triangle (focal.is_true (abst_lt x y))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_different x y))))) =>
                            zen.Rimply 
                              (zen.triangle (focal.is_true (abst_lt x y))) 
                              (zen.triangle 
                                 (focal.is_true (abst_different x y))) 
                              (v_Vec:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt x y))))) =>
                               zen.Raxiom 
                                 (zen.triangle (focal.is_true (abst_lt x y))) 
                                 H_xy v_Vec) 
                              (v_Vfc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true (abst_different x y)))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true (abst_different x y))) 
                                 v_Vfc v_Vzb) v_Vdc) v_Vcc) 
                        abst_lt_refines_different))) 
                 (zen.nnpp (zen.triangle (focal.is_true (abst_equal x y))) 
                    (v_Vzb:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal x y))))) =>
                     zen.Rall abst_T 
                       (v_Vac:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vac v_Vbc))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vbc v_Vac))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vac v_Vbc)))))) 
                       x 
                       (v_Vcc:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vbc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_leq x v_Vbc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_leq v_Vbc x))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x v_Vbc))))))) =>
                        zen.Rall abst_T 
                          (v_Vbc:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle (focal.is_true (abst_leq x v_Vbc))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vbc x))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal x v_Vbc))))) y 
                          (v_Vdc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle (focal.is_true (abst_leq x y))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_leq y x))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x y)))))) =>
                           zen.Rimply 
                             (zen.triangle (focal.is_true (abst_leq x y))) 
                             (zen.imp 
                                (zen.triangle (focal.is_true (abst_leq y x))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal x y)))) 
                             (v_Vec:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_leq x y))))) =>
                              zen.Raxiom 
                                (zen.triangle (focal.is_true (abst_leq x y))) 
                                __P_1_2_1_3_LEMMA v_Vec) 
                             (v_Vfc:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_leq y x))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x y))))) =>
                              zen.Rimply 
                                (zen.triangle (focal.is_true (abst_leq y x))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal x y))) 
                                (v_Vgc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (abst_leq y x))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq y x))) 
                                   __P_1_2_1_2_LEMMA v_Vgc) 
                                (v_Vhc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal x y)))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal x y))) 
                                   v_Vhc v_Vzb) v_Vfc) v_Vdc) v_Vcc) 
                       abst_leq_antisymmetric))) 
                (zen.nnpp (zen.triangle (focal.is_true (abst_leq x y))) 
                   (v_Vzb:
                    (zen.proof 
                       (zen.not (zen.triangle (focal.is_true (abst_leq x y))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle 
                               (focal.is_true (abst_lt v_Vac v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vac v_Vbc))))) x 
                      (v_Vcc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vbc:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_lt x v_Vbc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq x v_Vbc)))))) =>
                       zen.Rall abst_T 
                         (v_Vbc:(zen.term abst_T) =>
                          zen.imp 
                            (zen.triangle (focal.is_true (abst_lt x v_Vbc))) 
                            (zen.triangle (focal.is_true (abst_leq x v_Vbc)))) 
                         y 
                         (v_Vdc:
                          (zen.proof 
                             (zen.imp 
                                (zen.triangle (focal.is_true (abst_lt x y))) 
                                (zen.triangle (focal.is_true (abst_leq x y))))) =>
                          zen.Rimply 
                            (zen.triangle (focal.is_true (abst_lt x y))) 
                            (zen.triangle (focal.is_true (abst_leq x y))) 
                            (v_Vec:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt x y))))) =>
                             zen.Raxiom 
                               (zen.triangle (focal.is_true (abst_lt x y))) 
                               H_xy v_Vec) 
                            (v_Vfc:
                             (zen.proof 
                                (zen.triangle (focal.is_true (abst_leq x y)))) =>
                             zen.Raxiom 
                               (zen.triangle (focal.is_true (abst_leq x y))) 
                               v_Vfc v_Vzb) v_Vdc) v_Vcc) abst_lt_refines_leq))) 
               (zen.nnpp (zen.triangle (focal.is_true (abst_leq y x))) 
                  (v_Vkc:
                   (zen.proof 
                      (zen.not (zen.triangle (focal.is_true (abst_leq y x))))) =>
                   zen.Rcut 
                     (zen.and 
                        (zen.not (zen.triangle (zen.equal abst_T y z))) 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_leq y z))))) 
                     (v_Vlc:
                      (zen.proof 
                         (zen.and 
                            (zen.not (zen.triangle (zen.equal abst_T y z))) 
                            (zen.not 
                               (zen.triangle (focal.is_true (abst_leq y z)))))) =>
                      zen.Rand 
                        (zen.not (zen.triangle (zen.equal abst_T y z))) 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_leq y z)))) 
                        (v_Vmc:
                         (zen.proof 
                            (zen.not (zen.triangle (zen.equal abst_T y z)))) =>
                         v_Vnc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle (focal.is_true (abst_leq y z))))) =>
                         zen.Rall abst_T 
                           (v_Voc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vpc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_lt v_Voc v_Vpc))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_leq v_Voc v_Vpc))))) 
                           y 
                           (v_Vqc:
                            (zen.proof 
                               (zen.forall abst_T 
                                  (v_Vpc:(zen.term abst_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y v_Vpc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq y v_Vpc)))))) =>
                            zen.Rall abst_T 
                              (v_Vpc:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_lt y v_Vpc))) 
                                 (zen.triangle 
                                    (focal.is_true (abst_leq y v_Vpc)))) z 
                              (v_Vrc:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt y z))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq y z))))) =>
                               zen.Rimply 
                                 (zen.triangle (focal.is_true (abst_lt y z))) 
                                 (zen.triangle (focal.is_true (abst_leq y z))) 
                                 (v_Vsc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true (abst_lt y z))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (abst_lt y z))) H_yz 
                                    v_Vsc) 
                                 (v_Vtc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq y z)))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (abst_leq y z))) v_Vtc 
                                    v_Vnc) v_Vrc) v_Vqc) abst_lt_refines_leq) 
                        v_Vlc) 
                     (v_Vuc:
                      (zen.proof 
                         (zen.not 
                            (zen.and 
                               (zen.not (zen.triangle (zen.equal abst_T y z))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq y z))))))) =>
                      zen.Rcut (zen.triangle (zen.equal abst_T x x)) 
                        (v_Vvc:
                         (zen.proof (zen.triangle (zen.equal abst_T x x))) =>
                         zen.Rsubst basics.bool__t 
                           (v_Vwc:(zen.term basics.bool__t) =>
                            zen.triangle (focal.is_true v_Vwc)) 
                           (abst_leq z x) (abst_leq y x) 
                           (v_Vxc:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (abst_leq z x) (abst_leq y x))))) =>
                            zen.Rsubst abst_T 
                              (v_Vyc:(zen.term abst_T) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_leq v_Vyc x) (abst_leq y x)))) 
                              z y 
                              (v_Vzc:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle (zen.equal abst_T z y)))) =>
                               zen.Rnotand 
                                 (zen.not 
                                    (zen.triangle (zen.equal abst_T y z))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_leq y z)))) 
                                 (v_Vad:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T y z))))) =>
                                  zen.Rnotnot 
                                    (zen.triangle (zen.equal abst_T y z)) 
                                    (v_Vbd:
                                     (zen.proof 
                                        (zen.triangle (zen.equal abst_T y z))) =>
                                     zen.Rcut 
                                       (zen.triangle (zen.equal abst_T y y)) 
                                       (v_Vcd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal abst_T y y))) =>
                                        zen.Rsubst abst_T 
                                          (v_Vdd:(zen.term abst_T) =>
                                           zen.triangle 
                                             (zen.equal abst_T v_Vdd y)) y z 
                                          (v_Vmc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T y z)))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (zen.equal abst_T y z)) 
                                             v_Vbd v_Vmc) 
                                          (v_Ved:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal abst_T z y))) =>
                                           zen.Rsubst abst_T 
                                             (v_Vfd:(zen.term abst_T) =>
                                              zen.triangle 
                                                (zen.equal abst_T z v_Vfd)) 
                                             y y 
                                             (v_Vgd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T y y)))) =>
                                              zen.Rnoteq abst_T y v_Vgd) 
                                             (v_Ved:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal abst_T z y))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal abst_T z y)) 
                                                v_Ved v_Vzc) v_Ved) v_Vcd) 
                                       (v_Vgd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T y y)))) =>
                                        zen.Rnoteq abst_T y v_Vgd)) v_Vad) 
                                 (v_Vhd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true (abst_leq y z)))))) =>
                                  zen.Rnotnot 
                                    (zen.triangle 
                                       (focal.is_true (abst_leq y z))) 
                                    (v_Vtc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true (abst_leq y z)))) =>
                                     zen.Rall abst_T 
                                       (v_Voc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vpc:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vid:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_leq v_Voc v_Vpc))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq v_Vpc 
                                                            v_Vid))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq v_Voc 
                                                            v_Vid))))))) y 
                                       (v_Vjd:
                                        (zen.proof 
                                           (zen.forall abst_T 
                                              (v_Vpc:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vid:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_leq y v_Vpc))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vpc 
                                                                v_Vid))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y 
                                                                v_Vid)))))))) =>
                                        zen.Rall abst_T 
                                          (v_Vpc:(zen.term abst_T) =>
                                           zen.forall abst_T 
                                             (v_Vid:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_leq y v_Vpc))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq v_Vpc 
                                                            v_Vid))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq y v_Vid)))))) 
                                          z 
                                          (v_Vkd:
                                           (zen.proof 
                                              (zen.forall abst_T 
                                                 (v_Vid:(zen.term abst_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_leq y z))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq z 
                                                                v_Vid))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y 
                                                                v_Vid))))))) =>
                                           zen.Rall abst_T 
                                             (v_Vid:(zen.term abst_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_leq y z))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq z v_Vid))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq y v_Vid))))) 
                                             x 
                                             (v_Vld:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_leq y z))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq z x))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y x)))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_leq y z))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq z x))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq y x)))) 
                                                (v_Vnc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y z))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq y z))) 
                                                   v_Vtc v_Vnc) 
                                                (v_Vmd:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq z x))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y x))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq z x))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_leq y x))) 
                                                   (v_Vnd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq z x))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_leq z x))) 
                                                      __P_1_2_1_1_LEMMA v_Vnd) 
                                                   (v_Vod:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y x)))) =>
                                                    zen.Rsubst 
                                                      basics.bool__t 
                                                      (v_Vwc:
                                                       (zen.term 
                                                          basics.bool__t) =>
                                                       zen.triangle 
                                                         (focal.is_true v_Vwc)) 
                                                      (abst_leq y x) 
                                                      (abst_leq y x) 
                                                      (v_Vpd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_leq 
                                                                    y x) 
                                                                   (abst_leq 
                                                                    y x))))) =>
                                                       zen.Rsubst abst_T 
                                                         (v_Vyc:
                                                          (zen.term abst_T) =>
                                                          zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_leq 
                                                                    v_Vyc x) 
                                                                  (abst_leq 
                                                                    y x)))) 
                                                         y y 
                                                         (v_Vgd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T y 
                                                                    y)))) =>
                                                          zen.Rnoteq abst_T 
                                                            y v_Vgd) 
                                                         (v_Vpd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    y x) 
                                                                    (abst_leq 
                                                                    y x))))) =>
                                                          zen.Rsubst abst_T 
                                                            (v_Vqd:
                                                             (zen.term abst_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    y v_Vqd) 
                                                                    (abst_leq 
                                                                    y x)))) 
                                                            x x 
                                                            (v_Vrd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T x 
                                                                    x)) 
                                                               v_Vvc v_Vrd) 
                                                            (v_Vpd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    y x) 
                                                                    (abst_leq 
                                                                    y x))))) =>
                                                             zen.Rnoteq 
                                                               basics.bool__t 
                                                               (abst_leq y x) 
                                                               v_Vpd) v_Vpd) 
                                                         v_Vpd) 
                                                      (v_Vod:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq y x)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_leq y x))) 
                                                         v_Vod v_Vkc) v_Vod) 
                                                   v_Vmd) v_Vld) v_Vkd) v_Vjd) 
                                       abst_leq_transitive) v_Vhd) v_Vuc) 
                              (v_Vpd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (abst_leq y x) (abst_leq y x))))) =>
                               zen.Rsubst abst_T 
                                 (v_Vqd:(zen.term abst_T) =>
                                  zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_leq y v_Vqd) (abst_leq y x)))) 
                                 x x 
                                 (v_Vrd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle (zen.equal abst_T x x)))) =>
                                  zen.Raxiom 
                                    (zen.triangle (zen.equal abst_T x x)) 
                                    v_Vvc v_Vrd) 
                                 (v_Vpd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (abst_leq y x) (abst_leq y x))))) =>
                                  zen.Rnoteq basics.bool__t (abst_leq y x) 
                                    v_Vpd) v_Vpd) v_Vxc) 
                           (v_Vod:
                            (zen.proof 
                               (zen.triangle (focal.is_true (abst_leq y x)))) =>
                            zen.Raxiom 
                              (zen.triangle (focal.is_true (abst_leq y x))) 
                              v_Vod v_Vkc) __P_1_2_1_1_LEMMA) 
                        (v_Vrd:
                         (zen.proof 
                            (zen.not (zen.triangle (zen.equal abst_T x x)))) =>
                         zen.Rcut 
                           (zen.triangle (focal.is_true (abst_leq x x))) 
                           (v_Vsd:
                            (zen.proof 
                               (zen.triangle (focal.is_true (abst_leq x x)))) =>
                            zen.Rall abst_T 
                              (v_Voc:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vpc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vid:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_leq v_Voc v_Vpc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_leq v_Vpc v_Vid))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_leq v_Voc v_Vid))))))) 
                              z 
                              (v_Vtd:
                               (zen.proof 
                                  (zen.forall abst_T 
                                     (v_Vpc:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vid:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq z v_Vpc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq v_Vpc v_Vid))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq z v_Vid)))))))) =>
                               zen.Rall abst_T 
                                 (v_Vpc:(zen.term abst_T) =>
                                  zen.forall abst_T 
                                    (v_Vid:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_leq z v_Vpc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_leq v_Vpc v_Vid))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_leq z v_Vid)))))) x 
                                 (v_Vud:
                                  (zen.proof 
                                     (zen.forall abst_T 
                                        (v_Vid:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true (abst_leq z x))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq x v_Vid))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq z v_Vid))))))) =>
                                  zen.Rall abst_T 
                                    (v_Vid:(zen.term abst_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (abst_leq z x))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_leq x v_Vid))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_leq z v_Vid))))) x 
                                    (v_Vvd:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true (abst_leq z x))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq x x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq z x)))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true (abst_leq z x))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true (abst_leq x x))) 
                                          (zen.triangle 
                                             (focal.is_true (abst_leq z x)))) 
                                       (v_Vnd:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq z x))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true (abst_leq z x))) 
                                          __P_1_2_1_1_LEMMA v_Vnd) 
                                       (v_Vwd:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq x x))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq z x))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true (abst_leq x x))) 
                                          (zen.triangle 
                                             (focal.is_true (abst_leq z x))) 
                                          (v_Vxd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_leq x x))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true (abst_leq x x))) 
                                             v_Vsd v_Vxd) 
                                          (__P_1_2_1_1_LEMMA:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq z x)))) =>
                                           zen.Rsubst basics.bool__t 
                                             (v_Vwc:
                                              (zen.term basics.bool__t) =>
                                              zen.triangle 
                                                (focal.is_true v_Vwc)) 
                                             (abst_leq z x) (abst_leq y x) 
                                             (v_Vxc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_leq z x) 
                                                          (abst_leq y x))))) =>
                                              zen.Rsubst abst_T 
                                                (v_Vyc:(zen.term abst_T) =>
                                                 zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_leq v_Vyc x) 
                                                         (abst_leq y x)))) z 
                                                y 
                                                (v_Vzc:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             z y)))) =>
                                                 zen.Rnotand 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T y 
                                                            z))) 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_leq y z)))) 
                                                   (v_Vad:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T y z))))) =>
                                                    zen.Rnotnot 
                                                      (zen.triangle 
                                                         (zen.equal abst_T y 
                                                            z)) 
                                                      (v_Vbd:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T y z))) =>
                                                       zen.Reqsym abst_T y z 
                                                         v_Vbd v_Vzc) v_Vad) 
                                                   (v_Vhd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_leq 
                                                                    y z)))))) =>
                                                    zen.Rnotnot 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_leq y z))) 
                                                      (v_Vtc:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq y z)))) =>
                                                       zen.Rall abst_T 
                                                         (v_Voc:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vpc:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vid:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vid))))))) 
                                                         y 
                                                         (v_Vjd:
                                                          (zen.proof 
                                                             (zen.forall 
                                                                abst_T 
                                                                (v_Vpc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.forall 
                                                                   abst_T 
                                                                   (v_Vid:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vpc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vid)))))))) =>
                                                          zen.Rall abst_T 
                                                            (v_Vpc:
                                                             (zen.term abst_T) =>
                                                             zen.forall 
                                                               abst_T 
                                                               (v_Vid:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vpc))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vpc 
                                                                    v_Vid))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vid)))))) 
                                                            z 
                                                            (v_Vkd:
                                                             (zen.proof 
                                                                (zen.forall 
                                                                   abst_T 
                                                                   (v_Vid:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    z v_Vid))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vid))))))) =>
                                                             zen.Rall abst_T 
                                                               (v_Vid:
                                                                (zen.term 
                                                                   abst_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    z v_Vid))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vid))))) 
                                                               x 
                                                               (v_Vld:
                                                                (zen.proof 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    z x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y x)))))) =>
                                                                zen.Rimply 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    z x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y x)))) 
                                                                  (v_Vnc:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    v_Vtc 
                                                                    v_Vnc) 
                                                                  (v_Vmd:
                                                                   (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    z x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y x))))) =>
                                                                   zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    z x))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y x))) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    z x))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    z x))) 
                                                                    __P_1_2_1_1_LEMMA 
                                                                    v_Vnd) 
                                                                    (v_Vod:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y x)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y x))) 
                                                                    v_Vod 
                                                                    v_Vkc) 
                                                                    v_Vmd) 
                                                                  v_Vld) 
                                                               v_Vkd) v_Vjd) 
                                                         abst_leq_transitive) 
                                                      v_Vhd) v_Vuc) 
                                                (v_Vpd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_leq y x) 
                                                             (abst_leq y x))))) =>
                                                 zen.Rsubst abst_T 
                                                   (v_Vqd:
                                                    (zen.term abst_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_leq y v_Vqd) 
                                                            (abst_leq y x)))) 
                                                   x x 
                                                   (v_Vrd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T x x)))) =>
                                                    zen.Rnoteq abst_T x v_Vrd) 
                                                   (v_Vpd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_leq y x) 
                                                                (abst_leq y x))))) =>
                                                    zen.Rnoteq 
                                                      basics.bool__t 
                                                      (abst_leq y x) v_Vpd) 
                                                   v_Vpd) v_Vxc) 
                                             (v_Vod:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_leq y x)))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_leq y x))) v_Vod 
                                                v_Vkc) __P_1_2_1_1_LEMMA) 
                                          v_Vwd) v_Vvd) v_Vud) v_Vtd) 
                              abst_leq_transitive) 
                           (v_Vxd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq x x))))) =>
                            zen.Rnoteq abst_T x v_Vrd)))))) 
              (zen.nnpp (zen.triangle (focal.is_true (abst_leq z x))) 
                 (v_Vzb:
                  (zen.proof 
                     (zen.not (zen.triangle (focal.is_true (abst_leq z x))))) =>
                  zen.Rall abst_T 
                    (v_Vac:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vac v_Vbc))) 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vac v_Vbc))))) z 
                    (v_Vcc:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vbc:(zen.term abst_T) =>
                            zen.imp 
                              (zen.triangle 
                                 (focal.is_true (abst_equal z v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true (abst_leq z v_Vbc)))))) =>
                     zen.Rall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.imp 
                          (zen.triangle (focal.is_true (abst_equal z v_Vbc))) 
                          (zen.triangle (focal.is_true (abst_leq z v_Vbc)))) 
                       x 
                       (v_Vdc:
                        (zen.proof 
                           (zen.imp 
                              (zen.triangle (focal.is_true (abst_equal z x))) 
                              (zen.triangle (focal.is_true (abst_leq z x))))) =>
                        zen.Rimply 
                          (zen.triangle (focal.is_true (abst_equal z x))) 
                          (zen.triangle (focal.is_true (abst_leq z x))) 
                          (v_Vec:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal z x))))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (abst_equal z x))) 
                             F v_Vec) 
                          (v_Vfc:
                           (zen.proof 
                              (zen.triangle (focal.is_true (abst_leq z x)))) =>
                           zen.Raxiom 
                             (zen.triangle (focal.is_true (abst_leq z x))) 
                             v_Vfc v_Vzb) v_Vdc) v_Vcc) 
                    abst_leq_extends_equal))))) 
       (zen.nnpp (zen.triangle (focal.is_true (abst_leq x z))) 
          (v_Vmc:
           (zen.proof (zen.not (zen.triangle (focal.is_true (abst_leq x z))))) =>
           zen.Rall abst_T 
             (v_Vnc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Voc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_lt v_Vnc v_Voc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_leq v_Vnc v_Voc))) 
                      (zen.triangle 
                         (focal.is_true (abst_different v_Vnc v_Voc)))))) x 
             (v_Vpc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Voc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_lt x v_Voc))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_leq x v_Voc))) 
                          (zen.triangle 
                             (focal.is_true (abst_different x v_Voc))))))) =>
              zen.Rall abst_T 
                (v_Voc:(zen.term abst_T) =>
                 zen.eqv (zen.triangle (focal.is_true (abst_lt x v_Voc))) 
                   (zen.and 
                      (zen.triangle (focal.is_true (abst_leq x v_Voc))) 
                      (zen.triangle (focal.is_true (abst_different x v_Voc))))) 
                y 
                (v_Vqc:
                 (zen.proof 
                    (zen.eqv (zen.triangle (focal.is_true (abst_lt x y))) 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_leq x y))) 
                          (zen.triangle (focal.is_true (abst_different x y)))))) =>
                 zen.Requiv (zen.triangle (focal.is_true (abst_lt x y))) 
                   (zen.and (zen.triangle (focal.is_true (abst_leq x y))) 
                      (zen.triangle (focal.is_true (abst_different x y)))) 
                   (v_Vrc:
                    (zen.proof 
                       (zen.not (zen.triangle (focal.is_true (abst_lt x y))))) =>
                    v_Vsc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle (focal.is_true (abst_leq x y))) 
                             (zen.triangle 
                                (focal.is_true (abst_different x y)))))) =>
                    zen.Raxiom (zen.triangle (focal.is_true (abst_lt x y))) 
                      H_xy v_Vrc) 
                   (H_xy:
                    (zen.proof (zen.triangle (focal.is_true (abst_lt x y)))) =>
                    v_Vtc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle (focal.is_true (abst_leq x y))) 
                          (zen.triangle (focal.is_true (abst_different x y))))) =>
                    zen.Rand (zen.triangle (focal.is_true (abst_leq x y))) 
                      (zen.triangle (focal.is_true (abst_different x y))) 
                      (v_Vuc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_leq x y)))) =>
                       v_Vvc:
                       (zen.proof 
                          (zen.triangle (focal.is_true (abst_different x y)))) =>
                       zen.Rall abst_T 
                         (v_Vnc:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Voc:(zen.term abst_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true (abst_lt v_Vnc v_Voc))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq v_Vnc v_Voc))) 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_different v_Vnc v_Voc)))))) y 
                         (v_Vwc:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Voc:(zen.term abst_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt y v_Voc))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true (abst_leq y v_Voc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_different y v_Voc))))))) =>
                          zen.Rall abst_T 
                            (v_Voc:(zen.term abst_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true (abst_lt y v_Voc))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq y v_Voc))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_different y v_Voc))))) 
                            z 
                            (v_Vxc:
                             (zen.proof 
                                (zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt y z))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true (abst_leq y z))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_different y z)))))) =>
                             zen.Requiv 
                               (zen.triangle (focal.is_true (abst_lt y z))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq y z))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_different y z)))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_lt y z))))) =>
                                v_Vzc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true (abst_leq y z))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_different y z)))))) =>
                                zen.Raxiom 
                                  (zen.triangle (focal.is_true (abst_lt y z))) 
                                  H_yz v_Vyc) 
                               (H_yz:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt y z)))) =>
                                v_Vad:
                                (zen.proof 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true (abst_leq y z))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_different y z))))) =>
                                zen.Rand 
                                  (zen.triangle 
                                     (focal.is_true (abst_leq y z))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_different y z))) 
                                  (v_Vbd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_leq y z)))) =>
                                   v_Vcd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_different y z)))) =>
                                   zen.Rcut 
                                     (zen.and 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T x y))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true (abst_leq x y))))) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.and 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T x y))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq x y)))))) =>
                                      zen.Rand 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal abst_T x y))) 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true (abst_leq x y)))) 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T x y)))) =>
                                         v_Vfd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq x y))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true (abst_leq x y))) 
                                           v_Vuc v_Vfd) v_Vdd) 
                                     (v_Vgd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.and 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T x y))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq x y))))))) =>
                                      zen.Rcut 
                                        (zen.triangle (zen.equal abst_T z z)) 
                                        (v_Vhd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T z z))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vid:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vid)) 
                                           (abst_leq y z) (abst_leq x z) 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_leq y z) 
                                                        (abst_leq x z))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vkd:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_leq v_Vkd z) 
                                                       (abst_leq x z)))) y x 
                                              (v_Vld:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T y x)))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x y))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_leq x y)))) 
                                                 (v_Vmd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T x y))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal abst_T x y)) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              x y))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             x x)) 
                                                       (v_Vod:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T x x))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vpd:
                                                           (zen.term abst_T) =>
                                                           zen.triangle 
                                                             (zen.equal 
                                                                abst_T v_Vpd 
                                                                x)) x y 
                                                          (v_Ved:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T x 
                                                                    y)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T x y)) 
                                                             v_Vnd v_Ved) 
                                                          (v_Vqd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T y 
                                                                    x))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vrd:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.triangle 
                                                                (zen.equal 
                                                                   abst_T y 
                                                                   v_Vrd)) x 
                                                             x 
                                                             (v_Vsd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                              zen.Rnoteq 
                                                                abst_T x 
                                                                v_Vsd) 
                                                             (v_Vqd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T y 
                                                                    x))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T y 
                                                                    x)) 
                                                                v_Vqd v_Vld) 
                                                             v_Vqd) v_Vod) 
                                                       (v_Vsd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                        zen.Rnoteq abst_T x 
                                                          v_Vsd)) v_Vmd) 
                                                 (v_Vtd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq x 
                                                                    y)))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_leq x y))) 
                                                    (v_Vuc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_leq x y)))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vnc:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Voc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vud:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vud))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Vud))))))) 
                                                       x 
                                                       (v_Vvd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Voc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vud:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Voc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vud))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Vud)))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Voc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Vud:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Voc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vud))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Vud)))))) 
                                                          y 
                                                          (v_Vwd:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Vud:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vud))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Vud))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Vud:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vud))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Vud))))) 
                                                             z 
                                                             (v_Vxd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z)))) 
                                                                (v_Vfd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                   v_Vuc 
                                                                   v_Vfd) 
                                                                (v_Vyd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z))) 
                                                                   (v_Vzd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    v_Vbd 
                                                                    v_Vzd) 
                                                                   (v_Vae:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vid:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vid)) 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    (abst_leq 
                                                                    x z))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vkd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vkd z) 
                                                                    (abst_leq 
                                                                    x z)))) 
                                                                    x x 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    x)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T x 
                                                                    v_Vsd) 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    (abst_leq 
                                                                    x z))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vce:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x v_Vce) 
                                                                    (abst_leq 
                                                                    x z)))) 
                                                                    z z 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T z 
                                                                    z)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T z 
                                                                    z)) 
                                                                    v_Vhd 
                                                                    v_Vde) 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    (abst_leq 
                                                                    x z))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    v_Vbe) 
                                                                    v_Vbe) 
                                                                    v_Vbe) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z))) 
                                                                    v_Vae 
                                                                    v_Vmc) 
                                                                    v_Vae) 
                                                                   v_Vyd) 
                                                                v_Vxd) v_Vwd) 
                                                          v_Vvd) 
                                                       abst_leq_transitive) 
                                                    v_Vtd) v_Vgd) 
                                              (v_Vbe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_leq x z) 
                                                           (abst_leq x z))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vce:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_leq x v_Vce) 
                                                          (abst_leq x z)))) 
                                                 z z 
                                                 (v_Vde:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              z z)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal abst_T z z)) 
                                                    v_Vhd v_Vde) 
                                                 (v_Vbe:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_leq x z) 
                                                              (abst_leq x z))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (abst_leq x z) v_Vbe) 
                                                 v_Vbe) v_Vjd) 
                                           (v_Vae:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq x z)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_leq x z))) v_Vae 
                                              v_Vmc) v_Vbd) 
                                        (v_Vde:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T z z)))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (focal.is_true (abst_leq z z))) 
                                           (v_Vee:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq z z)))) =>
                                            zen.Rall abst_T 
                                              (v_Vnc:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Voc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vud:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vnc 
                                                                v_Voc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq 
                                                                   v_Voc 
                                                                   v_Vud))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq 
                                                                   v_Vnc 
                                                                   v_Vud))))))) 
                                              y 
                                              (v_Vfe:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Voc:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vud:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq y 
                                                                    v_Voc))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Voc 
                                                                    v_Vud))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    y v_Vud)))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Voc:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vud:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y 
                                                                v_Voc))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq 
                                                                   v_Voc 
                                                                   v_Vud))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq y 
                                                                   v_Vud)))))) 
                                                 z 
                                                 (v_Vge:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vud:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq y 
                                                                    z))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    z v_Vud))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    y v_Vud))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vud:
                                                     (zen.term abst_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y z))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq z 
                                                                   v_Vud))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq y 
                                                                   v_Vud))))) 
                                                    z 
                                                    (v_Vhe:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq y 
                                                                    z))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    z z))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    y z)))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq y z))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq z z))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq y z)))) 
                                                       (v_Vzd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    y z))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq y z))) 
                                                          v_Vbd v_Vzd) 
                                                       (v_Vie:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    z z))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    y z))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq z z))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_leq y z))) 
                                                          (v_Vje:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_leq 
                                                                    z z))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_leq 
                                                                    z z))) 
                                                             v_Vee v_Vje) 
                                                          (v_Vbd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    y z)))) =>
                                                           zen.Rsubst 
                                                             basics.bool__t 
                                                             (v_Vid:
                                                              (zen.term 
                                                                 basics.bool__t) =>
                                                              zen.triangle 
                                                                (focal.is_true 
                                                                   v_Vid)) 
                                                             (abst_leq y z) 
                                                             (abst_leq x z) 
                                                             (v_Vjd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    y z) 
                                                                    (abst_leq 
                                                                    x z))))) =>
                                                              zen.Rsubst 
                                                                abst_T 
                                                                (v_Vkd:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vkd z) 
                                                                    (abst_leq 
                                                                    x z)))) 
                                                                y x 
                                                                (v_Vld:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T y 
                                                                    x)))) =>
                                                                 zen.Rnotand 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    y))) 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y)))) 
                                                                   (v_Vmd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    y))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    y)) 
                                                                    (v_Vnd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T x 
                                                                    y))) =>
                                                                    zen.Reqsym 
                                                                    abst_T x 
                                                                    y v_Vnd 
                                                                    v_Vld) 
                                                                    v_Vmd) 
                                                                   (v_Vtd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                    (v_Vuc:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vnc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vud:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vud))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vnc 
                                                                    v_Vud))))))) 
                                                                    x 
                                                                    (v_Vvd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vud:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vud))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Vud)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vud:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Voc 
                                                                    v_Vud))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Vud)))))) 
                                                                    y 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vud:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vud))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Vud))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vud:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y v_Vud))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x v_Vud))))) 
                                                                    z 
                                                                    (v_Vxd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z)))) 
                                                                    (v_Vfd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x y))) 
                                                                    v_Vuc 
                                                                    v_Vfd) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z))) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    y z))) 
                                                                    v_Vbd 
                                                                    v_Vzd) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    x z))) 
                                                                    v_Vae 
                                                                    v_Vmc) 
                                                                    v_Vyd) 
                                                                    v_Vxd) 
                                                                    v_Vwd) 
                                                                    v_Vvd) 
                                                                    abst_leq_transitive) 
                                                                    v_Vtd) 
                                                                   v_Vgd) 
                                                                (v_Vbe:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    (abst_leq 
                                                                    x z))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vce:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x v_Vce) 
                                                                    (abst_leq 
                                                                    x z)))) 
                                                                   z z 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T z 
                                                                    z)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T z 
                                                                    v_Vde) 
                                                                   (v_Vbe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    (abst_leq 
                                                                    x z))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    x z) 
                                                                    v_Vbe) 
                                                                   v_Vbe) 
                                                                v_Vjd) 
                                                             (v_Vae:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_leq 
                                                                    x z)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    x z))) 
                                                                v_Vae v_Vmc) 
                                                             v_Vbd) v_Vie) 
                                                       v_Vhe) v_Vge) v_Vfe) 
                                              abst_leq_transitive) 
                                           (v_Vje:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq z z))))) =>
                                            zen.Rnoteq abst_T z v_Vde)))) 
                                  v_Vad) v_Vxc) v_Vwc) 
                         abst_lt_is_leq_and_different) v_Vtc) v_Vqc) v_Vpc) 
             abst_lt_is_leq_and_different))).

def Partial_order__gt_is_transitive :
  abst_T:cc.uT ->
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_gt_is_lt:(dk_logic.eP 
                   (dk_logic.forall abst_T 
                      (x:(cc.eT abst_T) =>
                       dk_logic.forall abst_T 
                         (y:(cc.eT abst_T) =>
                          dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
                            (dk_logic.ebP (abst_lt y x)))))) ->
  abst_lt_is_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_lt x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_lt y z)) 
                                          (dk_logic.ebP (abst_lt x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_gt x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_gt y z)) 
                   (dk_logic.ebP (abst_gt x z)))))))
  :=
  abst_T:cc.uT =>
  abst_lt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_gt:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_gt_is_lt:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_gt x y)) 
              (dk_logic.ebP (abst_lt y x)))))) =>
  abst_lt_is_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_lt x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_lt y z)) 
                    (dk_logic.ebP (abst_lt x z)))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vnc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_gt v_Vnc v_Voc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_gt v_Voc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_gt v_Vnc v_Vpc)))))))) 
    (v_Vqc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vnc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Voc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_gt v_Vnc v_Voc))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_gt v_Voc v_Vpc))) 
                          (zen.triangle (focal.is_true (abst_gt v_Vnc v_Vpc)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vnc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_gt v_Vnc v_Voc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_gt v_Voc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_gt v_Vnc v_Vpc))))))) 
       (v_Vrc:(zen.term abst_T) =>
        v_Vsc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Voc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_gt v_Vrc v_Voc))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_gt v_Voc v_Vpc))) 
                          (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vpc))))))))) =>
        zen.Rnotall abst_T 
          (v_Voc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_gt v_Vrc v_Voc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_gt v_Voc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vpc)))))) 
          (v_Vtc:(zen.term abst_T) =>
           v_Vuc:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vpc:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vtc))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_gt v_Vtc v_Vpc))) 
                          (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vpc)))))))) =>
           zen.Rnotall abst_T 
             (v_Vpc:(zen.term abst_T) =>
              zen.imp (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vtc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_gt v_Vtc v_Vpc))) 
                   (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vpc))))) 
             (v_Vvc:(zen.term abst_T) =>
              v_Vwc:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vtc))) 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_gt v_Vtc v_Vvc))) 
                          (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vvc))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vtc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_gt v_Vtc v_Vvc))) 
                   (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vvc)))) 
                (v_Vxc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vtc)))) =>
                 v_Vyc:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle (focal.is_true (abst_gt v_Vtc v_Vvc))) 
                          (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vvc)))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (abst_gt v_Vtc v_Vvc))) 
                   (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vvc))) 
                   (v_Vzc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_gt v_Vtc v_Vvc)))) =>
                    v_Vad:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_gt v_Vrc v_Vvc))))) =>
                    zen.Rall abst_T 
                      (v_Vnc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Voc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_gt v_Vnc v_Voc))) 
                            (zen.triangle 
                               (focal.is_true (abst_lt v_Voc v_Vnc))))) 
                      v_Vrc 
                      (v_Vbd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Voc:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_gt v_Vrc v_Voc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Voc v_Vrc)))))) =>
                       zen.Rall abst_T 
                         (v_Voc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_gt v_Vrc v_Voc))) 
                            (zen.triangle 
                               (focal.is_true (abst_lt v_Voc v_Vrc)))) v_Vtc 
                         (v_Vcd:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_gt v_Vrc v_Vtc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vtc v_Vrc))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (abst_gt v_Vrc v_Vtc))) 
                            (zen.triangle 
                               (focal.is_true (abst_lt v_Vtc v_Vrc))) 
                            (v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_gt v_Vrc v_Vtc))))) =>
                             v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_lt v_Vtc v_Vrc))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_gt v_Vrc v_Vtc))) 
                               v_Vxc v_Vdd) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_gt v_Vrc v_Vtc)))) =>
                             v_Vfd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_lt v_Vtc v_Vrc)))) =>
                             zen.Rall abst_T 
                               (v_Vnc:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Voc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_gt v_Vnc v_Voc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Voc v_Vnc))))) 
                               v_Vtc 
                               (v_Vgd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Voc:(zen.term abst_T) =>
                                       zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_gt v_Vtc v_Voc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Voc v_Vtc)))))) =>
                                zen.Rall abst_T 
                                  (v_Voc:(zen.term abst_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true (abst_gt v_Vtc v_Voc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Voc v_Vtc)))) 
                                  v_Vvc 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.eqv 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_gt v_Vtc v_Vvc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Vvc v_Vtc))))) =>
                                   zen.Requiv 
                                     (zen.triangle 
                                        (focal.is_true (abst_gt v_Vtc v_Vvc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_lt v_Vvc v_Vtc))) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_gt v_Vtc v_Vvc))))) =>
                                      v_Vjd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_lt v_Vvc v_Vtc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_gt v_Vtc v_Vvc))) v_Vzc 
                                        v_Vid) 
                                     (v_Vzc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_gt v_Vtc v_Vvc)))) =>
                                      v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_lt v_Vvc v_Vtc)))) =>
                                      zen.Rall abst_T 
                                        (v_Vnc:(zen.term abst_T) =>
                                         zen.forall abst_T 
                                           (v_Voc:(zen.term abst_T) =>
                                            zen.eqv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_gt v_Vnc v_Voc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Voc v_Vnc))))) 
                                        v_Vrc 
                                        (v_Vbd:
                                         (zen.proof 
                                            (zen.forall abst_T 
                                               (v_Voc:(zen.term abst_T) =>
                                                zen.eqv 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_gt v_Vrc v_Voc))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Voc v_Vrc)))))) =>
                                         zen.Rall abst_T 
                                           (v_Voc:(zen.term abst_T) =>
                                            zen.eqv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_gt v_Vrc v_Voc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Voc v_Vrc)))) 
                                           v_Vvc 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.eqv 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_gt v_Vrc v_Vvc))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Vvc v_Vrc))))) =>
                                            zen.Requiv 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_gt v_Vrc v_Vvc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_lt v_Vvc v_Vrc))) 
                                              (v_Vad:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_gt v_Vrc 
                                                              v_Vvc))))) =>
                                               v_Vmd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_lt v_Vvc 
                                                              v_Vrc))))) =>
                                               zen.Rcut 
                                                 (zen.and 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             v_Vvc v_Vtc))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_lt v_Vvc 
                                                                v_Vtc))))) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.and 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vvc v_Vtc))) 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc)))))) =>
                                                  zen.Rand 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             v_Vvc v_Vtc))) 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_lt v_Vvc 
                                                                v_Vtc)))) 
                                                    (v_Vod:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vvc v_Vtc)))) =>
                                                     v_Vjd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_lt v_Vvc 
                                                                v_Vtc))) 
                                                       v_Vkd v_Vjd) v_Vnd) 
                                                 (v_Vpd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.and 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))))))) =>
                                                  zen.Rcut 
                                                    (zen.triangle 
                                                       (zen.equal abst_T 
                                                          v_Vrc v_Vrc)) 
                                                    (v_Vqd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Vrc v_Vrc))) =>
                                                     zen.Rsubst 
                                                       basics.bool__t 
                                                       (v_Vrd:
                                                        (zen.term 
                                                           basics.bool__t) =>
                                                        zen.triangle 
                                                          (focal.is_true 
                                                             v_Vrd)) 
                                                       (abst_lt v_Vtc v_Vrc) 
                                                       (abst_lt v_Vvc v_Vrc) 
                                                       (v_Vsd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (
                                                                    abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                        zen.Rsubst abst_T 
                                                          (v_Vtd:
                                                           (zen.term abst_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (abst_lt 
                                                                    v_Vtd 
                                                                    v_Vrc) 
                                                                   (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                          v_Vtc v_Vvc 
                                                          (v_Vud:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc)))) =>
                                                           zen.Rnotand 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc)))) 
                                                             (v_Vvd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                              zen.Rnotnot 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc)) 
                                                                (v_Vwd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) =>
                                                                 zen.Rcut 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc)) 
                                                                   (v_Vxd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vyd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vyd 
                                                                    v_Vvc)) 
                                                                    v_Vvc 
                                                                    v_Vtc 
                                                                    (v_Vod:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc)) 
                                                                    v_Vwd 
                                                                    v_Vod) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vae:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vae)) 
                                                                    v_Vvc 
                                                                    v_Vvc 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vbe) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc)) 
                                                                    v_Vzd 
                                                                    v_Vud) 
                                                                    v_Vzd) 
                                                                    v_Vxd) 
                                                                   (v_Vbe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vbe)) 
                                                                v_Vvd) 
                                                             (v_Vce:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc)))))) =>
                                                              zen.Rnotnot 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc)))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vnc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                                   v_Vvc 
                                                                   (v_Vde:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vpc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vpc)))))) 
                                                                    v_Vtc 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vpc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vpc))))) 
                                                                    v_Vrc 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    v_Vkd 
                                                                    v_Vjd) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (v_Ved:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vfd 
                                                                    v_Ved) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vrd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vrd)) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vtd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vtd 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    v_Vvc 
                                                                    v_Vvc 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vbe) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vje:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vje) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    v_Vrc 
                                                                    v_Vrc 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)) 
                                                                    v_Vqd 
                                                                    v_Vke) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    v_Vie) 
                                                                    v_Vie) 
                                                                    v_Vie) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    v_Vhe 
                                                                    v_Vmd) 
                                                                    v_Vhe) 
                                                                    v_Vge) 
                                                                    v_Vfe) 
                                                                    v_Vee) 
                                                                    v_Vde) 
                                                                   abst_lt_is_transitive) 
                                                                v_Vce) v_Vpd) 
                                                          (v_Vie:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                           zen.Rsubst abst_T 
                                                             (v_Vje:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vje) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                             v_Vrc v_Vrc 
                                                             (v_Vke:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)) 
                                                                v_Vqd v_Vke) 
                                                             (v_Vie:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                              zen.Rnoteq 
                                                                basics.bool__t 
                                                                (abst_lt 
                                                                   v_Vvc 
                                                                   v_Vrc) 
                                                                v_Vie) v_Vie) 
                                                          v_Vsd) 
                                                       (v_Vhe:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_lt 
                                                                   v_Vvc 
                                                                   v_Vrc))) 
                                                          v_Vhe v_Vmd) v_Vfd) 
                                                    (v_Vke:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T 
                                                                 v_Vrc v_Vrc)))) =>
                                                     zen.Rcut 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_lt v_Vrc 
                                                                v_Vrc))) 
                                                       (v_Vle:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vnc:
                                                           (zen.term abst_T) =>
                                                           zen.forall abst_T 
                                                             (v_Voc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vpc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                          v_Vtc 
                                                          (v_Vme:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 abst_T 
                                                                 (v_Voc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vpc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vpc)))))))) =>
                                                           zen.Rall abst_T 
                                                             (v_Voc:
                                                              (zen.term 
                                                                 abst_T) =>
                                                              zen.forall 
                                                                abst_T 
                                                                (v_Vpc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Voc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vpc)))))) 
                                                             v_Vrc 
                                                             (v_Vne:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    abst_T 
                                                                    (
                                                                    v_Vpc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vpc))))))) =>
                                                              zen.Rall 
                                                                abst_T 
                                                                (v_Vpc:
                                                                 (zen.term 
                                                                    abst_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vpc))))) 
                                                                v_Vrc 
                                                                (v_Voe:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc)))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc)))) 
                                                                   (v_Ved:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vfd 
                                                                    v_Ved) 
                                                                   (v_Vpe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vrc 
                                                                    v_Vrc))) 
                                                                    v_Vle 
                                                                    v_Vqe) 
                                                                    (v_Vfd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vrd:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vrd)) 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vtd:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vtd 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    v_Vtc 
                                                                    v_Vvc 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vtc 
                                                                    v_Vvc)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc)))) 
                                                                    (v_Vvd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc)) 
                                                                    (v_Vwd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    v_Vvc 
                                                                    v_Vtc 
                                                                    v_Vwd 
                                                                    v_Vud) 
                                                                    v_Vvd) 
                                                                    (v_Vce:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (v_Vkd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vnc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vnc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vnc 
                                                                    v_Vpc))))))) 
                                                                    v_Vvc 
                                                                    (v_Vde:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vpc)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Voc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Voc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vpc)))))) 
                                                                    v_Vtc 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vpc))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vpc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vpc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vpc))))) 
                                                                    v_Vrc 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    (v_Vjd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vtc))) 
                                                                    v_Vkd 
                                                                    v_Vjd) 
                                                                    (v_Vge:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    (v_Ved:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vtc 
                                                                    v_Vrc))) 
                                                                    v_Vfd 
                                                                    v_Ved) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    v_Vhe 
                                                                    v_Vmd) 
                                                                    v_Vge) 
                                                                    v_Vfe) 
                                                                    v_Vee) 
                                                                    v_Vde) 
                                                                    abst_lt_is_transitive) 
                                                                    v_Vce) 
                                                                    v_Vpd) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vje:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vje) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) 
                                                                    v_Vrc 
                                                                    v_Vrc 
                                                                    (v_Vke:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vrc)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vrc 
                                                                    v_Vke) 
                                                                    (v_Vie:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc) 
                                                                    v_Vie) 
                                                                    v_Vie) 
                                                                    v_Vsd) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_lt 
                                                                    v_Vvc 
                                                                    v_Vrc))) 
                                                                    v_Vhe 
                                                                    v_Vmd) 
                                                                    v_Vfd) 
                                                                    v_Vpe) 
                                                                   v_Voe) 
                                                                v_Vne) v_Vme) 
                                                          abst_lt_is_transitive) 
                                                       (v_Vqe:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_lt 
                                                                    v_Vrc 
                                                                    v_Vrc))))) =>
                                                        zen.Rnoteq abst_T 
                                                          v_Vrc v_Vke)))) 
                                              (v_Vre:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_gt v_Vrc v_Vvc)))) =>
                                               v_Vhe:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_lt v_Vvc v_Vrc)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_gt v_Vrc v_Vvc))) 
                                                 v_Vre v_Vad) v_Vld) v_Vbd) 
                                        abst_gt_is_lt) v_Vhd) v_Vgd) 
                               abst_gt_is_lt) v_Vcd) v_Vbd) abst_gt_is_lt) 
                   v_Vyc) v_Vwc) v_Vuc) v_Vsc) v_Vqc).

def Ordered_set__equal :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  x:(cc.eT abst_T) -> y:(cc.eT abst_T) -> cc.eT basics.bool__t
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  x:(cc.eT abst_T) =>
  y:(cc.eT abst_T) => basics._amper__amper_ (abst_leq x y) (abst_leq y x).

def Ordered_set__equal_from_leq :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.eqv 
             (dk_logic.ebP (Ordered_set__equal abst_T abst_leq x y)) 
             (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                (dk_logic.ebP (abst_leq y x))))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Ordered_set__equal abst_T abst_leq v_Vzb v_Vac))) 
             (zen.and (zen.triangle (focal.is_true (abst_leq v_Vzb v_Vac))) 
                (zen.triangle (focal.is_true (abst_leq v_Vac v_Vzb))))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vzb:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Ordered_set__equal abst_T abst_leq v_Vzb v_Vac))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vzb v_Vac))) 
                       (zen.triangle (focal.is_true (abst_leq v_Vac v_Vzb))))))))) =>
     zen.Rnotall abst_T 
       (v_Vzb:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Ordered_set__equal abst_T abst_leq v_Vzb v_Vac))) 
             (zen.and (zen.triangle (focal.is_true (abst_leq v_Vzb v_Vac))) 
                (zen.triangle (focal.is_true (abst_leq v_Vac v_Vzb)))))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vac:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Ordered_set__equal abst_T abst_leq v_Vcc v_Vac))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vac))) 
                       (zen.triangle (focal.is_true (abst_leq v_Vac v_Vcc)))))))) =>
        zen.Rnotall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.eqv 
             (zen.triangle 
                (focal.is_true 
                   (Ordered_set__equal abst_T abst_leq v_Vcc v_Vac))) 
             (zen.and (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vac))) 
                (zen.triangle (focal.is_true (abst_leq v_Vac v_Vcc))))) 
          (v_Vec:(zen.term abst_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.eqv 
                    (zen.triangle 
                       (focal.is_true 
                          (Ordered_set__equal abst_T abst_leq v_Vcc v_Vec))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                       (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))))))) =>
           zen.Rnotequiv 
             (zen.triangle 
                (focal.is_true 
                   (Ordered_set__equal abst_T abst_leq v_Vcc v_Vec))) 
             (zen.and (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc)))) 
             (v_Vgc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (basics._amper__amper_ (abst_leq v_Vcc v_Vec) 
                             (abst_leq v_Vec v_Vcc)))))) =>
              v_Vhc:
              (zen.proof 
                 (zen.and 
                    (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))))) =>
              zen.Rand (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
                (v_Vic:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec)))) =>
                 v_Vjc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc)))) =>
                 focal.zenon_focal_notand (abst_leq v_Vcc v_Vec) 
                   (abst_leq v_Vec v_Vcc) 
                   (v_Vkc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vcc v_Vec))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vec v_Vcc)))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                      (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vcc v_Vec))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                         v_Vic v_Vlc) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vec v_Vcc))))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
                         v_Vjc v_Vmc) v_Vkc) v_Vgc) v_Vhc) 
             (v_Vnc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (basics._amper__amper_ (abst_leq v_Vcc v_Vec) 
                          (abst_leq v_Vec v_Vcc))))) =>
              v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                       (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc)))))) =>
              zen.Rnotand 
                (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))))) =>
                 focal.zenon_focal_and (abst_leq v_Vcc v_Vec) 
                   (abst_leq v_Vec v_Vcc) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vec v_Vcc))))) =>
                    zen.Rand 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                      (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vec)))) =>
                       v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vec v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                         v_Vic v_Vlc) v_Vhc) v_Vnc) 
                (v_Vmc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))))) =>
                 focal.zenon_focal_and (abst_leq v_Vcc v_Vec) 
                   (abst_leq v_Vec v_Vcc) 
                   (v_Vhc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vec))) 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vec v_Vcc))))) =>
                    zen.Rand 
                      (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                      (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vec)))) =>
                       v_Vjc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vec v_Vcc)))) =>
                       zen.Raxiom 
                         (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
                         v_Vjc v_Vmc) v_Vhc) v_Vnc) v_Vkc) v_Vfc) v_Vdc) 
       v_Vbc).

def Ordered_set__equal_reflexive :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_total_order:(dk_logic.eP 
                      (dk_logic.forall abst_T 
                         (x:(cc.eT abst_T) =>
                          dk_logic.forall abst_T 
                            (y:(cc.eT abst_T) =>
                             dk_logic.or (dk_logic.ebP (abst_leq x y)) 
                               (dk_logic.ebP (abst_leq y x)))))) ->
  abst_equal_from_leq:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.forall abst_T 
                               (y:(cc.eT abst_T) =>
                                dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                                  (dk_logic.and 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.ebP (abst_leq y x))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_total_order:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.or (dk_logic.ebP (abst_leq x y)) 
              (dk_logic.ebP (abst_leq y x)))))) =>
  abst_equal_from_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_leq y x))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_equal v_Vac v_Vac)))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.triangle (focal.is_true (abst_equal v_Vac v_Vac)))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.triangle (focal.is_true (abst_equal v_Vac v_Vac))) 
       (v_Vcc:(zen.term abst_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))))) =>
        zen.Rall abst_T 
          (v_Vac:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.eqv 
                (zen.triangle (focal.is_true (abst_equal v_Vac v_Vec))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_leq v_Vac v_Vec))) 
                   (zen.triangle (focal.is_true (abst_leq v_Vec v_Vac)))))) 
          v_Vcc 
          (v_Vfc:
           (zen.proof 
              (zen.forall abst_T 
                 (v_Vec:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                       (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))))))) =>
           zen.Rall abst_T 
             (v_Vec:(zen.term abst_T) =>
              zen.eqv 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))) 
                   (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))))) 
             v_Vcc 
             (v_Vgc:
              (zen.proof 
                 (zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc)))))) =>
              zen.Requiv 
                (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                (zen.and 
                   (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                   (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc)))) 
                (v_Vdc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))))) =>
                 v_Vhc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vcc)))))) =>
                 zen.Rnotand 
                   (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                   (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vcc))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vec:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vac v_Vec))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vec v_Vac))))) 
                      v_Vcc 
                      (v_Vjc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vec:(zen.term abst_T) =>
                              zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vec))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vec v_Vcc)))))) =>
                       zen.Rall abst_T 
                         (v_Vec:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vcc v_Vec))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vec v_Vcc)))) 
                         v_Vcc 
                         (v_Vkc:
                          (zen.proof 
                             (zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vcc))))) =>
                          zen.Ror 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                            (v_Vlc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vcc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                               v_Vlc v_Vic) 
                            (v_Vlc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vcc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                               v_Vlc v_Vic) v_Vkc) v_Vjc) abst_total_order) 
                   (v_Vic:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_leq v_Vcc v_Vcc))))) =>
                    zen.Rall abst_T 
                      (v_Vac:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vec:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vac v_Vec))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vec v_Vac))))) 
                      v_Vcc 
                      (v_Vjc:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vec:(zen.term abst_T) =>
                              zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vec))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vec v_Vcc)))))) =>
                       zen.Rall abst_T 
                         (v_Vec:(zen.term abst_T) =>
                          zen.or 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vcc v_Vec))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vec v_Vcc)))) 
                         v_Vcc 
                         (v_Vkc:
                          (zen.proof 
                             (zen.or 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vcc))))) =>
                          zen.Ror 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                            (v_Vlc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vcc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                               v_Vlc v_Vic) 
                            (v_Vlc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vcc v_Vcc)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                               v_Vlc v_Vic) v_Vkc) v_Vjc) abst_total_order) 
                   v_Vhc) 
                (v_Vmc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc)))) =>
                 v_Vnc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))) 
                       (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vcc))))) =>
                 zen.Raxiom 
                   (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vcc))) 
                   v_Vmc v_Vdc) v_Vgc) v_Vfc) abst_equal_from_leq) v_Vbc).

def Ordered_set__equal_symmetric :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_from_leq:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.forall abst_T 
                               (y:(cc.eT abst_T) =>
                                dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                                  (dk_logic.and 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.ebP (abst_leq y x))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (abst_equal y x)))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_from_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_leq y x))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc)))))) 
    (v_Vdc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vbc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vbc))))) 
       (v_Vec:(zen.term abst_T) =>
        v_Vfc:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))))))) =>
        zen.Rnotall abst_T 
          (v_Vcc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) 
          (v_Vgc:(zen.term abst_T) =>
           v_Vhc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
             (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec))) 
             (v_Vic:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc)))) =>
              v_Vjc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_equal v_Vgc v_Vec))))) =>
              zen.Rall abst_T 
                (v_Vbc:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vcc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vbc)))))) 
                v_Vec 
                (v_Vkc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vcc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vcc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vec v_Vcc))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vcc v_Vec))))))) =>
                 zen.Rall abst_T 
                   (v_Vcc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vec v_Vcc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vcc v_Vec))))) 
                   v_Vgc 
                   (v_Vlc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vgc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vec v_Vgc))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vgc v_Vec)))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_equal v_Vec v_Vgc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vec v_Vgc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vgc v_Vec)))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vec v_Vgc))))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vec v_Vgc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vgc v_Vec)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vec v_Vgc))) v_Vic 
                         v_Vmc) 
                      (v_Vic:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vgc)))) =>
                       v_Voc:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vec v_Vgc))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vgc v_Vec))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (abst_leq v_Vec v_Vgc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vgc v_Vec))) 
                         (v_Vpc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vec v_Vgc)))) =>
                          v_Vqc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vgc v_Vec)))) =>
                          zen.Rall abst_T 
                            (v_Vbc:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vbc v_Vcc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vcc v_Vbc)))))) 
                            v_Vgc 
                            (v_Vrc:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vcc:(zen.term abst_T) =>
                                    zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vcc))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vgc v_Vcc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vcc v_Vgc))))))) =>
                             zen.Rall abst_T 
                               (v_Vcc:(zen.term abst_T) =>
                                zen.eqv 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vgc v_Vcc))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vgc v_Vcc))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vcc v_Vgc))))) 
                               v_Vec 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.eqv 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vec))) 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vgc v_Vec))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vec v_Vgc)))))) =>
                                zen.Requiv 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vgc v_Vec))) 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vgc v_Vec))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vec v_Vgc)))) 
                                  (v_Vjc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vgc v_Vec))))) =>
                                   v_Vtc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.and 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vgc v_Vec))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vec v_Vgc)))))) =>
                                   zen.Rnotand 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vgc v_Vec))) 
                                     (zen.triangle 
                                        (focal.is_true (abst_leq v_Vec v_Vgc))) 
                                     (v_Vuc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vgc v_Vec))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_leq v_Vgc v_Vec))) v_Vqc 
                                        v_Vuc) 
                                     (v_Vvc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_leq v_Vec v_Vgc))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_leq v_Vec v_Vgc))) v_Vpc 
                                        v_Vvc) v_Vtc) 
                                  (v_Vwc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vgc v_Vec)))) =>
                                   v_Vxc:
                                   (zen.proof 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vgc v_Vec))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_leq v_Vec v_Vgc))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vgc v_Vec))) v_Vwc 
                                     v_Vjc) v_Vsc) v_Vrc) abst_equal_from_leq) 
                         v_Voc) v_Vlc) v_Vkc) abst_equal_from_leq) v_Vhc) 
          v_Vfc) v_Vdc).

def Ordered_set__equal_transitive :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_leq_transitive:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.forall abst_T 
                               (y:(cc.eT abst_T) =>
                                dk_logic.forall abst_T 
                                  (z:(cc.eT abst_T) =>
                                   dk_logic.imp 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.imp 
                                        (dk_logic.ebP (abst_leq y z)) 
                                        (dk_logic.ebP (abst_leq x z)))))))) ->
  abst_equal_from_leq:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.forall abst_T 
                               (y:(cc.eT abst_T) =>
                                dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                                  (dk_logic.and 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.ebP (abst_leq y x))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                   (dk_logic.ebP (abst_equal x z)))))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_leq_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_leq y z)) 
                    (dk_logic.ebP (abst_leq x z)))))))) =>
  abst_equal_from_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_leq y x))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vyc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vzc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vad:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vyc v_Vzc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vzc v_Vad))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vyc v_Vad)))))))) 
    (v_Vbd:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vyc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vzc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vad:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vyc v_Vzc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vzc v_Vad))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vyc v_Vad)))))))))) =>
     zen.Rnotall abst_T 
       (v_Vyc:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vzc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vad:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vyc v_Vzc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vzc v_Vad))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vyc v_Vad))))))) 
       (v_Vcd:(zen.term abst_T) =>
        v_Vdd:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vzc:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vad:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vcd v_Vzc))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vzc v_Vad))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcd v_Vad))))))))) =>
        zen.Rnotall abst_T 
          (v_Vzc:(zen.term abst_T) =>
           zen.forall abst_T 
             (v_Vad:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vcd v_Vzc))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Vzc v_Vad))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vcd v_Vad)))))) 
          (v_Ved:(zen.term abst_T) =>
           v_Vfd:
           (zen.proof 
              (zen.not 
                 (zen.forall abst_T 
                    (v_Vad:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vcd v_Ved))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Ved v_Vad))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcd v_Vad)))))))) =>
           zen.Rnotall abst_T 
             (v_Vad:(zen.term abst_T) =>
              zen.imp 
                (zen.triangle (focal.is_true (abst_equal v_Vcd v_Ved))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Ved v_Vad))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vcd v_Vad))))) 
             (v_Vgd:(zen.term abst_T) =>
              v_Vhd:
              (zen.proof 
                 (zen.not 
                    (zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vcd v_Ved))) 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Ved v_Vgd))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcd v_Vgd))))))) =>
              zen.Rnotimply 
                (zen.triangle (focal.is_true (abst_equal v_Vcd v_Ved))) 
                (zen.imp 
                   (zen.triangle (focal.is_true (abst_equal v_Ved v_Vgd))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vcd v_Vgd)))) 
                (v_Vid:
                 (zen.proof 
                    (zen.triangle (focal.is_true (abst_equal v_Vcd v_Ved)))) =>
                 v_Vjd:
                 (zen.proof 
                    (zen.not 
                       (zen.imp 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Ved v_Vgd))) 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcd v_Vgd)))))) =>
                 zen.Rnotimply 
                   (zen.triangle (focal.is_true (abst_equal v_Ved v_Vgd))) 
                   (zen.triangle (focal.is_true (abst_equal v_Vcd v_Vgd))) 
                   (v_Vkd:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal v_Ved v_Vgd)))) =>
                    v_Vld:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcd v_Vgd))))) =>
                    zen.Rall abst_T 
                      (v_Vyc:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vyc v_Vzc))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vyc v_Vzc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vzc v_Vyc)))))) 
                      v_Vcd 
                      (v_Vmd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vzc:(zen.term abst_T) =>
                              zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcd v_Vzc))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vcd v_Vzc))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vzc v_Vcd))))))) =>
                       zen.Rall abst_T 
                         (v_Vzc:(zen.term abst_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vcd v_Vzc))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vcd v_Vzc))) 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vzc v_Vcd))))) 
                         v_Ved 
                         (v_Vnd:
                          (zen.proof 
                             (zen.eqv 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcd v_Ved))) 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vcd v_Ved))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Ved v_Vcd)))))) =>
                          zen.Requiv 
                            (zen.triangle 
                               (focal.is_true (abst_equal v_Vcd v_Ved))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vcd v_Ved))) 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Ved v_Vcd)))) 
                            (v_Vod:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vcd v_Ved))))) =>
                             v_Vpd:
                             (zen.proof 
                                (zen.not 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_leq v_Vcd v_Ved))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_leq v_Ved v_Vcd)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Vcd v_Ved))) 
                               v_Vid v_Vod) 
                            (v_Vid:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vcd v_Ved)))) =>
                             v_Vqd:
                             (zen.proof 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vcd v_Ved))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Ved v_Vcd))))) =>
                             zen.Rand 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Vcd v_Ved))) 
                               (zen.triangle 
                                  (focal.is_true (abst_leq v_Ved v_Vcd))) 
                               (v_Vrd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Vcd v_Ved)))) =>
                                v_Vsd:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (abst_leq v_Ved v_Vcd)))) =>
                                zen.Rall abst_T 
                                  (v_Vyc:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vzc:(zen.term abst_T) =>
                                      zen.eqv 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Vyc v_Vzc))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Vyc v_Vzc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Vzc v_Vyc)))))) 
                                  v_Ved 
                                  (v_Vtd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vzc:(zen.term abst_T) =>
                                          zen.eqv 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Ved v_Vzc))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Ved v_Vzc))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Vzc v_Ved))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vzc:(zen.term abst_T) =>
                                      zen.eqv 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Ved v_Vzc))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Ved v_Vzc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Vzc v_Ved))))) 
                                     v_Vgd 
                                     (v_Vud:
                                      (zen.proof 
                                         (zen.eqv 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Ved v_Vgd))) 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Ved v_Vgd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Vgd v_Ved)))))) =>
                                      zen.Requiv 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Ved v_Vgd))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Ved v_Vgd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Vgd v_Ved)))) 
                                        (v_Vvd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Ved v_Vgd))))) =>
                                         v_Vwd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.and 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Ved v_Vgd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_leq v_Vgd v_Ved)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Ved v_Vgd))) 
                                           v_Vkd v_Vvd) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Ved v_Vgd)))) =>
                                         v_Vxd:
                                         (zen.proof 
                                            (zen.and 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Ved v_Vgd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Vgd v_Ved))))) =>
                                         zen.Rand 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Ved v_Vgd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_leq v_Vgd v_Ved))) 
                                           (v_Vyd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Ved v_Vgd)))) =>
                                            v_Vzd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_leq v_Vgd v_Ved)))) =>
                                            zen.Rall abst_T 
                                              (v_Vyc:(zen.term abst_T) =>
                                               zen.forall abst_T 
                                                 (v_Vzc:(zen.term abst_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vyc 
                                                             v_Vzc))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vyc 
                                                                v_Vzc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vzc 
                                                                v_Vyc)))))) 
                                              v_Vcd 
                                              (v_Vmd:
                                               (zen.proof 
                                                  (zen.forall abst_T 
                                                     (v_Vzc:
                                                      (zen.term abst_T) =>
                                                      zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vcd v_Vzc))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vzc))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vcd))))))) =>
                                               zen.Rall abst_T 
                                                 (v_Vzc:(zen.term abst_T) =>
                                                  zen.eqv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vcd 
                                                             v_Vzc))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vcd 
                                                                v_Vzc))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vzc 
                                                                v_Vcd))))) 
                                                 v_Vgd 
                                                 (v_Vae:
                                                  (zen.proof 
                                                     (zen.eqv 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vcd v_Vgd))) 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))))) =>
                                                  zen.Requiv 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal v_Vcd 
                                                             v_Vgd))) 
                                                    (zen.and 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vcd 
                                                                v_Vgd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vgd 
                                                                v_Vcd)))) 
                                                    (v_Vld:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                     v_Vbe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.and 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))))) =>
                                                     zen.Rnotand 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vcd 
                                                                v_Vgd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_leq v_Vgd 
                                                                v_Vcd))) 
                                                       (v_Vce:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                        zen.Rcut 
                                                          (zen.and 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))))) 
                                                          (v_Vde:
                                                           (zen.proof 
                                                              (zen.and 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved)))))) =>
                                                           zen.Rand 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved)))) 
                                                             (v_Vee:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved)))) =>
                                                              v_Vfe:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                v_Vrd v_Vfe) 
                                                             v_Vde) 
                                                          (v_Vge:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.and 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))))))) =>
                                                           zen.Rcut 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   v_Vgd 
                                                                   v_Vgd)) 
                                                             (v_Vhe:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd))) =>
                                                              zen.Rsubst 
                                                                basics.bool__t 
                                                                (v_Vie:
                                                                 (zen.term 
                                                                    basics.bool__t) =>
                                                                 zen.triangle 
                                                                   (focal.is_true 
                                                                    v_Vie)) 
                                                                (abst_leq 
                                                                   v_Ved 
                                                                   v_Vgd) 
                                                                (abst_leq 
                                                                   v_Vcd 
                                                                   v_Vgd) 
                                                                (v_Vje:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vke:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vke 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) 
                                                                   v_Ved 
                                                                   v_Vcd 
                                                                   (v_Vle:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vcd)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved)))) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved)) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)) 
                                                                    (v_Voe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vpe:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vpe 
                                                                    v_Vcd)) 
                                                                    v_Vcd 
                                                                    v_Ved 
                                                                    (v_Vee:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved)) 
                                                                    v_Vne 
                                                                    v_Vee) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vcd))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vre:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vre)) 
                                                                    v_Vcd 
                                                                    v_Vcd 
                                                                    (v_Vse:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vse) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vcd))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vcd)) 
                                                                    v_Vqe 
                                                                    v_Vle) 
                                                                    v_Vqe) 
                                                                    v_Voe) 
                                                                    (v_Vse:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vse)) 
                                                                    v_Vme) 
                                                                    (v_Vte:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vyc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vad))))))) 
                                                                    v_Vcd 
                                                                    (v_Vue:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad)))))) 
                                                                    v_Ved 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad))))) 
                                                                    v_Vgd 
                                                                    (v_Vwe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    v_Vrd 
                                                                    v_Vfe) 
                                                                    (v_Vxe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                                    (v_Vye:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    v_Vyd 
                                                                    v_Vye) 
                                                                    (v_Vze:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vie)) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vke:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vke 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) 
                                                                    v_Vcd 
                                                                    v_Vcd 
                                                                    (v_Vse:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vse) 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vbf:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vbf) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) 
                                                                    v_Vgd 
                                                                    v_Vgd 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)) 
                                                                    v_Vhe 
                                                                    v_Vcf) 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    v_Vaf) 
                                                                    v_Vaf) 
                                                                    v_Vaf) 
                                                                    (v_Vze:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                                    v_Vze 
                                                                    v_Vce) 
                                                                    v_Vze) 
                                                                    v_Vxe) 
                                                                    v_Vwe) 
                                                                    v_Vve) 
                                                                    v_Vue) 
                                                                    abst_leq_transitive) 
                                                                    v_Vte) 
                                                                    v_Vge) 
                                                                   (v_Vaf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vbf:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vbf) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) 
                                                                    v_Vgd 
                                                                    v_Vgd 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)) 
                                                                    v_Vhe 
                                                                    v_Vcf) 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    v_Vaf) 
                                                                    v_Vaf) 
                                                                   v_Vje) 
                                                                (v_Vze:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                                   v_Vze 
                                                                   v_Vce) 
                                                                v_Vyd) 
                                                             (v_Vcf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)))) =>
                                                              zen.Rcut 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd))) 
                                                                (v_Vdf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd)))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vyc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vad))))))) 
                                                                   v_Ved 
                                                                   (v_Vef:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad)))))) 
                                                                    v_Vgd 
                                                                    (v_Vff:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))))) 
                                                                    v_Vgd 
                                                                    (v_Vgf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd)))) 
                                                                    (v_Vye:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    v_Vyd 
                                                                    v_Vye) 
                                                                    (v_Vhf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (v_Vif:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd))) 
                                                                    v_Vdf 
                                                                    v_Vif) 
                                                                    (v_Vyd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vie:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vie)) 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vke:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vke 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) 
                                                                    v_Ved 
                                                                    v_Vcd 
                                                                    (v_Vle:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vcd)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved)))) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved)) 
                                                                    (v_Vne:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Ved 
                                                                    v_Vne 
                                                                    v_Vle) 
                                                                    v_Vme) 
                                                                    (v_Vte:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (v_Vrd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vyc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vad))))))) 
                                                                    v_Vcd 
                                                                    (v_Vue:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad)))))) 
                                                                    v_Ved 
                                                                    (v_Vve:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad))))) 
                                                                    v_Vgd 
                                                                    (v_Vwe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) 
                                                                    (v_Vfe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Ved))) 
                                                                    v_Vrd 
                                                                    v_Vfe) 
                                                                    (v_Vxe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                                    (v_Vye:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vgd))) 
                                                                    v_Vyd 
                                                                    v_Vye) 
                                                                    (v_Vze:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                                    v_Vze 
                                                                    v_Vce) 
                                                                    v_Vxe) 
                                                                    v_Vwe) 
                                                                    v_Vve) 
                                                                    v_Vue) 
                                                                    abst_leq_transitive) 
                                                                    v_Vte) 
                                                                    v_Vge) 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vbf:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vbf) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) 
                                                                    v_Vgd 
                                                                    v_Vgd 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vcf) 
                                                                    (v_Vaf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd) 
                                                                    v_Vaf) 
                                                                    v_Vaf) 
                                                                    v_Vje) 
                                                                    (v_Vze:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                                    v_Vze 
                                                                    v_Vce) 
                                                                    v_Vyd) 
                                                                    v_Vhf) 
                                                                    v_Vgf) 
                                                                    v_Vff) 
                                                                    v_Vef) 
                                                                   abst_leq_transitive) 
                                                                (v_Vif:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vgd))))) =>
                                                                 zen.Rnoteq 
                                                                   abst_T 
                                                                   v_Vgd 
                                                                   v_Vcf)))) 
                                                       (v_Vjf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                        zen.Rcut 
                                                          (zen.and 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))))) 
                                                          (v_Vkf:
                                                           (zen.proof 
                                                              (zen.and 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved)))))) =>
                                                           zen.Rand 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved)))) 
                                                             (v_Vlf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved)))) =>
                                                              v_Vmf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                v_Vzd v_Vmf) 
                                                             v_Vkf) 
                                                          (v_Vnf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.and 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))))))) =>
                                                           zen.Rcut 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   abst_T 
                                                                   v_Vcd 
                                                                   v_Vcd)) 
                                                             (v_Voe:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd))) =>
                                                              zen.Rsubst 
                                                                basics.bool__t 
                                                                (v_Vof:
                                                                 (zen.term 
                                                                    basics.bool__t) =>
                                                                 zen.triangle 
                                                                   (focal.is_true 
                                                                    v_Vof)) 
                                                                (abst_leq 
                                                                   v_Ved 
                                                                   v_Vcd) 
                                                                (abst_leq 
                                                                   v_Vgd 
                                                                   v_Vcd) 
                                                                (v_Vpf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                 zen.Rsubst 
                                                                   abst_T 
                                                                   (v_Vqf:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vqf 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) 
                                                                   v_Ved 
                                                                   v_Vgd 
                                                                   (v_Vrf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vgd)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved)))) 
                                                                    (v_Vsf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved)) 
                                                                    (v_Vtf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))) =>
                                                                    zen.Rcut 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vuf:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vuf 
                                                                    v_Vgd)) 
                                                                    v_Vgd 
                                                                    v_Ved 
                                                                    (v_Vlf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved)) 
                                                                    v_Vtf 
                                                                    v_Vlf) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vgd))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vwf:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vwf)) 
                                                                    v_Vgd 
                                                                    v_Vgd 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vcf) 
                                                                    (v_Vvf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vgd))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vgd)) 
                                                                    v_Vvf 
                                                                    v_Vrf) 
                                                                    v_Vvf) 
                                                                    v_Vhe) 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vcf)) 
                                                                    v_Vsf) 
                                                                    (v_Vxf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vyc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vad))))))) 
                                                                    v_Vgd 
                                                                    (v_Vyf:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad)))))) 
                                                                    v_Ved 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad))))) 
                                                                    v_Vcd 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) 
                                                                    (v_Vmf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    v_Vzd 
                                                                    v_Vmf) 
                                                                    (v_Vbg:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))) 
                                                                    (v_Vcg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    v_Vsd 
                                                                    v_Vcg) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vof:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vof)) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vqf:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vqf 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) 
                                                                    v_Vgd 
                                                                    v_Vgd 
                                                                    (v_Vcf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vgd)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Vcf) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vfg:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vfg) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) 
                                                                    v_Vcd 
                                                                    v_Vcd 
                                                                    (v_Vse:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)) 
                                                                    v_Voe 
                                                                    v_Vse) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    v_Veg) 
                                                                    v_Veg) 
                                                                    v_Veg) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))) 
                                                                    v_Vdg 
                                                                    v_Vjf) 
                                                                    v_Vdg) 
                                                                    v_Vbg) 
                                                                    v_Vag) 
                                                                    v_Vzf) 
                                                                    v_Vyf) 
                                                                    abst_leq_transitive) 
                                                                    v_Vxf) 
                                                                    v_Vnf) 
                                                                   (v_Veg:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vfg:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vfg) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) 
                                                                    v_Vcd 
                                                                    v_Vcd 
                                                                    (v_Vse:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)) 
                                                                    v_Voe 
                                                                    v_Vse) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    v_Veg) 
                                                                    v_Veg) 
                                                                   v_Vpf) 
                                                                (v_Vdg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))) 
                                                                   v_Vdg 
                                                                   v_Vjf) 
                                                                v_Vsd) 
                                                             (v_Vse:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)))) =>
                                                              zen.Rcut 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd))) 
                                                                (v_Vgg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd)))) =>
                                                                 zen.Rall 
                                                                   abst_T 
                                                                   (v_Vyc:
                                                                    (
                                                                    zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vad))))))) 
                                                                   v_Ved 
                                                                   (v_Vef:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad)))))) 
                                                                    v_Vcd 
                                                                    (v_Vhg:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))))) 
                                                                    v_Vcd 
                                                                    (v_Vig:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd)))) 
                                                                    (v_Vcg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    v_Vsd 
                                                                    v_Vcg) 
                                                                    (v_Vjg:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (v_Vkg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd))) 
                                                                    v_Vgg 
                                                                    v_Vkg) 
                                                                    (v_Vsd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd)))) =>
                                                                    zen.Rsubst 
                                                                    basics.bool__t 
                                                                    (v_Vof:
                                                                    (zen.term 
                                                                    basics.bool__t) =>
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    v_Vof)) 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (v_Vpf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vqf:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vqf 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) 
                                                                    v_Ved 
                                                                    v_Vgd 
                                                                    (v_Vrf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Ved 
                                                                    v_Vgd)))) =>
                                                                    zen.Rnotand 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved)))) 
                                                                    (v_Vsf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved)) 
                                                                    (v_Vtf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved))) =>
                                                                    zen.Reqsym 
                                                                    abst_T 
                                                                    v_Vgd 
                                                                    v_Ved 
                                                                    v_Vtf 
                                                                    v_Vrf) 
                                                                    v_Vsf) 
                                                                    (v_Vxf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved)))))) =>
                                                                    zen.Rnotnot 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved)))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vyc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vyc 
                                                                    v_Vad))))))) 
                                                                    v_Vgd 
                                                                    (v_Vyf:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad)))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vzc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vzc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad)))))) 
                                                                    v_Ved 
                                                                    (v_Vzf:
                                                                    (zen.proof 
                                                                    (zen.forall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad))))))) =>
                                                                    zen.Rall 
                                                                    abst_T 
                                                                    (v_Vad:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vad))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vad))))) 
                                                                    v_Vcd 
                                                                    (v_Vag:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) 
                                                                    (v_Vmf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Ved))) 
                                                                    v_Vzd 
                                                                    v_Vmf) 
                                                                    (v_Vbg:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))) 
                                                                    (v_Vcg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Ved 
                                                                    v_Vcd))) 
                                                                    v_Vsd 
                                                                    v_Vcg) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))) 
                                                                    v_Vdg 
                                                                    v_Vjf) 
                                                                    v_Vbg) 
                                                                    v_Vag) 
                                                                    v_Vzf) 
                                                                    v_Vyf) 
                                                                    abst_leq_transitive) 
                                                                    v_Vxf) 
                                                                    v_Vnf) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rsubst 
                                                                    abst_T 
                                                                    (v_Vfg:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vfg) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) 
                                                                    v_Vcd 
                                                                    v_Vcd 
                                                                    (v_Vse:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vcd)))) =>
                                                                    zen.Rnoteq 
                                                                    abst_T 
                                                                    v_Vcd 
                                                                    v_Vse) 
                                                                    (v_Veg:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                                    zen.Rnoteq 
                                                                    basics.bool__t 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd) 
                                                                    v_Veg) 
                                                                    v_Veg) 
                                                                    v_Vpf) 
                                                                    (v_Vdg:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))) 
                                                                    v_Vdg 
                                                                    v_Vjf) 
                                                                    v_Vsd) 
                                                                    v_Vjg) 
                                                                    v_Vig) 
                                                                    v_Vhg) 
                                                                    v_Vef) 
                                                                   abst_leq_transitive) 
                                                                (v_Vkg:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vcd))))) =>
                                                                 zen.Rnoteq 
                                                                   abst_T 
                                                                   v_Vcd 
                                                                   v_Vse)))) 
                                                       v_Vbe) 
                                                    (v_Vlg:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vcd v_Vgd)))) =>
                                                     v_Vmg:
                                                     (zen.proof 
                                                        (zen.and 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vcd 
                                                                    v_Vgd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_leq 
                                                                    v_Vgd 
                                                                    v_Vcd))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (abst_equal 
                                                                v_Vcd v_Vgd))) 
                                                       v_Vlg v_Vld) v_Vae) 
                                                 v_Vmd) abst_equal_from_leq) 
                                           v_Vxd) v_Vud) v_Vtd) 
                                  abst_equal_from_leq) v_Vqd) v_Vnd) v_Vmd) 
                      abst_equal_from_leq) v_Vjd) v_Vhd) v_Vfd) v_Vdd) v_Vbd).

def Ordered_set__leq_extends_equal :
  abst_T:cc.uT ->
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_equal_from_leq:(dk_logic.eP 
                         (dk_logic.forall abst_T 
                            (x:(cc.eT abst_T) =>
                             dk_logic.forall abst_T 
                               (y:(cc.eT abst_T) =>
                                dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
                                  (dk_logic.and 
                                     (dk_logic.ebP (abst_leq x y)) 
                                     (dk_logic.ebP (abst_leq y x))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (abst_leq x y)))))
  :=
  abst_T:cc.uT =>
  abst_leq:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_equal_from_leq:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal x y)) 
              (dk_logic.and (dk_logic.ebP (abst_leq x y)) 
                 (dk_logic.ebP (abst_leq y x))))))) =>
  zen.nnpp 
    (zen.forall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc)))))) 
    (v_Vcc:
     (zen.proof 
        (zen.not 
           (zen.forall abst_T 
              (v_Vac:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc)))))))) =>
     zen.Rnotall abst_T 
       (v_Vac:(zen.term abst_T) =>
        zen.forall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
             (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc))))) 
       (v_Vdc:(zen.term abst_T) =>
        v_Vec:
        (zen.proof 
           (zen.not 
              (zen.forall abst_T 
                 (v_Vbc:(zen.term abst_T) =>
                  zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vbc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vbc))))))) =>
        zen.Rnotall abst_T 
          (v_Vbc:(zen.term abst_T) =>
           zen.imp (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vbc))) 
             (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vbc)))) 
          (v_Vfc:(zen.term abst_T) =>
           v_Vgc:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                    (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc)))))) =>
           zen.Rnotimply 
             (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
             (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))) 
             (v_Vhc:
              (zen.proof 
                 (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc)))) =>
              v_Vic:
              (zen.proof 
                 (zen.not 
                    (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))))) =>
              zen.Rall abst_T 
                (v_Vac:(zen.term abst_T) =>
                 zen.forall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vac v_Vbc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vac v_Vbc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vac)))))) 
                v_Vdc 
                (v_Vjc:
                 (zen.proof 
                    (zen.forall abst_T 
                       (v_Vbc:(zen.term abst_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vbc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vbc v_Vdc))))))) =>
                 zen.Rall abst_T 
                   (v_Vbc:(zen.term abst_T) =>
                    zen.eqv 
                      (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vbc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vbc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vbc v_Vdc))))) 
                   v_Vfc 
                   (v_Vkc:
                    (zen.proof 
                       (zen.eqv 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vfc v_Vdc)))))) =>
                    zen.Requiv 
                      (zen.triangle (focal.is_true (abst_equal v_Vdc v_Vfc))) 
                      (zen.and 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vfc v_Vdc)))) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vdc v_Vfc))))) =>
                       v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                                (zen.triangle 
                                   (focal.is_true (abst_leq v_Vfc v_Vdc)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true (abst_equal v_Vdc v_Vfc))) v_Vhc 
                         v_Vlc) 
                      (v_Vhc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vdc v_Vfc)))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vfc v_Vdc))))) =>
                       zen.Rand 
                         (zen.triangle (focal.is_true (abst_leq v_Vdc v_Vfc))) 
                         (zen.triangle (focal.is_true (abst_leq v_Vfc v_Vdc))) 
                         (v_Voc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vdc v_Vfc)))) =>
                          v_Vpc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (abst_leq v_Vfc v_Vdc)))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true (abst_leq v_Vdc v_Vfc))) v_Voc 
                            v_Vic) v_Vnc) v_Vkc) v_Vjc) abst_equal_from_leq) 
             v_Vgc) v_Vec) v_Vcc).

