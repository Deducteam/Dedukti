#NAME pair.

Imp_pair__me_as_species :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) -> Type.

Imp_pair__mk_record :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  Imp_pair__rf_T:cc.uT ->
  Imp_pair__rf_constr:((cc.eT S1_T) -> (cc.eT S2_T) -> cc.eT Imp_pair__rf_T) ->
  Imp_pair__rf_equal:((cc.eT Imp_pair__rf_T) ->
                      (cc.eT Imp_pair__rf_T) -> cc.eT basics.bool__t) ->
  Imp_pair__rf_parse:((cc.eT basics.string__t) -> cc.eT Imp_pair__rf_T) ->
  Imp_pair__rf_print:((cc.eT Imp_pair__rf_T) -> cc.eT basics.string__t) ->
  Imp_pair__rf_prj_a:((cc.eT Imp_pair__rf_T) -> cc.eT S1_T) ->
  Imp_pair__rf_prj_b:((cc.eT Imp_pair__rf_T) -> cc.eT S2_T) ->
  Imp_pair__rf_element:(cc.eT Imp_pair__rf_T) ->
  Imp_pair__rf_different:((cc.eT Imp_pair__rf_T) ->
                          (cc.eT Imp_pair__rf_T) -> cc.eT basics.bool__t) ->
  Imp_pair__rf_prj_a_is_first_of_pair:(dk_logic.eP 
                                         (dk_logic.forall S1_T 
                                            (n1:(cc.eT S1_T) =>
                                             dk_logic.forall S2_T 
                                               (n2:(cc.eT S2_T) =>
                                                dk_logic.ebP 
                                                  (_p_S1_equal 
                                                     (Imp_pair__rf_prj_a 
                                                        (Imp_pair__rf_constr 
                                                           n1 n2)) n1))))) ->
  Imp_pair__rf_def_equal:(dk_logic.eP 
                            (dk_logic.forall Imp_pair__rf_T 
                               (p1:(cc.eT Imp_pair__rf_T) =>
                                dk_logic.forall Imp_pair__rf_T 
                                  (p2:(cc.eT Imp_pair__rf_T) =>
                                   dk_logic.eqv 
                                     (dk_logic.ebP (Imp_pair__rf_equal p1 p2)) 
                                     (dk_logic.and 
                                        (dk_logic.ebP 
                                           (_p_S1_equal 
                                              (Imp_pair__rf_prj_a p1) 
                                              (Imp_pair__rf_prj_a p2))) 
                                        (dk_logic.ebP 
                                           (_p_S2_equal 
                                              (Imp_pair__rf_prj_b p1) 
                                              (Imp_pair__rf_prj_b p2)))))))) ->
  Imp_pair__rf_prj_b_is_snd_of_pair:(dk_logic.eP 
                                       (dk_logic.forall S1_T 
                                          (n1:(cc.eT S1_T) =>
                                           dk_logic.forall S2_T 
                                             (n2:(cc.eT S2_T) =>
                                              dk_logic.ebP 
                                                (_p_S2_equal 
                                                   (Imp_pair__rf_prj_b 
                                                      (Imp_pair__rf_constr 
                                                         n1 n2)) n2))))) ->
  Imp_pair__rf_unicite_1:(dk_logic.eP 
                            (dk_logic.forall Imp_pair__rf_T 
                               (a:(cc.eT Imp_pair__rf_T) =>
                                dk_logic.ebP 
                                  (Imp_pair__rf_equal 
                                     (Imp_pair__rf_constr 
                                        (Imp_pair__rf_prj_a a) 
                                        (Imp_pair__rf_prj_b a)) a)))) ->
  Imp_pair__rf_unicite_2:(dk_logic.eP 
                            (dk_logic.forall Imp_pair__rf_T 
                               (a:(cc.eT Imp_pair__rf_T) =>
                                dk_logic.ebP 
                                  (Imp_pair__rf_equal a 
                                     (Imp_pair__rf_constr 
                                        (Imp_pair__rf_prj_a a) 
                                        (Imp_pair__rf_prj_b a)))))) ->
  Imp_pair__rf_same_is_not_different:(dk_logic.eP 
                                        (dk_logic.forall Imp_pair__rf_T 
                                           (x:(cc.eT Imp_pair__rf_T) =>
                                            dk_logic.forall Imp_pair__rf_T 
                                              (y:(cc.eT Imp_pair__rf_T) =>
                                               dk_logic.eqv 
                                                 (dk_logic.ebP 
                                                    (Imp_pair__rf_different 
                                                       x y)) 
                                                 (dk_logic.not 
                                                    (dk_logic.ebP 
                                                       (Imp_pair__rf_equal x 
                                                          y))))))) ->
  Imp_pair__rf_equal_transitive:(dk_logic.eP 
                                   (dk_logic.forall Imp_pair__rf_T 
                                      (x:(cc.eT Imp_pair__rf_T) =>
                                       dk_logic.forall Imp_pair__rf_T 
                                         (y:(cc.eT Imp_pair__rf_T) =>
                                          dk_logic.forall Imp_pair__rf_T 
                                            (z:(cc.eT Imp_pair__rf_T) =>
                                             dk_logic.imp 
                                               (dk_logic.ebP 
                                                  (Imp_pair__rf_equal x y)) 
                                               (dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (Imp_pair__rf_equal y z)) 
                                                  (dk_logic.ebP 
                                                     (Imp_pair__rf_equal x z)))))))) ->
  Imp_pair__rf_def_equal1:(dk_logic.eP 
                             (dk_logic.forall S1_T 
                                (n1:(cc.eT S1_T) =>
                                 dk_logic.forall S1_T 
                                   (n3:(cc.eT S1_T) =>
                                    dk_logic.forall S2_T 
                                      (n2:(cc.eT S2_T) =>
                                       dk_logic.forall S2_T 
                                         (n4:(cc.eT S2_T) =>
                                          dk_logic.eqv 
                                            (dk_logic.ebP 
                                               (Imp_pair__rf_equal 
                                                  (Imp_pair__rf_constr n1 n2) 
                                                  (Imp_pair__rf_constr n3 n4))) 
                                            (dk_logic.and 
                                               (dk_logic.ebP 
                                                  (_p_S1_equal n1 n3)) 
                                               (dk_logic.ebP 
                                                  (_p_S2_equal n2 n4))))))))) ->
  Imp_pair__rf_equal_reflexive:(dk_logic.eP 
                                  (dk_logic.forall Imp_pair__rf_T 
                                     (x:(cc.eT Imp_pair__rf_T) =>
                                      dk_logic.ebP (Imp_pair__rf_equal x x)))) ->
  Imp_pair__rf_equal_reflexive2:(dk_logic.eP 
                                   (dk_logic.forall S1_T 
                                      (n1:(cc.eT S1_T) =>
                                       dk_logic.forall S2_T 
                                         (n2:(cc.eT S2_T) =>
                                          dk_logic.ebP 
                                            (Imp_pair__rf_equal 
                                               (Imp_pair__rf_constr n1 n2) 
                                               (Imp_pair__rf_constr n1 n2)))))) ->
  Imp_pair__rf_equal_symmetric2:(dk_logic.eP 
                                   (dk_logic.forall S1_T 
                                      (n1:(cc.eT S1_T) =>
                                       dk_logic.forall S1_T 
                                         (n3:(cc.eT S1_T) =>
                                          dk_logic.forall S2_T 
                                            (n2:(cc.eT S2_T) =>
                                             dk_logic.forall S2_T 
                                               (n4:(cc.eT S2_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (Imp_pair__rf_equal 
                                                        (Imp_pair__rf_constr 
                                                           n1 n2) 
                                                        (Imp_pair__rf_constr 
                                                           n3 n4))) 
                                                  (dk_logic.ebP 
                                                     (Imp_pair__rf_equal 
                                                        (Imp_pair__rf_constr 
                                                           n3 n4) 
                                                        (Imp_pair__rf_constr 
                                                           n1 n2))))))))) ->
  Imp_pair__rf_equal_transitive2:(dk_logic.eP 
                                    (dk_logic.forall S1_T 
                                       (n1:(cc.eT S1_T) =>
                                        dk_logic.forall S1_T 
                                          (n3:(cc.eT S1_T) =>
                                           dk_logic.forall S1_T 
                                             (n5:(cc.eT S1_T) =>
                                              dk_logic.forall S2_T 
                                                (n2:(cc.eT S2_T) =>
                                                 dk_logic.forall S2_T 
                                                   (n4:(cc.eT S2_T) =>
                                                    dk_logic.forall S2_T 
                                                      (n6:(cc.eT S2_T) =>
                                                       dk_logic.imp 
                                                         (dk_logic.ebP 
                                                            (Imp_pair__rf_equal 
                                                               (Imp_pair__rf_constr 
                                                                  n1 n2) 
                                                               (Imp_pair__rf_constr 
                                                                  n3 n4))) 
                                                         (dk_logic.imp 
                                                            (dk_logic.ebP 
                                                               (Imp_pair__rf_equal 
                                                                  (Imp_pair__rf_constr 
                                                                    n3 n4) 
                                                                  (Imp_pair__rf_constr 
                                                                    n5 n6))) 
                                                            (dk_logic.ebP 
                                                               (Imp_pair__rf_equal 
                                                                  (Imp_pair__rf_constr 
                                                                    n1 n2) 
                                                                  (Imp_pair__rf_constr 
                                                                    n5 n6)))))))))))) ->
  Imp_pair__rf_different_is_irreflexive:(dk_logic.eP 
                                           (dk_logic.forall Imp_pair__rf_T 
                                              (x:(cc.eT Imp_pair__rf_T) =>
                                               dk_logic.not 
                                                 (dk_logic.ebP 
                                                    (Imp_pair__rf_different 
                                                       x x))))) ->
  Imp_pair__rf_equal_symmetric:(dk_logic.eP 
                                  (dk_logic.forall Imp_pair__rf_T 
                                     (x:(cc.eT Imp_pair__rf_T) =>
                                      dk_logic.forall Imp_pair__rf_T 
                                        (y:(cc.eT Imp_pair__rf_T) =>
                                         dk_logic.imp 
                                           (dk_logic.ebP 
                                              (Imp_pair__rf_equal x y)) 
                                           (dk_logic.ebP 
                                              (Imp_pair__rf_equal y x)))))) ->
  Imp_pair__rf_different_is_complete:(dk_logic.eP 
                                        (dk_logic.forall Imp_pair__rf_T 
                                           (x:(cc.eT Imp_pair__rf_T) =>
                                            dk_logic.forall Imp_pair__rf_T 
                                              (y:(cc.eT Imp_pair__rf_T) =>
                                               dk_logic.forall 
                                                 Imp_pair__rf_T 
                                                 (z:(cc.eT Imp_pair__rf_T) =>
                                                  dk_logic.imp 
                                                    (dk_logic.ebP 
                                                       (Imp_pair__rf_different 
                                                          x y)) 
                                                    (dk_logic.or 
                                                       (dk_logic.ebP 
                                                          (Imp_pair__rf_different 
                                                             x z)) 
                                                       (dk_logic.ebP 
                                                          (Imp_pair__rf_different 
                                                             y z)))))))) ->
  Imp_pair__rf_different_is_symmetric:(dk_logic.eP 
                                         (dk_logic.forall Imp_pair__rf_T 
                                            (x:(cc.eT Imp_pair__rf_T) =>
                                             dk_logic.forall Imp_pair__rf_T 
                                               (y:(cc.eT Imp_pair__rf_T) =>
                                                dk_logic.imp 
                                                  (dk_logic.ebP 
                                                     (Imp_pair__rf_different 
                                                        x y)) 
                                                  (dk_logic.ebP 
                                                     (Imp_pair__rf_different 
                                                        y x)))))) ->
  Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal.

def proj_Imp_pair__rf_T :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) -> cc.uT.

[Imp_pair__rf_T]
  proj_Imp_pair__rf_T _ _ _ _ (Imp_pair__mk_record _ _ _ _ Imp_pair__rf_T _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_T.

def proj_Imp_pair__rf_constr :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  (cc.eT S1_T) ->
  (cc.eT S2_T) ->
  cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record).

[Imp_pair__rf_constr]
  proj_Imp_pair__rf_constr _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ 
    Imp_pair__rf_constr _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_constr.

def proj_Imp_pair__rf_equal :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) ->
  (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) ->
  cc.eT basics.bool__t.

[Imp_pair__rf_equal]
  proj_Imp_pair__rf_equal _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ 
    Imp_pair__rf_equal _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_equal.

def proj_Imp_pair__rf_parse :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  (cc.eT basics.string__t) ->
  cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record).

[Imp_pair__rf_parse]
  proj_Imp_pair__rf_parse _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ 
    Imp_pair__rf_parse _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_parse.

def proj_Imp_pair__rf_print :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) ->
  cc.eT basics.string__t.

[Imp_pair__rf_print]
  proj_Imp_pair__rf_print _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ 
    Imp_pair__rf_print _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_print.

def proj_Imp_pair__rf_prj_a :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) ->
  cc.eT S1_T.

[Imp_pair__rf_prj_a]
  proj_Imp_pair__rf_prj_a _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ _ 
    Imp_pair__rf_prj_a _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_prj_a.

def proj_Imp_pair__rf_prj_b :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) ->
  cc.eT S2_T.

[Imp_pair__rf_prj_b]
  proj_Imp_pair__rf_prj_b _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ _ _ 
    Imp_pair__rf_prj_b _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_prj_b.

def proj_Imp_pair__rf_element :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record).

[Imp_pair__rf_element]
  proj_Imp_pair__rf_element _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ _ _ 
    _ Imp_pair__rf_element _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_element.

def proj_Imp_pair__rf_different :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) ->
  (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) ->
  cc.eT basics.bool__t.

[Imp_pair__rf_different]
  proj_Imp_pair__rf_different _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ _ 
    _ _ _ Imp_pair__rf_different _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_different.

def proj_Imp_pair__rf_prj_a_is_first_of_pair :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall S1_T 
       (n1:(cc.eT S1_T) =>
        dk_logic.forall S2_T 
          (n2:(cc.eT S2_T) =>
           dk_logic.ebP 
             (_p_S1_equal 
                (proj_Imp_pair__rf_prj_a S1_T S2_T _p_S1_equal _p_S2_equal 
                   record 
                   (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal 
                      _p_S2_equal record n1 n2)) n1)))).

[Imp_pair__rf_prj_a_is_first_of_pair]
  proj_Imp_pair__rf_prj_a_is_first_of_pair _ _ _ _ (Imp_pair__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_prj_a_is_first_of_pair _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_prj_a_is_first_of_pair.

def proj_Imp_pair__rf_def_equal :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (p1:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.forall 
          (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
          (p2:
           (cc.eT 
              (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal _p_S2_equal 
                   record p1 p2)) 
             (dk_logic.and 
                (dk_logic.ebP 
                   (_p_S1_equal 
                      (proj_Imp_pair__rf_prj_a S1_T S2_T _p_S1_equal 
                         _p_S2_equal record p1) 
                      (proj_Imp_pair__rf_prj_a S1_T S2_T _p_S1_equal 
                         _p_S2_equal record p2))) 
                (dk_logic.ebP 
                   (_p_S2_equal 
                      (proj_Imp_pair__rf_prj_b S1_T S2_T _p_S1_equal 
                         _p_S2_equal record p1) 
                      (proj_Imp_pair__rf_prj_b S1_T S2_T _p_S1_equal 
                         _p_S2_equal record p2))))))).

[Imp_pair__rf_def_equal]
  proj_Imp_pair__rf_def_equal _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ Imp_pair__rf_def_equal _ _ _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_def_equal.

def proj_Imp_pair__rf_prj_b_is_snd_of_pair :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall S1_T 
       (n1:(cc.eT S1_T) =>
        dk_logic.forall S2_T 
          (n2:(cc.eT S2_T) =>
           dk_logic.ebP 
             (_p_S2_equal 
                (proj_Imp_pair__rf_prj_b S1_T S2_T _p_S1_equal _p_S2_equal 
                   record 
                   (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal 
                      _p_S2_equal record n1 n2)) n2)))).

[Imp_pair__rf_prj_b_is_snd_of_pair]
  proj_Imp_pair__rf_prj_b_is_snd_of_pair _ _ _ _ (Imp_pair__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_prj_b_is_snd_of_pair _ _ _ _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Imp_pair__rf_prj_b_is_snd_of_pair.

def proj_Imp_pair__rf_unicite_1 :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (a:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.ebP 
          (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal _p_S2_equal record 
             (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal _p_S2_equal 
                record 
                (proj_Imp_pair__rf_prj_a S1_T S2_T _p_S1_equal _p_S2_equal 
                   record a) 
                (proj_Imp_pair__rf_prj_b S1_T S2_T _p_S1_equal _p_S2_equal 
                   record a)) a))).

[Imp_pair__rf_unicite_1]
  proj_Imp_pair__rf_unicite_1 _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ Imp_pair__rf_unicite_1 _ _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_unicite_1.

def proj_Imp_pair__rf_unicite_2 :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (a:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.ebP 
          (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal _p_S2_equal record 
             a 
             (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal _p_S2_equal 
                record 
                (proj_Imp_pair__rf_prj_a S1_T S2_T _p_S1_equal _p_S2_equal 
                   record a) 
                (proj_Imp_pair__rf_prj_b S1_T S2_T _p_S1_equal _p_S2_equal 
                   record a))))).

[Imp_pair__rf_unicite_2]
  proj_Imp_pair__rf_unicite_2 _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ Imp_pair__rf_unicite_2 _ _ _ _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_unicite_2.

def proj_Imp_pair__rf_same_is_not_different :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (x:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.forall 
          (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
           dk_logic.eqv 
             (dk_logic.ebP 
                (proj_Imp_pair__rf_different S1_T S2_T _p_S1_equal 
                   _p_S2_equal record x y)) 
             (dk_logic.not 
                (dk_logic.ebP 
                   (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal 
                      _p_S2_equal record x y)))))).

[Imp_pair__rf_same_is_not_different]
  proj_Imp_pair__rf_same_is_not_different _ _ _ _ (Imp_pair__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_same_is_not_different _ _ _ _ 
    _ _ _ _ _ _)
  -->
  Imp_pair__rf_same_is_not_different.

def proj_Imp_pair__rf_equal_transitive :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (x:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.forall 
          (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
           dk_logic.forall 
             (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
             (z:
              (cc.eT 
                 (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal 
                    record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal 
                      _p_S2_equal record x y)) 
                (dk_logic.imp 
                   (dk_logic.ebP 
                      (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal 
                         _p_S2_equal record y z)) 
                   (dk_logic.ebP 
                      (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal 
                         _p_S2_equal record x z))))))).

[Imp_pair__rf_equal_transitive]
  proj_Imp_pair__rf_equal_transitive _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_equal_transitive _ _ _ _ _ _ _ 
    _ _)
  -->
  Imp_pair__rf_equal_transitive.

def proj_Imp_pair__rf_def_equal1 :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall S1_T 
       (n1:(cc.eT S1_T) =>
        dk_logic.forall S1_T 
          (n3:(cc.eT S1_T) =>
           dk_logic.forall S2_T 
             (n2:(cc.eT S2_T) =>
              dk_logic.forall S2_T 
                (n4:(cc.eT S2_T) =>
                 dk_logic.eqv 
                   (dk_logic.ebP 
                      (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal 
                         _p_S2_equal record 
                         (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal 
                            _p_S2_equal record n1 n2) 
                         (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal 
                            _p_S2_equal record n3 n4))) 
                   (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
                      (dk_logic.ebP (_p_S2_equal n2 n4)))))))).

[Imp_pair__rf_def_equal1]
  proj_Imp_pair__rf_def_equal1 _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_def_equal1 _ _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_def_equal1.

def proj_Imp_pair__rf_equal_reflexive :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (x:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.ebP 
          (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal _p_S2_equal record 
             x x))).

[Imp_pair__rf_equal_reflexive]
  proj_Imp_pair__rf_equal_reflexive _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_equal_reflexive _ _ _ _ _ _ _)
  -->
  Imp_pair__rf_equal_reflexive.

def proj_Imp_pair__rf_equal_reflexive2 :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall S1_T 
       (n1:(cc.eT S1_T) =>
        dk_logic.forall S2_T 
          (n2:(cc.eT S2_T) =>
           dk_logic.ebP 
             (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal _p_S2_equal 
                record 
                (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal _p_S2_equal 
                   record n1 n2) 
                (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal _p_S2_equal 
                   record n1 n2))))).

[Imp_pair__rf_equal_reflexive2]
  proj_Imp_pair__rf_equal_reflexive2 _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_equal_reflexive2 _ _ _ _ 
    _ _)
  -->
  Imp_pair__rf_equal_reflexive2.

def proj_Imp_pair__rf_equal_symmetric2 :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall S1_T 
       (n1:(cc.eT S1_T) =>
        dk_logic.forall S1_T 
          (n3:(cc.eT S1_T) =>
           dk_logic.forall S2_T 
             (n2:(cc.eT S2_T) =>
              dk_logic.forall S2_T 
                (n4:(cc.eT S2_T) =>
                 dk_logic.imp 
                   (dk_logic.ebP 
                      (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal 
                         _p_S2_equal record 
                         (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal 
                            _p_S2_equal record n1 n2) 
                         (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal 
                            _p_S2_equal record n3 n4))) 
                   (dk_logic.ebP 
                      (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal 
                         _p_S2_equal record 
                         (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal 
                            _p_S2_equal record n3 n4) 
                         (proj_Imp_pair__rf_constr S1_T S2_T _p_S1_equal 
                            _p_S2_equal record n1 n2)))))))).

[Imp_pair__rf_equal_symmetric2]
  proj_Imp_pair__rf_equal_symmetric2 _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_equal_symmetric2 _ _ _ 
    _ _)
  -->
  Imp_pair__rf_equal_symmetric2.

def proj_Imp_pair__rf_equal_transitive2 :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall S1_T 
       (n1:(cc.eT S1_T) =>
        dk_logic.forall S1_T 
          (n3:(cc.eT S1_T) =>
           dk_logic.forall S1_T 
             (n5:(cc.eT S1_T) =>
              dk_logic.forall S2_T 
                (n2:(cc.eT S2_T) =>
                 dk_logic.forall S2_T 
                   (n4:(cc.eT S2_T) =>
                    dk_logic.forall S2_T 
                      (n6:(cc.eT S2_T) =>
                       dk_logic.imp 
                         (dk_logic.ebP 
                            (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal 
                               _p_S2_equal record 
                               (proj_Imp_pair__rf_constr S1_T S2_T 
                                  _p_S1_equal _p_S2_equal record n1 n2) 
                               (proj_Imp_pair__rf_constr S1_T S2_T 
                                  _p_S1_equal _p_S2_equal record n3 n4))) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (proj_Imp_pair__rf_equal S1_T S2_T 
                                  _p_S1_equal _p_S2_equal record 
                                  (proj_Imp_pair__rf_constr S1_T S2_T 
                                     _p_S1_equal _p_S2_equal record n3 n4) 
                                  (proj_Imp_pair__rf_constr S1_T S2_T 
                                     _p_S1_equal _p_S2_equal record n5 n6))) 
                            (dk_logic.ebP 
                               (proj_Imp_pair__rf_equal S1_T S2_T 
                                  _p_S1_equal _p_S2_equal record 
                                  (proj_Imp_pair__rf_constr S1_T S2_T 
                                     _p_S1_equal _p_S2_equal record n1 n2) 
                                  (proj_Imp_pair__rf_constr S1_T S2_T 
                                     _p_S1_equal _p_S2_equal record n5 n6))))))))))).

[Imp_pair__rf_equal_transitive2]
  proj_Imp_pair__rf_equal_transitive2 _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_equal_transitive2 _ _ 
    _ _)
  -->
  Imp_pair__rf_equal_transitive2.

def proj_Imp_pair__rf_different_is_irreflexive :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (x:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.not 
          (dk_logic.ebP 
             (proj_Imp_pair__rf_different S1_T S2_T _p_S1_equal _p_S2_equal 
                record x x)))).

[Imp_pair__rf_different_is_irreflexive]
  proj_Imp_pair__rf_different_is_irreflexive _ _ _ _ (Imp_pair__mk_record _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_pair__rf_different_is_irreflexive _ _ _)
  -->
  Imp_pair__rf_different_is_irreflexive.

def proj_Imp_pair__rf_equal_symmetric :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (x:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.forall 
          (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal _p_S2_equal 
                   record x y)) 
             (dk_logic.ebP 
                (proj_Imp_pair__rf_equal S1_T S2_T _p_S1_equal _p_S2_equal 
                   record y x))))).

[Imp_pair__rf_equal_symmetric]
  proj_Imp_pair__rf_equal_symmetric _ _ _ _ (Imp_pair__mk_record _ _ _ _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ Imp_pair__rf_equal_symmetric _ _)
  -->
  Imp_pair__rf_equal_symmetric.

def proj_Imp_pair__rf_different_is_complete :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (x:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.forall 
          (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
           dk_logic.forall 
             (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
             (z:
              (cc.eT 
                 (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal 
                    record)) =>
              dk_logic.imp 
                (dk_logic.ebP 
                   (proj_Imp_pair__rf_different S1_T S2_T _p_S1_equal 
                      _p_S2_equal record x y)) 
                (dk_logic.or 
                   (dk_logic.ebP 
                      (proj_Imp_pair__rf_different S1_T S2_T _p_S1_equal 
                         _p_S2_equal record x z)) 
                   (dk_logic.ebP 
                      (proj_Imp_pair__rf_different S1_T S2_T _p_S1_equal 
                         _p_S2_equal record y z))))))).

[Imp_pair__rf_different_is_complete]
  proj_Imp_pair__rf_different_is_complete _ _ _ _ (Imp_pair__mk_record _ _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_pair__rf_different_is_complete _)
  -->
  Imp_pair__rf_different_is_complete.

def proj_Imp_pair__rf_different_is_symmetric :
  S1_T:cc.uT ->
  S2_T:cc.uT ->
  _p_S1_equal:((cc.eT S1_T) -> (cc.eT S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT S2_T) -> (cc.eT S2_T) -> cc.eT basics.bool__t) ->
  record:(Imp_pair__me_as_species S1_T S2_T _p_S1_equal _p_S2_equal) ->
  dk_logic.eP 
    (dk_logic.forall 
       (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
       (x:
        (cc.eT (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
        dk_logic.forall 
          (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record) 
          (y:
           (cc.eT 
              (proj_Imp_pair__rf_T S1_T S2_T _p_S1_equal _p_S2_equal record)) =>
           dk_logic.imp 
             (dk_logic.ebP 
                (proj_Imp_pair__rf_different S1_T S2_T _p_S1_equal 
                   _p_S2_equal record x y)) 
             (dk_logic.ebP 
                (proj_Imp_pair__rf_different S1_T S2_T _p_S1_equal 
                   _p_S2_equal record y x))))).

[Imp_pair__rf_different_is_symmetric]
  proj_Imp_pair__rf_different_is_symmetric _ _ _ _ (Imp_pair__mk_record _ _ 
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
    Imp_pair__rf_different_is_symmetric)
  -->
  Imp_pair__rf_different_is_symmetric.

def Imp_pair__constr :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  n1:(cc.eT _p_S1_T) ->
  n2:(cc.eT _p_S2_T) -> cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  n1:(cc.eT _p_S1_T) =>
  n2:(cc.eT _p_S2_T) => basics.pair _p_S1_T _p_S2_T n1 n2.

def Imp_pair__equal :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) ->
  n1:(cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)) ->
  n2:(cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)) -> cc.eT basics.bool__t
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  n1:(cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)) =>
  n2:(cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)) =>
  basics._amper__amper_ 
    (_p_S1_equal (basics.fst _p_S1_T _p_S2_T n1) 
       (basics.fst _p_S1_T _p_S2_T n2)) 
    (_p_S2_equal (basics.snd _p_S1_T _p_S2_T n1) 
       (basics.snd _p_S1_T _p_S2_T n2)).

def Imp_pair__prj_a :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  nn:(cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)) -> cc.eT _p_S1_T
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  nn:(cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)) => basics.fst _p_S1_T _p_S2_T nn.

def Imp_pair__prj_b :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  nn:(cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)) -> cc.eT _p_S2_T
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  nn:(cc.eT (dk_tuple.prod _p_S1_T _p_S2_T)) => basics.snd _p_S1_T _p_S2_T nn.

def Imp_pair__element :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_element:(cc.eT _p_S1_T) ->
  _p_S2_element:(cc.eT _p_S2_T) ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  cc.eT abst_T
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_element:(cc.eT _p_S1_T) =>
  _p_S2_element:(cc.eT _p_S2_T) =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_constr _p_S1_element _p_S2_element.

def Imp_pair__prj_a_is_first_of_pair :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_S1_T 
       (n1:(cc.eT _p_S1_T) =>
        dk_logic.forall _p_S2_T 
          (n2:(cc.eT _p_S2_T) =>
           dk_logic.ebP (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_S1_T 
       (n1:(cc.eT _p_S1_T) =>
        dk_logic.forall _p_S2_T 
          (n2:(cc.eT _p_S2_T) =>
           dk_logic.ebP (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1)))).

def Imp_pair__def_equal :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (p1:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (p2:(cc.eT abst_T) =>
           dk_logic.eqv (dk_logic.ebP (abst_equal p1 p2)) 
             (dk_logic.and 
                (dk_logic.ebP (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) 
                (dk_logic.ebP (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (p1:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (p2:(cc.eT abst_T) =>
           dk_logic.eqv (dk_logic.ebP (abst_equal p1 p2)) 
             (dk_logic.and 
                (dk_logic.ebP (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) 
                (dk_logic.ebP (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))))).

def Imp_pair__prj_b_is_snd_of_pair :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) ->
  dk_logic.eP 
    (dk_logic.forall _p_S1_T 
       (n1:(cc.eT _p_S1_T) =>
        dk_logic.forall _p_S2_T 
          (n2:(cc.eT _p_S2_T) =>
           dk_logic.ebP (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall _p_S1_T 
       (n1:(cc.eT _p_S1_T) =>
        dk_logic.forall _p_S2_T 
          (n2:(cc.eT _p_S2_T) =>
           dk_logic.ebP (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2)))).

def Imp_pair__unicite_1 :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.ebP 
          (abst_equal (abst_constr (abst_prj_a a) (abst_prj_b a)) a)))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.ebP 
          (abst_equal (abst_constr (abst_prj_a a) (abst_prj_b a)) a))).

def Imp_pair__unicite_2 :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.ebP 
          (abst_equal a (abst_constr (abst_prj_a a) (abst_prj_b a)))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) =>
  dk_builtins.magic_prove 
    (dk_logic.forall abst_T 
       (a:(cc.eT abst_T) =>
        dk_logic.ebP 
          (abst_equal a (abst_constr (abst_prj_a a) (abst_prj_b a))))).

def Imp_pair__equal_transitive :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) ->
  _p_S1_equal_transitive:(dk_logic.eP 
                            (dk_logic.forall _p_S1_T 
                               (x:(cc.eT _p_S1_T) =>
                                dk_logic.forall _p_S1_T 
                                  (y:(cc.eT _p_S1_T) =>
                                   dk_logic.forall _p_S1_T 
                                     (z:(cc.eT _p_S1_T) =>
                                      dk_logic.imp 
                                        (dk_logic.ebP (_p_S1_equal x y)) 
                                        (dk_logic.imp 
                                           (dk_logic.ebP (_p_S1_equal y z)) 
                                           (dk_logic.ebP (_p_S1_equal x z)))))))) ->
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal_transitive:(dk_logic.eP 
                            (dk_logic.forall _p_S2_T 
                               (x:(cc.eT _p_S2_T) =>
                                dk_logic.forall _p_S2_T 
                                  (y:(cc.eT _p_S2_T) =>
                                   dk_logic.forall _p_S2_T 
                                     (z:(cc.eT _p_S2_T) =>
                                      dk_logic.imp 
                                        (dk_logic.ebP (_p_S2_equal x y)) 
                                        (dk_logic.imp 
                                           (dk_logic.ebP (_p_S2_equal y z)) 
                                           (dk_logic.ebP (_p_S2_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) ->
  abst_def_equal:(dk_logic.eP 
                    (dk_logic.forall abst_T 
                       (p1:(cc.eT abst_T) =>
                        dk_logic.forall abst_T 
                          (p2:(cc.eT abst_T) =>
                           dk_logic.eqv (dk_logic.ebP (abst_equal p1 p2)) 
                             (dk_logic.and 
                                (dk_logic.ebP 
                                   (_p_S1_equal (abst_prj_a p1) 
                                      (abst_prj_a p2))) 
                                (dk_logic.ebP 
                                   (_p_S2_equal (abst_prj_b p1) 
                                      (abst_prj_b p2)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.forall abst_T 
             (z:(cc.eT abst_T) =>
              dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                   (dk_logic.ebP (abst_equal x z)))))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  _p_S1_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (y:(cc.eT _p_S1_T) =>
            dk_logic.forall _p_S1_T 
              (z:(cc.eT _p_S1_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S1_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S1_equal y z)) 
                    (dk_logic.ebP (_p_S1_equal x z)))))))) =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  _p_S2_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) =>
         dk_logic.forall _p_S2_T 
           (y:(cc.eT _p_S2_T) =>
            dk_logic.forall _p_S2_T 
              (z:(cc.eT _p_S2_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S2_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S2_equal y z)) 
                    (dk_logic.ebP (_p_S2_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) =>
  abst_def_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (p1:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (p2:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal p1 p2)) 
              (dk_logic.and 
                 (dk_logic.ebP (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) 
                 (dk_logic.ebP (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))))))) =>
  (__A_1_LEMMA:
   (p1:(cc.eT abst_T) ->
    p2:(cc.eT abst_T) ->
    p3:(cc.eT abst_T) ->
    H1:(dk_logic.eP (dk_logic.ebP (abst_equal p1 p2))) ->
    H2:(dk_logic.eP (dk_logic.ebP (abst_equal p2 p3))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal p1 p3))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vkc:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vmc)))))))) 
     (v_Vnc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vkc:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vlc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vkc v_Vmc)))))))))) =>
      zen.Rnotall abst_T 
        (v_Vkc:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Vkc v_Vmc))))))) 
        (v_Voc:(zen.term abst_T) =>
         v_Vpc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vlc:(zen.term abst_T) =>
                   zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Voc v_Vlc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Voc v_Vmc))))))))) =>
         zen.Rnotall abst_T 
           (v_Vlc:(zen.term abst_T) =>
            zen.forall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Voc v_Vlc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vlc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Voc v_Vmc)))))) 
           (v_Vqc:(zen.term abst_T) =>
            v_Vrc:
            (zen.proof 
               (zen.not 
                  (zen.forall abst_T 
                     (v_Vmc:(zen.term abst_T) =>
                      zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Voc v_Vqc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vqc v_Vmc))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Voc v_Vmc)))))))) =>
            zen.Rnotall abst_T 
              (v_Vmc:(zen.term abst_T) =>
               zen.imp 
                 (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vqc v_Vmc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Voc v_Vmc))))) 
              (v_Vsc:(zen.term abst_T) =>
               v_Vtc:
               (zen.proof 
                  (zen.not 
                     (zen.imp 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Voc v_Vqc))) 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vqc v_Vsc))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Voc v_Vsc))))))) =>
               zen.Rnotimply 
                 (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc))) 
                 (zen.imp 
                    (zen.triangle (focal.is_true (abst_equal v_Vqc v_Vsc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Voc v_Vsc)))) 
                 (v_Vuc:
                  (zen.proof 
                     (zen.triangle (focal.is_true (abst_equal v_Voc v_Vqc)))) =>
                  v_Vvc:
                  (zen.proof 
                     (zen.not 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vqc v_Vsc))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Voc v_Vsc)))))) =>
                  zen.Rnotimply 
                    (zen.triangle (focal.is_true (abst_equal v_Vqc v_Vsc))) 
                    (zen.triangle (focal.is_true (abst_equal v_Voc v_Vsc))) 
                    (v_Vwc:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true (abst_equal v_Vqc v_Vsc)))) =>
                     v_Vxc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Voc v_Vsc))))) =>
                     zen.Rcut 
                       (zen.and 
                          (zen.not 
                             (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Voc v_Voc))))) 
                       (v_Vyc:
                        (zen.proof 
                           (zen.and 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Voc v_Voc)))))) =>
                        zen.Rand 
                          (zen.not 
                             (zen.triangle (zen.equal abst_T v_Voc v_Voc))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Voc v_Voc)))) 
                          (v_Vzc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Voc v_Voc)))) =>
                           v_Vad:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Voc v_Voc))))) =>
                           zen.Rnoteq abst_T v_Voc v_Vzc) v_Vyc) 
                       (v_Vbd:
                        (zen.proof 
                           (zen.not 
                              (zen.and 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T v_Voc v_Voc))) 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Voc v_Voc))))))) =>
                        zen.Rcut 
                          (zen.triangle (zen.equal abst_T v_Vqc v_Vsc)) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.triangle (zen.equal abst_T v_Vqc v_Vsc))) =>
                           zen.Rsubst basics.bool__t 
                             (v_Vdd:(zen.term basics.bool__t) =>
                              zen.triangle (focal.is_true v_Vdd)) 
                             (abst_equal v_Voc v_Vqc) 
                             (abst_equal v_Voc v_Vsc) 
                             (v_Ved:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (abst_equal v_Voc v_Vqc) 
                                          (abst_equal v_Voc v_Vsc))))) =>
                              zen.Rsubst abst_T 
                                (v_Vfd:(zen.term abst_T) =>
                                 zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal v_Vfd v_Vqc) 
                                         (abst_equal v_Voc v_Vsc)))) v_Voc 
                                v_Voc 
                                (v_Vzc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T v_Voc v_Voc)))) =>
                                 zen.Rnotand 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Voc v_Voc))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Voc)))) 
                                   (v_Vgd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T v_Voc v_Voc))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Voc v_Voc)) 
                                      (v_Vhd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T v_Voc v_Voc))) =>
                                       zen.Rcut 
                                         (zen.triangle 
                                            (zen.equal abst_T v_Voc v_Voc)) 
                                         (v_Vhd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal abst_T v_Voc v_Voc))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vid:(zen.term abst_T) =>
                                             zen.triangle 
                                               (zen.equal abst_T v_Vid v_Voc)) 
                                            v_Voc v_Voc 
                                            (v_Vzc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Voc v_Voc)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (zen.equal abst_T v_Voc 
                                                     v_Voc)) v_Vhd v_Vzc) 
                                            (v_Vhd:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T v_Voc 
                                                      v_Voc))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vjd:(zen.term abst_T) =>
                                                zen.triangle 
                                                  (zen.equal abst_T v_Voc 
                                                     v_Vjd)) v_Voc v_Voc 
                                               (v_Vzc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            v_Voc v_Voc)))) =>
                                                zen.Rnoteq abst_T v_Voc v_Vzc) 
                                               (v_Vhd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         v_Voc v_Voc))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (zen.equal abst_T v_Voc 
                                                        v_Voc)) v_Vhd v_Vzc) 
                                               v_Vhd) v_Vhd) 
                                         (v_Vzc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T v_Voc 
                                                      v_Voc)))) =>
                                          zen.Rnoteq abst_T v_Voc v_Vzc)) 
                                      v_Vgd) 
                                   (v_Vkd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Voc v_Voc)))))) =>
                                    zen.Rnotnot 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Voc v_Voc))) 
                                      (v_Vld:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal v_Voc v_Voc)))) =>
                                       zen.Rall abst_T 
                                         (v_Vkc:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vlc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vkc 
                                                           v_Vlc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vlc 
                                                              v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vkc 
                                                              v_Vmc))))))) 
                                         v_Voc 
                                         (v_Vmd:
                                          (zen.proof 
                                             (zen.forall abst_T 
                                                (v_Vlc:(zen.term abst_T) =>
                                                 zen.forall abst_T 
                                                   (v_Vmc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Voc v_Vlc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Vlc v_Vmc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Vmc)))))))) =>
                                          zen.Rall abst_T 
                                            (v_Vlc:(zen.term abst_T) =>
                                             zen.forall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Voc 
                                                           v_Vlc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Vlc 
                                                              v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              v_Vmc)))))) 
                                            v_Voc 
                                            (v_Vnd:
                                             (zen.proof 
                                                (zen.forall abst_T 
                                                   (v_Vmc:
                                                    (zen.term abst_T) =>
                                                    zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Voc v_Voc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Vmc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Vmc))))))) =>
                                             zen.Rall abst_T 
                                               (v_Vmc:(zen.term abst_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Voc 
                                                           v_Voc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              v_Vmc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              v_Vmc))))) 
                                               v_Vqc 
                                               (v_Vod:
                                                (zen.proof 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               v_Voc v_Voc))) 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Vqc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Vqc)))))) =>
                                                zen.Rimply 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Voc 
                                                           v_Voc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              v_Vqc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              v_Vqc)))) 
                                                  (v_Vad:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Voc))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              v_Voc))) v_Vld 
                                                     v_Vad) 
                                                  (v_Vpd:
                                                   (zen.proof 
                                                      (zen.imp 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Vqc))) 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Vqc))))) =>
                                                   zen.Rimply 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              v_Vqc))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal v_Voc 
                                                              v_Vqc))) 
                                                     (v_Vqd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Voc 
                                                                    v_Vqc))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Voc v_Vqc))) 
                                                        v_Vuc v_Vqd) 
                                                     (v_Vuc:
                                                      (zen.proof 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (abst_equal 
                                                                  v_Voc v_Vqc)))) =>
                                                      zen.Rsubst 
                                                        basics.bool__t 
                                                        (v_Vdd:
                                                         (zen.term 
                                                            basics.bool__t) =>
                                                         zen.triangle 
                                                           (focal.is_true 
                                                              v_Vdd)) 
                                                        (abst_equal v_Voc 
                                                           v_Vqc) 
                                                        (abst_equal v_Voc 
                                                           v_Vsc) 
                                                        (v_Ved:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                         zen.Rsubst abst_T 
                                                           (v_Vfd:
                                                            (zen.term abst_T) =>
                                                            zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vfd 
                                                                    v_Vqc) 
                                                                    (
                                                                    abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                           v_Voc v_Voc 
                                                           (v_Vzc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                            zen.Rnoteq 
                                                              abst_T v_Voc 
                                                              v_Vzc) 
                                                           (v_Ved:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vqc) 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                            zen.Rsubst 
                                                              abst_T 
                                                              (v_Vrd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vrd) 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                              v_Vqc v_Vsc 
                                                              (v_Vsd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    abst_T 
                                                                    v_Vqc 
                                                                    v_Vsc)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    abst_T 
                                                                    v_Vqc 
                                                                    v_Vsc)) 
                                                                 v_Vcd v_Vsd) 
                                                              (v_Vtd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                               zen.Rnoteq 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                 v_Vtd) v_Ved) 
                                                           v_Ved) 
                                                        (v_Vud:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                           v_Vud v_Vxc) v_Vuc) 
                                                     v_Vpd) v_Vod) v_Vnd) 
                                            v_Vmd) __A_1_LEMMA) v_Vkd) v_Vbd) 
                                (v_Ved:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (abst_equal v_Voc v_Vqc) 
                                             (abst_equal v_Voc v_Vsc))))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vrd:(zen.term abst_T) =>
                                    zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (abst_equal v_Voc v_Vrd) 
                                            (abst_equal v_Voc v_Vsc)))) 
                                   v_Vqc v_Vsc 
                                   (v_Vsd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T v_Vqc v_Vsc)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal abst_T v_Vqc v_Vsc)) 
                                      v_Vcd v_Vsd) 
                                   (v_Vtd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal v_Voc v_Vsc) 
                                                (abst_equal v_Voc v_Vsc))))) =>
                                    zen.Rnoteq basics.bool__t 
                                      (abst_equal v_Voc v_Vsc) v_Vtd) v_Ved) 
                                v_Ved) 
                             (v_Vud:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Voc v_Vsc)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Voc v_Vsc))) 
                                v_Vud v_Vxc) v_Vuc) 
                          (v_Vsd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (zen.equal abst_T v_Vqc v_Vsc)))) =>
                           zen.Rcut 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vqc v_Vsc))) 
                             (v_Vwc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal v_Vqc v_Vsc)))) =>
                              zen.Rall abst_T 
                                (v_Vkc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vlc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vkc v_Vlc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vlc v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vkc v_Vmc))))))) 
                                v_Voc 
                                (v_Vmd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vlc:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vmc:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Voc v_Vlc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vlc v_Vmc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Voc v_Vmc)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vlc:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Voc v_Vlc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vlc v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Voc v_Vmc)))))) 
                                   v_Vqc 
                                   (v_Vvd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vmc:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Voc v_Vqc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vqc v_Vmc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Voc v_Vmc))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vmc:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Voc v_Vqc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vqc v_Vmc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Voc v_Vmc))))) 
                                      v_Vsc 
                                      (v_Vwd:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Voc v_Vqc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vqc v_Vsc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Voc v_Vsc)))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Voc v_Vqc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vqc v_Vsc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Voc v_Vsc)))) 
                                         (v_Vqd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Voc v_Vqc))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Voc v_Vqc))) 
                                            v_Vuc v_Vqd) 
                                         (v_Vxd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vqc v_Vsc))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Voc v_Vsc))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vqc v_Vsc))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Voc v_Vsc))) 
                                            (v_Vyd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Vqc 
                                                            v_Vsc))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vqc v_Vsc))) 
                                               v_Vwc v_Vyd) 
                                            (v_Vud:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Voc v_Vsc)))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vdd:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vdd)) 
                                               (abst_equal v_Voc v_Vsc) 
                                               (abst_equal v_Voc v_Vsc) 
                                               (v_Vtd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               v_Voc v_Vsc) 
                                                            (abst_equal 
                                                               v_Voc v_Vsc))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vzd:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal v_Vzd 
                                                              v_Vsc) 
                                                           (abst_equal v_Voc 
                                                              v_Vsc)))) 
                                                  v_Voc v_Voc 
                                                  (v_Vzc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T v_Voc 
                                                               v_Voc)))) =>
                                                   zen.Rnotand 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Voc v_Voc))) 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Voc v_Voc)))) 
                                                     (v_Vgd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    abst_T 
                                                                    v_Voc 
                                                                    v_Voc))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              v_Voc v_Voc)) 
                                                        (v_Vhd:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  v_Voc v_Voc))) =>
                                                         zen.Reqsym abst_T 
                                                           v_Voc v_Voc v_Vhd 
                                                           v_Vzc) v_Vgd) 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Voc)))))) =>
                                                      zen.Rnotnot 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Voc v_Voc))) 
                                                        (v_Vld:
                                                         (zen.proof 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    v_Voc 
                                                                    v_Voc)))) =>
                                                         zen.Rall abst_T 
                                                           (v_Vkc:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vkc 
                                                                    v_Vmc))))))) 
                                                           v_Voc 
                                                           (v_Vmd:
                                                            (zen.proof 
                                                               (zen.forall 
                                                                  abst_T 
                                                                  (v_Vlc:
                                                                   (zen.term 
                                                                    abst_T) =>
                                                                   zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vmc)))))))) =>
                                                            zen.Rall abst_T 
                                                              (v_Vlc:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.forall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vlc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vlc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vmc)))))) 
                                                              v_Voc 
                                                              (v_Vnd:
                                                               (zen.proof 
                                                                  (zen.forall 
                                                                    abst_T 
                                                                    (v_Vmc:
                                                                    (zen.term 
                                                                    abst_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vmc))))))) =>
                                                               zen.Rall 
                                                                 abst_T 
                                                                 (v_Vmc:
                                                                  (zen.term 
                                                                    abst_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vmc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vmc))))) 
                                                                 v_Vsc 
                                                                 (v_Vae:
                                                                  (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))))) =>
                                                                  zen.Rimply 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) 
                                                                    (
                                                                    v_Vad:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Voc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Voc))) 
                                                                    v_Vld 
                                                                    v_Vad) 
                                                                    (
                                                                    v_Vbe:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    (v_Vxc:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud 
                                                                    v_Vxc) 
                                                                    (v_Vud:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))) 
                                                                    v_Vud 
                                                                    v_Vxc) 
                                                                    v_Vbe) 
                                                                    v_Vae) 
                                                                 v_Vnd) v_Vmd) 
                                                           __A_1_LEMMA) v_Vkd) 
                                                     v_Vbd) 
                                                  (v_Vtd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  v_Voc v_Vsc) 
                                                               (abst_equal 
                                                                  v_Voc v_Vsc))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vrd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 v_Voc v_Vrd) 
                                                              (abst_equal 
                                                                 v_Voc v_Vsc)))) 
                                                     v_Vsc v_Vsc 
                                                     (v_Vce:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  v_Vsc v_Vsc)))) =>
                                                      zen.Rnoteq abst_T 
                                                        v_Vsc v_Vce) 
                                                     (v_Vtd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc) 
                                                                  (abst_equal 
                                                                    v_Voc 
                                                                    v_Vsc))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (abst_equal v_Voc 
                                                           v_Vsc) v_Vtd) 
                                                     v_Vtd) v_Vtd) 
                                               (v_Vud:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal v_Voc 
                                                            v_Vsc)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Voc 
                                                           v_Vsc))) v_Vud 
                                                  v_Vxc) v_Vud) v_Vxd) v_Vwd) 
                                      v_Vvd) v_Vmd) __A_1_LEMMA) 
                             (v_Vyd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vqc v_Vsc))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vqc v_Vsc))) 
                                v_Vwc v_Vyd)))) v_Vvc) v_Vtc) v_Vrc) v_Vpc) 
        v_Vnc)) 
    (p1:(cc.eT abst_T) =>
     p2:(cc.eT abst_T) =>
     p3:(cc.eT abst_T) =>
     H1:(dk_logic.eP (dk_logic.ebP (abst_equal p1 p2))) =>
     H2:(dk_logic.eP (dk_logic.ebP (abst_equal p2 p3))) =>
     (__A_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.and 
            (dk_logic.ebP (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) 
            (dk_logic.ebP (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))) =>
      (__A_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.and 
             (dk_logic.ebP (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3))) 
             (dk_logic.ebP (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))))) =>
       (__A_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.and 
              (dk_logic.ebP (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3))) 
              (dk_logic.ebP (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3))))) =>
        zen.nnpp (zen.triangle (focal.is_true (abst_equal p1 p3))) 
          (v_Vac:
           (zen.proof 
              (zen.not (zen.triangle (focal.is_true (abst_equal p1 p3))))) =>
           zen.Rall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a v_Vbc) 
                               (abst_prj_a v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b v_Vbc) 
                               (abst_prj_b v_Vcc))))))) p1 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_equal p1 v_Vcc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal (abst_prj_a p1) 
                                   (abst_prj_a v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal (abst_prj_b p1) 
                                   (abst_prj_b v_Vcc)))))))) =>
              zen.Rall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_equal p1 v_Vcc))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a p1) (abst_prj_a v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b p1) (abst_prj_b v_Vcc)))))) 
                p3 
                (v_Vec:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle (focal.is_true (abst_equal p1 p3))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3))))))) =>
                 zen.Requiv 
                   (zen.triangle (focal.is_true (abst_equal p1 p3))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3))))) 
                   (v_Vac:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_equal p1 p3))))) =>
                    v_Vfc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal (abst_prj_a p1) 
                                      (abst_prj_a p3)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal (abst_prj_b p1) 
                                      (abst_prj_b p3))))))) =>
                    zen.Raxiom 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3))))) 
                      __A_1_3_LEMMA v_Vfc) 
                   (v_Vgc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal p1 p3)))) =>
                    __A_1_3_LEMMA:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3)))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal p1 p3))) 
                      v_Vgc v_Vac) v_Vec) v_Vdc) abst_def_equal)) 
         (zen.nnpp 
            (zen.and 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3)))) 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3))))) 
            (v_Vvc:
             (zen.proof 
                (zen.not 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3))))))) =>
             zen.Rand 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2)))) 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))) 
               (v_Vwc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))))) =>
                v_Vxc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))) =>
                zen.Rand 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3)))) 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3)))) 
                  (v_Vyc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3))))) =>
                   v_Vzc:
                   (zen.proof 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))))) =>
                   zen.Rnotand 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3)))) 
                     (v_Vad:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal (abst_prj_a p1) 
                                     (abst_prj_a p3)))))) =>
                      zen.Rcut 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_S1_T (abst_prj_a p1) 
                                    (abst_prj_a p1)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S1_equal (abst_prj_a p1) 
                                       (abst_prj_a p1)))))) 
                        (v_Vbd:
                         (zen.proof 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_S1_T (abst_prj_a p1) 
                                        (abst_prj_a p1)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal (abst_prj_a p1) 
                                           (abst_prj_a p1))))))) =>
                         zen.Rand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_S1_T (abst_prj_a p1) 
                                    (abst_prj_a p1)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S1_equal (abst_prj_a p1) 
                                       (abst_prj_a p1))))) 
                           (v_Vcd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_S1_T (abst_prj_a p1) 
                                        (abst_prj_a p1))))) =>
                            v_Vdd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal (abst_prj_a p1) 
                                           (abst_prj_a p1)))))) =>
                            zen.Rnoteq _p_S1_T (abst_prj_a p1) v_Vcd) v_Vbd) 
                        (v_Ved:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_S1_T (abst_prj_a p1) 
                                           (abst_prj_a p1)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal (abst_prj_a p1) 
                                              (abst_prj_a p1)))))))) =>
                         zen.Rcut 
                           (zen.triangle 
                              (zen.equal _p_S1_T (abst_prj_a p2) 
                                 (abst_prj_a p3))) 
                           (v_Vfd:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal _p_S1_T (abst_prj_a p2) 
                                     (abst_prj_a p3)))) =>
                            zen.Rsubst basics.bool__t 
                              (v_Vgd:(zen.term basics.bool__t) =>
                               zen.triangle (focal.is_true v_Vgd)) 
                              (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2)) 
                              (_p_S1_equal (abst_prj_a p1) (abst_prj_a p3)) 
                              (v_Vhd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_S1_equal (abst_prj_a p1) 
                                              (abst_prj_a p2)) 
                                           (_p_S1_equal (abst_prj_a p1) 
                                              (abst_prj_a p3)))))) =>
                               zen.Rsubst _p_S1_T 
                                 (v_Vid:(zen.term _p_S1_T) =>
                                  zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_S1_equal v_Vid (abst_prj_a p2)) 
                                          (_p_S1_equal (abst_prj_a p1) 
                                             (abst_prj_a p3))))) 
                                 (abst_prj_a p1) (abst_prj_a p1) 
                                 (v_Vcd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_S1_T 
                                              (abst_prj_a p1) (abst_prj_a p1))))) =>
                                  zen.Rnotand 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_S1_T (abst_prj_a p1) 
                                             (abst_prj_a p1)))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal (abst_prj_a p1) 
                                                (abst_prj_a p1))))) 
                                    (v_Vjd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_S1_T 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_a p1)))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (zen.equal _p_S1_T (abst_prj_a p1) 
                                             (abst_prj_a p1))) 
                                       (v_Vkd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal _p_S1_T 
                                                 (abst_prj_a p1) 
                                                 (abst_prj_a p1)))) =>
                                        zen.Rcut 
                                          (zen.triangle 
                                             (zen.equal _p_S1_T 
                                                (abst_prj_a p1) 
                                                (abst_prj_a p1))) 
                                          (v_Vkd:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal _p_S1_T 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_a p1)))) =>
                                           zen.Rsubst _p_S1_T 
                                             (v_Vld:(zen.term _p_S1_T) =>
                                              zen.triangle 
                                                (zen.equal _p_S1_T v_Vld 
                                                   (abst_prj_a p1))) 
                                             (abst_prj_a p1) (abst_prj_a p1) 
                                             (v_Vcd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_S1_T 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_a p1))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal _p_S1_T 
                                                      (abst_prj_a p1) 
                                                      (abst_prj_a p1))) 
                                                v_Vkd v_Vcd) 
                                             (v_Vkd:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal _p_S1_T 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_a p1)))) =>
                                              zen.Rsubst _p_S1_T 
                                                (v_Vmd:(zen.term _p_S1_T) =>
                                                 zen.triangle 
                                                   (zen.equal _p_S1_T 
                                                      (abst_prj_a p1) v_Vmd)) 
                                                (abst_prj_a p1) 
                                                (abst_prj_a p1) 
                                                (v_Vcd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_S1_T 
                                                             (abst_prj_a p1) 
                                                             (abst_prj_a p1))))) =>
                                                 zen.Rnoteq _p_S1_T 
                                                   (abst_prj_a p1) v_Vcd) 
                                                (v_Vkd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal _p_S1_T 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_a p1)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (zen.equal _p_S1_T 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_a p1))) 
                                                   v_Vkd v_Vcd) v_Vkd) v_Vkd) 
                                          (v_Vcd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_S1_T 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_a p1))))) =>
                                           zen.Rnoteq _p_S1_T 
                                             (abst_prj_a p1) v_Vcd)) v_Vjd) 
                                    (v_Vnd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_a p1))))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal (abst_prj_a p1) 
                                                (abst_prj_a p1)))) 
                                       (v_Vod:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_a p1))))) =>
                                        zen.Rall _p_S1_T 
                                          (v_Vpd:(zen.term _p_S1_T) =>
                                           zen.forall _p_S1_T 
                                             (v_Vqd:(zen.term _p_S1_T) =>
                                              zen.forall _p_S1_T 
                                                (v_Vrd:(zen.term _p_S1_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal v_Vpd 
                                                            v_Vqd))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               v_Vqd v_Vrd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               v_Vpd v_Vrd))))))) 
                                          (abst_prj_a p1) 
                                          (v_Vsd:
                                           (zen.proof 
                                              (zen.forall _p_S1_T 
                                                 (v_Vqd:(zen.term _p_S1_T) =>
                                                  zen.forall _p_S1_T 
                                                    (v_Vrd:
                                                     (zen.term _p_S1_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal 
                                                                (abst_prj_a 
                                                                   p1) v_Vqd))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   v_Vqd 
                                                                   v_Vrd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) v_Vrd)))))))) =>
                                           zen.Rall _p_S1_T 
                                             (v_Vqd:(zen.term _p_S1_T) =>
                                              zen.forall _p_S1_T 
                                                (v_Vrd:(zen.term _p_S1_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal 
                                                            (abst_prj_a p1) 
                                                            v_Vqd))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               v_Vqd v_Vrd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               v_Vrd)))))) 
                                             (abst_prj_a p1) 
                                             (v_Vtd:
                                              (zen.proof 
                                                 (zen.forall _p_S1_T 
                                                    (v_Vrd:
                                                     (zen.term _p_S1_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal 
                                                                (abst_prj_a 
                                                                   p1) 
                                                                (abst_prj_a 
                                                                   p1)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) v_Vrd))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) v_Vrd))))))) =>
                                              zen.Rall _p_S1_T 
                                                (v_Vrd:(zen.term _p_S1_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_a p1)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               v_Vrd))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               v_Vrd))))) 
                                                (abst_prj_a p2) 
                                                (v_Vud:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal 
                                                                (abst_prj_a 
                                                                   p1) 
                                                                (abst_prj_a 
                                                                   p1)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p2)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p2))))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_a p1)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_a p2)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_a p2))))) 
                                                   (v_Vdd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p1)))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_a p1)))) 
                                                      v_Vod v_Vdd) 
                                                   (v_Vvd:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p2)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p2)))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_a p2)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_a p2)))) 
                                                      (v_Vwd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p2)))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_S1_equal 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_a 
                                                                    p2)))) 
                                                         v_Vwc v_Vwd) 
                                                      (v_Vwc:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p2))))) =>
                                                       zen.Rsubst 
                                                         basics.bool__t 
                                                         (v_Vgd:
                                                          (zen.term 
                                                             basics.bool__t) =>
                                                          zen.triangle 
                                                            (focal.is_true 
                                                               v_Vgd)) 
                                                         (_p_S1_equal 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_a p2)) 
                                                         (_p_S1_equal 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_a p3)) 
                                                         (v_Vhd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p2)) 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))))) =>
                                                          zen.Rsubst _p_S1_T 
                                                            (v_Vid:
                                                             (zen.term 
                                                                _p_S1_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    v_Vid 
                                                                    (abst_prj_a 
                                                                    p2)) 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3))))) 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_a p1) 
                                                            (v_Vcd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S1_T 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1))))) =>
                                                             zen.Rnoteq 
                                                               _p_S1_T 
                                                               (abst_prj_a p1) 
                                                               v_Vcd) 
                                                            (v_Vhd:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p2)) 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))))) =>
                                                             zen.Rsubst 
                                                               _p_S1_T 
                                                               (v_Vxd:
                                                                (zen.term 
                                                                   _p_S1_T) =>
                                                                zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vxd) 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3))))) 
                                                               (abst_prj_a p2) 
                                                               (abst_prj_a p3) 
                                                               (v_Vyd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S1_T 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_a 
                                                                    p3))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S1_T 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_a 
                                                                    p3))) 
                                                                  v_Vfd v_Vyd) 
                                                               (v_Vzd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)) 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))))) =>
                                                                zen.Rnoteq 
                                                                  basics.bool__t 
                                                                  (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)) 
                                                                  v_Vzd) 
                                                               v_Vhd) v_Vhd) 
                                                         (v_Vae:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))) 
                                                            v_Vae v_Vad) 
                                                         v_Vwc) v_Vvd) v_Vud) 
                                                v_Vtd) v_Vsd) 
                                          _p_S1_equal_transitive) v_Vnd) 
                                    v_Ved) 
                                 (v_Vhd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_S1_equal (abst_prj_a p1) 
                                                 (abst_prj_a p2)) 
                                              (_p_S1_equal (abst_prj_a p1) 
                                                 (abst_prj_a p3)))))) =>
                                  zen.Rsubst _p_S1_T 
                                    (v_Vxd:(zen.term _p_S1_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_S1_equal (abst_prj_a p1) 
                                                v_Vxd) 
                                             (_p_S1_equal (abst_prj_a p1) 
                                                (abst_prj_a p3))))) 
                                    (abst_prj_a p2) (abst_prj_a p3) 
                                    (v_Vyd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_S1_T 
                                                 (abst_prj_a p2) 
                                                 (abst_prj_a p3))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal _p_S1_T (abst_prj_a p2) 
                                             (abst_prj_a p3))) v_Vfd v_Vyd) 
                                    (v_Vzd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (_p_S1_equal 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_a p3)) 
                                                 (_p_S1_equal 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_a p3)))))) =>
                                     zen.Rnoteq basics.bool__t 
                                       (_p_S1_equal (abst_prj_a p1) 
                                          (abst_prj_a p3)) v_Vzd) v_Vhd) 
                                 v_Vhd) 
                              (v_Vae:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal (abst_prj_a p1) 
                                           (abst_prj_a p3))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S1_equal (abst_prj_a p1) 
                                          (abst_prj_a p3)))) v_Vae v_Vad) 
                              v_Vwc) 
                           (v_Vyd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_S1_T (abst_prj_a p2) 
                                        (abst_prj_a p3))))) =>
                            zen.Rcut 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S1_equal (abst_prj_a p2) 
                                       (abst_prj_a p3)))) 
                              (v_Vyc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal (abst_prj_a p2) 
                                           (abst_prj_a p3))))) =>
                               zen.Rall _p_S1_T 
                                 (v_Vpd:(zen.term _p_S1_T) =>
                                  zen.forall _p_S1_T 
                                    (v_Vqd:(zen.term _p_S1_T) =>
                                     zen.forall _p_S1_T 
                                       (v_Vrd:(zen.term _p_S1_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal v_Vpd v_Vqd))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal v_Vqd v_Vrd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal v_Vpd v_Vrd))))))) 
                                 (abst_prj_a p1) 
                                 (v_Vsd:
                                  (zen.proof 
                                     (zen.forall _p_S1_T 
                                        (v_Vqd:(zen.term _p_S1_T) =>
                                         zen.forall _p_S1_T 
                                           (v_Vrd:(zen.term _p_S1_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a p1) v_Vqd))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal v_Vqd 
                                                          v_Vrd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p1) 
                                                          v_Vrd)))))))) =>
                                  zen.Rall _p_S1_T 
                                    (v_Vqd:(zen.term _p_S1_T) =>
                                     zen.forall _p_S1_T 
                                       (v_Vrd:(zen.term _p_S1_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal (abst_prj_a p1) 
                                                   v_Vqd))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal v_Vqd v_Vrd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a p1) v_Vrd)))))) 
                                    (abst_prj_a p2) 
                                    (v_Vbe:
                                     (zen.proof 
                                        (zen.forall _p_S1_T 
                                           (v_Vrd:(zen.term _p_S1_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_a p2)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p2) 
                                                          v_Vrd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p1) 
                                                          v_Vrd))))))) =>
                                     zen.Rall _p_S1_T 
                                       (v_Vrd:(zen.term _p_S1_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal (abst_prj_a p1) 
                                                   (abst_prj_a p2)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a p2) v_Vrd))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a p1) v_Vrd))))) 
                                       (abst_prj_a p3) 
                                       (v_Vce:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_a p2)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_a p3)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_a p3))))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal (abst_prj_a p1) 
                                                   (abst_prj_a p2)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a p2) 
                                                      (abst_prj_a p3)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a p1) 
                                                      (abst_prj_a p3))))) 
                                          (v_Vwd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_a p2)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a p1) 
                                                      (abst_prj_a p2)))) 
                                             v_Vwc v_Vwd) 
                                          (v_Vde:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_a p3)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_a p3)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a p2) 
                                                      (abst_prj_a p3)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a p1) 
                                                      (abst_prj_a p3)))) 
                                             (v_Vee:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal 
                                                             (abst_prj_a p2) 
                                                             (abst_prj_a p3)))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a p2) 
                                                         (abst_prj_a p3)))) 
                                                v_Vyc v_Vee) 
                                             (v_Vae:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_a p3))))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vgd:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vgd)) 
                                                (_p_S1_equal (abst_prj_a p1) 
                                                   (abst_prj_a p3)) 
                                                (_p_S1_equal (abst_prj_a p1) 
                                                   (abst_prj_a p3)) 
                                                (v_Vzd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S1_equal 
                                                                (abst_prj_a 
                                                                   p1) 
                                                                (abst_prj_a 
                                                                   p3)) 
                                                             (_p_S1_equal 
                                                                (abst_prj_a 
                                                                   p1) 
                                                                (abst_prj_a 
                                                                   p3)))))) =>
                                                 zen.Rsubst _p_S1_T 
                                                   (v_Vfe:
                                                    (zen.term _p_S1_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_S1_equal 
                                                               v_Vfe 
                                                               (abst_prj_a p3)) 
                                                            (_p_S1_equal 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_a p3))))) 
                                                   (abst_prj_a p1) 
                                                   (abst_prj_a p1) 
                                                   (v_Vcd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S1_T 
                                                                (abst_prj_a 
                                                                   p1) 
                                                                (abst_prj_a 
                                                                   p1))))) =>
                                                    zen.Rnotand 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_S1_T 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_a p1)))) 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_S1_equal 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_a 
                                                                    p1))))) 
                                                      (v_Vjd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_S1_T 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1)))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_S1_T 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_a p1))) 
                                                         (v_Vkd:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_S1_T 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p1)))) =>
                                                          zen.Reqsym _p_S1_T 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_a p1) 
                                                            v_Vkd v_Vcd) 
                                                         v_Vjd) 
                                                      (v_Vnd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1))))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_S1_equal 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_a 
                                                                    p1)))) 
                                                         (v_Vod:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1))))) =>
                                                          zen.Rall _p_S1_T 
                                                            (v_Vpd:
                                                             (zen.term 
                                                                _p_S1_T) =>
                                                             zen.forall 
                                                               _p_S1_T 
                                                               (v_Vqd:
                                                                (zen.term 
                                                                   _p_S1_T) =>
                                                                zen.forall 
                                                                  _p_S1_T 
                                                                  (v_Vrd:
                                                                   (zen.term 
                                                                    _p_S1_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vpd 
                                                                    v_Vqd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vqd 
                                                                    v_Vrd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vpd 
                                                                    v_Vrd))))))) 
                                                            (abst_prj_a p1) 
                                                            (v_Vsd:
                                                             (zen.proof 
                                                                (zen.forall 
                                                                   _p_S1_T 
                                                                   (v_Vqd:
                                                                    (
                                                                    zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.forall 
                                                                    _p_S1_T 
                                                                    (v_Vrd:
                                                                    (zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vqd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vqd 
                                                                    v_Vrd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vrd)))))))) =>
                                                             zen.Rall 
                                                               _p_S1_T 
                                                               (v_Vqd:
                                                                (zen.term 
                                                                   _p_S1_T) =>
                                                                zen.forall 
                                                                  _p_S1_T 
                                                                  (v_Vrd:
                                                                   (zen.term 
                                                                    _p_S1_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vqd))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vqd 
                                                                    v_Vrd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vrd)))))) 
                                                               (abst_prj_a p1) 
                                                               (v_Vtd:
                                                                (zen.proof 
                                                                   (zen.forall 
                                                                    _p_S1_T 
                                                                    (v_Vrd:
                                                                    (zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vrd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vrd))))))) =>
                                                                zen.Rall 
                                                                  _p_S1_T 
                                                                  (v_Vrd:
                                                                   (zen.term 
                                                                    _p_S1_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vrd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) v_Vrd))))) 
                                                                  (abst_prj_a 
                                                                    p3) 
                                                                  (v_Vge:
                                                                   (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3))))))) =>
                                                                   zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3))))) 
                                                                    (v_Vdd:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p1)))) 
                                                                    v_Vod 
                                                                    v_Vdd) 
                                                                    (v_Vhe:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))) 
                                                                    (v_Vad:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))) 
                                                                    v_Vae 
                                                                    v_Vad) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))) 
                                                                    v_Vae 
                                                                    v_Vad) 
                                                                    v_Vhe) 
                                                                    v_Vge) 
                                                                  v_Vtd) 
                                                               v_Vsd) 
                                                            _p_S1_equal_transitive) 
                                                         v_Vnd) v_Ved) 
                                                   (v_Vzd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p3)) 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_a 
                                                                    p3)))))) =>
                                                    zen.Rsubst _p_S1_T 
                                                      (v_Vxd:
                                                       (zen.term _p_S1_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_S1_equal 
                                                                  (abst_prj_a 
                                                                    p1) v_Vxd) 
                                                               (_p_S1_equal 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_a 
                                                                    p3))))) 
                                                      (abst_prj_a p3) 
                                                      (abst_prj_a p3) 
                                                      (v_Vie:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_S1_T 
                                                                   (abst_prj_a 
                                                                    p3) 
                                                                   (abst_prj_a 
                                                                    p3))))) =>
                                                       zen.Rnoteq _p_S1_T 
                                                         (abst_prj_a p3) 
                                                         v_Vie) 
                                                      (v_Vzd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)) 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_a 
                                                                    p3)))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (_p_S1_equal 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_a p3)) 
                                                         v_Vzd) v_Vzd) v_Vzd) 
                                                (v_Vae:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal 
                                                             (abst_prj_a p1) 
                                                             (abst_prj_a p3))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_a p3)))) 
                                                   v_Vae v_Vad) v_Vae) v_Vde) 
                                          v_Vce) v_Vbe) v_Vsd) 
                                 _p_S1_equal_transitive) 
                              (v_Vee:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal (abst_prj_a p2) 
                                              (abst_prj_a p3)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S1_equal (abst_prj_a p2) 
                                          (abst_prj_a p3)))) v_Vyc v_Vee)))) 
                     (v_Vje:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal (abst_prj_b p1) 
                                     (abst_prj_b p3)))))) =>
                      zen.Rcut 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_S2_T (abst_prj_b p1) 
                                    (abst_prj_b p1)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal (abst_prj_b p1) 
                                       (abst_prj_b p1)))))) 
                        (v_Vke:
                         (zen.proof 
                            (zen.and 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_S2_T (abst_prj_b p1) 
                                        (abst_prj_b p1)))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S2_equal (abst_prj_b p1) 
                                           (abst_prj_b p1))))))) =>
                         zen.Rand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_S2_T (abst_prj_b p1) 
                                    (abst_prj_b p1)))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal (abst_prj_b p1) 
                                       (abst_prj_b p1))))) 
                           (v_Vle:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_S2_T (abst_prj_b p1) 
                                        (abst_prj_b p1))))) =>
                            v_Vme:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S2_equal (abst_prj_b p1) 
                                           (abst_prj_b p1)))))) =>
                            zen.Rnoteq _p_S2_T (abst_prj_b p1) v_Vle) v_Vke) 
                        (v_Vne:
                         (zen.proof 
                            (zen.not 
                               (zen.and 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_S2_T (abst_prj_b p1) 
                                           (abst_prj_b p1)))) 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal (abst_prj_b p1) 
                                              (abst_prj_b p1)))))))) =>
                         zen.Rcut 
                           (zen.triangle 
                              (zen.equal _p_S2_T (abst_prj_b p2) 
                                 (abst_prj_b p3))) 
                           (v_Voe:
                            (zen.proof 
                               (zen.triangle 
                                  (zen.equal _p_S2_T (abst_prj_b p2) 
                                     (abst_prj_b p3)))) =>
                            zen.Rsubst basics.bool__t 
                              (v_Vgd:(zen.term basics.bool__t) =>
                               zen.triangle (focal.is_true v_Vgd)) 
                              (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)) 
                              (_p_S2_equal (abst_prj_b p1) (abst_prj_b p3)) 
                              (v_Vpe:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_S2_equal (abst_prj_b p1) 
                                              (abst_prj_b p2)) 
                                           (_p_S2_equal (abst_prj_b p1) 
                                              (abst_prj_b p3)))))) =>
                               zen.Rsubst _p_S2_T 
                                 (v_Vqe:(zen.term _p_S2_T) =>
                                  zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_S2_equal v_Vqe (abst_prj_b p2)) 
                                          (_p_S2_equal (abst_prj_b p1) 
                                             (abst_prj_b p3))))) 
                                 (abst_prj_b p1) (abst_prj_b p1) 
                                 (v_Vle:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_S2_T 
                                              (abst_prj_b p1) (abst_prj_b p1))))) =>
                                  zen.Rnotand 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_S2_T (abst_prj_b p1) 
                                             (abst_prj_b p1)))) 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal (abst_prj_b p1) 
                                                (abst_prj_b p1))))) 
                                    (v_Vre:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_S2_T 
                                                    (abst_prj_b p1) 
                                                    (abst_prj_b p1)))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (zen.equal _p_S2_T (abst_prj_b p1) 
                                             (abst_prj_b p1))) 
                                       (v_Vse:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal _p_S2_T 
                                                 (abst_prj_b p1) 
                                                 (abst_prj_b p1)))) =>
                                        zen.Rcut 
                                          (zen.triangle 
                                             (zen.equal _p_S2_T 
                                                (abst_prj_b p1) 
                                                (abst_prj_b p1))) 
                                          (v_Vse:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal _p_S2_T 
                                                    (abst_prj_b p1) 
                                                    (abst_prj_b p1)))) =>
                                           zen.Rsubst _p_S2_T 
                                             (v_Vte:(zen.term _p_S2_T) =>
                                              zen.triangle 
                                                (zen.equal _p_S2_T v_Vte 
                                                   (abst_prj_b p1))) 
                                             (abst_prj_b p1) (abst_prj_b p1) 
                                             (v_Vle:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_S2_T 
                                                          (abst_prj_b p1) 
                                                          (abst_prj_b p1))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (zen.equal _p_S2_T 
                                                      (abst_prj_b p1) 
                                                      (abst_prj_b p1))) 
                                                v_Vse v_Vle) 
                                             (v_Vse:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (zen.equal _p_S2_T 
                                                       (abst_prj_b p1) 
                                                       (abst_prj_b p1)))) =>
                                              zen.Rsubst _p_S2_T 
                                                (v_Vue:(zen.term _p_S2_T) =>
                                                 zen.triangle 
                                                   (zen.equal _p_S2_T 
                                                      (abst_prj_b p1) v_Vue)) 
                                                (abst_prj_b p1) 
                                                (abst_prj_b p1) 
                                                (v_Vle:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_S2_T 
                                                             (abst_prj_b p1) 
                                                             (abst_prj_b p1))))) =>
                                                 zen.Rnoteq _p_S2_T 
                                                   (abst_prj_b p1) v_Vle) 
                                                (v_Vse:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal _p_S2_T 
                                                          (abst_prj_b p1) 
                                                          (abst_prj_b p1)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (zen.equal _p_S2_T 
                                                         (abst_prj_b p1) 
                                                         (abst_prj_b p1))) 
                                                   v_Vse v_Vle) v_Vse) v_Vse) 
                                          (v_Vle:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_S2_T 
                                                       (abst_prj_b p1) 
                                                       (abst_prj_b p1))))) =>
                                           zen.Rnoteq _p_S2_T 
                                             (abst_prj_b p1) v_Vle)) v_Vre) 
                                    (v_Vve:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal 
                                                       (abst_prj_b p1) 
                                                       (abst_prj_b p1))))))) =>
                                     zen.Rnotnot 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal (abst_prj_b p1) 
                                                (abst_prj_b p1)))) 
                                       (v_Vwe:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal 
                                                    (abst_prj_b p1) 
                                                    (abst_prj_b p1))))) =>
                                        zen.Rall _p_S2_T 
                                          (v_Vxe:(zen.term _p_S2_T) =>
                                           zen.forall _p_S2_T 
                                             (v_Vye:(zen.term _p_S2_T) =>
                                              zen.forall _p_S2_T 
                                                (v_Vze:(zen.term _p_S2_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal v_Vxe 
                                                            v_Vye))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               v_Vye v_Vze))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               v_Vxe v_Vze))))))) 
                                          (abst_prj_b p1) 
                                          (v_Vaf:
                                           (zen.proof 
                                              (zen.forall _p_S2_T 
                                                 (v_Vye:(zen.term _p_S2_T) =>
                                                  zen.forall _p_S2_T 
                                                    (v_Vze:
                                                     (zen.term _p_S2_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal 
                                                                (abst_prj_b 
                                                                   p1) v_Vye))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   v_Vye 
                                                                   v_Vze))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) v_Vze)))))))) =>
                                           zen.Rall _p_S2_T 
                                             (v_Vye:(zen.term _p_S2_T) =>
                                              zen.forall _p_S2_T 
                                                (v_Vze:(zen.term _p_S2_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b p1) 
                                                            v_Vye))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               v_Vye v_Vze))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               v_Vze)))))) 
                                             (abst_prj_b p1) 
                                             (v_Vbf:
                                              (zen.proof 
                                                 (zen.forall _p_S2_T 
                                                    (v_Vze:
                                                     (zen.term _p_S2_T) =>
                                                     zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal 
                                                                (abst_prj_b 
                                                                   p1) 
                                                                (abst_prj_b 
                                                                   p1)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) v_Vze))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) v_Vze))))))) =>
                                              zen.Rall _p_S2_T 
                                                (v_Vze:(zen.term _p_S2_T) =>
                                                 zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b p1) 
                                                            (abst_prj_b p1)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               v_Vze))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               v_Vze))))) 
                                                (abst_prj_b p2) 
                                                (v_Vcf:
                                                 (zen.proof 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal 
                                                                (abst_prj_b 
                                                                   p1) 
                                                                (abst_prj_b 
                                                                   p1)))) 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p2)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p2))))))) =>
                                                 zen.Rimply 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b p1) 
                                                            (abst_prj_b p1)))) 
                                                   (zen.imp 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               (abst_prj_b p2)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               (abst_prj_b p2))))) 
                                                   (v_Vme:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p1)))))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               (abst_prj_b p1)))) 
                                                      v_Vwe v_Vme) 
                                                   (v_Vdf:
                                                    (zen.proof 
                                                       (zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p2)))) 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p2)))))) =>
                                                    zen.Rimply 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               (abst_prj_b p2)))) 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               (abst_prj_b p2)))) 
                                                      (v_Vef:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p2)))))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p2)))) 
                                                         v_Vxc v_Vef) 
                                                      (v_Vxc:
                                                       (zen.proof 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p2))))) =>
                                                       zen.Rsubst 
                                                         basics.bool__t 
                                                         (v_Vgd:
                                                          (zen.term 
                                                             basics.bool__t) =>
                                                          zen.triangle 
                                                            (focal.is_true 
                                                               v_Vgd)) 
                                                         (_p_S2_equal 
                                                            (abst_prj_b p1) 
                                                            (abst_prj_b p2)) 
                                                         (_p_S2_equal 
                                                            (abst_prj_b p1) 
                                                            (abst_prj_b p3)) 
                                                         (v_Vpe:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))))) =>
                                                          zen.Rsubst _p_S2_T 
                                                            (v_Vqe:
                                                             (zen.term 
                                                                _p_S2_T) =>
                                                             zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    v_Vqe 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3))))) 
                                                            (abst_prj_b p1) 
                                                            (abst_prj_b p1) 
                                                            (v_Vle:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S2_T 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) =>
                                                             zen.Rnoteq 
                                                               _p_S2_T 
                                                               (abst_prj_b p1) 
                                                               v_Vle) 
                                                            (v_Vpe:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))))) =>
                                                             zen.Rsubst 
                                                               _p_S2_T 
                                                               (v_Vff:
                                                                (zen.term 
                                                                   _p_S2_T) =>
                                                                zen.not 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vff) 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3))))) 
                                                               (abst_prj_b p2) 
                                                               (abst_prj_b p3) 
                                                               (v_Vgf:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S2_T 
                                                                    (abst_prj_b 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p3))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S2_T 
                                                                    (abst_prj_b 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p3))) 
                                                                  v_Voe v_Vgf) 
                                                               (v_Vhf:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)) 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))))) =>
                                                                zen.Rnoteq 
                                                                  basics.bool__t 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)) 
                                                                  v_Vhf) 
                                                               v_Vpe) v_Vpe) 
                                                         (v_Vif:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3))))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))) 
                                                            v_Vif v_Vje) 
                                                         v_Vxc) v_Vdf) v_Vcf) 
                                                v_Vbf) v_Vaf) 
                                          _p_S2_equal_transitive) v_Vve) 
                                    v_Vne) 
                                 (v_Vpe:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_S2_equal (abst_prj_b p1) 
                                                 (abst_prj_b p2)) 
                                              (_p_S2_equal (abst_prj_b p1) 
                                                 (abst_prj_b p3)))))) =>
                                  zen.Rsubst _p_S2_T 
                                    (v_Vff:(zen.term _p_S2_T) =>
                                     zen.not 
                                       (zen.triangle 
                                          (zen.equal basics.bool__t 
                                             (_p_S2_equal (abst_prj_b p1) 
                                                v_Vff) 
                                             (_p_S2_equal (abst_prj_b p1) 
                                                (abst_prj_b p3))))) 
                                    (abst_prj_b p2) (abst_prj_b p3) 
                                    (v_Vgf:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_S2_T 
                                                 (abst_prj_b p2) 
                                                 (abst_prj_b p3))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal _p_S2_T (abst_prj_b p2) 
                                             (abst_prj_b p3))) v_Voe v_Vgf) 
                                    (v_Vhf:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (_p_S2_equal 
                                                    (abst_prj_b p1) 
                                                    (abst_prj_b p3)) 
                                                 (_p_S2_equal 
                                                    (abst_prj_b p1) 
                                                    (abst_prj_b p3)))))) =>
                                     zen.Rnoteq basics.bool__t 
                                       (_p_S2_equal (abst_prj_b p1) 
                                          (abst_prj_b p3)) v_Vhf) v_Vpe) 
                                 v_Vpe) 
                              (v_Vif:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S2_equal (abst_prj_b p1) 
                                           (abst_prj_b p3))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S2_equal (abst_prj_b p1) 
                                          (abst_prj_b p3)))) v_Vif v_Vje) 
                              v_Vxc) 
                           (v_Vgf:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_S2_T (abst_prj_b p2) 
                                        (abst_prj_b p3))))) =>
                            zen.Rcut 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal (abst_prj_b p2) 
                                       (abst_prj_b p3)))) 
                              (v_Vzc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S2_equal (abst_prj_b p2) 
                                           (abst_prj_b p3))))) =>
                               zen.Rall _p_S2_T 
                                 (v_Vxe:(zen.term _p_S2_T) =>
                                  zen.forall _p_S2_T 
                                    (v_Vye:(zen.term _p_S2_T) =>
                                     zen.forall _p_S2_T 
                                       (v_Vze:(zen.term _p_S2_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vxe v_Vye))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal v_Vye v_Vze))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal v_Vxe v_Vze))))))) 
                                 (abst_prj_b p1) 
                                 (v_Vaf:
                                  (zen.proof 
                                     (zen.forall _p_S2_T 
                                        (v_Vye:(zen.term _p_S2_T) =>
                                         zen.forall _p_S2_T 
                                           (v_Vze:(zen.term _p_S2_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal 
                                                       (abst_prj_b p1) v_Vye))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal v_Vye 
                                                          v_Vze))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p1) 
                                                          v_Vze)))))))) =>
                                  zen.Rall _p_S2_T 
                                    (v_Vye:(zen.term _p_S2_T) =>
                                     zen.forall _p_S2_T 
                                       (v_Vze:(zen.term _p_S2_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal (abst_prj_b p1) 
                                                   v_Vye))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal v_Vye v_Vze))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b p1) v_Vze)))))) 
                                    (abst_prj_b p2) 
                                    (v_Vjf:
                                     (zen.proof 
                                        (zen.forall _p_S2_T 
                                           (v_Vze:(zen.term _p_S2_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal 
                                                       (abst_prj_b p1) 
                                                       (abst_prj_b p2)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p2) 
                                                          v_Vze))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p1) 
                                                          v_Vze))))))) =>
                                     zen.Rall _p_S2_T 
                                       (v_Vze:(zen.term _p_S2_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal (abst_prj_b p1) 
                                                   (abst_prj_b p2)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b p2) v_Vze))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b p1) v_Vze))))) 
                                       (abst_prj_b p3) 
                                       (v_Vkf:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal 
                                                       (abst_prj_b p1) 
                                                       (abst_prj_b p2)))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p2) 
                                                          (abst_prj_b p3)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p1) 
                                                          (abst_prj_b p3))))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal (abst_prj_b p1) 
                                                   (abst_prj_b p2)))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b p2) 
                                                      (abst_prj_b p3)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b p1) 
                                                      (abst_prj_b p3))))) 
                                          (v_Vef:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p1) 
                                                          (abst_prj_b p2)))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b p1) 
                                                      (abst_prj_b p2)))) 
                                             v_Vxc v_Vef) 
                                          (v_Vlf:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p2) 
                                                          (abst_prj_b p3)))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p1) 
                                                          (abst_prj_b p3)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b p2) 
                                                      (abst_prj_b p3)))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b p1) 
                                                      (abst_prj_b p3)))) 
                                             (v_Vmf:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal 
                                                             (abst_prj_b p2) 
                                                             (abst_prj_b p3)))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b p2) 
                                                         (abst_prj_b p3)))) 
                                                v_Vzc v_Vmf) 
                                             (v_Vif:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b p1) 
                                                          (abst_prj_b p3))))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vgd:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vgd)) 
                                                (_p_S2_equal (abst_prj_b p1) 
                                                   (abst_prj_b p3)) 
                                                (_p_S2_equal (abst_prj_b p1) 
                                                   (abst_prj_b p3)) 
                                                (v_Vhf:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S2_equal 
                                                                (abst_prj_b 
                                                                   p1) 
                                                                (abst_prj_b 
                                                                   p3)) 
                                                             (_p_S2_equal 
                                                                (abst_prj_b 
                                                                   p1) 
                                                                (abst_prj_b 
                                                                   p3)))))) =>
                                                 zen.Rsubst _p_S2_T 
                                                   (v_Vnf:
                                                    (zen.term _p_S2_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_S2_equal 
                                                               v_Vnf 
                                                               (abst_prj_b p3)) 
                                                            (_p_S2_equal 
                                                               (abst_prj_b p1) 
                                                               (abst_prj_b p3))))) 
                                                   (abst_prj_b p1) 
                                                   (abst_prj_b p1) 
                                                   (v_Vle:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S2_T 
                                                                (abst_prj_b 
                                                                   p1) 
                                                                (abst_prj_b 
                                                                   p1))))) =>
                                                    zen.Rnotand 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_S2_T 
                                                               (abst_prj_b p1) 
                                                               (abst_prj_b p1)))) 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1))))) 
                                                      (v_Vre:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_S2_T 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_S2_T 
                                                               (abst_prj_b p1) 
                                                               (abst_prj_b p1))) 
                                                         (v_Vse:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_S2_T 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p1)))) =>
                                                          zen.Reqsym _p_S2_T 
                                                            (abst_prj_b p1) 
                                                            (abst_prj_b p1) 
                                                            v_Vse v_Vle) 
                                                         v_Vre) 
                                                      (v_Vve:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))))) =>
                                                       zen.Rnotnot 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1)))) 
                                                         (v_Vwe:
                                                          (zen.proof 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) =>
                                                          zen.Rall _p_S2_T 
                                                            (v_Vxe:
                                                             (zen.term 
                                                                _p_S2_T) =>
                                                             zen.forall 
                                                               _p_S2_T 
                                                               (v_Vye:
                                                                (zen.term 
                                                                   _p_S2_T) =>
                                                                zen.forall 
                                                                  _p_S2_T 
                                                                  (v_Vze:
                                                                   (zen.term 
                                                                    _p_S2_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vxe 
                                                                    v_Vye))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vye 
                                                                    v_Vze))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vxe 
                                                                    v_Vze))))))) 
                                                            (abst_prj_b p1) 
                                                            (v_Vaf:
                                                             (zen.proof 
                                                                (zen.forall 
                                                                   _p_S2_T 
                                                                   (v_Vye:
                                                                    (
                                                                    zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.forall 
                                                                    _p_S2_T 
                                                                    (v_Vze:
                                                                    (zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vye))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vye 
                                                                    v_Vze))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vze)))))))) =>
                                                             zen.Rall 
                                                               _p_S2_T 
                                                               (v_Vye:
                                                                (zen.term 
                                                                   _p_S2_T) =>
                                                                zen.forall 
                                                                  _p_S2_T 
                                                                  (v_Vze:
                                                                   (zen.term 
                                                                    _p_S2_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vye))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vye 
                                                                    v_Vze))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vze)))))) 
                                                               (abst_prj_b p1) 
                                                               (v_Vbf:
                                                                (zen.proof 
                                                                   (zen.forall 
                                                                    _p_S2_T 
                                                                    (v_Vze:
                                                                    (zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vze))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vze))))))) =>
                                                                zen.Rall 
                                                                  _p_S2_T 
                                                                  (v_Vze:
                                                                   (zen.term 
                                                                    _p_S2_T) =>
                                                                   zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vze))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) v_Vze))))) 
                                                                  (abst_prj_b 
                                                                    p3) 
                                                                  (v_Vof:
                                                                   (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3))))))) =>
                                                                   zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3))))) 
                                                                    (v_Vme:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))) 
                                                                    v_Vwe 
                                                                    v_Vme) 
                                                                    (v_Vpf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))) 
                                                                    (v_Vje:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))) 
                                                                    v_Vif 
                                                                    v_Vje) 
                                                                    (v_Vif:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))) 
                                                                    v_Vif 
                                                                    v_Vje) 
                                                                    v_Vpf) 
                                                                    v_Vof) 
                                                                  v_Vbf) 
                                                               v_Vaf) 
                                                            _p_S2_equal_transitive) 
                                                         v_Vve) v_Vne) 
                                                   (v_Vhf:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p3)) 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p3)))))) =>
                                                    zen.Rsubst _p_S2_T 
                                                      (v_Vff:
                                                       (zen.term _p_S2_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    p1) v_Vff) 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p3))))) 
                                                      (abst_prj_b p3) 
                                                      (abst_prj_b p3) 
                                                      (v_Vqf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_S2_T 
                                                                   (abst_prj_b 
                                                                    p3) 
                                                                   (abst_prj_b 
                                                                    p3))))) =>
                                                       zen.Rnoteq _p_S2_T 
                                                         (abst_prj_b p3) 
                                                         v_Vqf) 
                                                      (v_Vhf:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)) 
                                                                   (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p3)))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (_p_S2_equal 
                                                            (abst_prj_b p1) 
                                                            (abst_prj_b p3)) 
                                                         v_Vhf) v_Vhf) v_Vhf) 
                                                (v_Vif:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal 
                                                             (abst_prj_b p1) 
                                                             (abst_prj_b p3))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b p1) 
                                                            (abst_prj_b p3)))) 
                                                   v_Vif v_Vje) v_Vif) v_Vlf) 
                                          v_Vkf) v_Vjf) v_Vaf) 
                                 _p_S2_equal_transitive) 
                              (v_Vmf:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal (abst_prj_b p2) 
                                              (abst_prj_b p3)))))) =>
                               zen.Raxiom 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S2_equal (abst_prj_b p2) 
                                          (abst_prj_b p3)))) v_Vzc v_Vmf)))) 
                     v_Vvc) __A_1_2_LEMMA) __A_1_1_LEMMA))) 
        (zen.nnpp 
           (zen.and 
              (zen.triangle 
                 (focal.is_true (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3)))) 
              (zen.triangle 
                 (focal.is_true (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))))) 
           (v_Vac:
            (zen.proof 
               (zen.not 
                  (zen.and 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3)))) 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))))))) =>
            zen.Rall abst_T 
              (v_Vbc:(zen.term abst_T) =>
               zen.forall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S1_equal (abst_prj_a v_Vbc) 
                                (abst_prj_a v_Vcc)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal (abst_prj_b v_Vbc) 
                                (abst_prj_b v_Vcc))))))) p2 
              (v_Vdc:
               (zen.proof 
                  (zen.forall abst_T 
                     (v_Vcc:(zen.term abst_T) =>
                      zen.eqv 
                        (zen.triangle (focal.is_true (abst_equal p2 v_Vcc))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal (abst_prj_a p2) 
                                    (abst_prj_a v_Vcc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal (abst_prj_b p2) 
                                    (abst_prj_b v_Vcc)))))))) =>
               zen.Rall abst_T 
                 (v_Vcc:(zen.term abst_T) =>
                  zen.eqv 
                    (zen.triangle (focal.is_true (abst_equal p2 v_Vcc))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S1_equal (abst_prj_a p2) (abst_prj_a v_Vcc)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal (abst_prj_b p2) (abst_prj_b v_Vcc)))))) 
                 p3 
                 (v_Vec:
                  (zen.proof 
                     (zen.eqv 
                        (zen.triangle (focal.is_true (abst_equal p2 p3))) 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))))))) =>
                  zen.Requiv 
                    (zen.triangle (focal.is_true (abst_equal p2 p3))) 
                    (zen.and 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))))) 
                    (v_Vfc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal p2 p3))))) =>
                     v_Vac:
                     (zen.proof 
                        (zen.not 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S1_equal (abst_prj_a p2) 
                                       (abst_prj_a p3)))) 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal (abst_prj_b p2) 
                                       (abst_prj_b p3))))))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal p2 p3))) H2 
                       v_Vfc) 
                    (H2:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_equal p2 p3)))) =>
                     v_Vgc:
                     (zen.proof 
                        (zen.and 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3)))))) =>
                     zen.Raxiom 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal (abst_prj_a p2) (abst_prj_a p3)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal (abst_prj_b p2) (abst_prj_b p3))))) 
                       v_Vgc v_Vac) v_Vec) v_Vdc) abst_def_equal))) 
       (zen.nnpp 
          (zen.and 
             (zen.triangle 
                (focal.is_true (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2)))) 
             (zen.triangle 
                (focal.is_true (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))) 
          (v_Vac:
           (zen.proof 
              (zen.not 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))))) =>
           zen.Rall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a v_Vbc) 
                               (abst_prj_a v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b v_Vbc) 
                               (abst_prj_b v_Vcc))))))) p1 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle (focal.is_true (abst_equal p1 v_Vcc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal (abst_prj_a p1) 
                                   (abst_prj_a v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal (abst_prj_b p1) 
                                   (abst_prj_b v_Vcc)))))))) =>
              zen.Rall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_equal p1 v_Vcc))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a p1) (abst_prj_a v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b p1) (abst_prj_b v_Vcc)))))) 
                p2 
                (v_Vec:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle (focal.is_true (abst_equal p1 p2))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))))) =>
                 zen.Requiv 
                   (zen.triangle (focal.is_true (abst_equal p1 p2))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_equal p1 p2))))) =>
                    v_Vac:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal (abst_prj_a p1) 
                                      (abst_prj_a p2)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal (abst_prj_b p1) 
                                      (abst_prj_b p2))))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (abst_equal p1 p2))) H1 
                      v_Vfc) 
                   (H1:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal p1 p2)))) =>
                    v_Vgc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))))) =>
                    zen.Raxiom 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2)))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2))))) 
                      v_Vgc v_Vac) v_Vec) v_Vdc) abst_def_equal))).

def Imp_pair__def_equal1 :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) ->
  _p_S1_equal_symmetric:(dk_logic.eP 
                           (dk_logic.forall _p_S1_T 
                              (x:(cc.eT _p_S1_T) =>
                               dk_logic.forall _p_S1_T 
                                 (y:(cc.eT _p_S1_T) =>
                                  dk_logic.imp 
                                    (dk_logic.ebP (_p_S1_equal x y)) 
                                    (dk_logic.ebP (_p_S1_equal y x)))))) ->
  _p_S1_equal_transitive:(dk_logic.eP 
                            (dk_logic.forall _p_S1_T 
                               (x:(cc.eT _p_S1_T) =>
                                dk_logic.forall _p_S1_T 
                                  (y:(cc.eT _p_S1_T) =>
                                   dk_logic.forall _p_S1_T 
                                     (z:(cc.eT _p_S1_T) =>
                                      dk_logic.imp 
                                        (dk_logic.ebP (_p_S1_equal x y)) 
                                        (dk_logic.imp 
                                           (dk_logic.ebP (_p_S1_equal y z)) 
                                           (dk_logic.ebP (_p_S1_equal x z)))))))) ->
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal_symmetric:(dk_logic.eP 
                           (dk_logic.forall _p_S2_T 
                              (x:(cc.eT _p_S2_T) =>
                               dk_logic.forall _p_S2_T 
                                 (y:(cc.eT _p_S2_T) =>
                                  dk_logic.imp 
                                    (dk_logic.ebP (_p_S2_equal x y)) 
                                    (dk_logic.ebP (_p_S2_equal y x)))))) ->
  _p_S2_equal_transitive:(dk_logic.eP 
                            (dk_logic.forall _p_S2_T 
                               (x:(cc.eT _p_S2_T) =>
                                dk_logic.forall _p_S2_T 
                                  (y:(cc.eT _p_S2_T) =>
                                   dk_logic.forall _p_S2_T 
                                     (z:(cc.eT _p_S2_T) =>
                                      dk_logic.imp 
                                        (dk_logic.ebP (_p_S2_equal x y)) 
                                        (dk_logic.imp 
                                           (dk_logic.ebP (_p_S2_equal y z)) 
                                           (dk_logic.ebP (_p_S2_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) ->
  abst_prj_a_is_first_of_pair:(dk_logic.eP 
                                 (dk_logic.forall _p_S1_T 
                                    (n1:(cc.eT _p_S1_T) =>
                                     dk_logic.forall _p_S2_T 
                                       (n2:(cc.eT _p_S2_T) =>
                                        dk_logic.ebP 
                                          (_p_S1_equal 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             n1))))) ->
  abst_def_equal:(dk_logic.eP 
                    (dk_logic.forall abst_T 
                       (p1:(cc.eT abst_T) =>
                        dk_logic.forall abst_T 
                          (p2:(cc.eT abst_T) =>
                           dk_logic.eqv (dk_logic.ebP (abst_equal p1 p2)) 
                             (dk_logic.and 
                                (dk_logic.ebP 
                                   (_p_S1_equal (abst_prj_a p1) 
                                      (abst_prj_a p2))) 
                                (dk_logic.ebP 
                                   (_p_S2_equal (abst_prj_b p1) 
                                      (abst_prj_b p2)))))))) ->
  abst_prj_b_is_snd_of_pair:(dk_logic.eP 
                               (dk_logic.forall _p_S1_T 
                                  (n1:(cc.eT _p_S1_T) =>
                                   dk_logic.forall _p_S2_T 
                                     (n2:(cc.eT _p_S2_T) =>
                                      dk_logic.ebP 
                                        (_p_S2_equal 
                                           (abst_prj_b (abst_constr n1 n2)) 
                                           n2))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S1_T 
       (n1:(cc.eT _p_S1_T) =>
        dk_logic.forall _p_S1_T 
          (n3:(cc.eT _p_S1_T) =>
           dk_logic.forall _p_S2_T 
             (n2:(cc.eT _p_S2_T) =>
              dk_logic.forall _p_S2_T 
                (n4:(cc.eT _p_S2_T) =>
                 dk_logic.eqv 
                   (dk_logic.ebP 
                      (abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) 
                   (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
                      (dk_logic.ebP (_p_S2_equal n2 n4))))))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  _p_S1_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (y:(cc.eT _p_S1_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S1_equal x y)) 
              (dk_logic.ebP (_p_S1_equal y x)))))) =>
  _p_S1_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (y:(cc.eT _p_S1_T) =>
            dk_logic.forall _p_S1_T 
              (z:(cc.eT _p_S1_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S1_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S1_equal y z)) 
                    (dk_logic.ebP (_p_S1_equal x z)))))))) =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  _p_S2_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) =>
         dk_logic.forall _p_S2_T 
           (y:(cc.eT _p_S2_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S2_equal x y)) 
              (dk_logic.ebP (_p_S2_equal y x)))))) =>
  _p_S2_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) =>
         dk_logic.forall _p_S2_T 
           (y:(cc.eT _p_S2_T) =>
            dk_logic.forall _p_S2_T 
              (z:(cc.eT _p_S2_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S2_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S2_equal y z)) 
                    (dk_logic.ebP (_p_S2_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) =>
  abst_prj_a_is_first_of_pair:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (n1:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S2_T 
           (n2:(cc.eT _p_S2_T) =>
            dk_logic.ebP (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1))))) =>
  abst_def_equal:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (p1:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (p2:(cc.eT abst_T) =>
            dk_logic.eqv (dk_logic.ebP (abst_equal p1 p2)) 
              (dk_logic.and 
                 (dk_logic.ebP (_p_S1_equal (abst_prj_a p1) (abst_prj_a p2))) 
                 (dk_logic.ebP (_p_S2_equal (abst_prj_b p1) (abst_prj_b p2)))))))) =>
  abst_prj_b_is_snd_of_pair:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (n1:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S2_T 
           (n2:(cc.eT _p_S2_T) =>
            dk_logic.ebP (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2))))) =>
  (__B_1_LEMMA:
   (n1:(cc.eT _p_S1_T) ->
    n3:(cc.eT _p_S1_T) ->
    n2:(cc.eT _p_S2_T) ->
    n4:(cc.eT _p_S2_T) ->
    H1:(dk_logic.eP 
          (dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) ->
    dk_logic.eP 
      (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
         (dk_logic.ebP (_p_S2_equal n2 n4)))) =>
   (__B_2_LEMMA:
    (n1:(cc.eT _p_S1_T) ->
     n3:(cc.eT _p_S1_T) ->
     n2:(cc.eT _p_S2_T) ->
     n4:(cc.eT _p_S2_T) ->
     H12:(dk_logic.eP (dk_logic.ebP (_p_S1_equal n1 n3))) ->
     H22:(dk_logic.eP (dk_logic.ebP (_p_S2_equal n2 n4))) ->
     dk_logic.eP 
       (dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) =>
    zen.nnpp 
      (zen.forall _p_S1_T 
         (v_Vzb:(zen.term _p_S1_T) =>
          zen.forall _p_S1_T 
            (v_Vac:(zen.term _p_S1_T) =>
             zen.forall _p_S2_T 
               (v_Vbc:(zen.term _p_S2_T) =>
                zen.forall _p_S2_T 
                  (v_Vcc:(zen.term _p_S2_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_constr v_Vzb v_Vbc) 
                              (abst_constr v_Vac v_Vcc)))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (_p_S1_equal v_Vzb v_Vac))) 
                        (zen.triangle 
                           (focal.is_true (_p_S2_equal v_Vbc v_Vcc))))))))) 
      (v_Vdc:
       (zen.proof 
          (zen.not 
             (zen.forall _p_S1_T 
                (v_Vzb:(zen.term _p_S1_T) =>
                 zen.forall _p_S1_T 
                   (v_Vac:(zen.term _p_S1_T) =>
                    zen.forall _p_S2_T 
                      (v_Vbc:(zen.term _p_S2_T) =>
                       zen.forall _p_S2_T 
                         (v_Vcc:(zen.term _p_S2_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr v_Vzb v_Vbc) 
                                     (abst_constr v_Vac v_Vcc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal v_Vzb v_Vac))) 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal v_Vbc v_Vcc))))))))))) =>
       zen.Rnotall _p_S1_T 
         (v_Vzb:(zen.term _p_S1_T) =>
          zen.forall _p_S1_T 
            (v_Vac:(zen.term _p_S1_T) =>
             zen.forall _p_S2_T 
               (v_Vbc:(zen.term _p_S2_T) =>
                zen.forall _p_S2_T 
                  (v_Vcc:(zen.term _p_S2_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_constr v_Vzb v_Vbc) 
                              (abst_constr v_Vac v_Vcc)))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (_p_S1_equal v_Vzb v_Vac))) 
                        (zen.triangle 
                           (focal.is_true (_p_S2_equal v_Vbc v_Vcc)))))))) 
         (v_Vec:(zen.term _p_S1_T) =>
          v_Vfc:
          (zen.proof 
             (zen.not 
                (zen.forall _p_S1_T 
                   (v_Vac:(zen.term _p_S1_T) =>
                    zen.forall _p_S2_T 
                      (v_Vbc:(zen.term _p_S2_T) =>
                       zen.forall _p_S2_T 
                         (v_Vcc:(zen.term _p_S2_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr v_Vec v_Vbc) 
                                     (abst_constr v_Vac v_Vcc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal v_Vec v_Vac))) 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal v_Vbc v_Vcc)))))))))) =>
          zen.Rnotall _p_S1_T 
            (v_Vac:(zen.term _p_S1_T) =>
             zen.forall _p_S2_T 
               (v_Vbc:(zen.term _p_S2_T) =>
                zen.forall _p_S2_T 
                  (v_Vcc:(zen.term _p_S2_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_constr v_Vec v_Vbc) 
                              (abst_constr v_Vac v_Vcc)))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (_p_S1_equal v_Vec v_Vac))) 
                        (zen.triangle 
                           (focal.is_true (_p_S2_equal v_Vbc v_Vcc))))))) 
            (v_Vgc:(zen.term _p_S1_T) =>
             v_Vhc:
             (zen.proof 
                (zen.not 
                   (zen.forall _p_S2_T 
                      (v_Vbc:(zen.term _p_S2_T) =>
                       zen.forall _p_S2_T 
                         (v_Vcc:(zen.term _p_S2_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr v_Vec v_Vbc) 
                                     (abst_constr v_Vgc v_Vcc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal v_Vbc v_Vcc))))))))) =>
             zen.Rnotall _p_S2_T 
               (v_Vbc:(zen.term _p_S2_T) =>
                zen.forall _p_S2_T 
                  (v_Vcc:(zen.term _p_S2_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_constr v_Vec v_Vbc) 
                              (abst_constr v_Vgc v_Vcc)))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                        (zen.triangle 
                           (focal.is_true (_p_S2_equal v_Vbc v_Vcc)))))) 
               (v_Vic:(zen.term _p_S2_T) =>
                v_Vjc:
                (zen.proof 
                   (zen.not 
                      (zen.forall _p_S2_T 
                         (v_Vcc:(zen.term _p_S2_T) =>
                          zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr v_Vec v_Vic) 
                                     (abst_constr v_Vgc v_Vcc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal v_Vic v_Vcc)))))))) =>
                zen.Rnotall _p_S2_T 
                  (v_Vcc:(zen.term _p_S2_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_constr v_Vec v_Vic) 
                              (abst_constr v_Vgc v_Vcc)))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                        (zen.triangle 
                           (focal.is_true (_p_S2_equal v_Vic v_Vcc))))) 
                  (v_Vkc:(zen.term _p_S2_T) =>
                   v_Vlc:
                   (zen.proof 
                      (zen.not 
                         (zen.eqv 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr v_Vec v_Vic) 
                                     (abst_constr v_Vgc v_Vkc)))) 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal v_Vic v_Vkc))))))) =>
                   zen.Rnotequiv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_constr v_Vec v_Vic) 
                              (abst_constr v_Vgc v_Vkc)))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                        (zen.triangle 
                           (focal.is_true (_p_S2_equal v_Vic v_Vkc)))) 
                     (v_Vmc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr v_Vec v_Vic) 
                                     (abst_constr v_Vgc v_Vkc)))))) =>
                      v_Vnc:
                      (zen.proof 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vic v_Vkc))))) =>
                      zen.Rand 
                        (zen.triangle 
                           (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                        (zen.triangle 
                           (focal.is_true (_p_S2_equal v_Vic v_Vkc))) 
                        (v_Voc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vec v_Vgc)))) =>
                         v_Vpc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vic v_Vkc)))) =>
                         zen.Rall _p_S1_T 
                           (v_Vzb:(zen.term _p_S1_T) =>
                            zen.forall _p_S1_T 
                              (v_Vac:(zen.term _p_S1_T) =>
                               zen.forall _p_S2_T 
                                 (v_Vbc:(zen.term _p_S2_T) =>
                                  zen.forall _p_S2_T 
                                    (v_Vcc:(zen.term _p_S2_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vzb v_Vac))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vbc v_Vcc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_constr v_Vzb v_Vbc) 
                                                   (abst_constr v_Vac v_Vcc))))))))) 
                           v_Vec 
                           (v_Vqc:
                            (zen.proof 
                               (zen.forall _p_S1_T 
                                  (v_Vac:(zen.term _p_S1_T) =>
                                   zen.forall _p_S2_T 
                                     (v_Vbc:(zen.term _p_S2_T) =>
                                      zen.forall _p_S2_T 
                                        (v_Vcc:(zen.term _p_S2_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vac))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vbc v_Vcc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr v_Vec 
                                                          v_Vbc) 
                                                       (abst_constr v_Vac 
                                                          v_Vcc)))))))))) =>
                            zen.Rall _p_S1_T 
                              (v_Vac:(zen.term _p_S1_T) =>
                               zen.forall _p_S2_T 
                                 (v_Vbc:(zen.term _p_S2_T) =>
                                  zen.forall _p_S2_T 
                                    (v_Vcc:(zen.term _p_S2_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vec v_Vac))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vbc v_Vcc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_constr v_Vec v_Vbc) 
                                                   (abst_constr v_Vac v_Vcc)))))))) 
                              v_Vgc 
                              (v_Vrc:
                               (zen.proof 
                                  (zen.forall _p_S2_T 
                                     (v_Vbc:(zen.term _p_S2_T) =>
                                      zen.forall _p_S2_T 
                                        (v_Vcc:(zen.term _p_S2_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vgc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vbc v_Vcc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr v_Vec 
                                                          v_Vbc) 
                                                       (abst_constr v_Vgc 
                                                          v_Vcc))))))))) =>
                               zen.Rall _p_S2_T 
                                 (v_Vbc:(zen.term _p_S2_T) =>
                                  zen.forall _p_S2_T 
                                    (v_Vcc:(zen.term _p_S2_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vec v_Vgc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vbc v_Vcc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_constr v_Vec v_Vbc) 
                                                   (abst_constr v_Vgc v_Vcc))))))) 
                                 v_Vic 
                                 (v_Vsc:
                                  (zen.proof 
                                     (zen.forall _p_S2_T 
                                        (v_Vcc:(zen.term _p_S2_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vgc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vic v_Vcc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr v_Vec 
                                                          v_Vic) 
                                                       (abst_constr v_Vgc 
                                                          v_Vcc)))))))) =>
                                  zen.Rall _p_S2_T 
                                    (v_Vcc:(zen.term _p_S2_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vec v_Vgc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vic v_Vcc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_constr v_Vec v_Vic) 
                                                   (abst_constr v_Vgc v_Vcc)))))) 
                                    v_Vkc 
                                    (v_Vtc:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vgc))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vic v_Vkc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr v_Vec 
                                                          v_Vic) 
                                                       (abst_constr v_Vgc 
                                                          v_Vkc))))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vec v_Vgc))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vic v_Vkc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_constr v_Vec v_Vic) 
                                                   (abst_constr v_Vgc v_Vkc))))) 
                                       (v_Vuc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vec v_Vgc))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal v_Vec v_Vgc))) 
                                          v_Voc v_Vuc) 
                                       (v_Vvc:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vic v_Vkc))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr v_Vec 
                                                          v_Vic) 
                                                       (abst_constr v_Vgc 
                                                          v_Vkc)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vic v_Vkc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_constr v_Vec v_Vic) 
                                                   (abst_constr v_Vgc v_Vkc)))) 
                                          (v_Vwc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal v_Vic 
                                                          v_Vkc))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal v_Vic v_Vkc))) 
                                             v_Vpc v_Vwc) 
                                          (v_Vxc:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr v_Vec 
                                                          v_Vic) 
                                                       (abst_constr v_Vgc 
                                                          v_Vkc))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_constr v_Vec 
                                                         v_Vic) 
                                                      (abst_constr v_Vgc 
                                                         v_Vkc)))) v_Vxc 
                                             v_Vmc) v_Vvc) v_Vtc) v_Vsc) 
                                 v_Vrc) v_Vqc) __B_2_LEMMA) v_Vnc) 
                     (v_Vxc:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr v_Vec v_Vic) 
                                  (abst_constr v_Vgc v_Vkc))))) =>
                      v_Vyc:
                      (zen.proof 
                         (zen.not 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal v_Vec v_Vgc))) 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal v_Vic v_Vkc)))))) =>
                      zen.Rall _p_S1_T 
                        (v_Vzb:(zen.term _p_S1_T) =>
                         zen.forall _p_S1_T 
                           (v_Vac:(zen.term _p_S1_T) =>
                            zen.forall _p_S2_T 
                              (v_Vbc:(zen.term _p_S2_T) =>
                               zen.forall _p_S2_T 
                                 (v_Vcc:(zen.term _p_S2_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr v_Vzb v_Vbc) 
                                             (abst_constr v_Vac v_Vcc)))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vzb v_Vac))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal v_Vbc v_Vcc)))))))) 
                        v_Vec 
                        (v_Vzc:
                         (zen.proof 
                            (zen.forall _p_S1_T 
                               (v_Vac:(zen.term _p_S1_T) =>
                                zen.forall _p_S2_T 
                                  (v_Vbc:(zen.term _p_S2_T) =>
                                   zen.forall _p_S2_T 
                                     (v_Vcc:(zen.term _p_S2_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr v_Vec v_Vbc) 
                                                 (abst_constr v_Vac v_Vcc)))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vac))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal v_Vbc v_Vcc))))))))) =>
                         zen.Rall _p_S1_T 
                           (v_Vac:(zen.term _p_S1_T) =>
                            zen.forall _p_S2_T 
                              (v_Vbc:(zen.term _p_S2_T) =>
                               zen.forall _p_S2_T 
                                 (v_Vcc:(zen.term _p_S2_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr v_Vec v_Vbc) 
                                             (abst_constr v_Vac v_Vcc)))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vec v_Vac))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal v_Vbc v_Vcc))))))) 
                           v_Vgc 
                           (v_Vad:
                            (zen.proof 
                               (zen.forall _p_S2_T 
                                  (v_Vbc:(zen.term _p_S2_T) =>
                                   zen.forall _p_S2_T 
                                     (v_Vcc:(zen.term _p_S2_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr v_Vec v_Vbc) 
                                                 (abst_constr v_Vgc v_Vcc)))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vgc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal v_Vbc v_Vcc)))))))) =>
                            zen.Rall _p_S2_T 
                              (v_Vbc:(zen.term _p_S2_T) =>
                               zen.forall _p_S2_T 
                                 (v_Vcc:(zen.term _p_S2_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr v_Vec v_Vbc) 
                                             (abst_constr v_Vgc v_Vcc)))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vec v_Vgc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal v_Vbc v_Vcc)))))) 
                              v_Vic 
                              (v_Vbd:
                               (zen.proof 
                                  (zen.forall _p_S2_T 
                                     (v_Vcc:(zen.term _p_S2_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr v_Vec v_Vic) 
                                                 (abst_constr v_Vgc v_Vcc)))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vgc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal v_Vic v_Vcc))))))) =>
                               zen.Rall _p_S2_T 
                                 (v_Vcc:(zen.term _p_S2_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr v_Vec v_Vic) 
                                             (abst_constr v_Vgc v_Vcc)))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vec v_Vgc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal v_Vic v_Vcc))))) 
                                 v_Vkc 
                                 (v_Vcd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr v_Vec v_Vic) 
                                                 (abst_constr v_Vgc v_Vkc)))) 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vgc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal v_Vic v_Vkc)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr v_Vec v_Vic) 
                                             (abst_constr v_Vgc v_Vkc)))) 
                                    (zen.and 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vec v_Vgc))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal v_Vic v_Vkc)))) 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_constr v_Vec v_Vic) 
                                                    (abst_constr v_Vgc v_Vkc)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr v_Vec v_Vic) 
                                                (abst_constr v_Vgc v_Vkc)))) 
                                       v_Vxc v_Vmc) 
                                    (v_Vnc:
                                     (zen.proof 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vec v_Vgc))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal v_Vic v_Vkc))))) =>
                                     zen.Raxiom 
                                       (zen.and 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal v_Vec v_Vgc))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vic v_Vkc)))) 
                                       v_Vnc v_Vyc) v_Vcd) v_Vbd) v_Vad) 
                           v_Vzc) __B_1_LEMMA) v_Vlc) v_Vjc) v_Vhc) v_Vfc) 
         v_Vdc)) 
     (n1:(cc.eT _p_S1_T) =>
      n3:(cc.eT _p_S1_T) =>
      n2:(cc.eT _p_S2_T) =>
      n4:(cc.eT _p_S2_T) =>
      H12:(dk_logic.eP (dk_logic.ebP (_p_S1_equal n1 n3))) =>
      H22:(dk_logic.eP (dk_logic.ebP (_p_S2_equal n2 n4))) =>
      (__B_2_1_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))) =>
       (__B_2_2_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))) =>
        (__B_2_3_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                  (abst_prj_a (abst_constr n3 n4))))) =>
         (__B_2_4_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP 
                (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                   (abst_prj_b (abst_constr n3 n4))))) =>
          zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) 
            (v_Vac:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))))) =>
             zen.Rall abst_T 
               (v_Vbc:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vcc:(zen.term abst_T) =>
                   zen.eqv 
                     (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal (abst_prj_a v_Vbc) 
                                 (abst_prj_a v_Vcc)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S2_equal (abst_prj_b v_Vbc) 
                                 (abst_prj_b v_Vcc))))))) 
               (abst_constr n1 n2) 
               (v_Vdc:
                (zen.proof 
                   (zen.forall abst_T 
                      (v_Vcc:(zen.term abst_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr n1 n2) v_Vcc))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a v_Vcc)))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr n1 n2)) 
                                     (abst_prj_b v_Vcc)))))))) =>
                zen.Rall abst_T 
                  (v_Vcc:(zen.term abst_T) =>
                   zen.eqv 
                     (zen.triangle 
                        (focal.is_true (abst_equal (abst_constr n1 n2) v_Vcc))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                 (abst_prj_a v_Vcc)))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                 (abst_prj_b v_Vcc)))))) (abst_constr n3 n4) 
                  (v_Vec:
                   (zen.proof 
                      (zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr n1 n2) 
                                  (abst_constr n3 n4)))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n3 n4))))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr n1 n2)) 
                                     (abst_prj_b (abst_constr n3 n4)))))))) =>
                   zen.Requiv 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal (abst_constr n1 n2) 
                              (abst_constr n3 n4)))) 
                     (zen.and 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                 (abst_prj_a (abst_constr n3 n4))))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                 (abst_prj_b (abst_constr n3 n4)))))) 
                     (v_Vac:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr n1 n2) 
                                     (abst_constr n3 n4)))))) =>
                      v_Vfc:
                      (zen.proof 
                         (zen.not 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n3 n4))))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S2_equal 
                                        (abst_prj_b (abst_constr n1 n2)) 
                                        (abst_prj_b (abst_constr n3 n4)))))))) =>
                      zen.Rnotand 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                 (abst_prj_a (abst_constr n3 n4))))) 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                 (abst_prj_b (abst_constr n3 n4))))) 
                        (v_Vgc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n3 n4))))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal 
                                    (abst_prj_a (abst_constr n1 n2)) 
                                    (abst_prj_a (abst_constr n3 n4))))) 
                           __B_2_3_LEMMA v_Vgc) 
                        (v_Vhc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S2_equal 
                                        (abst_prj_b (abst_constr n1 n2)) 
                                        (abst_prj_b (abst_constr n3 n4))))))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) 
                                    (abst_prj_b (abst_constr n3 n4))))) 
                           __B_2_4_LEMMA v_Vhc) v_Vfc) 
                     (v_Vic:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr n1 n2) 
                                  (abst_constr n3 n4))))) =>
                      v_Vjc:
                      (zen.proof 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n3 n4))))) 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr n1 n2)) 
                                     (abst_prj_b (abst_constr n3 n4))))))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal (abst_constr n1 n2) 
                                 (abst_constr n3 n4)))) v_Vic v_Vac) v_Vec) 
                  v_Vdc) abst_def_equal)) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                       (abst_prj_b (abst_constr n3 n4))))) 
              (v_Vkc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                              (abst_prj_b (abst_constr n3 n4))))))) =>
               zen.Rcut 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal _p_S2_T 
                             (abst_prj_b (abst_constr n1 n2)) 
                             (abst_prj_b (abst_constr n1 n2))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                (abst_prj_b (abst_constr n1 n2))))))) 
                 (v_Vlc:
                  (zen.proof 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_S2_T 
                                 (abst_prj_b (abst_constr n1 n2)) 
                                 (abst_prj_b (abst_constr n1 n2))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) 
                                    (abst_prj_b (abst_constr n1 n2)))))))) =>
                  zen.Rand 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal _p_S2_T 
                             (abst_prj_b (abst_constr n1 n2)) 
                             (abst_prj_b (abst_constr n1 n2))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                (abst_prj_b (abst_constr n1 n2)))))) 
                    (v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_S2_T 
                                 (abst_prj_b (abst_constr n1 n2)) 
                                 (abst_prj_b (abst_constr n1 n2)))))) =>
                     v_Vnc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) 
                                    (abst_prj_b (abst_constr n1 n2))))))) =>
                     zen.Rnoteq _p_S2_T (abst_prj_b (abst_constr n1 n2)) 
                       v_Vmc) v_Vlc) 
                 (v_Voc:
                  (zen.proof 
                     (zen.not 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_S2_T 
                                    (abst_prj_b (abst_constr n1 n2)) 
                                    (abst_prj_b (abst_constr n1 n2))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (abst_prj_b (abst_constr n1 n2))))))))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (zen.equal _p_S2_T n4 (abst_prj_b (abst_constr n3 n4)))) 
                    (v_Vpc:
                     (zen.proof 
                        (zen.triangle 
                           (zen.equal _p_S2_T n4 
                              (abst_prj_b (abst_constr n3 n4))))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vqc:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vqc)) 
                       (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4) 
                       (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                          (abst_prj_b (abst_constr n3 n4))) 
                       (v_Vrc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) n4) 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (abst_prj_b (abst_constr n3 n4))))))) =>
                        zen.Rsubst _p_S2_T 
                          (v_Vsc:(zen.term _p_S2_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_S2_equal v_Vsc n4) 
                                   (_p_S2_equal 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (abst_prj_b (abst_constr n3 n4)))))) 
                          (abst_prj_b (abst_constr n1 n2)) 
                          (abst_prj_b (abst_constr n1 n2)) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_S2_T 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (abst_prj_b (abst_constr n1 n2)))))) =>
                           zen.Rnotand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_S2_T 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (abst_prj_b (abst_constr n1 n2))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n1 n2)))))) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_S2_T 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             (abst_prj_b (abst_constr n1 n2))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (zen.equal _p_S2_T 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (abst_prj_b (abst_constr n1 n2)))) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal _p_S2_T 
                                          (abst_prj_b (abst_constr n1 n2)) 
                                          (abst_prj_b (abst_constr n1 n2))))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (zen.equal _p_S2_T 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n1 n2)))) 
                                   (v_Vuc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal _p_S2_T 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             (abst_prj_b (abst_constr n1 n2))))) =>
                                    zen.Rsubst _p_S2_T 
                                      (v_Vvc:(zen.term _p_S2_T) =>
                                       zen.triangle 
                                         (zen.equal _p_S2_T v_Vvc 
                                            (abst_prj_b (abst_constr n1 n2)))) 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_S2_T 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal _p_S2_T 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)))) 
                                         v_Vuc v_Vmc) 
                                      (v_Vuc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal _p_S2_T 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2))))) =>
                                       zen.Rsubst _p_S2_T 
                                         (v_Vwc:(zen.term _p_S2_T) =>
                                          zen.triangle 
                                            (zen.equal _p_S2_T 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) v_Vwc)) 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_S2_T 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)))))) =>
                                          zen.Rnoteq _p_S2_T 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            v_Vmc) 
                                         (v_Vuc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal _p_S2_T 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal _p_S2_T 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)))) 
                                            v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_S2_T 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)))))) =>
                                    zen.Rnoteq _p_S2_T 
                                      (abst_prj_b (abst_constr n1 n2)) v_Vmc)) 
                                v_Vtc) 
                             (v_Vxc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n1 n2))))) 
                                (v_Vyc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S2_equal 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             (abst_prj_b (abst_constr n1 n2)))))) =>
                                 zen.Rall _p_S2_T 
                                   (v_Vzc:(zen.term _p_S2_T) =>
                                    zen.forall _p_S2_T 
                                      (v_Vad:(zen.term _p_S2_T) =>
                                       zen.forall _p_S2_T 
                                         (v_Vbd:(zen.term _p_S2_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal v_Vzc v_Vad))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal v_Vad v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal v_Vzc v_Vbd))))))) 
                                   (abst_prj_b (abst_constr n1 n2)) 
                                   (v_Vcd:
                                    (zen.proof 
                                       (zen.forall _p_S2_T 
                                          (v_Vad:(zen.term _p_S2_T) =>
                                           zen.forall _p_S2_T 
                                             (v_Vbd:(zen.term _p_S2_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) v_Vad))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal v_Vad 
                                                            v_Vbd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            v_Vbd)))))))) =>
                                    zen.Rall _p_S2_T 
                                      (v_Vad:(zen.term _p_S2_T) =>
                                       zen.forall _p_S2_T 
                                         (v_Vbd:(zen.term _p_S2_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     v_Vad))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal v_Vad v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        v_Vbd)))))) 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (v_Vdd:
                                       (zen.proof 
                                          (zen.forall _p_S2_T 
                                             (v_Vbd:(zen.term _p_S2_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            v_Vbd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            v_Vbd))))))) =>
                                       zen.Rall _p_S2_T 
                                         (v_Vbd:(zen.term _p_S2_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        v_Vbd))))) n4 
                                         (v_Ved:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4)))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        n4))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        n4)))) 
                                            (v_Vnc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2))))) 
                                               v_Vyc v_Vnc) 
                                            (v_Vfd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        n4))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        n4))) 
                                               (v_Vgd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               n4))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) n4))) 
                                                  __B_2_2_LEMMA v_Vgd) 
                                               (__B_2_2_LEMMA:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4)))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vqc:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vqc)) 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n4) 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n3 n4))) 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  n4) 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                   zen.Rsubst _p_S2_T 
                                                     (v_Vsc:
                                                      (zen.term _p_S2_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S2_equal 
                                                                 v_Vsc n4) 
                                                              (_p_S2_equal 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n3 n4)))))) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (v_Vmc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_S2_T 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)))))) =>
                                                      zen.Rnoteq _p_S2_T 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        v_Vmc) 
                                                     (v_Vrc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4) 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                      zen.Rsubst _p_S2_T 
                                                        (v_Vhd:
                                                         (zen.term _p_S2_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_S2_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vhd) 
                                                                 (_p_S2_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (
                                                                    abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4)))))) 
                                                        n4 
                                                        (abst_prj_b 
                                                           (abst_constr n3 n4)) 
                                                        (v_Vid:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_S2_T 
                                                                    n4 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4)))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S2_T n4 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n3 n4)))) 
                                                           v_Vpc v_Vid) 
                                                        (v_Vjd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))) 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (_p_S2_equal 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n3 n4))) 
                                                           v_Vjd) v_Vrc) 
                                                     v_Vrc) 
                                                  (v_Vkd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n3 n4)))))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n3 n4))))) 
                                                     v_Vkd v_Vkc) 
                                                  __B_2_2_LEMMA) v_Vfd) v_Ved) 
                                         v_Vdd) v_Vcd) _p_S2_equal_transitive) 
                                v_Vxc) v_Voc) 
                          (v_Vrc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n1 n2)) n4) 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n1 n2)) 
                                          (abst_prj_b (abst_constr n3 n4))))))) =>
                           zen.Rsubst _p_S2_T 
                             (v_Vhd:(zen.term _p_S2_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         v_Vhd) 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n3 n4)))))) 
                             n4 (abst_prj_b (abst_constr n3 n4)) 
                             (v_Vid:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_S2_T n4 
                                          (abst_prj_b (abst_constr n3 n4)))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (zen.equal _p_S2_T n4 
                                      (abst_prj_b (abst_constr n3 n4)))) 
                                v_Vpc v_Vid) 
                             (v_Vjd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_S2_equal 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             (abst_prj_b (abst_constr n3 n4))) 
                                          (_p_S2_equal 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             (abst_prj_b (abst_constr n3 n4))))))) =>
                              zen.Rnoteq basics.bool__t 
                                (_p_S2_equal 
                                   (abst_prj_b (abst_constr n1 n2)) 
                                   (abst_prj_b (abst_constr n3 n4))) v_Vjd) 
                             v_Vrc) v_Vrc) 
                       (v_Vkd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) 
                                    (abst_prj_b (abst_constr n3 n4)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal 
                                   (abst_prj_b (abst_constr n1 n2)) 
                                   (abst_prj_b (abst_constr n3 n4))))) v_Vkd 
                          v_Vkc) __B_2_2_LEMMA) 
                    (v_Vid:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_S2_T n4 
                                 (abst_prj_b (abst_constr n3 n4)))))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal n4 (abst_prj_b (abst_constr n3 n4))))) 
                       (v_Vld:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal n4 
                                    (abst_prj_b (abst_constr n3 n4)))))) =>
                        zen.Rall _p_S2_T 
                          (v_Vzc:(zen.term _p_S2_T) =>
                           zen.forall _p_S2_T 
                             (v_Vad:(zen.term _p_S2_T) =>
                              zen.forall _p_S2_T 
                                (v_Vbd:(zen.term _p_S2_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal v_Vzc v_Vad))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vad v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vzc v_Vbd))))))) 
                          (abst_prj_b (abst_constr n1 n2)) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.forall _p_S2_T 
                                 (v_Vad:(zen.term _p_S2_T) =>
                                  zen.forall _p_S2_T 
                                    (v_Vbd:(zen.term _p_S2_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) v_Vad))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vad v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   v_Vbd)))))))) =>
                           zen.Rall _p_S2_T 
                             (v_Vad:(zen.term _p_S2_T) =>
                              zen.forall _p_S2_T 
                                (v_Vbd:(zen.term _p_S2_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            v_Vad))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vad v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) v_Vbd)))))) 
                             n4 
                             (v_Vmd:
                              (zen.proof 
                                 (zen.forall _p_S2_T 
                                    (v_Vbd:(zen.term _p_S2_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) n4))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal n4 v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   v_Vbd))))))) =>
                              zen.Rall _p_S2_T 
                                (v_Vbd:(zen.term _p_S2_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            n4))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal n4 v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) v_Vbd))))) 
                                (abst_prj_b (abst_constr n3 n4)) 
                                (v_Vnd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) n4))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal n4 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            n4))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal n4 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)))))) 
                                   (v_Vgd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n4))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) n4))) 
                                      __B_2_2_LEMMA v_Vgd) 
                                   (v_Vod:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal n4 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4))))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal n4 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4))))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4))))) 
                                      (v_Vpd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal n4 
                                                      (abst_prj_b 
                                                         (abst_constr n3 n4))))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal n4 
                                                  (abst_prj_b 
                                                     (abst_constr n3 n4))))) 
                                         v_Vld v_Vpd) 
                                      (v_Vkd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)))))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vqc:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vqc)) 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            (abst_prj_b (abst_constr n3 n4))) 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            (abst_prj_b (abst_constr n3 n4))) 
                                         (v_Vjd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (abst_prj_b 
                                                            (abst_constr n3 
                                                               n4))) 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (abst_prj_b 
                                                            (abst_constr n3 
                                                               n4))))))) =>
                                          zen.Rsubst _p_S2_T 
                                            (v_Vqd:(zen.term _p_S2_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_S2_equal v_Vqd 
                                                        (abst_prj_b 
                                                           (abst_constr n3 n4))) 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n3 n4)))))) 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            (v_Vmc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_S2_T 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_S2_T 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)))))) 
                                               (v_Vtc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_S2_T 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal _p_S2_T 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)))) 
                                                  (v_Vuc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal _p_S2_T 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2))))) =>
                                                   zen.Reqsym _p_S2_T 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     v_Vuc v_Vmc) v_Vtc) 
                                               (v_Vxc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2))))) 
                                                  (v_Vyc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)))))) =>
                                                   zen.Rall _p_S2_T 
                                                     (v_Vzc:
                                                      (zen.term _p_S2_T) =>
                                                      zen.forall _p_S2_T 
                                                        (v_Vad:
                                                         (zen.term _p_S2_T) =>
                                                         zen.forall _p_S2_T 
                                                           (v_Vbd:
                                                            (zen.term _p_S2_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (v_Vcd:
                                                      (zen.proof 
                                                         (zen.forall _p_S2_T 
                                                            (v_Vad:
                                                             (zen.term 
                                                                _p_S2_T) =>
                                                             zen.forall 
                                                               _p_S2_T 
                                                               (v_Vbd:
                                                                (zen.term 
                                                                   _p_S2_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vad))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd)))))))) =>
                                                      zen.Rall _p_S2_T 
                                                        (v_Vad:
                                                         (zen.term _p_S2_T) =>
                                                         zen.forall _p_S2_T 
                                                           (v_Vbd:
                                                            (zen.term _p_S2_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vad))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd)))))) 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (v_Vdd:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               _p_S2_T 
                                                               (v_Vbd:
                                                                (zen.term 
                                                                   _p_S2_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))))))) =>
                                                         zen.Rall _p_S2_T 
                                                           (v_Vbd:
                                                            (zen.term _p_S2_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))))) 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n3 n4)) 
                                                           (v_Vrd:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4)))))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4)))))) 
                                                              (v_Vnc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                 v_Vyc v_Vnc) 
                                                              (v_Vsd:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                 (v_Vkc:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                 (v_Vkd:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4)))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                 v_Vsd) v_Vrd) 
                                                           v_Vdd) v_Vcd) 
                                                     _p_S2_equal_transitive) 
                                                  v_Vxc) v_Voc) 
                                            (v_Vjd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4))) 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4))))))) =>
                                             zen.Rsubst _p_S2_T 
                                               (v_Vhd:(zen.term _p_S2_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           v_Vhd) 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n3 n4)))))) 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)) 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)) 
                                               (v_Vtd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_S2_T 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4)))))) =>
                                                zen.Rnoteq _p_S2_T 
                                                  (abst_prj_b 
                                                     (abst_constr n3 n4)) 
                                                  v_Vtd) 
                                               (v_Vjd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n3 n4))) 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n3 n4))))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n3 n4))) 
                                                  v_Vjd) v_Vjd) v_Vjd) 
                                         (v_Vkd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      (abst_prj_b 
                                                         (abst_constr n3 n4)))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n3 n4))))) 
                                            v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                                v_Vmd) v_Vcd) _p_S2_equal_transitive) 
                       (v_Vpd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal n4 
                                       (abst_prj_b (abst_constr n3 n4))))))) =>
                        zen.Rall _p_S1_T 
                          (v_Vud:(zen.term _p_S1_T) =>
                           zen.forall _p_S2_T 
                             (v_Vvd:(zen.term _p_S2_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal 
                                      (abst_prj_b (abst_constr v_Vud v_Vvd)) 
                                      v_Vvd)))) n3 
                          (v_Vwd:
                           (zen.proof 
                              (zen.forall _p_S2_T 
                                 (v_Vvd:(zen.term _p_S2_T) =>
                                  zen.triangle 
                                    (focal.is_true 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n3 v_Vvd)) 
                                          v_Vvd))))) =>
                           zen.Rall _p_S2_T 
                             (v_Vvd:(zen.term _p_S2_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal 
                                      (abst_prj_b (abst_constr n3 v_Vvd)) 
                                      v_Vvd))) n4 
                             (v_Vxd:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n3 n4)) n4)))) =>
                              zen.Rall _p_S2_T 
                                (v_Vzc:(zen.term _p_S2_T) =>
                                 zen.forall _p_S2_T 
                                   (v_Vad:(zen.term _p_S2_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vzc v_Vad))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vad v_Vzc))))) 
                                (abst_prj_b (abst_constr n3 n4)) 
                                (v_Vyd:
                                 (zen.proof 
                                    (zen.forall _p_S2_T 
                                       (v_Vad:(zen.term _p_S2_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)) 
                                                   v_Vad))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vad 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)))))))) =>
                                 zen.Rall _p_S2_T 
                                   (v_Vad:(zen.term _p_S2_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)) v_Vad))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vad 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)))))) 
                                   n4 
                                   (v_Vzd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)) n4))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal n4 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)) n4))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal n4 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4))))) 
                                      (v_Vae:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n3 n4)) 
                                                      n4))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal 
                                                  (abst_prj_b 
                                                     (abst_constr n3 n4)) n4))) 
                                         v_Vxd v_Vae) 
                                      (v_Vld:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal n4 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal n4 
                                                  (abst_prj_b 
                                                     (abst_constr n3 n4))))) 
                                         v_Vld v_Vpd) v_Vzd) v_Vyd) 
                                _p_S2_equal_symmetric) v_Vwd) 
                          abst_prj_b_is_snd_of_pair)))))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                      (abst_prj_a (abst_constr n3 n4))))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                             (abst_prj_a (abst_constr n3 n4))))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_S1_T (abst_prj_a (abst_constr n1 n2)) 
                            (abst_prj_a (abst_constr n1 n2))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                               (abst_prj_a (abst_constr n1 n2))))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_S1_T 
                                (abst_prj_a (abst_constr n1 n2)) 
                                (abst_prj_a (abst_constr n1 n2))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n1 n2)))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_S1_T (abst_prj_a (abst_constr n1 n2)) 
                            (abst_prj_a (abst_constr n1 n2))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                               (abst_prj_a (abst_constr n1 n2)))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_S1_T 
                                (abst_prj_a (abst_constr n1 n2)) 
                                (abst_prj_a (abst_constr n1 n2)))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n1 n2))))))) =>
                    zen.Rnoteq _p_S1_T (abst_prj_a (abst_constr n1 n2)) v_Vmc) 
                   v_Vlc) 
                (v_Voc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_S1_T 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n1 n2))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n1 n2))))))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (zen.equal _p_S1_T n3 (abst_prj_a (abst_constr n3 n4)))) 
                   (v_Vpc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal _p_S1_T n3 
                             (abst_prj_a (abst_constr n3 n4))))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vqc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vqc)) 
                      (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3) 
                      (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                         (abst_prj_a (abst_constr n3 n4))) 
                      (v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) n3) 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n3 n4))))))) =>
                       zen.Rsubst _p_S1_T 
                         (v_Vsc:(zen.term _p_S1_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_S1_equal v_Vsc n3) 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n3 n4)))))) 
                         (abst_prj_a (abst_constr n1 n2)) 
                         (abst_prj_a (abst_constr n1 n2)) 
                         (v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_S1_T 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n1 n2)))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_S1_T 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n1 n2))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n1 n2)))))) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_S1_T 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            (abst_prj_a (abst_constr n1 n2))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal _p_S1_T 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n1 n2)))) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal _p_S1_T 
                                         (abst_prj_a (abst_constr n1 n2)) 
                                         (abst_prj_a (abst_constr n1 n2))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal _p_S1_T 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n1 n2)))) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_S1_T 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            (abst_prj_a (abst_constr n1 n2))))) =>
                                   zen.Rsubst _p_S1_T 
                                     (v_Vvc:(zen.term _p_S1_T) =>
                                      zen.triangle 
                                        (zen.equal _p_S1_T v_Vvc 
                                           (abst_prj_a (abst_constr n1 n2)))) 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_S1_T 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_S1_T 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              (abst_prj_a (abst_constr n1 n2)))) 
                                        v_Vuc v_Vmc) 
                                     (v_Vuc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_S1_T 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2))))) =>
                                      zen.Rsubst _p_S1_T 
                                        (v_Vwc:(zen.term _p_S1_T) =>
                                         zen.triangle 
                                           (zen.equal _p_S1_T 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              v_Vwc)) 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_S1_T 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)))))) =>
                                         zen.Rnoteq _p_S1_T 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           v_Vmc) 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_S1_T 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_S1_T 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)) 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)))) 
                                           v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_S1_T 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)))))) =>
                                   zen.Rnoteq _p_S1_T 
                                     (abst_prj_a (abst_constr n1 n2)) v_Vmc)) 
                               v_Vtc) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n1 n2))))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S1_equal 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            (abst_prj_a (abst_constr n1 n2)))))) =>
                                zen.Rall _p_S1_T 
                                  (v_Vzc:(zen.term _p_S1_T) =>
                                   zen.forall _p_S1_T 
                                     (v_Vad:(zen.term _p_S1_T) =>
                                      zen.forall _p_S1_T 
                                        (v_Vbd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vzc v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vzc v_Vbd))))))) 
                                  (abst_prj_a (abst_constr n1 n2)) 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.forall _p_S1_T 
                                         (v_Vad:(zen.term _p_S1_T) =>
                                          zen.forall _p_S1_T 
                                            (v_Vbd:(zen.term _p_S1_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        v_Vad))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal v_Vad 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           v_Vbd)))))))) =>
                                   zen.Rall _p_S1_T 
                                     (v_Vad:(zen.term _p_S1_T) =>
                                      zen.forall _p_S1_T 
                                        (v_Vbd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       v_Vbd)))))) 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.forall _p_S1_T 
                                            (v_Vbd:(zen.term _p_S1_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           v_Vbd))))))) =>
                                      zen.Rall _p_S1_T 
                                        (v_Vbd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       v_Vbd))))) n3 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       n3))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       n3)))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2))))) 
                                              v_Vyc v_Vnc) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       n3))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       n3))) 
                                              (v_Vgd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n3))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) n3))) 
                                                 __B_2_1_LEMMA v_Vgd) 
                                              (__B_2_1_LEMMA:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vqc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vqc)) 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n3) 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n3 n4))) 
                                                 (v_Vrc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S1_equal 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 n3) 
                                                              (_p_S1_equal 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n3 n4))))))) =>
                                                  zen.Rsubst _p_S1_T 
                                                    (v_Vsc:
                                                     (zen.term _p_S1_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S1_equal 
                                                                v_Vsc n3) 
                                                             (_p_S1_equal 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n1 n2)) 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n3 n4)))))) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (v_Vmc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S1_T 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)))))) =>
                                                     zen.Rnoteq _p_S1_T 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       v_Vmc) 
                                                    (v_Vrc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_S1_equal 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3) 
                                                                 (_p_S1_equal 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                     zen.Rsubst _p_S1_T 
                                                       (v_Vhd:
                                                        (zen.term _p_S1_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                   v_Vhd) 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                   (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4)))))) 
                                                       n3 
                                                       (abst_prj_a 
                                                          (abst_constr n3 n4)) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_S1_T 
                                                                    n3 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S1_T n3 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n3 n4)))) 
                                                          v_Vpc v_Vid) 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))) 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_S1_equal 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2)) 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n3 n4))) 
                                                          v_Vjd) v_Vrc) v_Vrc) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n3 n4)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2)) 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n3 n4))))) 
                                                    v_Vkd v_Vkc) 
                                                 __B_2_1_LEMMA) v_Vfd) v_Ved) 
                                        v_Vdd) v_Vcd) _p_S1_equal_transitive) 
                               v_Vxc) v_Voc) 
                         (v_Vrc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n1 n2)) n3) 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n1 n2)) 
                                         (abst_prj_a (abst_constr n3 n4))))))) =>
                          zen.Rsubst _p_S1_T 
                            (v_Vhd:(zen.term _p_S1_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        v_Vhd) 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n3 n4)))))) 
                            n3 (abst_prj_a (abst_constr n3 n4)) 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_S1_T n3 
                                         (abst_prj_a (abst_constr n3 n4)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal _p_S1_T n3 
                                     (abst_prj_a (abst_constr n3 n4)))) 
                               v_Vpc v_Vid) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_S1_equal 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            (abst_prj_a (abst_constr n3 n4))) 
                                         (_p_S1_equal 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            (abst_prj_a (abst_constr n3 n4))))))) =>
                             zen.Rnoteq basics.bool__t 
                               (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                  (abst_prj_a (abst_constr n3 n4))) v_Vjd) 
                            v_Vrc) v_Vrc) 
                      (v_Vkd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n3 n4)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                  (abst_prj_a (abst_constr n3 n4))))) v_Vkd 
                         v_Vkc) __B_2_1_LEMMA) 
                   (v_Vid:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_S1_T n3 
                                (abst_prj_a (abst_constr n3 n4)))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal n3 (abst_prj_a (abst_constr n3 n4))))) 
                      (v_Vld:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal n3 
                                   (abst_prj_a (abst_constr n3 n4)))))) =>
                       zen.Rall _p_S1_T 
                         (v_Vzc:(zen.term _p_S1_T) =>
                          zen.forall _p_S1_T 
                            (v_Vad:(zen.term _p_S1_T) =>
                             zen.forall _p_S1_T 
                               (v_Vbd:(zen.term _p_S1_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal v_Vzc v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vzc v_Vbd))))))) 
                         (abst_prj_a (abst_constr n1 n2)) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.forall _p_S1_T 
                                (v_Vad:(zen.term _p_S1_T) =>
                                 zen.forall _p_S1_T 
                                   (v_Vbd:(zen.term _p_S1_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) v_Vad))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal v_Vad v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  v_Vbd)))))))) =>
                          zen.Rall _p_S1_T 
                            (v_Vad:(zen.term _p_S1_T) =>
                             zen.forall _p_S1_T 
                               (v_Vbd:(zen.term _p_S1_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              v_Vbd)))))) n3 
                            (v_Vmd:
                             (zen.proof 
                                (zen.forall _p_S1_T 
                                   (v_Vbd:(zen.term _p_S1_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) n3))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal n3 v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  v_Vbd))))))) =>
                             zen.Rall _p_S1_T 
                               (v_Vbd:(zen.term _p_S1_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           n3))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (_p_S1_equal n3 v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              v_Vbd))))) 
                               (abst_prj_a (abst_constr n3 n4)) 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) n3))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal n3 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           n3))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal n3 
                                              (abst_prj_a (abst_constr n3 n4))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              (abst_prj_a (abst_constr n3 n4)))))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n3))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              n3))) __B_2_1_LEMMA v_Vgd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal n3 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal n3 
                                              (abst_prj_a (abst_constr n3 n4))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              (abst_prj_a (abst_constr n3 n4))))) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal n3 
                                                     (abst_prj_a 
                                                        (abst_constr n3 n4))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal n3 
                                                 (abst_prj_a 
                                                    (abst_constr n3 n4))))) 
                                        v_Vld v_Vpd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)))))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vqd:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vqd)) 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           (abst_prj_a (abst_constr n3 n4))) 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           (abst_prj_a (abst_constr n3 n4))) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_a 
                                                           (abst_constr n3 n4))) 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_a 
                                                           (abst_constr n3 n4))))))) =>
                                         zen.Rsubst _p_S1_T 
                                           (v_Vrd:(zen.term _p_S1_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_S1_equal v_Vrd 
                                                       (abst_prj_a 
                                                          (abst_constr n3 n4))) 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n3 n4)))))) 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           (v_Vmc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_S1_T 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_S1_T 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)))))) 
                                              (v_Vtc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_S1_T 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal _p_S1_T 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)))) 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_S1_T 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2))))) =>
                                                  zen.Reqsym _p_S1_T 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    v_Vuc v_Vmc) v_Vtc) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S1_equal 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2))))) 
                                                 (v_Vyc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)))))) =>
                                                  zen.Rall _p_S1_T 
                                                    (v_Vzc:
                                                     (zen.term _p_S1_T) =>
                                                     zen.forall _p_S1_T 
                                                       (v_Vad:
                                                        (zen.term _p_S1_T) =>
                                                        zen.forall _p_S1_T 
                                                          (v_Vbd:
                                                           (zen.term _p_S1_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.forall _p_S1_T 
                                                           (v_Vad:
                                                            (zen.term _p_S1_T) =>
                                                            zen.forall 
                                                              _p_S1_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  _p_S1_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vad))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd)))))))) =>
                                                     zen.Rall _p_S1_T 
                                                       (v_Vad:
                                                        (zen.term _p_S1_T) =>
                                                        zen.forall _p_S1_T 
                                                          (v_Vbd:
                                                           (zen.term _p_S1_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd)))))) 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (v_Vdd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_S1_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  _p_S1_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))))))) =>
                                                        zen.Rall _p_S1_T 
                                                          (v_Vbd:
                                                           (zen.term _p_S1_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))))) 
                                                          (abst_prj_a 
                                                             (abst_constr n3 
                                                                n4)) 
                                                          (v_Vsd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4)))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4)))))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                v_Vyc v_Vnc) 
                                                             (v_Vtd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                (v_Vkc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                v_Vtd) v_Vsd) 
                                                          v_Vdd) v_Vcd) 
                                                    _p_S1_equal_transitive) 
                                                 v_Vxc) v_Voc) 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4))) 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4))))))) =>
                                            zen.Rsubst _p_S1_T 
                                              (v_Vud:(zen.term _p_S1_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) v_Vud) 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) 
                                                          (abst_prj_a 
                                                             (abst_constr n3 
                                                                n4)))))) 
                                              (abst_prj_a (abst_constr n3 n4)) 
                                              (abst_prj_a (abst_constr n3 n4)) 
                                              (v_Vvd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_S1_T 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4)))))) =>
                                               zen.Rnoteq _p_S1_T 
                                                 (abst_prj_a 
                                                    (abst_constr n3 n4)) 
                                                 v_Vvd) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n3 n4))) 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n3 n4))))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n3 n4))) 
                                                 v_Vjd) v_Vjd) v_Vjd) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_a 
                                                        (abst_constr n3 n4)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n3 n4))))) 
                                           v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                               v_Vmd) v_Vcd) _p_S1_equal_transitive) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal n3 
                                      (abst_prj_a (abst_constr n3 n4))))))) =>
                       zen.Rall _p_S1_T 
                         (v_Vwd:(zen.term _p_S1_T) =>
                          zen.forall _p_S2_T 
                            (v_Vxd:(zen.term _p_S2_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr v_Vwd v_Vxd)) 
                                     v_Vwd)))) n3 
                         (v_Vyd:
                          (zen.proof 
                             (zen.forall _p_S2_T 
                                (v_Vxd:(zen.term _p_S2_T) =>
                                 zen.triangle 
                                   (focal.is_true 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n3 v_Vxd)) 
                                         n3))))) =>
                          zen.Rall _p_S2_T 
                            (v_Vxd:(zen.term _p_S2_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr n3 v_Vxd)) n3))) 
                            n4 
                            (v_Vzd:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n3 n4)) n3)))) =>
                             zen.Rall _p_S1_T 
                               (v_Vzc:(zen.term _p_S1_T) =>
                                zen.forall _p_S1_T 
                                  (v_Vad:(zen.term _p_S1_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vzc v_Vad))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vad v_Vzc))))) 
                               (abst_prj_a (abst_constr n3 n4)) 
                               (v_Vae:
                                (zen.proof 
                                   (zen.forall _p_S1_T 
                                      (v_Vad:(zen.term _p_S1_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)) 
                                                  v_Vad))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal v_Vad 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)))))))) =>
                                zen.Rall _p_S1_T 
                                  (v_Vad:(zen.term _p_S1_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n3 n4)) 
                                              v_Vad))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vad 
                                              (abst_prj_a (abst_constr n3 n4)))))) 
                                  n3 
                                  (v_Vbe:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)) n3))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal n3 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n3 n4)) 
                                              n3))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal n3 
                                              (abst_prj_a (abst_constr n3 n4))))) 
                                     (v_Vce:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n3 n4)) 
                                                     n3))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal 
                                                 (abst_prj_a 
                                                    (abst_constr n3 n4)) n3))) 
                                        v_Vzd v_Vce) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal n3 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal n3 
                                                 (abst_prj_a 
                                                    (abst_constr n3 n4))))) 
                                        v_Vld v_Vpd) v_Vbe) v_Vae) 
                               _p_S1_equal_symmetric) v_Vyd) 
                         abst_prj_a_is_first_of_pair)))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))) 
            (v_Vkc:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))))) =>
             zen.Rcut 
               (zen.and 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal _p_S2_T (abst_prj_b (abst_constr n1 n2)) 
                           n2))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2))))) 
               (v_Vlc:
                (zen.proof 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_S2_T 
                               (abst_prj_b (abst_constr n1 n2)) n2))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                  n2)))))) =>
                zen.Rand 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal _p_S2_T (abst_prj_b (abst_constr n1 n2)) 
                           n2))) 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n2)))) 
                  (v_Vmc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_S2_T 
                               (abst_prj_b (abst_constr n1 n2)) n2)))) =>
                   v_Vnc:
                   (zen.proof 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                  n2))))) =>
                   zen.Rall _p_S1_T 
                     (v_Voc:(zen.term _p_S1_T) =>
                      zen.forall _p_S2_T 
                        (v_Vpc:(zen.term _p_S2_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_S2_equal 
                                 (abst_prj_b (abst_constr v_Voc v_Vpc)) v_Vpc)))) 
                     n1 
                     (v_Vqc:
                      (zen.proof 
                         (zen.forall _p_S2_T 
                            (v_Vpc:(zen.term _p_S2_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr n1 v_Vpc)) 
                                     v_Vpc))))) =>
                      zen.Rall _p_S2_T 
                        (v_Vpc:(zen.term _p_S2_T) =>
                         zen.triangle 
                           (focal.is_true 
                              (_p_S2_equal 
                                 (abst_prj_b (abst_constr n1 v_Vpc)) v_Vpc))) 
                        n2 
                        (v_Vrc:
                         (zen.proof 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr n1 n2)) n2)))) =>
                         zen.Raxiom 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) n2))) 
                           v_Vrc v_Vnc) v_Vqc) abst_prj_b_is_snd_of_pair) 
                  v_Vlc) 
               (v_Vsc:
                (zen.proof 
                   (zen.not 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_S2_T 
                                  (abst_prj_b (abst_constr n1 n2)) n2))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr n1 n2)) n2))))))) =>
                zen.Rcut (zen.triangle (zen.equal _p_S2_T n4 n4)) 
                  (v_Vtc:
                   (zen.proof (zen.triangle (zen.equal _p_S2_T n4 n4))) =>
                   zen.Rsubst basics.bool__t 
                     (v_Vuc:(zen.term basics.bool__t) =>
                      zen.triangle (focal.is_true v_Vuc)) 
                     (_p_S2_equal n2 n4) 
                     (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4) 
                     (v_Vvc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t (_p_S2_equal n2 n4) 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr n1 n2)) n4))))) =>
                      zen.Rsubst _p_S2_T 
                        (v_Vwc:(zen.term _p_S2_T) =>
                         zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (_p_S2_equal v_Vwc n4) 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) n4)))) 
                        n2 (abst_prj_b (abst_constr n1 n2)) 
                        (v_Vxc:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_S2_T n2 
                                     (abst_prj_b (abst_constr n1 n2)))))) =>
                         zen.Rnotand 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_S2_T 
                                    (abst_prj_b (abst_constr n1 n2)) n2))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) n2)))) 
                           (v_Vyc:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal _p_S2_T 
                                           (abst_prj_b (abst_constr n1 n2)) 
                                           n2))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (zen.equal _p_S2_T 
                                    (abst_prj_b (abst_constr n1 n2)) n2)) 
                              (v_Vzc:
                               (zen.proof 
                                  (zen.triangle 
                                     (zen.equal _p_S2_T 
                                        (abst_prj_b (abst_constr n1 n2)) n2))) =>
                               zen.Rcut 
                                 (zen.triangle 
                                    (zen.equal _p_S2_T 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (abst_prj_b (abst_constr n1 n2)))) 
                                 (v_Vad:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal _p_S2_T 
                                           (abst_prj_b (abst_constr n1 n2)) 
                                           (abst_prj_b (abst_constr n1 n2))))) =>
                                  zen.Rsubst _p_S2_T 
                                    (v_Vbd:(zen.term _p_S2_T) =>
                                     zen.triangle 
                                       (zen.equal _p_S2_T v_Vbd 
                                          (abst_prj_b (abst_constr n1 n2)))) 
                                    (abst_prj_b (abst_constr n1 n2)) n2 
                                    (v_Vmc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_S2_T 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)) n2)))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (zen.equal _p_S2_T 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             n2)) v_Vzc v_Vmc) 
                                    (v_Vcd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal _p_S2_T n2 
                                              (abst_prj_b (abst_constr n1 n2))))) =>
                                     zen.Rsubst _p_S2_T 
                                       (v_Vdd:(zen.term _p_S2_T) =>
                                        zen.triangle 
                                          (zen.equal _p_S2_T n2 v_Vdd)) 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (v_Ved:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_S2_T 
                                                    (abst_prj_b 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_b 
                                                       (abst_constr n1 n2)))))) =>
                                        zen.Rnoteq _p_S2_T 
                                          (abst_prj_b (abst_constr n1 n2)) 
                                          v_Ved) 
                                       (v_Vcd:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal _p_S2_T n2 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal _p_S2_T n2 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)))) 
                                          v_Vcd v_Vxc) v_Vcd) v_Vad) 
                                 (v_Ved:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_S2_T 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              (abst_prj_b (abst_constr n1 n2)))))) =>
                                  zen.Rnoteq _p_S2_T 
                                    (abst_prj_b (abst_constr n1 n2)) v_Ved)) 
                              v_Vyc) 
                           (v_Vfd:
                            (zen.proof 
                               (zen.not 
                                  (zen.not 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              n2)))))) =>
                            zen.Rnotnot 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) n2))) 
                              (v_Vrc:
                               (zen.proof 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S2_equal 
                                           (abst_prj_b (abst_constr n1 n2)) 
                                           n2)))) =>
                               zen.Rall _p_S2_T 
                                 (v_Vgd:(zen.term _p_S2_T) =>
                                  zen.forall _p_S2_T 
                                    (v_Vhd:(zen.term _p_S2_T) =>
                                     zen.forall _p_S2_T 
                                       (v_Vid:(zen.term _p_S2_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vgd v_Vhd))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal v_Vhd v_Vid))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal v_Vgd v_Vid))))))) 
                                 (abst_prj_b (abst_constr n1 n2)) 
                                 (v_Vjd:
                                  (zen.proof 
                                     (zen.forall _p_S2_T 
                                        (v_Vhd:(zen.term _p_S2_T) =>
                                         zen.forall _p_S2_T 
                                           (v_Vid:(zen.term _p_S2_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal 
                                                       (abst_prj_b 
                                                          (abst_constr n1 n2)) 
                                                       v_Vhd))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal v_Vhd 
                                                          v_Vid))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) v_Vid)))))))) =>
                                  zen.Rall _p_S2_T 
                                    (v_Vhd:(zen.term _p_S2_T) =>
                                     zen.forall _p_S2_T 
                                       (v_Vid:(zen.term _p_S2_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   v_Vhd))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal v_Vhd v_Vid))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      v_Vid)))))) n2 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.forall _p_S2_T 
                                           (v_Vid:(zen.term _p_S2_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal 
                                                       (abst_prj_b 
                                                          (abst_constr n1 n2)) 
                                                       n2))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n2 v_Vid))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) v_Vid))))))) =>
                                     zen.Rall _p_S2_T 
                                       (v_Vid:(zen.term _p_S2_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n2))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal n2 v_Vid))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      v_Vid))))) n4 
                                       (v_Vld:
                                        (zen.proof 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal 
                                                       (abst_prj_b 
                                                          (abst_constr n1 n2)) 
                                                       n2))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n2 n4))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n4)))))) =>
                                        zen.Rimply 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n2))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal n2 n4))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      n4)))) 
                                          (v_Vnc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n2))))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      n2))) v_Vrc v_Vnc) 
                                          (v_Vmd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n2 n4))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n4))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal n2 n4))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      n4))) 
                                             (v_Vnd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal n2 n4))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal n2 n4))) 
                                                H22 v_Vnd) 
                                             (v_Vod:
                                              (zen.proof 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n4)))) =>
                                              zen.Rsubst basics.bool__t 
                                                (v_Vuc:
                                                 (zen.term basics.bool__t) =>
                                                 zen.triangle 
                                                   (focal.is_true v_Vuc)) 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n4) 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n4) 
                                                (v_Vpd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S2_equal 
                                                                (abst_prj_b 
                                                                   (abst_constr 
                                                                    n1 n2)) 
                                                                n4) 
                                                             (_p_S2_equal 
                                                                (abst_prj_b 
                                                                   (abst_constr 
                                                                    n1 n2)) 
                                                                n4))))) =>
                                                 zen.Rsubst _p_S2_T 
                                                   (v_Vwc:
                                                    (zen.term _p_S2_T) =>
                                                    zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_S2_equal 
                                                               v_Vwc n4) 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               n4)))) 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (v_Ved:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S2_T 
                                                                (abst_prj_b 
                                                                   (abst_constr 
                                                                    n1 n2)) 
                                                                (abst_prj_b 
                                                                   (abst_constr 
                                                                    n1 n2)))))) =>
                                                    zen.Rnoteq _p_S2_T 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      v_Ved) 
                                                   (v_Vpd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                   n4) 
                                                                (_p_S2_equal 
                                                                   (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                   n4))))) =>
                                                    zen.Rsubst _p_S2_T 
                                                      (v_Vqd:
                                                       (zen.term _p_S2_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  v_Vqd) 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  n4)))) n4 
                                                      n4 
                                                      (v_Vrd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_S2_T 
                                                                   n4 n4)))) =>
                                                       zen.Raxiom 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_S2_T n4 n4)) 
                                                         v_Vtc v_Vrd) 
                                                      (v_Vpd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4) 
                                                                   (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))))) =>
                                                       zen.Rnoteq 
                                                         basics.bool__t 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4) 
                                                         v_Vpd) v_Vpd) v_Vpd) 
                                                (v_Vod:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal 
                                                             (abst_prj_b 
                                                                (abst_constr 
                                                                   n1 n2)) n4)))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4))) 
                                                   v_Vod v_Vkc) v_Vod) v_Vmd) 
                                          v_Vld) v_Vkd) v_Vjd) 
                                 _p_S2_equal_transitive) v_Vfd) v_Vsc) 
                        (v_Vpd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_S2_equal 
                                        (abst_prj_b (abst_constr n1 n2)) n4) 
                                     (_p_S2_equal 
                                        (abst_prj_b (abst_constr n1 n2)) n4))))) =>
                         zen.Rsubst _p_S2_T 
                           (v_Vqd:(zen.term _p_S2_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) v_Vqd) 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) n4)))) 
                           n4 n4 
                           (v_Vrd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle (zen.equal _p_S2_T n4 n4)))) =>
                            zen.Raxiom 
                              (zen.triangle (zen.equal _p_S2_T n4 n4)) v_Vtc 
                              v_Vrd) 
                           (v_Vpd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_S2_equal 
                                           (abst_prj_b (abst_constr n1 n2)) 
                                           n4) 
                                        (_p_S2_equal 
                                           (abst_prj_b (abst_constr n1 n2)) 
                                           n4))))) =>
                            zen.Rnoteq basics.bool__t 
                              (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                 n4) v_Vpd) v_Vpd) v_Vvc) 
                     (v_Vod:
                      (zen.proof 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                  n4)))) =>
                      zen.Raxiom 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                 n4))) v_Vod v_Vkc) H22) 
                  (v_Vrd:
                   (zen.proof 
                      (zen.not (zen.triangle (zen.equal _p_S2_T n4 n4)))) =>
                   zen.Rcut 
                     (zen.triangle (focal.is_true (_p_S2_equal n4 n4))) 
                     (v_Vsd:
                      (zen.proof 
                         (zen.triangle (focal.is_true (_p_S2_equal n4 n4)))) =>
                      zen.Rall _p_S2_T 
                        (v_Vgd:(zen.term _p_S2_T) =>
                         zen.forall _p_S2_T 
                           (v_Vhd:(zen.term _p_S2_T) =>
                            zen.forall _p_S2_T 
                              (v_Vid:(zen.term _p_S2_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal v_Vgd v_Vhd))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S2_equal v_Vhd v_Vid))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S2_equal v_Vgd v_Vid))))))) n2 
                        (v_Vtd:
                         (zen.proof 
                            (zen.forall _p_S2_T 
                               (v_Vhd:(zen.term _p_S2_T) =>
                                zen.forall _p_S2_T 
                                  (v_Vid:(zen.term _p_S2_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (_p_S2_equal n2 v_Vhd))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal v_Vhd v_Vid))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal n2 v_Vid)))))))) =>
                         zen.Rall _p_S2_T 
                           (v_Vhd:(zen.term _p_S2_T) =>
                            zen.forall _p_S2_T 
                              (v_Vid:(zen.term _p_S2_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n2 v_Vhd))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S2_equal v_Vhd v_Vid))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n2 v_Vid)))))) 
                           n4 
                           (v_Vud:
                            (zen.proof 
                               (zen.forall _p_S2_T 
                                  (v_Vid:(zen.term _p_S2_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (_p_S2_equal n2 n4))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal n4 v_Vid))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal n2 v_Vid))))))) =>
                            zen.Rall _p_S2_T 
                              (v_Vid:(zen.term _p_S2_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n2 n4))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n4 v_Vid))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n2 v_Vid))))) 
                              n4 
                              (v_Vvd:
                               (zen.proof 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true (_p_S2_equal n2 n4))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n4 n4))) 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n2 n4)))))) =>
                               zen.Rimply 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n2 n4))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n4 n4))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n2 n4)))) 
                                 (v_Vnd:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n2 n4))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n2 n4))) 
                                    H22 v_Vnd) 
                                 (v_Vwd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n4 n4))) 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n2 n4))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n4 n4))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n2 n4))) 
                                    (v_Vxd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal n4 n4))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (_p_S2_equal n4 n4))) 
                                       v_Vsd v_Vxd) 
                                    (H22:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n2 n4)))) =>
                                     zen.Rsubst basics.bool__t 
                                       (v_Vuc:(zen.term basics.bool__t) =>
                                        zen.triangle (focal.is_true v_Vuc)) 
                                       (_p_S2_equal n2 n4) 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n1 n2)) n4) 
                                       (v_Vvc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_S2_equal n2 n4) 
                                                    (_p_S2_equal 
                                                       (abst_prj_b 
                                                          (abst_constr n1 n2)) 
                                                       n4))))) =>
                                        zen.Rsubst _p_S2_T 
                                          (v_Vwc:(zen.term _p_S2_T) =>
                                           zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_S2_equal v_Vwc n4) 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      n4)))) n2 
                                          (abst_prj_b (abst_constr n1 n2)) 
                                          (v_Vxc:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_S2_T n2 
                                                       (abst_prj_b 
                                                          (abst_constr n1 n2)))))) =>
                                           zen.Rnotand 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_S2_T 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      n2))) 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) n2)))) 
                                             (v_Vyc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_S2_T 
                                                             (abst_prj_b 
                                                                (abst_constr 
                                                                   n1 n2)) n2))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (zen.equal _p_S2_T 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      n2)) 
                                                (v_Vzc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (zen.equal _p_S2_T 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n2))) =>
                                                 zen.Reqsym _p_S2_T 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   n2 v_Vzc v_Vxc) v_Vyc) 
                                             (v_Vfd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal 
                                                                (abst_prj_b 
                                                                   (abst_constr 
                                                                    n1 n2)) 
                                                                n2)))))) =>
                                              zen.Rnotnot 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) n2))) 
                                                (v_Vrc:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal 
                                                             (abst_prj_b 
                                                                (abst_constr 
                                                                   n1 n2)) n2)))) =>
                                                 zen.Rall _p_S2_T 
                                                   (v_Vgd:
                                                    (zen.term _p_S2_T) =>
                                                    zen.forall _p_S2_T 
                                                      (v_Vhd:
                                                       (zen.term _p_S2_T) =>
                                                       zen.forall _p_S2_T 
                                                         (v_Vid:
                                                          (zen.term _p_S2_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_S2_equal 
                                                                    v_Vgd 
                                                                    v_Vhd))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vhd 
                                                                    v_Vid))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vgd 
                                                                    v_Vid))))))) 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (v_Vjd:
                                                    (zen.proof 
                                                       (zen.forall _p_S2_T 
                                                          (v_Vhd:
                                                           (zen.term _p_S2_T) =>
                                                           zen.forall 
                                                             _p_S2_T 
                                                             (v_Vid:
                                                              (zen.term 
                                                                 _p_S2_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vhd))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vhd 
                                                                    v_Vid))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vid)))))))) =>
                                                    zen.Rall _p_S2_T 
                                                      (v_Vhd:
                                                       (zen.term _p_S2_T) =>
                                                       zen.forall _p_S2_T 
                                                         (v_Vid:
                                                          (zen.term _p_S2_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vhd))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vhd 
                                                                    v_Vid))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vid)))))) 
                                                      n2 
                                                      (v_Vkd:
                                                       (zen.proof 
                                                          (zen.forall 
                                                             _p_S2_T 
                                                             (v_Vid:
                                                              (zen.term 
                                                                 _p_S2_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n2))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vid))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vid))))))) =>
                                                       zen.Rall _p_S2_T 
                                                         (v_Vid:
                                                          (zen.term _p_S2_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n2))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vid))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vid))))) 
                                                         n4 
                                                         (v_Vld:
                                                          (zen.proof 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n2))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4)))))) =>
                                                          zen.Rimply 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n2))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4)))) 
                                                            (v_Vnc:
                                                             (zen.proof 
                                                                (zen.not 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n2))))) =>
                                                             zen.Raxiom 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n2))) 
                                                               v_Vrc v_Vnc) 
                                                            (v_Vmd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                               (v_Vnd:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                  H22 v_Vnd) 
                                                               (v_Vod:
                                                                (zen.proof 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4)))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                  v_Vod v_Vkc) 
                                                               v_Vmd) v_Vld) 
                                                         v_Vkd) v_Vjd) 
                                                   _p_S2_equal_transitive) 
                                                v_Vfd) v_Vsc) 
                                          (v_Vpd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n4) 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n4))))) =>
                                           zen.Rsubst _p_S2_T 
                                             (v_Vqd:(zen.term _p_S2_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) v_Vqd) 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) n4)))) 
                                             n4 n4 
                                             (v_Vrd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_S2_T n4 
                                                          n4)))) =>
                                              zen.Rnoteq _p_S2_T n4 v_Vrd) 
                                             (v_Vpd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_S2_equal 
                                                             (abst_prj_b 
                                                                (abst_constr 
                                                                   n1 n2)) n4) 
                                                          (_p_S2_equal 
                                                             (abst_prj_b 
                                                                (abst_constr 
                                                                   n1 n2)) n4))))) =>
                                              zen.Rnoteq basics.bool__t 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n4) 
                                                v_Vpd) v_Vpd) v_Vvc) 
                                       (v_Vod:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal 
                                                    (abst_prj_b 
                                                       (abst_constr n1 n2)) 
                                                    n4)))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n4))) 
                                          v_Vod v_Vkc) H22) v_Vwd) v_Vvd) 
                              v_Vud) v_Vtd) _p_S2_equal_transitive) 
                     (v_Vxd:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle (focal.is_true (_p_S2_equal n4 n4))))) =>
                      zen.Rnoteq _p_S2_T n4 v_Vrd)))))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))) 
           (v_Vkc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))))) =>
            zen.Rcut 
              (zen.and 
                 (zen.not 
                    (zen.triangle 
                       (zen.equal _p_S1_T (abst_prj_a (abst_constr n1 n2)) n1))) 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1))))) 
              (v_Vlc:
               (zen.proof 
                  (zen.and 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal _p_S1_T 
                              (abst_prj_a (abst_constr n1 n2)) n1))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                 n1)))))) =>
               zen.Rand 
                 (zen.not 
                    (zen.triangle 
                       (zen.equal _p_S1_T (abst_prj_a (abst_constr n1 n2)) n1))) 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n1)))) 
                 (v_Vmc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal _p_S1_T 
                              (abst_prj_a (abst_constr n1 n2)) n1)))) =>
                  v_Vnc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                 n1))))) =>
                  zen.Rall _p_S1_T 
                    (v_Voc:(zen.term _p_S1_T) =>
                     zen.forall _p_S2_T 
                       (v_Vpc:(zen.term _p_S2_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (_p_S1_equal 
                                (abst_prj_a (abst_constr v_Voc v_Vpc)) v_Voc)))) 
                    n1 
                    (v_Vqc:
                     (zen.proof 
                        (zen.forall _p_S2_T 
                           (v_Vpc:(zen.term _p_S2_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal 
                                    (abst_prj_a (abst_constr n1 v_Vpc)) n1))))) =>
                     zen.Rall _p_S2_T 
                       (v_Vpc:(zen.term _p_S2_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (_p_S1_equal 
                                (abst_prj_a (abst_constr n1 v_Vpc)) n1))) n2 
                       (v_Vrc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal 
                                    (abst_prj_a (abst_constr n1 n2)) n1)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) n1))) 
                          v_Vrc v_Vnc) v_Vqc) abst_prj_a_is_first_of_pair) 
                 v_Vlc) 
              (v_Vsc:
               (zen.proof 
                  (zen.not 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_S1_T 
                                 (abst_prj_a (abst_constr n1 n2)) n1))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal 
                                    (abst_prj_a (abst_constr n1 n2)) n1))))))) =>
               zen.Rcut (zen.triangle (zen.equal _p_S1_T n3 n3)) 
                 (v_Vtc:
                  (zen.proof (zen.triangle (zen.equal _p_S1_T n3 n3))) =>
                  zen.Rsubst basics.bool__t 
                    (v_Vuc:(zen.term basics.bool__t) =>
                     zen.triangle (focal.is_true v_Vuc)) (_p_S1_equal n1 n3) 
                    (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3) 
                    (v_Vvc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t (_p_S1_equal n1 n3) 
                                 (_p_S1_equal 
                                    (abst_prj_a (abst_constr n1 n2)) n3))))) =>
                     zen.Rsubst _p_S1_T 
                       (v_Vwc:(zen.term _p_S1_T) =>
                        zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (_p_S1_equal v_Vwc n3) 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) n3)))) 
                       n1 (abst_prj_a (abst_constr n1 n2)) 
                       (v_Vxc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_S1_T n1 
                                    (abst_prj_a (abst_constr n1 n2)))))) =>
                        zen.Rnotand 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_S1_T 
                                   (abst_prj_a (abst_constr n1 n2)) n1))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) n1)))) 
                          (v_Vyc:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_S1_T 
                                          (abst_prj_a (abst_constr n1 n2)) n1))))) =>
                           zen.Rnotnot 
                             (zen.triangle 
                                (zen.equal _p_S1_T 
                                   (abst_prj_a (abst_constr n1 n2)) n1)) 
                             (v_Vzc:
                              (zen.proof 
                                 (zen.triangle 
                                    (zen.equal _p_S1_T 
                                       (abst_prj_a (abst_constr n1 n2)) n1))) =>
                              zen.Rcut 
                                (zen.triangle 
                                   (zen.equal _p_S1_T 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n1 n2)))) 
                                (v_Vad:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal _p_S1_T 
                                          (abst_prj_a (abst_constr n1 n2)) 
                                          (abst_prj_a (abst_constr n1 n2))))) =>
                                 zen.Rsubst _p_S1_T 
                                   (v_Vbd:(zen.term _p_S1_T) =>
                                    zen.triangle 
                                      (zen.equal _p_S1_T v_Vbd 
                                         (abst_prj_a (abst_constr n1 n2)))) 
                                   (abst_prj_a (abst_constr n1 n2)) n1 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_S1_T 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)) n1)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal _p_S1_T 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            n1)) v_Vzc v_Vmc) 
                                   (v_Vcd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal _p_S1_T n1 
                                             (abst_prj_a (abst_constr n1 n2))))) =>
                                    zen.Rsubst _p_S1_T 
                                      (v_Vdd:(zen.term _p_S1_T) =>
                                       zen.triangle 
                                         (zen.equal _p_S1_T n1 v_Vdd)) 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (v_Ved:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_S1_T 
                                                   (abst_prj_a 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_a 
                                                      (abst_constr n1 n2)))))) =>
                                       zen.Rnoteq _p_S1_T 
                                         (abst_prj_a (abst_constr n1 n2)) 
                                         v_Ved) 
                                      (v_Vcd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal _p_S1_T n1 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal _p_S1_T n1 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)))) 
                                         v_Vcd v_Vxc) v_Vcd) v_Vad) 
                                (v_Ved:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_S1_T 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             (abst_prj_a (abst_constr n1 n2)))))) =>
                                 zen.Rnoteq _p_S1_T 
                                   (abst_prj_a (abst_constr n1 n2)) v_Ved)) 
                             v_Vyc) 
                          (v_Vfd:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             n1)))))) =>
                           zen.Rnotnot 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) n1))) 
                             (v_Vrc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S1_equal 
                                          (abst_prj_a (abst_constr n1 n2)) n1)))) =>
                              zen.Rall _p_S1_T 
                                (v_Vgd:(zen.term _p_S1_T) =>
                                 zen.forall _p_S1_T 
                                   (v_Vhd:(zen.term _p_S1_T) =>
                                    zen.forall _p_S1_T 
                                      (v_Vid:(zen.term _p_S1_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal v_Vgd v_Vhd))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal v_Vhd v_Vid))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal v_Vgd v_Vid))))))) 
                                (abst_prj_a (abst_constr n1 n2)) 
                                (v_Vjd:
                                 (zen.proof 
                                    (zen.forall _p_S1_T 
                                       (v_Vhd:(zen.term _p_S1_T) =>
                                        zen.forall _p_S1_T 
                                          (v_Vid:(zen.term _p_S1_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a 
                                                         (abst_constr n1 n2)) 
                                                      v_Vhd))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal v_Vhd 
                                                         v_Vid))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) v_Vid)))))))) =>
                                 zen.Rall _p_S1_T 
                                   (v_Vhd:(zen.term _p_S1_T) =>
                                    zen.forall _p_S1_T 
                                      (v_Vid:(zen.term _p_S1_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  v_Vhd))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal v_Vhd v_Vid))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     v_Vid)))))) n1 
                                   (v_Vkd:
                                    (zen.proof 
                                       (zen.forall _p_S1_T 
                                          (v_Vid:(zen.term _p_S1_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a 
                                                         (abst_constr n1 n2)) 
                                                      n1))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal n1 v_Vid))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) v_Vid))))))) =>
                                    zen.Rall _p_S1_T 
                                      (v_Vid:(zen.term _p_S1_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n1))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal n1 v_Vid))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     v_Vid))))) n3 
                                      (v_Vld:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal 
                                                      (abst_prj_a 
                                                         (abst_constr n1 n2)) 
                                                      n1))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal n1 n3))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n3)))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n1))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal n1 n3))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     n3)))) 
                                         (v_Vnc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n1))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     n1))) v_Vrc v_Vnc) 
                                         (v_Vmd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal n1 n3))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n3))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal n1 n3))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     n3))) 
                                            (v_Vnd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal n1 n3))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal n1 n3))) 
                                               H12 v_Vnd) 
                                            (v_Vod:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n3)))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vuc:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vuc)) 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n3) 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n3) 
                                               (v_Vpd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_S1_equal 
                                                               (abst_prj_a 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               n3) 
                                                            (_p_S1_equal 
                                                               (abst_prj_a 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               n3))))) =>
                                                zen.Rsubst _p_S1_T 
                                                  (v_Vwc:
                                                   (zen.term _p_S1_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_S1_equal 
                                                              v_Vwc n3) 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n3)))) 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (v_Ved:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_S1_T 
                                                               (abst_prj_a 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_a 
                                                                  (abst_constr 
                                                                    n1 n2)))))) =>
                                                   zen.Rnoteq _p_S1_T 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     v_Ved) 
                                                  (v_Vpd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_S1_equal 
                                                                  (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  n3) 
                                                               (_p_S1_equal 
                                                                  (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  n3))))) =>
                                                   zen.Rsubst _p_S1_T 
                                                     (v_Vqd:
                                                      (zen.term _p_S1_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S1_equal 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 v_Vqd) 
                                                              (_p_S1_equal 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 n3)))) n3 
                                                     n3 
                                                     (v_Vrd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_S1_T n3 
                                                                  n3)))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_S1_T n3 n3)) 
                                                        v_Vtc v_Vrd) 
                                                     (v_Vpd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3) 
                                                                  (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3) 
                                                        v_Vpd) v_Vpd) v_Vpd) 
                                               (v_Vod:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal 
                                                            (abst_prj_a 
                                                               (abst_constr 
                                                                  n1 n2)) n3)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3))) 
                                                  v_Vod v_Vkc) v_Vod) v_Vmd) 
                                         v_Vld) v_Vkd) v_Vjd) 
                                _p_S1_equal_transitive) v_Vfd) v_Vsc) 
                       (v_Vpd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_S1_equal 
                                       (abst_prj_a (abst_constr n1 n2)) n3) 
                                    (_p_S1_equal 
                                       (abst_prj_a (abst_constr n1 n2)) n3))))) =>
                        zen.Rsubst _p_S1_T 
                          (v_Vqd:(zen.term _p_S1_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) v_Vqd) 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) n3)))) 
                          n3 n3 
                          (v_Vrd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle (zen.equal _p_S1_T n3 n3)))) =>
                           zen.Raxiom 
                             (zen.triangle (zen.equal _p_S1_T n3 n3)) v_Vtc 
                             v_Vrd) 
                          (v_Vpd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_S1_equal 
                                          (abst_prj_a (abst_constr n1 n2)) n3) 
                                       (_p_S1_equal 
                                          (abst_prj_a (abst_constr n1 n2)) n3))))) =>
                           zen.Rnoteq basics.bool__t 
                             (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3) 
                             v_Vpd) v_Vpd) v_Vvc) 
                    (v_Vod:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                 n3)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))) 
                       v_Vod v_Vkc) H12) 
                 (v_Vrd:
                  (zen.proof 
                     (zen.not (zen.triangle (zen.equal _p_S1_T n3 n3)))) =>
                  zen.Rcut 
                    (zen.triangle (focal.is_true (_p_S1_equal n3 n3))) 
                    (v_Vsd:
                     (zen.proof 
                        (zen.triangle (focal.is_true (_p_S1_equal n3 n3)))) =>
                     zen.Rall _p_S1_T 
                       (v_Vgd:(zen.term _p_S1_T) =>
                        zen.forall _p_S1_T 
                          (v_Vhd:(zen.term _p_S1_T) =>
                           zen.forall _p_S1_T 
                             (v_Vid:(zen.term _p_S1_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal v_Vgd v_Vhd))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S1_equal v_Vhd v_Vid))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S1_equal v_Vgd v_Vid))))))) n1 
                       (v_Vtd:
                        (zen.proof 
                           (zen.forall _p_S1_T 
                              (v_Vhd:(zen.term _p_S1_T) =>
                               zen.forall _p_S1_T 
                                 (v_Vid:(zen.term _p_S1_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n1 v_Vhd))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vhd v_Vid))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal n1 v_Vid)))))))) =>
                        zen.Rall _p_S1_T 
                          (v_Vhd:(zen.term _p_S1_T) =>
                           zen.forall _p_S1_T 
                             (v_Vid:(zen.term _p_S1_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 v_Vhd))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S1_equal v_Vhd v_Vid))) 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 v_Vid)))))) 
                          n3 
                          (v_Vud:
                           (zen.proof 
                              (zen.forall _p_S1_T 
                                 (v_Vid:(zen.term _p_S1_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n1 n3))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal n3 v_Vid))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal n1 v_Vid))))))) =>
                           zen.Rall _p_S1_T 
                             (v_Vid:(zen.term _p_S1_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 n3))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n3 v_Vid))) 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 v_Vid))))) 
                             n3 
                             (v_Vvd:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n1 n3))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n3 n3))) 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n1 n3)))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 n3))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n3 n3))) 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 n3)))) 
                                (v_Vnd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n1 n3))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 n3))) 
                                   H12 v_Vnd) 
                                (v_Vwd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n3 n3))) 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n1 n3))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n3 n3))) 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 n3))) 
                                   (v_Vxd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal n3 n3))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true (_p_S1_equal n3 n3))) 
                                      v_Vsd v_Vxd) 
                                   (H12:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n1 n3)))) =>
                                    zen.Rsubst basics.bool__t 
                                      (v_Vuc:(zen.term basics.bool__t) =>
                                       zen.triangle (focal.is_true v_Vuc)) 
                                      (_p_S1_equal n1 n3) 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n1 n2)) n3) 
                                      (v_Vvc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (_p_S1_equal n1 n3) 
                                                   (_p_S1_equal 
                                                      (abst_prj_a 
                                                         (abst_constr n1 n2)) 
                                                      n3))))) =>
                                       zen.Rsubst _p_S1_T 
                                         (v_Vwc:(zen.term _p_S1_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_S1_equal v_Vwc n3) 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     n3)))) n1 
                                         (abst_prj_a (abst_constr n1 n2)) 
                                         (v_Vxc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_S1_T n1 
                                                      (abst_prj_a 
                                                         (abst_constr n1 n2)))))) =>
                                          zen.Rnotand 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_S1_T 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     n1))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        n1)))) 
                                            (v_Vyc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_S1_T 
                                                            (abst_prj_a 
                                                               (abst_constr 
                                                                  n1 n2)) n1))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (zen.equal _p_S1_T 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     n1)) 
                                               (v_Vzc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal _p_S1_T 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n1))) =>
                                                zen.Reqsym _p_S1_T 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n1 
                                                  v_Vzc v_Vxc) v_Vyc) 
                                            (v_Vfd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal 
                                                               (abst_prj_a 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               n1)))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        n1))) 
                                               (v_Vrc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal 
                                                            (abst_prj_a 
                                                               (abst_constr 
                                                                  n1 n2)) n1)))) =>
                                                zen.Rall _p_S1_T 
                                                  (v_Vgd:
                                                   (zen.term _p_S1_T) =>
                                                   zen.forall _p_S1_T 
                                                     (v_Vhd:
                                                      (zen.term _p_S1_T) =>
                                                      zen.forall _p_S1_T 
                                                        (v_Vid:
                                                         (zen.term _p_S1_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    v_Vgd 
                                                                    v_Vhd))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    v_Vhd 
                                                                    v_Vid))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    v_Vgd 
                                                                    v_Vid))))))) 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (v_Vjd:
                                                   (zen.proof 
                                                      (zen.forall _p_S1_T 
                                                         (v_Vhd:
                                                          (zen.term _p_S1_T) =>
                                                          zen.forall _p_S1_T 
                                                            (v_Vid:
                                                             (zen.term 
                                                                _p_S1_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vhd))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vhd 
                                                                    v_Vid))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vid)))))))) =>
                                                   zen.Rall _p_S1_T 
                                                     (v_Vhd:
                                                      (zen.term _p_S1_T) =>
                                                      zen.forall _p_S1_T 
                                                        (v_Vid:
                                                         (zen.term _p_S1_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vhd))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    v_Vhd 
                                                                    v_Vid))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vid)))))) 
                                                     n1 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.forall _p_S1_T 
                                                            (v_Vid:
                                                             (zen.term 
                                                                _p_S1_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n1))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vid))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vid))))))) =>
                                                      zen.Rall _p_S1_T 
                                                        (v_Vid:
                                                         (zen.term _p_S1_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n1))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    n1 v_Vid))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vid))))) 
                                                        n3 
                                                        (v_Vld:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n1))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3)))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n1))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    n1 n3))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3)))) 
                                                           (v_Vnc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n1))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n1))) 
                                                              v_Vrc v_Vnc) 
                                                           (v_Vmd:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    n1 n3))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                              (v_Vnd:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                 H12 v_Vnd) 
                                                              (v_Vod:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                 v_Vod v_Vkc) 
                                                              v_Vmd) v_Vld) 
                                                        v_Vkd) v_Vjd) 
                                                  _p_S1_equal_transitive) 
                                               v_Vfd) v_Vsc) 
                                         (v_Vpd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n3) 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n3))))) =>
                                          zen.Rsubst _p_S1_T 
                                            (v_Vqd:(zen.term _p_S1_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        v_Vqd) 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        n3)))) n3 n3 
                                            (v_Vrd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_S1_T n3 
                                                         n3)))) =>
                                             zen.Rnoteq _p_S1_T n3 v_Vrd) 
                                            (v_Vpd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_S1_equal 
                                                            (abst_prj_a 
                                                               (abst_constr 
                                                                  n1 n2)) n3) 
                                                         (_p_S1_equal 
                                                            (abst_prj_a 
                                                               (abst_constr 
                                                                  n1 n2)) n3))))) =>
                                             zen.Rnoteq basics.bool__t 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n3) 
                                               v_Vpd) v_Vpd) v_Vvc) 
                                      (v_Vod:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal 
                                                   (abst_prj_a 
                                                      (abst_constr n1 n2)) n3)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n3))) 
                                         v_Vod v_Vkc) H12) v_Vwd) v_Vvd) 
                             v_Vud) v_Vtd) _p_S1_equal_transitive) 
                    (v_Vxd:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (_p_S1_equal n3 n3))))) =>
                     zen.Rnoteq _p_S1_T n3 v_Vrd))))))) 
    (n1:(cc.eT _p_S1_T) =>
     n3:(cc.eT _p_S1_T) =>
     n2:(cc.eT _p_S2_T) =>
     n4:(cc.eT _p_S2_T) =>
     H1:
     (dk_logic.eP 
        (dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) =>
     (__B_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.and 
            (dk_logic.ebP 
               (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                  (abst_prj_a (abst_constr n3 n4)))) 
            (dk_logic.ebP 
               (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                  (abst_prj_b (abst_constr n3 n4)))))) =>
      (__B_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                (abst_prj_a (abst_constr n3 n4))))) =>
       (__B_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                 (abst_prj_b (abst_constr n3 n4))))) =>
        (__B_1_4_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))) =>
         (__B_1_5_LEMMA:
          (dk_logic.eP 
             (dk_logic.ebP (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))) =>
          (__B_1_6_LEMMA:(dk_logic.eP (dk_logic.ebP (_p_S1_equal n1 n3))) =>
           (__B_1_7_LEMMA:(dk_logic.eP (dk_logic.ebP (_p_S2_equal n2 n4))) =>
            zen.nnpp 
              (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                 (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) 
              (v_Vzb:
               (zen.proof 
                  (zen.not 
                     (zen.and 
                        (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                        (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))))) =>
               zen.Rnotand 
                 (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                 (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
                 (v_Vac:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle (focal.is_true (_p_S1_equal n1 n3))))) =>
                  zen.Raxiom 
                    (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                    __B_1_6_LEMMA v_Vac) 
                 (v_Vbc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle (focal.is_true (_p_S2_equal n2 n4))))) =>
                  zen.Raxiom 
                    (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
                    __B_1_7_LEMMA v_Vbc) v_Vzb)) 
             (zen.nnpp (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
                (v_Vkc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle (focal.is_true (_p_S2_equal n2 n4))))) =>
                 zen.Rcut 
                   (zen.and 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_S2_T n2 
                               (abst_prj_b (abst_constr n1 n2))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S2_equal n2 
                                  (abst_prj_b (abst_constr n1 n2))))))) 
                   (v_Vlc:
                    (zen.proof 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_S2_T n2 
                                   (abst_prj_b (abst_constr n1 n2))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal n2 
                                      (abst_prj_b (abst_constr n1 n2)))))))) =>
                    zen.Rand 
                      (zen.not 
                         (zen.triangle 
                            (zen.equal _p_S2_T n2 
                               (abst_prj_b (abst_constr n1 n2))))) 
                      (zen.not 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S2_equal n2 
                                  (abst_prj_b (abst_constr n1 n2)))))) 
                      (v_Vmc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_S2_T n2 
                                   (abst_prj_b (abst_constr n1 n2)))))) =>
                       v_Vnc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal n2 
                                      (abst_prj_b (abst_constr n1 n2))))))) =>
                       zen.Rall _p_S1_T 
                         (v_Voc:(zen.term _p_S1_T) =>
                          zen.forall _p_S2_T 
                            (v_Vpc:(zen.term _p_S2_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr v_Voc v_Vpc)) 
                                     v_Vpc)))) n1 
                         (v_Vqc:
                          (zen.proof 
                             (zen.forall _p_S2_T 
                                (v_Vpc:(zen.term _p_S2_T) =>
                                 zen.triangle 
                                   (focal.is_true 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 v_Vpc)) 
                                         v_Vpc))))) =>
                          zen.Rall _p_S2_T 
                            (v_Vpc:(zen.term _p_S2_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_S2_equal 
                                     (abst_prj_b (abst_constr n1 v_Vpc)) 
                                     v_Vpc))) n2 
                            (v_Vrc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) n2)))) =>
                             zen.Rall _p_S2_T 
                               (v_Vsc:(zen.term _p_S2_T) =>
                                zen.forall _p_S2_T 
                                  (v_Vtc:(zen.term _p_S2_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal v_Vsc v_Vtc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal v_Vtc v_Vsc))))) 
                               (abst_prj_b (abst_constr n1 n2)) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.forall _p_S2_T 
                                      (v_Vtc:(zen.term _p_S2_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)) 
                                                  v_Vtc))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal v_Vtc 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)))))))) =>
                                zen.Rall _p_S2_T 
                                  (v_Vtc:(zen.term _p_S2_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              v_Vtc))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal v_Vtc 
                                              (abst_prj_b (abst_constr n1 n2)))))) 
                                  n2 
                                  (v_Vvc:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)) n2))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal n2 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              n2))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal n2 
                                              (abst_prj_b (abst_constr n1 n2))))) 
                                     (v_Vwc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n2))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)) n2))) 
                                        v_Vrc v_Vwc) 
                                     (v_Vxc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal n2 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal n2 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2))))) 
                                        v_Vxc v_Vnc) v_Vvc) v_Vuc) 
                               _p_S2_equal_symmetric) v_Vqc) 
                         abst_prj_b_is_snd_of_pair) v_Vlc) 
                   (v_Vyc:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_S2_T n2 
                                      (abst_prj_b (abst_constr n1 n2))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S2_equal n2 
                                         (abst_prj_b (abst_constr n1 n2))))))))) =>
                    zen.Rcut (zen.triangle (zen.equal _p_S2_T n4 n4)) 
                      (v_Vzc:
                       (zen.proof (zen.triangle (zen.equal _p_S2_T n4 n4))) =>
                       zen.Rsubst basics.bool__t 
                         (v_Vad:(zen.term basics.bool__t) =>
                          zen.triangle (focal.is_true v_Vad)) 
                         (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4) 
                         (_p_S2_equal n2 n4) 
                         (v_Vbd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) n4) 
                                      (_p_S2_equal n2 n4))))) =>
                          zen.Rsubst _p_S2_T 
                            (v_Vcd:(zen.term _p_S2_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_S2_equal v_Vcd n4) 
                                     (_p_S2_equal n2 n4)))) 
                            (abst_prj_b (abst_constr n1 n2)) n2 
                            (v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_S2_T 
                                         (abst_prj_b (abst_constr n1 n2)) n2)))) =>
                             zen.Rnotand 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_S2_T n2 
                                        (abst_prj_b (abst_constr n1 n2))))) 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S2_equal n2 
                                           (abst_prj_b (abst_constr n1 n2)))))) 
                               (v_Ved:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_S2_T n2 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (zen.equal _p_S2_T n2 
                                        (abst_prj_b (abst_constr n1 n2)))) 
                                  (v_Vfd:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_S2_T n2 
                                            (abst_prj_b (abst_constr n1 n2))))) =>
                                   zen.Rcut 
                                     (zen.triangle (zen.equal _p_S2_T n2 n2)) 
                                     (v_Vgd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_S2_T n2 n2))) =>
                                      zen.Rsubst _p_S2_T 
                                        (v_Vhd:(zen.term _p_S2_T) =>
                                         zen.triangle 
                                           (zen.equal _p_S2_T v_Vhd n2)) n2 
                                        (abst_prj_b (abst_constr n1 n2)) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_S2_T n2 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_S2_T n2 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)))) 
                                           v_Vfd v_Vmc) 
                                        (v_Vid:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_S2_T 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)) n2))) =>
                                         zen.Rsubst _p_S2_T 
                                           (v_Vjd:(zen.term _p_S2_T) =>
                                            zen.triangle 
                                              (zen.equal _p_S2_T 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)) 
                                                 v_Vjd)) n2 n2 
                                           (v_Vkd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_S2_T n2 n2)))) =>
                                            zen.Rnoteq _p_S2_T n2 v_Vkd) 
                                           (v_Vid:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_S2_T 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n2))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (zen.equal _p_S2_T 
                                                    (abst_prj_b 
                                                       (abst_constr n1 n2)) 
                                                    n2)) v_Vid v_Vdd) v_Vid) 
                                        v_Vgd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_S2_T n2 n2)))) =>
                                      zen.Rnoteq _p_S2_T n2 v_Vkd)) v_Ved) 
                               (v_Vld:
                                (zen.proof 
                                   (zen.not 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal n2 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)))))))) =>
                                zen.Rnotnot 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S2_equal n2 
                                           (abst_prj_b (abst_constr n1 n2))))) 
                                  (v_Vxc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal n2 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)))))) =>
                                   zen.Rall _p_S2_T 
                                     (v_Vsc:(zen.term _p_S2_T) =>
                                      zen.forall _p_S2_T 
                                        (v_Vtc:(zen.term _p_S2_T) =>
                                         zen.forall _p_S2_T 
                                           (v_Vmd:(zen.term _p_S2_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vsc v_Vtc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal v_Vtc 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal v_Vsc 
                                                          v_Vmd))))))) n2 
                                     (v_Vnd:
                                      (zen.proof 
                                         (zen.forall _p_S2_T 
                                            (v_Vtc:(zen.term _p_S2_T) =>
                                             zen.forall _p_S2_T 
                                               (v_Vmd:(zen.term _p_S2_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n2 v_Vtc))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal 
                                                              v_Vtc v_Vmd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal n2 
                                                              v_Vmd)))))))) =>
                                      zen.Rall _p_S2_T 
                                        (v_Vtc:(zen.term _p_S2_T) =>
                                         zen.forall _p_S2_T 
                                           (v_Vmd:(zen.term _p_S2_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n2 v_Vtc))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal v_Vtc 
                                                          v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n2 v_Vmd)))))) 
                                        (abst_prj_b (abst_constr n1 n2)) 
                                        (v_Vod:
                                         (zen.proof 
                                            (zen.forall _p_S2_T 
                                               (v_Vmd:(zen.term _p_S2_T) =>
                                                zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n2 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              v_Vmd))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal n2 
                                                              v_Vmd))))))) =>
                                         zen.Rall _p_S2_T 
                                           (v_Vmd:(zen.term _p_S2_T) =>
                                            zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n2 
                                                       (abst_prj_b 
                                                          (abst_constr n1 n2))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) v_Vmd))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n2 v_Vmd))))) 
                                           n4 
                                           (v_Vpd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n2 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2))))) 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n4))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal n2 n4)))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n2 
                                                       (abst_prj_b 
                                                          (abst_constr n1 n2))))) 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n4))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n2 n4)))) 
                                              (v_Vnc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal n2 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n2 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2))))) 
                                                 v_Vxc v_Vnc) 
                                              (v_Vqd:
                                               (zen.proof 
                                                  (zen.imp 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n4))) 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal n2 n4))))) =>
                                               zen.Rimply 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) n4))) 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n2 n4))) 
                                                 (v_Vrd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S2_equal 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 n4))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal 
                                                             (abst_prj_b 
                                                                (abst_constr 
                                                                   n1 n2)) n4))) 
                                                    __B_1_5_LEMMA v_Vrd) 
                                                 (v_Vsd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal n2 n4)))) =>
                                                  zen.Rsubst basics.bool__t 
                                                    (v_Vad:
                                                     (zen.term basics.bool__t) =>
                                                     zen.triangle 
                                                       (focal.is_true v_Vad)) 
                                                    (_p_S2_equal n2 n4) 
                                                    (_p_S2_equal n2 n4) 
                                                    (v_Vtd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_S2_equal 
                                                                    n2 n4) 
                                                                 (_p_S2_equal 
                                                                    n2 n4))))) =>
                                                     zen.Rsubst _p_S2_T 
                                                       (v_Vcd:
                                                        (zen.term _p_S2_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S2_equal 
                                                                   v_Vcd n4) 
                                                                (_p_S2_equal 
                                                                   n2 n4)))) 
                                                       n2 n2 
                                                       (v_Vkd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_S2_T 
                                                                    n2 n2)))) =>
                                                        zen.Rnoteq _p_S2_T 
                                                          n2 v_Vkd) 
                                                       (v_Vtd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_S2_equal 
                                                                    n2 n4) 
                                                                    (
                                                                    _p_S2_equal 
                                                                    n2 n4))))) =>
                                                        zen.Rsubst _p_S2_T 
                                                          (v_Vud:
                                                           (zen.term _p_S2_T) =>
                                                           zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_S2_equal 
                                                                    n2 v_Vud) 
                                                                   (_p_S2_equal 
                                                                    n2 n4)))) 
                                                          n4 n4 
                                                          (v_Vvd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_S2_T 
                                                                    n4 n4)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_S2_T 
                                                                   n4 n4)) 
                                                             v_Vzc v_Vvd) 
                                                          (v_Vtd:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    n2 n4) 
                                                                    (_p_S2_equal 
                                                                    n2 n4))))) =>
                                                           zen.Rnoteq 
                                                             basics.bool__t 
                                                             (_p_S2_equal n2 
                                                                n4) v_Vtd) 
                                                          v_Vtd) v_Vtd) 
                                                    (v_Vsd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S2_equal 
                                                                 n2 n4)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n2 
                                                                n4))) v_Vsd 
                                                       v_Vkc) v_Vsd) v_Vqd) 
                                              v_Vpd) v_Vod) v_Vnd) 
                                     _p_S2_equal_transitive) v_Vld) v_Vyc) 
                            (v_Vtd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_S2_equal n2 n4) 
                                         (_p_S2_equal n2 n4))))) =>
                             zen.Rsubst _p_S2_T 
                               (v_Vud:(zen.term _p_S2_T) =>
                                zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_S2_equal n2 v_Vud) 
                                        (_p_S2_equal n2 n4)))) n4 n4 
                               (v_Vvd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle (zen.equal _p_S2_T n4 n4)))) =>
                                zen.Raxiom 
                                  (zen.triangle (zen.equal _p_S2_T n4 n4)) 
                                  v_Vzc v_Vvd) 
                               (v_Vtd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_S2_equal n2 n4) 
                                            (_p_S2_equal n2 n4))))) =>
                                zen.Rnoteq basics.bool__t 
                                  (_p_S2_equal n2 n4) v_Vtd) v_Vtd) v_Vbd) 
                         (v_Vsd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n2 n4)))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
                            v_Vsd v_Vkc) __B_1_5_LEMMA) 
                      (v_Vvd:
                       (zen.proof 
                          (zen.not (zen.triangle (zen.equal _p_S2_T n4 n4)))) =>
                       zen.Rcut 
                         (zen.triangle (focal.is_true (_p_S2_equal n4 n4))) 
                         (v_Vwd:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n4 n4)))) =>
                          zen.Rall _p_S2_T 
                            (v_Vsc:(zen.term _p_S2_T) =>
                             zen.forall _p_S2_T 
                               (v_Vtc:(zen.term _p_S2_T) =>
                                zen.forall _p_S2_T 
                                  (v_Vmd:(zen.term _p_S2_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal v_Vsc v_Vtc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal v_Vtc v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal v_Vsc v_Vmd))))))) 
                            (abst_prj_b (abst_constr n1 n2)) 
                            (v_Vxd:
                             (zen.proof 
                                (zen.forall _p_S2_T 
                                   (v_Vtc:(zen.term _p_S2_T) =>
                                    zen.forall _p_S2_T 
                                      (v_Vmd:(zen.term _p_S2_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)) 
                                                  v_Vtc))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal v_Vtc v_Vmd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     v_Vmd)))))))) =>
                             zen.Rall _p_S2_T 
                               (v_Vtc:(zen.term _p_S2_T) =>
                                zen.forall _p_S2_T 
                                  (v_Vmd:(zen.term _p_S2_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              v_Vtc))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal v_Vtc v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)) 
                                                 v_Vmd)))))) n4 
                               (v_Vyd:
                                (zen.proof 
                                   (zen.forall _p_S2_T 
                                      (v_Vmd:(zen.term _p_S2_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)) n4))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal n4 v_Vmd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     v_Vmd))))))) =>
                                zen.Rall _p_S2_T 
                                  (v_Vmd:(zen.term _p_S2_T) =>
                                   zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              n4))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal n4 v_Vmd))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)) 
                                                 v_Vmd))))) n4 
                                  (v_Vzd:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)) n4))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal n4 n4))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n4)))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S2_equal 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              n4))) 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n4 n4))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)) n4)))) 
                                     (v_Vrd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n4))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)) n4))) 
                                        __B_1_5_LEMMA v_Vrd) 
                                     (v_Vae:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal n4 n4))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n4))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n4 n4))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal 
                                                 (abst_prj_b 
                                                    (abst_constr n1 n2)) n4))) 
                                        (v_Vbe:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal n4 n4))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal n4 n4))) v_Vwd 
                                           v_Vbe) 
                                        (__B_1_5_LEMMA:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n4)))) =>
                                         zen.Rsubst basics.bool__t 
                                           (v_Vad:
                                            (zen.term basics.bool__t) =>
                                            zen.triangle 
                                              (focal.is_true v_Vad)) 
                                           (_p_S2_equal 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              n4) (_p_S2_equal n2 n4) 
                                           (v_Vbd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) n4) 
                                                        (_p_S2_equal n2 n4))))) =>
                                            zen.Rsubst _p_S2_T 
                                              (v_Vcd:(zen.term _p_S2_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_S2_equal v_Vcd n4) 
                                                       (_p_S2_equal n2 n4)))) 
                                              (abst_prj_b (abst_constr n1 n2)) 
                                              n2 
                                              (v_Vdd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_S2_T 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) n2)))) =>
                                               zen.Rnotand 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_S2_T n2 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2))))) 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal n2 
                                                             (abst_prj_b 
                                                                (abst_constr 
                                                                   n1 n2)))))) 
                                                 (v_Ved:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S2_T n2 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (zen.equal _p_S2_T n2 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)))) 
                                                    (v_Vfd:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_S2_T n2 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2))))) =>
                                                     zen.Reqsym _p_S2_T n2 
                                                       (abst_prj_b 
                                                          (abst_constr n1 n2)) 
                                                       v_Vfd v_Vdd) v_Ved) 
                                                 (v_Vld:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n2 
                                                                    (
                                                                    abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)))))))) =>
                                                  zen.Rnotnot 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal n2 
                                                             (abst_prj_b 
                                                                (abst_constr 
                                                                   n1 n2))))) 
                                                    (v_Vxc:
                                                     (zen.proof 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S2_equal 
                                                                 n2 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)))))) =>
                                                     zen.Rall _p_S2_T 
                                                       (v_Vsc:
                                                        (zen.term _p_S2_T) =>
                                                        zen.forall _p_S2_T 
                                                          (v_Vtc:
                                                           (zen.term _p_S2_T) =>
                                                           zen.forall 
                                                             _p_S2_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_S2_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vsc 
                                                                    v_Vtc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vtc 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vsc 
                                                                    v_Vmd))))))) 
                                                       n2 
                                                       (v_Vnd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_S2_T 
                                                              (v_Vtc:
                                                               (zen.term 
                                                                  _p_S2_T) =>
                                                               zen.forall 
                                                                 _p_S2_T 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    _p_S2_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vtc))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vtc 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vmd)))))))) =>
                                                        zen.Rall _p_S2_T 
                                                          (v_Vtc:
                                                           (zen.term _p_S2_T) =>
                                                           zen.forall 
                                                             _p_S2_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_S2_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vtc))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vtc 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vmd)))))) 
                                                          (abst_prj_b 
                                                             (abst_constr n1 
                                                                n2)) 
                                                          (v_Vod:
                                                           (zen.proof 
                                                              (zen.forall 
                                                                 _p_S2_T 
                                                                 (v_Vmd:
                                                                  (zen.term 
                                                                    _p_S2_T) =>
                                                                  zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vmd))))))) =>
                                                           zen.Rall _p_S2_T 
                                                             (v_Vmd:
                                                              (zen.term 
                                                                 _p_S2_T) =>
                                                              zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vmd))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vmd))))) 
                                                             n4 
                                                             (v_Vpd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4)))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4)))) 
                                                                (v_Vnc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                   v_Vxc 
                                                                   v_Vnc) 
                                                                (v_Vqd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))))) =>
                                                                 zen.Rimply 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                   (v_Vrd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                    __B_1_5_LEMMA 
                                                                    v_Vrd) 
                                                                   (v_Vsd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                    v_Vsd 
                                                                    v_Vkc) 
                                                                   v_Vqd) 
                                                                v_Vpd) v_Vod) 
                                                          v_Vnd) 
                                                       _p_S2_equal_transitive) 
                                                    v_Vld) v_Vyc) 
                                              (v_Vtd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_S2_equal n2 n4) 
                                                           (_p_S2_equal n2 n4))))) =>
                                               zen.Rsubst _p_S2_T 
                                                 (v_Vud:(zen.term _p_S2_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_S2_equal n2 
                                                             v_Vud) 
                                                          (_p_S2_equal n2 n4)))) 
                                                 n4 n4 
                                                 (v_Vvd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_S2_T n4 n4)))) =>
                                                  zen.Rnoteq _p_S2_T n4 v_Vvd) 
                                                 (v_Vtd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S2_equal 
                                                                 n2 n4) 
                                                              (_p_S2_equal 
                                                                 n2 n4))))) =>
                                                  zen.Rnoteq basics.bool__t 
                                                    (_p_S2_equal n2 n4) v_Vtd) 
                                                 v_Vtd) v_Vbd) 
                                           (v_Vsd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal n2 n4)))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n2 n4))) 
                                              v_Vsd v_Vkc) __B_1_5_LEMMA) 
                                        v_Vae) v_Vzd) v_Vyd) v_Vxd) 
                            _p_S2_equal_transitive) 
                         (v_Vbe:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n4 n4))))) =>
                          zen.Rnoteq _p_S2_T n4 v_Vvd)))))) 
            (zen.nnpp (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
               (v_Vkc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle (focal.is_true (_p_S1_equal n1 n3))))) =>
                zen.Rcut 
                  (zen.and 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal _p_S1_T n1 
                              (abst_prj_a (abst_constr n1 n2))))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal n1 
                                 (abst_prj_a (abst_constr n1 n2))))))) 
                  (v_Vlc:
                   (zen.proof 
                      (zen.and 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_S1_T n1 
                                  (abst_prj_a (abst_constr n1 n2))))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal n1 
                                     (abst_prj_a (abst_constr n1 n2)))))))) =>
                   zen.Rand 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal _p_S1_T n1 
                              (abst_prj_a (abst_constr n1 n2))))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (_p_S1_equal n1 
                                 (abst_prj_a (abst_constr n1 n2)))))) 
                     (v_Vmc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal _p_S1_T n1 
                                  (abst_prj_a (abst_constr n1 n2)))))) =>
                      v_Vnc:
                      (zen.proof 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal n1 
                                     (abst_prj_a (abst_constr n1 n2))))))) =>
                      zen.Rall _p_S1_T 
                        (v_Voc:(zen.term _p_S1_T) =>
                         zen.forall _p_S2_T 
                           (v_Vpc:(zen.term _p_S2_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal 
                                    (abst_prj_a (abst_constr v_Voc v_Vpc)) 
                                    v_Voc)))) n1 
                        (v_Vqc:
                         (zen.proof 
                            (zen.forall _p_S2_T 
                               (v_Vpc:(zen.term _p_S2_T) =>
                                zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 v_Vpc)) 
                                        n1))))) =>
                         zen.Rall _p_S2_T 
                           (v_Vpc:(zen.term _p_S2_T) =>
                            zen.triangle 
                              (focal.is_true 
                                 (_p_S1_equal 
                                    (abst_prj_a (abst_constr n1 v_Vpc)) n1))) 
                           n2 
                           (v_Vrc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) n1)))) =>
                            zen.Rall _p_S1_T 
                              (v_Vsc:(zen.term _p_S1_T) =>
                               zen.forall _p_S1_T 
                                 (v_Vtc:(zen.term _p_S1_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal v_Vsc v_Vtc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal v_Vtc v_Vsc))))) 
                              (abst_prj_a (abst_constr n1 n2)) 
                              (v_Vuc:
                               (zen.proof 
                                  (zen.forall _p_S1_T 
                                     (v_Vtc:(zen.term _p_S1_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)) 
                                                 v_Vtc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal v_Vtc 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)))))))) =>
                               zen.Rall _p_S1_T 
                                 (v_Vtc:(zen.term _p_S1_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             v_Vtc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal v_Vtc 
                                             (abst_prj_a (abst_constr n1 n2)))))) 
                                 n1 
                                 (v_Vvc:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)) n1))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal n1 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2))))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             n1))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal n1 
                                             (abst_prj_a (abst_constr n1 n2))))) 
                                    (v_Vwc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n1))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)) n1))) 
                                       v_Vrc v_Vwc) 
                                    (v_Vxc:
                                     (zen.proof 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal n1 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal n1 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2))))) 
                                       v_Vxc v_Vnc) v_Vvc) v_Vuc) 
                              _p_S1_equal_symmetric) v_Vqc) 
                        abst_prj_a_is_first_of_pair) v_Vlc) 
                  (v_Vyc:
                   (zen.proof 
                      (zen.not 
                         (zen.and 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_S1_T n1 
                                     (abst_prj_a (abst_constr n1 n2))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal n1 
                                        (abst_prj_a (abst_constr n1 n2))))))))) =>
                   zen.Rcut (zen.triangle (zen.equal _p_S1_T n3 n3)) 
                     (v_Vzc:
                      (zen.proof (zen.triangle (zen.equal _p_S1_T n3 n3))) =>
                      zen.Rsubst basics.bool__t 
                        (v_Vad:(zen.term basics.bool__t) =>
                         zen.triangle (focal.is_true v_Vad)) 
                        (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3) 
                        (_p_S1_equal n1 n3) 
                        (v_Vbd:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) n3) 
                                     (_p_S1_equal n1 n3))))) =>
                         zen.Rsubst _p_S1_T 
                           (v_Vcd:(zen.term _p_S1_T) =>
                            zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_S1_equal v_Vcd n3) 
                                    (_p_S1_equal n1 n3)))) 
                           (abst_prj_a (abst_constr n1 n2)) n1 
                           (v_Vdd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal _p_S1_T 
                                        (abst_prj_a (abst_constr n1 n2)) n1)))) =>
                            zen.Rnotand 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_S1_T n1 
                                       (abst_prj_a (abst_constr n1 n2))))) 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S1_equal n1 
                                          (abst_prj_a (abst_constr n1 n2)))))) 
                              (v_Ved:
                               (zen.proof 
                                  (zen.not 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_S1_T n1 
                                              (abst_prj_a (abst_constr n1 n2))))))) =>
                               zen.Rnotnot 
                                 (zen.triangle 
                                    (zen.equal _p_S1_T n1 
                                       (abst_prj_a (abst_constr n1 n2)))) 
                                 (v_Vfd:
                                  (zen.proof 
                                     (zen.triangle 
                                        (zen.equal _p_S1_T n1 
                                           (abst_prj_a (abst_constr n1 n2))))) =>
                                  zen.Rcut 
                                    (zen.triangle (zen.equal _p_S1_T n1 n1)) 
                                    (v_Vgd:
                                     (zen.proof 
                                        (zen.triangle 
                                           (zen.equal _p_S1_T n1 n1))) =>
                                     zen.Rsubst _p_S1_T 
                                       (v_Vhd:(zen.term _p_S1_T) =>
                                        zen.triangle 
                                          (zen.equal _p_S1_T v_Vhd n1)) n1 
                                       (abst_prj_a (abst_constr n1 n2)) 
                                       (v_Vmc:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal _p_S1_T n1 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (zen.equal _p_S1_T n1 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)))) 
                                          v_Vfd v_Vmc) 
                                       (v_Vid:
                                        (zen.proof 
                                           (zen.triangle 
                                              (zen.equal _p_S1_T 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)) n1))) =>
                                        zen.Rsubst _p_S1_T 
                                          (v_Vjd:(zen.term _p_S1_T) =>
                                           zen.triangle 
                                             (zen.equal _p_S1_T 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)) v_Vjd)) 
                                          n1 n1 
                                          (v_Vkd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_S1_T n1 n1)))) =>
                                           zen.Rnoteq _p_S1_T n1 v_Vkd) 
                                          (v_Vid:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (zen.equal _p_S1_T 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n1))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (zen.equal _p_S1_T 
                                                   (abst_prj_a 
                                                      (abst_constr n1 n2)) n1)) 
                                             v_Vid v_Vdd) v_Vid) v_Vgd) 
                                    (v_Vkd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (zen.equal _p_S1_T n1 n1)))) =>
                                     zen.Rnoteq _p_S1_T n1 v_Vkd)) v_Ved) 
                              (v_Vld:
                               (zen.proof 
                                  (zen.not 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal n1 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)))))))) =>
                               zen.Rnotnot 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S1_equal n1 
                                          (abst_prj_a (abst_constr n1 n2))))) 
                                 (v_Vxc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal n1 
                                              (abst_prj_a (abst_constr n1 n2)))))) =>
                                  zen.Rall _p_S1_T 
                                    (v_Vsc:(zen.term _p_S1_T) =>
                                     zen.forall _p_S1_T 
                                       (v_Vtc:(zen.term _p_S1_T) =>
                                        zen.forall _p_S1_T 
                                          (v_Vmd:(zen.term _p_S1_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal v_Vsc v_Vtc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal v_Vtc 
                                                         v_Vmd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal v_Vsc 
                                                         v_Vmd))))))) n1 
                                    (v_Vnd:
                                     (zen.proof 
                                        (zen.forall _p_S1_T 
                                           (v_Vtc:(zen.term _p_S1_T) =>
                                            zen.forall _p_S1_T 
                                              (v_Vmd:(zen.term _p_S1_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal n1 v_Vtc))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal v_Vtc 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 
                                                             v_Vmd)))))))) =>
                                     zen.Rall _p_S1_T 
                                       (v_Vtc:(zen.term _p_S1_T) =>
                                        zen.forall _p_S1_T 
                                          (v_Vmd:(zen.term _p_S1_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal n1 v_Vtc))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal v_Vtc 
                                                         v_Vmd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal n1 v_Vmd)))))) 
                                       (abst_prj_a (abst_constr n1 n2)) 
                                       (v_Vod:
                                        (zen.proof 
                                           (zen.forall _p_S1_T 
                                              (v_Vmd:(zen.term _p_S1_T) =>
                                               zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal n1 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2)) 
                                                             v_Vmd))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 
                                                             v_Vmd))))))) =>
                                        zen.Rall _p_S1_T 
                                          (v_Vmd:(zen.term _p_S1_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal n1 
                                                      (abst_prj_a 
                                                         (abst_constr n1 n2))))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) v_Vmd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal n1 v_Vmd))))) 
                                          n3 
                                          (v_Vpd:
                                           (zen.proof 
                                              (zen.imp 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal n1 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2))))) 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2)) n3))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 n3)))))) =>
                                           zen.Rimply 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal n1 
                                                      (abst_prj_a 
                                                         (abst_constr n1 n2))))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n3))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal n1 n3)))) 
                                             (v_Vnc:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2))))))) =>
                                              zen.Raxiom 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal n1 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2))))) v_Vxc 
                                                v_Vnc) 
                                             (v_Vqd:
                                              (zen.proof 
                                                 (zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2)) n3))) 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 n3))))) =>
                                              zen.Rimply 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) n3))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S1_equal n1 n3))) 
                                                (v_Vrd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n1 n2)) 
                                                                n3))))) =>
                                                 zen.Raxiom 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal 
                                                            (abst_prj_a 
                                                               (abst_constr 
                                                                  n1 n2)) n3))) 
                                                   __B_1_4_LEMMA v_Vrd) 
                                                (v_Vsd:
                                                 (zen.proof 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 n3)))) =>
                                                 zen.Rsubst basics.bool__t 
                                                   (v_Vad:
                                                    (zen.term basics.bool__t) =>
                                                    zen.triangle 
                                                      (focal.is_true v_Vad)) 
                                                   (_p_S1_equal n1 n3) 
                                                   (_p_S1_equal n1 n3) 
                                                   (v_Vtd:
                                                    (zen.proof 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S1_equal 
                                                                   n1 n3) 
                                                                (_p_S1_equal 
                                                                   n1 n3))))) =>
                                                    zen.Rsubst _p_S1_T 
                                                      (v_Vcd:
                                                       (zen.term _p_S1_T) =>
                                                       zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_S1_equal 
                                                                  v_Vcd n3) 
                                                               (_p_S1_equal 
                                                                  n1 n3)))) 
                                                      n1 n1 
                                                      (v_Vkd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   _p_S1_T 
                                                                   n1 n1)))) =>
                                                       zen.Rnoteq _p_S1_T n1 
                                                         v_Vkd) 
                                                      (v_Vtd:
                                                       (zen.proof 
                                                          (zen.not 
                                                             (zen.triangle 
                                                                (zen.equal 
                                                                   basics.bool__t 
                                                                   (_p_S1_equal 
                                                                    n1 n3) 
                                                                   (_p_S1_equal 
                                                                    n1 n3))))) =>
                                                       zen.Rsubst _p_S1_T 
                                                         (v_Vud:
                                                          (zen.term _p_S1_T) =>
                                                          zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_S1_equal 
                                                                    n1 v_Vud) 
                                                                  (_p_S1_equal 
                                                                    n1 n3)))) 
                                                         n3 n3 
                                                         (v_Vvd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    _p_S1_T 
                                                                    n3 n3)))) =>
                                                          zen.Raxiom 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_S1_T n3 
                                                                  n3)) v_Vzc 
                                                            v_Vvd) 
                                                         (v_Vtd:
                                                          (zen.proof 
                                                             (zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    n1 n3) 
                                                                    (_p_S1_equal 
                                                                    n1 n3))))) =>
                                                          zen.Rnoteq 
                                                            basics.bool__t 
                                                            (_p_S1_equal n1 
                                                               n3) v_Vtd) 
                                                         v_Vtd) v_Vtd) 
                                                   (v_Vsd:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n1 
                                                                n3)))) =>
                                                    zen.Raxiom 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S1_equal n1 
                                                               n3))) v_Vsd 
                                                      v_Vkc) v_Vsd) v_Vqd) 
                                             v_Vpd) v_Vod) v_Vnd) 
                                    _p_S1_equal_transitive) v_Vld) v_Vyc) 
                           (v_Vtd:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (zen.equal basics.bool__t 
                                        (_p_S1_equal n1 n3) 
                                        (_p_S1_equal n1 n3))))) =>
                            zen.Rsubst _p_S1_T 
                              (v_Vud:(zen.term _p_S1_T) =>
                               zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_S1_equal n1 v_Vud) 
                                       (_p_S1_equal n1 n3)))) n3 n3 
                              (v_Vvd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle (zen.equal _p_S1_T n3 n3)))) =>
                               zen.Raxiom 
                                 (zen.triangle (zen.equal _p_S1_T n3 n3)) 
                                 v_Vzc v_Vvd) 
                              (v_Vtd:
                               (zen.proof 
                                  (zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_S1_equal n1 n3) 
                                           (_p_S1_equal n1 n3))))) =>
                               zen.Rnoteq basics.bool__t (_p_S1_equal n1 n3) 
                                 v_Vtd) v_Vtd) v_Vbd) 
                        (v_Vsd:
                         (zen.proof 
                            (zen.triangle (focal.is_true (_p_S1_equal n1 n3)))) =>
                         zen.Raxiom 
                           (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                           v_Vsd v_Vkc) __B_1_4_LEMMA) 
                     (v_Vvd:
                      (zen.proof 
                         (zen.not (zen.triangle (zen.equal _p_S1_T n3 n3)))) =>
                      zen.Rcut 
                        (zen.triangle (focal.is_true (_p_S1_equal n3 n3))) 
                        (v_Vwd:
                         (zen.proof 
                            (zen.triangle (focal.is_true (_p_S1_equal n3 n3)))) =>
                         zen.Rall _p_S1_T 
                           (v_Vsc:(zen.term _p_S1_T) =>
                            zen.forall _p_S1_T 
                              (v_Vtc:(zen.term _p_S1_T) =>
                               zen.forall _p_S1_T 
                                 (v_Vmd:(zen.term _p_S1_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal v_Vsc v_Vtc))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vtc v_Vmd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vsc v_Vmd))))))) 
                           (abst_prj_a (abst_constr n1 n2)) 
                           (v_Vxd:
                            (zen.proof 
                               (zen.forall _p_S1_T 
                                  (v_Vtc:(zen.term _p_S1_T) =>
                                   zen.forall _p_S1_T 
                                     (v_Vmd:(zen.term _p_S1_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)) 
                                                 v_Vtc))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vtc v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    v_Vmd)))))))) =>
                            zen.Rall _p_S1_T 
                              (v_Vtc:(zen.term _p_S1_T) =>
                               zen.forall _p_S1_T 
                                 (v_Vmd:(zen.term _p_S1_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             v_Vtc))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal v_Vtc v_Vmd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)) v_Vmd)))))) 
                              n3 
                              (v_Vyd:
                               (zen.proof 
                                  (zen.forall _p_S1_T 
                                     (v_Vmd:(zen.term _p_S1_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)) n3))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal n3 v_Vmd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    v_Vmd))))))) =>
                               zen.Rall _p_S1_T 
                                 (v_Vmd:(zen.term _p_S1_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             n3))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal n3 v_Vmd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)) v_Vmd))))) 
                                 n3 
                                 (v_Vzd:
                                  (zen.proof 
                                     (zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)) n3))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal n3 n3))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n3)))))) =>
                                  zen.Rimply 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             n3))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n3 n3))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)) n3)))) 
                                    (v_Vrd:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n3))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)) n3))) 
                                       __B_1_4_LEMMA v_Vrd) 
                                    (v_Vae:
                                     (zen.proof 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal n3 n3))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n3))))) =>
                                     zen.Rimply 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n3 n3))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S1_equal 
                                                (abst_prj_a 
                                                   (abst_constr n1 n2)) n3))) 
                                       (v_Vbe:
                                        (zen.proof 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n3 n3))))) =>
                                        zen.Raxiom 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S1_equal n3 n3))) v_Vwd 
                                          v_Vbe) 
                                       (__B_1_4_LEMMA:
                                        (zen.proof 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n3)))) =>
                                        zen.Rsubst basics.bool__t 
                                          (v_Vce:(zen.term basics.bool__t) =>
                                           zen.triangle (focal.is_true v_Vce)) 
                                          (_p_S1_equal 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             n3) (_p_S1_equal n1 n3) 
                                          (v_Vbd:
                                           (zen.proof 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) n3) 
                                                       (_p_S1_equal n1 n3))))) =>
                                           zen.Rsubst _p_S1_T 
                                             (v_Vde:(zen.term _p_S1_T) =>
                                              zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_S1_equal v_Vde n3) 
                                                      (_p_S1_equal n1 n3)))) 
                                             (abst_prj_a (abst_constr n1 n2)) 
                                             n1 
                                             (v_Vdd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal _p_S1_T 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) n1)))) =>
                                              zen.Rnotand 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_S1_T n1 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2))))) 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal n1 
                                                            (abst_prj_a 
                                                               (abst_constr 
                                                                  n1 n2)))))) 
                                                (v_Ved:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S1_T n1 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n1 n2))))))) =>
                                                 zen.Rnotnot 
                                                   (zen.triangle 
                                                      (zen.equal _p_S1_T n1 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)))) 
                                                   (v_Vfd:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (zen.equal _p_S1_T 
                                                             n1 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2))))) =>
                                                    zen.Reqsym _p_S1_T n1 
                                                      (abst_prj_a 
                                                         (abst_constr n1 n2)) 
                                                      v_Vfd v_Vdd) v_Ved) 
                                                (v_Vld:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   n1 
                                                                   (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)))))))) =>
                                                 zen.Rnotnot 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S1_equal n1 
                                                            (abst_prj_a 
                                                               (abst_constr 
                                                                  n1 n2))))) 
                                                   (v_Vxc:
                                                    (zen.proof 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n1 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n1 n2)))))) =>
                                                    zen.Rall _p_S1_T 
                                                      (v_Vsc:
                                                       (zen.term _p_S1_T) =>
                                                       zen.forall _p_S1_T 
                                                         (v_Vtc:
                                                          (zen.term _p_S1_T) =>
                                                          zen.forall _p_S1_T 
                                                            (v_Vmd:
                                                             (zen.term 
                                                                _p_S1_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vsc 
                                                                    v_Vtc))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vtc 
                                                                    v_Vmd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vsc 
                                                                    v_Vmd))))))) 
                                                      n1 
                                                      (v_Vnd:
                                                       (zen.proof 
                                                          (zen.forall 
                                                             _p_S1_T 
                                                             (v_Vtc:
                                                              (zen.term 
                                                                 _p_S1_T) =>
                                                              zen.forall 
                                                                _p_S1_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    _p_S1_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vtc))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vtc 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vmd)))))))) =>
                                                       zen.Rall _p_S1_T 
                                                         (v_Vtc:
                                                          (zen.term _p_S1_T) =>
                                                          zen.forall _p_S1_T 
                                                            (v_Vmd:
                                                             (zen.term 
                                                                _p_S1_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vtc))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vtc 
                                                                    v_Vmd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vmd)))))) 
                                                         (abst_prj_a 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (v_Vod:
                                                          (zen.proof 
                                                             (zen.forall 
                                                                _p_S1_T 
                                                                (v_Vmd:
                                                                 (zen.term 
                                                                    _p_S1_T) =>
                                                                 zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vmd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vmd))))))) =>
                                                          zen.Rall _p_S1_T 
                                                            (v_Vmd:
                                                             (zen.term 
                                                                _p_S1_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vmd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vmd))))) 
                                                            n3 
                                                            (v_Vpd:
                                                             (zen.proof 
                                                                (zen.imp 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3)))))) =>
                                                             zen.Rimply 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3)))) 
                                                               (v_Vnc:
                                                                (zen.proof 
                                                                   (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))))) =>
                                                                zen.Raxiom 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                  v_Vxc v_Vnc) 
                                                               (v_Vqd:
                                                                (zen.proof 
                                                                   (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))))) =>
                                                                zen.Rimply 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                  (v_Vrd:
                                                                   (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                    __B_1_4_LEMMA 
                                                                    v_Vrd) 
                                                                  (v_Vsd:
                                                                   (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3)))) =>
                                                                   zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                    v_Vsd 
                                                                    v_Vkc) 
                                                                  v_Vqd) 
                                                               v_Vpd) v_Vod) 
                                                         v_Vnd) 
                                                      _p_S1_equal_transitive) 
                                                   v_Vld) v_Vyc) 
                                             (v_Vtd:
                                              (zen.proof 
                                                 (zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (_p_S1_equal n1 n3) 
                                                          (_p_S1_equal n1 n3))))) =>
                                              zen.Rsubst _p_S1_T 
                                                (v_Vee:(zen.term _p_S1_T) =>
                                                 zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_S1_equal n1 
                                                            v_Vee) 
                                                         (_p_S1_equal n1 n3)))) 
                                                n3 n3 
                                                (v_Vvd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal _p_S1_T 
                                                             n3 n3)))) =>
                                                 zen.Rnoteq _p_S1_T n3 v_Vvd) 
                                                (v_Vtd:
                                                 (zen.proof 
                                                    (zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S1_equal n1 
                                                                n3) 
                                                             (_p_S1_equal n1 
                                                                n3))))) =>
                                                 zen.Rnoteq basics.bool__t 
                                                   (_p_S1_equal n1 n3) v_Vtd) 
                                                v_Vtd) v_Vbd) 
                                          (v_Vsd:
                                           (zen.proof 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n1 n3)))) =>
                                           zen.Raxiom 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S1_equal n1 n3))) 
                                             v_Vsd v_Vkc) __B_1_4_LEMMA) 
                                       v_Vae) v_Vzd) v_Vyd) v_Vxd) 
                           _p_S1_equal_transitive) 
                        (v_Vbe:
                         (zen.proof 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal n3 n3))))) =>
                         zen.Rnoteq _p_S1_T n3 v_Vvd)))))) 
           (zen.nnpp 
              (zen.triangle 
                 (focal.is_true 
                    (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))) 
              (v_Vkc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (focal.is_true 
                           (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4))))) =>
               zen.Rcut 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal _p_S2_T 
                             (abst_prj_b (abst_constr n1 n2)) 
                             (abst_prj_b (abst_constr n1 n2))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                (abst_prj_b (abst_constr n1 n2))))))) 
                 (v_Vlc:
                  (zen.proof 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_S2_T 
                                 (abst_prj_b (abst_constr n1 n2)) 
                                 (abst_prj_b (abst_constr n1 n2))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) 
                                    (abst_prj_b (abst_constr n1 n2)))))))) =>
                  zen.Rand 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal _p_S2_T 
                             (abst_prj_b (abst_constr n1 n2)) 
                             (abst_prj_b (abst_constr n1 n2))))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                (abst_prj_b (abst_constr n1 n2)))))) 
                    (v_Vmc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_S2_T 
                                 (abst_prj_b (abst_constr n1 n2)) 
                                 (abst_prj_b (abst_constr n1 n2)))))) =>
                     v_Vnc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) 
                                    (abst_prj_b (abst_constr n1 n2))))))) =>
                     zen.Rnoteq _p_S2_T (abst_prj_b (abst_constr n1 n2)) 
                       v_Vmc) v_Vlc) 
                 (v_Voc:
                  (zen.proof 
                     (zen.not 
                        (zen.and 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal _p_S2_T 
                                    (abst_prj_b (abst_constr n1 n2)) 
                                    (abst_prj_b (abst_constr n1 n2))))) 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (abst_prj_b (abst_constr n1 n2))))))))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (zen.equal _p_S2_T (abst_prj_b (abst_constr n3 n4)) n4)) 
                    (v_Vpc:
                     (zen.proof 
                        (zen.triangle 
                           (zen.equal _p_S2_T 
                              (abst_prj_b (abst_constr n3 n4)) n4))) =>
                     zen.Rsubst basics.bool__t 
                       (v_Vqc:(zen.term basics.bool__t) =>
                        zen.triangle (focal.is_true v_Vqc)) 
                       (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                          (abst_prj_b (abst_constr n3 n4))) 
                       (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) n4) 
                       (v_Vrc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (abst_prj_b (abst_constr n3 n4))) 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n1 n2)) n4))))) =>
                        zen.Rsubst _p_S2_T 
                          (v_Vsc:(zen.term _p_S2_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_S2_equal v_Vsc 
                                      (abst_prj_b (abst_constr n3 n4))) 
                                   (_p_S2_equal 
                                      (abst_prj_b (abst_constr n1 n2)) n4)))) 
                          (abst_prj_b (abst_constr n1 n2)) 
                          (abst_prj_b (abst_constr n1 n2)) 
                          (v_Vmc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal _p_S2_T 
                                       (abst_prj_b (abst_constr n1 n2)) 
                                       (abst_prj_b (abst_constr n1 n2)))))) =>
                           zen.Rnotand 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_S2_T 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (abst_prj_b (abst_constr n1 n2))))) 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n1 n2)))))) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal _p_S2_T 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             (abst_prj_b (abst_constr n1 n2))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (zen.equal _p_S2_T 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (abst_prj_b (abst_constr n1 n2)))) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal _p_S2_T 
                                          (abst_prj_b (abst_constr n1 n2)) 
                                          (abst_prj_b (abst_constr n1 n2))))) =>
                                 zen.Rcut 
                                   (zen.triangle 
                                      (zen.equal _p_S2_T 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n1 n2)))) 
                                   (v_Vuc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal _p_S2_T 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             (abst_prj_b (abst_constr n1 n2))))) =>
                                    zen.Rsubst _p_S2_T 
                                      (v_Vvc:(zen.term _p_S2_T) =>
                                       zen.triangle 
                                         (zen.equal _p_S2_T v_Vvc 
                                            (abst_prj_b (abst_constr n1 n2)))) 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal _p_S2_T 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal _p_S2_T 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)))) 
                                         v_Vuc v_Vmc) 
                                      (v_Vuc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal _p_S2_T 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2))))) =>
                                       zen.Rsubst _p_S2_T 
                                         (v_Vwc:(zen.term _p_S2_T) =>
                                          zen.triangle 
                                            (zen.equal _p_S2_T 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) v_Vwc)) 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal _p_S2_T 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)))))) =>
                                          zen.Rnoteq _p_S2_T 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            v_Vmc) 
                                         (v_Vuc:
                                          (zen.proof 
                                             (zen.triangle 
                                                (zen.equal _p_S2_T 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (zen.equal _p_S2_T 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_b 
                                                     (abst_constr n1 n2)))) 
                                            v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal _p_S2_T 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)))))) =>
                                    zen.Rnoteq _p_S2_T 
                                      (abst_prj_b (abst_constr n1 n2)) v_Vmc)) 
                                v_Vtc) 
                             (v_Vxc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)))))))) =>
                              zen.Rnotnot 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         (abst_prj_b (abst_constr n1 n2))))) 
                                (v_Vyc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S2_equal 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             (abst_prj_b (abst_constr n1 n2)))))) =>
                                 zen.Rall _p_S2_T 
                                   (v_Vzc:(zen.term _p_S2_T) =>
                                    zen.forall _p_S2_T 
                                      (v_Vad:(zen.term _p_S2_T) =>
                                       zen.forall _p_S2_T 
                                         (v_Vbd:(zen.term _p_S2_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal v_Vzc v_Vad))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal v_Vad v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal v_Vzc v_Vbd))))))) 
                                   (abst_prj_b (abst_constr n1 n2)) 
                                   (v_Vcd:
                                    (zen.proof 
                                       (zen.forall _p_S2_T 
                                          (v_Vad:(zen.term _p_S2_T) =>
                                           zen.forall _p_S2_T 
                                             (v_Vbd:(zen.term _p_S2_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) v_Vad))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal v_Vad 
                                                            v_Vbd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            v_Vbd)))))))) =>
                                    zen.Rall _p_S2_T 
                                      (v_Vad:(zen.term _p_S2_T) =>
                                       zen.forall _p_S2_T 
                                         (v_Vbd:(zen.term _p_S2_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     v_Vad))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal v_Vad v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        v_Vbd)))))) 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (v_Vdd:
                                       (zen.proof 
                                          (zen.forall _p_S2_T 
                                             (v_Vbd:(zen.term _p_S2_T) =>
                                              zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            v_Vbd))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            v_Vbd))))))) =>
                                       zen.Rall _p_S2_T 
                                         (v_Vbd:(zen.term _p_S2_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        v_Vbd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        v_Vbd))))) 
                                         (abst_prj_b (abst_constr n3 n4)) 
                                         (v_Ved:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2))))) 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4))))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4)))))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2))))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n3 n4))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n3 n4)))))) 
                                            (v_Vnc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2))))) 
                                               v_Vyc v_Vnc) 
                                            (v_Vfd:
                                             (zen.proof 
                                                (zen.imp 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4))))) 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4))))))) =>
                                             zen.Rimply 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n3 n4))))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n3 n4))))) 
                                               (v_Vgd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n3 n4))))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n3 n4))))) 
                                                  __B_1_3_LEMMA v_Vgd) 
                                               (__B_1_3_LEMMA:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n3 n4)))))) =>
                                                zen.Rsubst basics.bool__t 
                                                  (v_Vqc:
                                                   (zen.term basics.bool__t) =>
                                                   zen.triangle 
                                                     (focal.is_true v_Vqc)) 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n3 n4))) 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n4) 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))) 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  n4))))) =>
                                                   zen.Rsubst _p_S2_T 
                                                     (v_Vsc:
                                                      (zen.term _p_S2_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S2_equal 
                                                                 v_Vsc 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n3 n4))) 
                                                              (_p_S2_equal 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 n4)))) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (v_Vmc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  _p_S2_T 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)))))) =>
                                                      zen.Rnoteq _p_S2_T 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        v_Vmc) 
                                                     (v_Vrc:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4))) 
                                                                  (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))))) =>
                                                      zen.Rsubst _p_S2_T 
                                                        (v_Vhd:
                                                         (zen.term _p_S2_T) =>
                                                         zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_S2_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vhd) 
                                                                 (_p_S2_equal 
                                                                    (
                                                                    abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4)))) 
                                                        (abst_prj_b 
                                                           (abst_constr n3 n4)) 
                                                        n4 
                                                        (v_Vid:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    _p_S2_T 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n3 n4)) 
                                                                    n4)))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S2_T 
                                                                 (abst_prj_b 
                                                                    (
                                                                    abst_constr 
                                                                    n3 n4)) 
                                                                 n4)) v_Vpc 
                                                           v_Vid) 
                                                        (v_Vjd:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4) 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))))) =>
                                                         zen.Rnoteq 
                                                           basics.bool__t 
                                                           (_p_S2_equal 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n4) v_Vjd) 
                                                        v_Vrc) v_Vrc) 
                                                  (v_Vkd:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               n4)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal 
                                                              (abst_prj_b 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n4))) v_Vkd 
                                                     v_Vkc) __B_1_3_LEMMA) 
                                               v_Vfd) v_Ved) v_Vdd) v_Vcd) 
                                   _p_S2_equal_transitive) v_Vxc) v_Voc) 
                          (v_Vrc:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n1 n2)) 
                                          (abst_prj_b (abst_constr n3 n4))) 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n1 n2)) n4))))) =>
                           zen.Rsubst _p_S2_T 
                             (v_Vhd:(zen.term _p_S2_T) =>
                              zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) 
                                         v_Vhd) 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n1 n2)) n4)))) 
                             (abst_prj_b (abst_constr n3 n4)) n4 
                             (v_Vid:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal _p_S2_T 
                                          (abst_prj_b (abst_constr n3 n4)) n4)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (zen.equal _p_S2_T 
                                      (abst_prj_b (abst_constr n3 n4)) n4)) 
                                v_Vpc v_Vid) 
                             (v_Vjd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal basics.bool__t 
                                          (_p_S2_equal 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             n4) 
                                          (_p_S2_equal 
                                             (abst_prj_b (abst_constr n1 n2)) 
                                             n4))))) =>
                              zen.Rnoteq basics.bool__t 
                                (_p_S2_equal 
                                   (abst_prj_b (abst_constr n1 n2)) n4) v_Vjd) 
                             v_Vrc) v_Vrc) 
                       (v_Vkd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n1 n2)) n4)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal 
                                   (abst_prj_b (abst_constr n1 n2)) n4))) 
                          v_Vkd v_Vkc) __B_1_3_LEMMA) 
                    (v_Vid:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal _p_S2_T 
                                 (abst_prj_b (abst_constr n3 n4)) n4)))) =>
                     zen.Rcut 
                       (zen.triangle 
                          (focal.is_true 
                             (_p_S2_equal (abst_prj_b (abst_constr n3 n4)) n4))) 
                       (v_Vld:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (_p_S2_equal 
                                    (abst_prj_b (abst_constr n3 n4)) n4)))) =>
                        zen.Rall _p_S2_T 
                          (v_Vzc:(zen.term _p_S2_T) =>
                           zen.forall _p_S2_T 
                             (v_Vad:(zen.term _p_S2_T) =>
                              zen.forall _p_S2_T 
                                (v_Vbd:(zen.term _p_S2_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal v_Vzc v_Vad))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vad v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vzc v_Vbd))))))) 
                          (abst_prj_b (abst_constr n1 n2)) 
                          (v_Vcd:
                           (zen.proof 
                              (zen.forall _p_S2_T 
                                 (v_Vad:(zen.term _p_S2_T) =>
                                  zen.forall _p_S2_T 
                                    (v_Vbd:(zen.term _p_S2_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) v_Vad))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal v_Vad v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   v_Vbd)))))))) =>
                           zen.Rall _p_S2_T 
                             (v_Vad:(zen.term _p_S2_T) =>
                              zen.forall _p_S2_T 
                                (v_Vbd:(zen.term _p_S2_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            v_Vad))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vad v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) v_Vbd)))))) 
                             (abst_prj_b (abst_constr n3 n4)) 
                             (v_Vmd:
                              (zen.proof 
                                 (zen.forall _p_S2_T 
                                    (v_Vbd:(zen.term _p_S2_T) =>
                                     zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) 
                                                (abst_prj_b 
                                                   (abst_constr n3 n4))))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)) 
                                                   v_Vbd))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   v_Vbd))))))) =>
                              zen.Rall _p_S2_T 
                                (v_Vbd:(zen.term _p_S2_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            (abst_prj_b (abst_constr n3 n4))))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)) v_Vbd))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) v_Vbd))))) 
                                n4 
                                (v_Vnd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (_p_S2_equal 
                                                (abst_prj_b 
                                                   (abst_constr n1 n2)) 
                                                (abst_prj_b 
                                                   (abst_constr n3 n4))))) 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)) n4))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n4)))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            (abst_prj_b (abst_constr n3 n4))))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)) n4))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) n4)))) 
                                   (v_Vgd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4))))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4))))) 
                                      __B_1_3_LEMMA v_Vgd) 
                                   (v_Vod:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n3 n4)) n4))) 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n4))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n3 n4)) n4))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal 
                                               (abst_prj_b 
                                                  (abst_constr n1 n2)) n4))) 
                                      (v_Vpd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n3 n4)) 
                                                      n4))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal 
                                                  (abst_prj_b 
                                                     (abst_constr n3 n4)) n4))) 
                                         v_Vld v_Vpd) 
                                      (v_Vkd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (_p_S2_equal 
                                                   (abst_prj_b 
                                                      (abst_constr n1 n2)) n4)))) =>
                                       zen.Rsubst basics.bool__t 
                                         (v_Vqc:(zen.term basics.bool__t) =>
                                          zen.triangle (focal.is_true v_Vqc)) 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            n4) 
                                         (_p_S2_equal 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            n4) 
                                         (v_Vjd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) n4) 
                                                      (_p_S2_equal 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) n4))))) =>
                                          zen.Rsubst _p_S2_T 
                                            (v_Vqd:(zen.term _p_S2_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_S2_equal v_Vqd n4) 
                                                     (_p_S2_equal 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        n4)))) 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            (abst_prj_b (abst_constr n1 n2)) 
                                            (v_Vmc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal _p_S2_T 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)) 
                                                         (abst_prj_b 
                                                            (abst_constr n1 
                                                               n2)))))) =>
                                             zen.Rnotand 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_S2_T 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2))))) 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)))))) 
                                               (v_Vtc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               _p_S2_T 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (zen.equal _p_S2_T 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)))) 
                                                  (v_Vuc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (zen.equal _p_S2_T 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2))))) =>
                                                   zen.Reqsym _p_S2_T 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     v_Vuc v_Vmc) v_Vtc) 
                                               (v_Vxc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (focal.is_true 
                                                               (_p_S2_equal 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                  (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)))))))) =>
                                                zen.Rnotnot 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2))))) 
                                                  (v_Vyc:
                                                   (zen.proof 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)))))) =>
                                                   zen.Rall _p_S2_T 
                                                     (v_Vzc:
                                                      (zen.term _p_S2_T) =>
                                                      zen.forall _p_S2_T 
                                                        (v_Vad:
                                                         (zen.term _p_S2_T) =>
                                                         zen.forall _p_S2_T 
                                                           (v_Vbd:
                                                            (zen.term _p_S2_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     (v_Vcd:
                                                      (zen.proof 
                                                         (zen.forall _p_S2_T 
                                                            (v_Vad:
                                                             (zen.term 
                                                                _p_S2_T) =>
                                                             zen.forall 
                                                               _p_S2_T 
                                                               (v_Vbd:
                                                                (zen.term 
                                                                   _p_S2_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vad))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd)))))))) =>
                                                      zen.Rall _p_S2_T 
                                                        (v_Vad:
                                                         (zen.term _p_S2_T) =>
                                                         zen.forall _p_S2_T 
                                                           (v_Vbd:
                                                            (zen.term _p_S2_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vad))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd)))))) 
                                                        (abst_prj_b 
                                                           (abst_constr n1 n2)) 
                                                        (v_Vdd:
                                                         (zen.proof 
                                                            (zen.forall 
                                                               _p_S2_T 
                                                               (v_Vbd:
                                                                (zen.term 
                                                                   _p_S2_T) =>
                                                                zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))))))) =>
                                                         zen.Rall _p_S2_T 
                                                           (v_Vbd:
                                                            (zen.term _p_S2_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))))) 
                                                           n4 
                                                           (v_Vrd:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4)))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4)))) 
                                                              (v_Vnc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                 v_Vyc v_Vnc) 
                                                              (v_Vsd:
                                                               (zen.proof 
                                                                  (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))))) =>
                                                               zen.Rimply 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                 (v_Vkc:
                                                                  (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                 (v_Vkd:
                                                                  (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4)))) =>
                                                                  zen.Raxiom 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    (abst_prj_b 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n4))) 
                                                                    v_Vkd 
                                                                    v_Vkc) 
                                                                 v_Vsd) v_Vrd) 
                                                           v_Vdd) v_Vcd) 
                                                     _p_S2_equal_transitive) 
                                                  v_Vxc) v_Voc) 
                                            (v_Vjd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4) 
                                                         (_p_S2_equal 
                                                            (abst_prj_b 
                                                               (abst_constr 
                                                                  n1 n2)) n4))))) =>
                                             zen.Rsubst _p_S2_T 
                                               (v_Vhd:(zen.term _p_S2_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           v_Vhd) 
                                                        (_p_S2_equal 
                                                           (abst_prj_b 
                                                              (abst_constr 
                                                                 n1 n2)) n4)))) 
                                               n4 n4 
                                               (v_Vtd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal _p_S2_T 
                                                            n4 n4)))) =>
                                                zen.Rnoteq _p_S2_T n4 v_Vtd) 
                                               (v_Vjd:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               n4) 
                                                            (_p_S2_equal 
                                                               (abst_prj_b 
                                                                  (abst_constr 
                                                                    n1 n2)) 
                                                               n4))))) =>
                                                zen.Rnoteq basics.bool__t 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n4) v_Vjd) v_Vjd) v_Vjd) 
                                         (v_Vkd:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (_p_S2_equal 
                                                      (abst_prj_b 
                                                         (abst_constr n1 n2)) 
                                                      n4)))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal 
                                                     (abst_prj_b 
                                                        (abst_constr n1 n2)) 
                                                     n4))) v_Vkd v_Vkc) v_Vkd) 
                                      v_Vod) v_Vnd) v_Vmd) v_Vcd) 
                          _p_S2_equal_transitive) 
                       (v_Vpd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true 
                                    (_p_S2_equal 
                                       (abst_prj_b (abst_constr n3 n4)) n4))))) =>
                        zen.Rall _p_S1_T 
                          (v_Vud:(zen.term _p_S1_T) =>
                           zen.forall _p_S2_T 
                             (v_Vvd:(zen.term _p_S2_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal 
                                      (abst_prj_b (abst_constr v_Vud v_Vvd)) 
                                      v_Vvd)))) n3 
                          (v_Vwd:
                           (zen.proof 
                              (zen.forall _p_S2_T 
                                 (v_Vvd:(zen.term _p_S2_T) =>
                                  zen.triangle 
                                    (focal.is_true 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n3 v_Vvd)) 
                                          v_Vvd))))) =>
                           zen.Rall _p_S2_T 
                             (v_Vvd:(zen.term _p_S2_T) =>
                              zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal 
                                      (abst_prj_b (abst_constr n3 v_Vvd)) 
                                      v_Vvd))) n4 
                             (v_Vld:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (_p_S2_equal 
                                          (abst_prj_b (abst_constr n3 n4)) n4)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S2_equal 
                                         (abst_prj_b (abst_constr n3 n4)) n4))) 
                                v_Vld v_Vpd) v_Vwd) abst_prj_b_is_snd_of_pair)))))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_S1_T (abst_prj_a (abst_constr n1 n2)) 
                            (abst_prj_a (abst_constr n1 n2))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                               (abst_prj_a (abst_constr n1 n2))))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_S1_T 
                                (abst_prj_a (abst_constr n1 n2)) 
                                (abst_prj_a (abst_constr n1 n2))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n1 n2)))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal _p_S1_T (abst_prj_a (abst_constr n1 n2)) 
                            (abst_prj_a (abst_constr n1 n2))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                               (abst_prj_a (abst_constr n1 n2)))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_S1_T 
                                (abst_prj_a (abst_constr n1 n2)) 
                                (abst_prj_a (abst_constr n1 n2)))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n1 n2))))))) =>
                    zen.Rnoteq _p_S1_T (abst_prj_a (abst_constr n1 n2)) v_Vmc) 
                   v_Vlc) 
                (v_Voc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal _p_S1_T 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n1 n2))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n1 n2))))))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (zen.equal _p_S1_T (abst_prj_a (abst_constr n3 n4)) n3)) 
                   (v_Vpc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal _p_S1_T 
                             (abst_prj_a (abst_constr n3 n4)) n3))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vqc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vqc)) 
                      (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                         (abst_prj_a (abst_constr n3 n4))) 
                      (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) n3) 
                      (v_Vrc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n3 n4))) 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) n3))))) =>
                       zen.Rsubst _p_S1_T 
                         (v_Vsc:(zen.term _p_S1_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (_p_S1_equal v_Vsc 
                                     (abst_prj_a (abst_constr n3 n4))) 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr n1 n2)) n3)))) 
                         (abst_prj_a (abst_constr n1 n2)) 
                         (abst_prj_a (abst_constr n1 n2)) 
                         (v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal _p_S1_T 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n1 n2)))))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal _p_S1_T 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n1 n2))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n1 n2)))))) 
                            (v_Vtc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal _p_S1_T 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            (abst_prj_a (abst_constr n1 n2))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal _p_S1_T 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n1 n2)))) 
                               (v_Vuc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal _p_S1_T 
                                         (abst_prj_a (abst_constr n1 n2)) 
                                         (abst_prj_a (abst_constr n1 n2))))) =>
                                zen.Rcut 
                                  (zen.triangle 
                                     (zen.equal _p_S1_T 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n1 n2)))) 
                                  (v_Vuc:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal _p_S1_T 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            (abst_prj_a (abst_constr n1 n2))))) =>
                                   zen.Rsubst _p_S1_T 
                                     (v_Vvc:(zen.term _p_S1_T) =>
                                      zen.triangle 
                                        (zen.equal _p_S1_T v_Vvc 
                                           (abst_prj_a (abst_constr n1 n2)))) 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_S1_T 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_S1_T 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              (abst_prj_a (abst_constr n1 n2)))) 
                                        v_Vuc v_Vmc) 
                                     (v_Vuc:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal _p_S1_T 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2))))) =>
                                      zen.Rsubst _p_S1_T 
                                        (v_Vwc:(zen.term _p_S1_T) =>
                                         zen.triangle 
                                           (zen.equal _p_S1_T 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              v_Vwc)) 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (v_Vmc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_S1_T 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)))))) =>
                                         zen.Rnoteq _p_S1_T 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           v_Vmc) 
                                        (v_Vuc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_S1_T 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal _p_S1_T 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)) 
                                                 (abst_prj_a 
                                                    (abst_constr n1 n2)))) 
                                           v_Vuc v_Vmc) v_Vuc) v_Vuc) 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_S1_T 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)))))) =>
                                   zen.Rnoteq _p_S1_T 
                                     (abst_prj_a (abst_constr n1 n2)) v_Vmc)) 
                               v_Vtc) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        (abst_prj_a (abst_constr n1 n2))))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S1_equal 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            (abst_prj_a (abst_constr n1 n2)))))) =>
                                zen.Rall _p_S1_T 
                                  (v_Vzc:(zen.term _p_S1_T) =>
                                   zen.forall _p_S1_T 
                                     (v_Vad:(zen.term _p_S1_T) =>
                                      zen.forall _p_S1_T 
                                        (v_Vbd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vzc v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vzc v_Vbd))))))) 
                                  (abst_prj_a (abst_constr n1 n2)) 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.forall _p_S1_T 
                                         (v_Vad:(zen.term _p_S1_T) =>
                                          zen.forall _p_S1_T 
                                            (v_Vbd:(zen.term _p_S1_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        v_Vad))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal v_Vad 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           v_Vbd)))))))) =>
                                   zen.Rall _p_S1_T 
                                     (v_Vad:(zen.term _p_S1_T) =>
                                      zen.forall _p_S1_T 
                                        (v_Vbd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    v_Vad))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vad v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       v_Vbd)))))) 
                                     (abst_prj_a (abst_constr n1 n2)) 
                                     (v_Vdd:
                                      (zen.proof 
                                         (zen.forall _p_S1_T 
                                            (v_Vbd:(zen.term _p_S1_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           v_Vbd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           v_Vbd))))))) =>
                                      zen.Rall _p_S1_T 
                                        (v_Vbd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       v_Vbd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       v_Vbd))))) 
                                        (abst_prj_a (abst_constr n3 n4)) 
                                        (v_Ved:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4))))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4)))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n3 n4))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n3 n4)))))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2))))) 
                                              v_Vyc v_Vnc) 
                                           (v_Vfd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4))))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4))))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n3 n4))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n3 n4))))) 
                                              (v_Vgd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n3 n4))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) 
                                                          (abst_prj_a 
                                                             (abst_constr n3 
                                                                n4))))) 
                                                 __B_1_2_LEMMA v_Vgd) 
                                              (__B_1_2_LEMMA:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n3 n4)))))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vqc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vqc)) 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n3 n4))) 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n3) 
                                                 (v_Vrc:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S1_equal 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n3 n4))) 
                                                              (_p_S1_equal 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 n3))))) =>
                                                  zen.Rsubst _p_S1_T 
                                                    (v_Vsc:
                                                     (zen.term _p_S1_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S1_equal 
                                                                v_Vsc 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n3 n4))) 
                                                             (_p_S1_equal 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n1 n2)) 
                                                                n3)))) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (v_Vmc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S1_T 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)))))) =>
                                                     zen.Rnoteq _p_S1_T 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       v_Vmc) 
                                                    (v_Vrc:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_S1_equal 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4))) 
                                                                 (_p_S1_equal 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))))) =>
                                                     zen.Rsubst _p_S1_T 
                                                       (v_Vhd:
                                                        (zen.term _p_S1_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                   v_Vhd) 
                                                                (_p_S1_equal 
                                                                   (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                   n3)))) 
                                                       (abst_prj_a 
                                                          (abst_constr n3 n4)) 
                                                       n3 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_S1_T 
                                                                    (
                                                                    abst_prj_a 
                                                                    (abst_constr 
                                                                    n3 n4)) 
                                                                    n3)))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S1_T 
                                                                (abst_prj_a 
                                                                   (abst_constr 
                                                                    n3 n4)) 
                                                                n3)) v_Vpc 
                                                          v_Vid) 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3) 
                                                                    (
                                                                    _p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_S1_equal 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2)) n3) 
                                                          v_Vjd) v_Vrc) v_Vrc) 
                                                 (v_Vkd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n3)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal 
                                                             (abst_prj_a 
                                                                (abst_constr 
                                                                   n1 n2)) n3))) 
                                                    v_Vkd v_Vkc) 
                                                 __B_1_2_LEMMA) v_Vfd) v_Ved) 
                                        v_Vdd) v_Vcd) _p_S1_equal_transitive) 
                               v_Vxc) v_Voc) 
                         (v_Vrc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n1 n2)) 
                                         (abst_prj_a (abst_constr n3 n4))) 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n1 n2)) n3))))) =>
                          zen.Rsubst _p_S1_T 
                            (v_Vhd:(zen.term _p_S1_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) 
                                        v_Vhd) 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n1 n2)) n3)))) 
                            (abst_prj_a (abst_constr n3 n4)) n3 
                            (v_Vid:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal _p_S1_T 
                                         (abst_prj_a (abst_constr n3 n4)) n3)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal _p_S1_T 
                                     (abst_prj_a (abst_constr n3 n4)) n3)) 
                               v_Vpc v_Vid) 
                            (v_Vjd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (_p_S1_equal 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            n3) 
                                         (_p_S1_equal 
                                            (abst_prj_a (abst_constr n1 n2)) 
                                            n3))))) =>
                             zen.Rnoteq basics.bool__t 
                               (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                  n3) v_Vjd) v_Vrc) v_Vrc) 
                      (v_Vkd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) n3)))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                  n3))) v_Vkd v_Vkc) __B_1_2_LEMMA) 
                   (v_Vid:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal _p_S1_T 
                                (abst_prj_a (abst_constr n3 n4)) n3)))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a (abst_constr n3 n4)) n3))) 
                      (v_Vld:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n3 n4)) n3)))) =>
                       zen.Rall _p_S1_T 
                         (v_Vzc:(zen.term _p_S1_T) =>
                          zen.forall _p_S1_T 
                            (v_Vad:(zen.term _p_S1_T) =>
                             zen.forall _p_S1_T 
                               (v_Vbd:(zen.term _p_S1_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal v_Vzc v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vzc v_Vbd))))))) 
                         (abst_prj_a (abst_constr n1 n2)) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.forall _p_S1_T 
                                (v_Vad:(zen.term _p_S1_T) =>
                                 zen.forall _p_S1_T 
                                   (v_Vbd:(zen.term _p_S1_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) v_Vad))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal v_Vad v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  v_Vbd)))))))) =>
                          zen.Rall _p_S1_T 
                            (v_Vad:(zen.term _p_S1_T) =>
                             zen.forall _p_S1_T 
                               (v_Vbd:(zen.term _p_S1_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           v_Vad))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal v_Vad v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              v_Vbd)))))) 
                            (abst_prj_a (abst_constr n3 n4)) 
                            (v_Vmd:
                             (zen.proof 
                                (zen.forall _p_S1_T 
                                   (v_Vbd:(zen.term _p_S1_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_a 
                                                  (abst_constr n3 n4))))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)) 
                                                  v_Vbd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  v_Vbd))))))) =>
                             zen.Rall _p_S1_T 
                               (v_Vbd:(zen.term _p_S1_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           (abst_prj_a (abst_constr n3 n4))))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n3 n4)) 
                                              v_Vbd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              v_Vbd))))) n3 
                               (v_Vnd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal 
                                               (abst_prj_a 
                                                  (abst_constr n1 n2)) 
                                               (abst_prj_a 
                                                  (abst_constr n3 n4))))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)) n3))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n3)))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           (abst_prj_a (abst_constr n3 n4))))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n3 n4)) 
                                              n3))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              n3)))) 
                                  (v_Vgd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4))))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              (abst_prj_a (abst_constr n3 n4))))) 
                                     __B_1_2_LEMMA v_Vgd) 
                                  (v_Vod:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n3 n4)) n3))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n3))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n3 n4)) 
                                              n3))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (_p_S1_equal 
                                              (abst_prj_a (abst_constr n1 n2)) 
                                              n3))) 
                                     (v_Vpd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n3 n4)) 
                                                     n3))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal 
                                                 (abst_prj_a 
                                                    (abst_constr n3 n4)) n3))) 
                                        v_Vld v_Vpd) 
                                     (v_Vkd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal 
                                                  (abst_prj_a 
                                                     (abst_constr n1 n2)) n3)))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vqc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vqc)) 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           n3) 
                                        (_p_S1_equal 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           n3) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        n3) 
                                                     (_p_S1_equal 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        n3))))) =>
                                         zen.Rsubst _p_S1_T 
                                           (v_Vqd:(zen.term _p_S1_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (_p_S1_equal v_Vqd n3) 
                                                    (_p_S1_equal 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       n3)))) 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           (abst_prj_a (abst_constr n1 n2)) 
                                           (v_Vmc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_S1_T 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)) 
                                                        (abst_prj_a 
                                                           (abst_constr n1 n2)))))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal _p_S1_T 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)))))) 
                                              (v_Vtc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_S1_T 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal _p_S1_T 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)))) 
                                                 (v_Vuc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_S1_T 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2))))) =>
                                                  zen.Reqsym _p_S1_T 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    v_Vuc v_Vmc) v_Vtc) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S1_equal 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)) 
                                                                 (abst_prj_a 
                                                                    (
                                                                    abst_constr 
                                                                    n1 n2)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2))))) 
                                                 (v_Vyc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)))))) =>
                                                  zen.Rall _p_S1_T 
                                                    (v_Vzc:
                                                     (zen.term _p_S1_T) =>
                                                     zen.forall _p_S1_T 
                                                       (v_Vad:
                                                        (zen.term _p_S1_T) =>
                                                        zen.forall _p_S1_T 
                                                          (v_Vbd:
                                                           (zen.term _p_S1_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.forall _p_S1_T 
                                                           (v_Vad:
                                                            (zen.term _p_S1_T) =>
                                                            zen.forall 
                                                              _p_S1_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  _p_S1_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vad))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd)))))))) =>
                                                     zen.Rall _p_S1_T 
                                                       (v_Vad:
                                                        (zen.term _p_S1_T) =>
                                                        zen.forall _p_S1_T 
                                                          (v_Vbd:
                                                           (zen.term _p_S1_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vad))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd)))))) 
                                                       (abst_prj_a 
                                                          (abst_constr n1 n2)) 
                                                       (v_Vdd:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              _p_S1_T 
                                                              (v_Vbd:
                                                               (zen.term 
                                                                  _p_S1_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))))))) =>
                                                        zen.Rall _p_S1_T 
                                                          (v_Vbd:
                                                           (zen.term _p_S1_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    v_Vbd))))) 
                                                          n3 
                                                          (v_Vrd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3)))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3)))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2))))) 
                                                                v_Vyc v_Vnc) 
                                                             (v_Vsd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                (v_Vkc:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                (v_Vkd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    (abst_prj_a 
                                                                    (abst_constr 
                                                                    n1 n2)) 
                                                                    n3))) 
                                                                   v_Vkd 
                                                                   v_Vkc) 
                                                                v_Vsd) v_Vrd) 
                                                          v_Vdd) v_Vcd) 
                                                    _p_S1_equal_transitive) 
                                                 v_Vxc) v_Voc) 
                                           (v_Vjd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3) 
                                                        (_p_S1_equal 
                                                           (abst_prj_a 
                                                              (abst_constr 
                                                                 n1 n2)) n3))))) =>
                                            zen.Rsubst _p_S1_T 
                                              (v_Vhd:(zen.term _p_S1_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) v_Vhd) 
                                                       (_p_S1_equal 
                                                          (abst_prj_a 
                                                             (abst_constr n1 
                                                                n2)) n3)))) 
                                              n3 n3 
                                              (v_Vtd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_S1_T 
                                                           n3 n3)))) =>
                                               zen.Rnoteq _p_S1_T n3 v_Vtd) 
                                              (v_Vjd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n3) 
                                                           (_p_S1_equal 
                                                              (abst_prj_a 
                                                                 (abst_constr 
                                                                    n1 n2)) 
                                                              n3))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n3) v_Vjd) v_Vjd) v_Vjd) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal 
                                                     (abst_prj_a 
                                                        (abst_constr n1 n2)) 
                                                     n3)))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal 
                                                    (abst_prj_a 
                                                       (abst_constr n1 n2)) 
                                                    n3))) v_Vkd v_Vkc) v_Vkd) 
                                     v_Vod) v_Vnd) v_Vmd) v_Vcd) 
                         _p_S1_equal_transitive) 
                      (v_Vpd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n3 n4)) n3))))) =>
                       zen.Rall _p_S1_T 
                         (v_Vud:(zen.term _p_S1_T) =>
                          zen.forall _p_S2_T 
                            (v_Vvd:(zen.term _p_S2_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr v_Vud v_Vvd)) 
                                     v_Vud)))) n3 
                         (v_Vwd:
                          (zen.proof 
                             (zen.forall _p_S2_T 
                                (v_Vvd:(zen.term _p_S2_T) =>
                                 zen.triangle 
                                   (focal.is_true 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n3 v_Vvd)) 
                                         n3))))) =>
                          zen.Rall _p_S2_T 
                            (v_Vvd:(zen.term _p_S2_T) =>
                             zen.triangle 
                               (focal.is_true 
                                  (_p_S1_equal 
                                     (abst_prj_a (abst_constr n3 v_Vvd)) n3))) 
                            n4 
                            (v_Vld:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (_p_S1_equal 
                                         (abst_prj_a (abst_constr n3 n4)) n3)))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true 
                                     (_p_S1_equal 
                                        (abst_prj_a (abst_constr n3 n4)) n3))) 
                               v_Vld v_Vpd) v_Vwd) 
                         abst_prj_a_is_first_of_pair)))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                     (abst_prj_b (abst_constr n3 n4))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                            (abst_prj_b (abst_constr n3 n4))))))) =>
             zen.Rand 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                        (abst_prj_a (abst_constr n3 n4))))) 
               (zen.triangle 
                  (focal.is_true 
                     (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                        (abst_prj_b (abst_constr n3 n4))))) 
               (v_Vac:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                            (abst_prj_a (abst_constr n3 n4)))))) =>
                v_Vbc:
                (zen.proof 
                   (zen.triangle 
                      (focal.is_true 
                         (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                            (abst_prj_b (abst_constr n3 n4)))))) =>
                zen.Raxiom 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                           (abst_prj_b (abst_constr n3 n4))))) v_Vbc v_Vzb) 
               __B_1_1_LEMMA))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                    (abst_prj_a (abst_constr n3 n4))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                           (abst_prj_a (abst_constr n3 n4))))))) =>
            zen.Rand 
              (zen.triangle 
                 (focal.is_true 
                    (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                       (abst_prj_a (abst_constr n3 n4))))) 
              (zen.triangle 
                 (focal.is_true 
                    (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                       (abst_prj_b (abst_constr n3 n4))))) 
              (v_Vac:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                           (abst_prj_a (abst_constr n3 n4)))))) =>
               v_Vbc:
               (zen.proof 
                  (zen.triangle 
                     (focal.is_true 
                        (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                           (abst_prj_b (abst_constr n3 n4)))))) =>
               zen.Raxiom 
                 (zen.triangle 
                    (focal.is_true 
                       (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                          (abst_prj_a (abst_constr n3 n4))))) v_Vac v_Vzb) 
              __B_1_1_LEMMA))) 
       (zen.nnpp 
          (zen.and 
             (zen.triangle 
                (focal.is_true 
                   (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                      (abst_prj_a (abst_constr n3 n4))))) 
             (zen.triangle 
                (focal.is_true 
                   (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                      (abst_prj_b (abst_constr n3 n4)))))) 
          (v_Vac:
           (zen.proof 
              (zen.not 
                 (zen.and 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                             (abst_prj_a (abst_constr n3 n4))))) 
                    (zen.triangle 
                       (focal.is_true 
                          (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                             (abst_prj_b (abst_constr n3 n4)))))))) =>
           zen.Rall abst_T 
             (v_Vbc:(zen.term abst_T) =>
              zen.forall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vcc))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a v_Vbc) 
                               (abst_prj_a v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b v_Vbc) 
                               (abst_prj_b v_Vcc))))))) (abst_constr n1 n2) 
             (v_Vdc:
              (zen.proof 
                 (zen.forall abst_T 
                    (v_Vcc:(zen.term abst_T) =>
                     zen.eqv 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_constr n1 n2) v_Vcc))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a v_Vcc)))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal 
                                   (abst_prj_b (abst_constr n1 n2)) 
                                   (abst_prj_b v_Vcc)))))))) =>
              zen.Rall abst_T 
                (v_Vcc:(zen.term abst_T) =>
                 zen.eqv 
                   (zen.triangle 
                      (focal.is_true (abst_equal (abst_constr n1 n2) v_Vcc))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                               (abst_prj_a v_Vcc)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                               (abst_prj_b v_Vcc)))))) (abst_constr n3 n4) 
                (v_Vec:
                 (zen.proof 
                    (zen.eqv 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_constr n1 n2) 
                                (abst_constr n3 n4)))) 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n3 n4))))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal 
                                   (abst_prj_b (abst_constr n1 n2)) 
                                   (abst_prj_b (abst_constr n3 n4)))))))) =>
                 zen.Requiv 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) 
                   (zen.and 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                               (abst_prj_a (abst_constr n3 n4))))) 
                      (zen.triangle 
                         (focal.is_true 
                            (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                               (abst_prj_b (abst_constr n3 n4)))))) 
                   (v_Vfc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_constr n1 n2) 
                                   (abst_constr n3 n4)))))) =>
                    v_Vac:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S1_equal 
                                      (abst_prj_a (abst_constr n1 n2)) 
                                      (abst_prj_a (abst_constr n3 n4))))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (_p_S2_equal 
                                      (abst_prj_b (abst_constr n1 n2)) 
                                      (abst_prj_b (abst_constr n3 n4)))))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_constr n1 n2) 
                               (abst_constr n3 n4)))) H1 v_Vfc) 
                   (H1:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_constr n1 n2) 
                                (abst_constr n3 n4))))) =>
                    v_Vgc:
                    (zen.proof 
                       (zen.and 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S1_equal 
                                   (abst_prj_a (abst_constr n1 n2)) 
                                   (abst_prj_a (abst_constr n3 n4))))) 
                          (zen.triangle 
                             (focal.is_true 
                                (_p_S2_equal 
                                   (abst_prj_b (abst_constr n1 n2)) 
                                   (abst_prj_b (abst_constr n3 n4))))))) =>
                    zen.Raxiom 
                      (zen.and 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S1_equal (abst_prj_a (abst_constr n1 n2)) 
                                  (abst_prj_a (abst_constr n3 n4))))) 
                         (zen.triangle 
                            (focal.is_true 
                               (_p_S2_equal (abst_prj_b (abst_constr n1 n2)) 
                                  (abst_prj_b (abst_constr n3 n4)))))) v_Vgc 
                      v_Vac) v_Vec) v_Vdc) abst_def_equal))).

def Imp_pair__equal_reflexive :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) ->
  abst_unicite_1:(dk_logic.eP 
                    (dk_logic.forall abst_T 
                       (a:(cc.eT abst_T) =>
                        dk_logic.ebP 
                          (abst_equal 
                             (abst_constr (abst_prj_a a) (abst_prj_b a)) a)))) ->
  abst_unicite_2:(dk_logic.eP 
                    (dk_logic.forall abst_T 
                       (a:(cc.eT abst_T) =>
                        dk_logic.ebP 
                          (abst_equal a 
                             (abst_constr (abst_prj_a a) (abst_prj_b a)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) => dk_logic.ebP (abst_equal x x)))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) =>
  abst_unicite_1:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (a:(cc.eT abst_T) =>
         dk_logic.ebP 
           (abst_equal (abst_constr (abst_prj_a a) (abst_prj_b a)) a)))) =>
  abst_unicite_2:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (a:(cc.eT abst_T) =>
         dk_logic.ebP 
           (abst_equal a (abst_constr (abst_prj_a a) (abst_prj_b a)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  (__C_1_LEMMA:
   (p:(cc.eT abst_T) -> dk_logic.eP (dk_logic.ebP (abst_equal p p))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb)))) 
     (v_Vac:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb)))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb))) 
        (v_Vbc:(zen.term abst_T) =>
         v_Vcc:
         (zen.proof 
            (zen.not (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))))) =>
         zen.Rall abst_T 
           (v_Vzb:(zen.term abst_T) =>
            zen.triangle (focal.is_true (abst_equal v_Vzb v_Vzb))) v_Vbc 
           (v_Vdc:
            (zen.proof 
               (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc)))) =>
            zen.Raxiom 
              (zen.triangle (focal.is_true (abst_equal v_Vbc v_Vbc))) v_Vdc 
              v_Vcc) __C_1_LEMMA) v_Vac)) 
    (p:(cc.eT abst_T) =>
     (__C_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal p (abst_constr (abst_prj_a p) (abst_prj_b p))))) =>
      zen.nnpp (zen.triangle (focal.is_true (abst_equal p p))) 
        (v_Vkc:
         (zen.proof (zen.not (zen.triangle (focal.is_true (abst_equal p p))))) =>
         zen.Rcut 
           (zen.and (zen.not (zen.triangle (zen.equal abst_T p p))) 
              (zen.not (zen.triangle (focal.is_true (abst_equal p p))))) 
           (v_Vlc:
            (zen.proof 
               (zen.and (zen.not (zen.triangle (zen.equal abst_T p p))) 
                  (zen.not (zen.triangle (focal.is_true (abst_equal p p)))))) =>
            zen.Rand (zen.not (zen.triangle (zen.equal abst_T p p))) 
              (zen.not (zen.triangle (focal.is_true (abst_equal p p)))) 
              (v_Vmc:
               (zen.proof (zen.not (zen.triangle (zen.equal abst_T p p)))) =>
               v_Vkc:
               (zen.proof 
                  (zen.not (zen.triangle (focal.is_true (abst_equal p p))))) =>
               zen.Rnoteq abst_T p v_Vmc) v_Vlc) 
           (v_Vnc:
            (zen.proof 
               (zen.not 
                  (zen.and (zen.not (zen.triangle (zen.equal abst_T p p))) 
                     (zen.not (zen.triangle (focal.is_true (abst_equal p p))))))) =>
            zen.Rcut 
              (zen.triangle 
                 (zen.equal abst_T 
                    (abst_constr (abst_prj_a p) (abst_prj_b p)) p)) 
              (v_Voc:
               (zen.proof 
                  (zen.triangle 
                     (zen.equal abst_T 
                        (abst_constr (abst_prj_a p) (abst_prj_b p)) p))) =>
               zen.Rsubst basics.bool__t 
                 (v_Vpc:(zen.term basics.bool__t) =>
                  zen.triangle (focal.is_true v_Vpc)) 
                 (abst_equal p (abst_constr (abst_prj_a p) (abst_prj_b p))) 
                 (abst_equal p p) 
                 (v_Vqc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal basics.bool__t 
                              (abst_equal p 
                                 (abst_constr (abst_prj_a p) (abst_prj_b p))) 
                              (abst_equal p p))))) =>
                  zen.Rsubst abst_T 
                    (v_Vrc:(zen.term abst_T) =>
                     zen.not 
                       (zen.triangle 
                          (zen.equal basics.bool__t 
                             (abst_equal v_Vrc 
                                (abst_constr (abst_prj_a p) (abst_prj_b p))) 
                             (abst_equal p p)))) p p 
                    (v_Vmc:
                     (zen.proof 
                        (zen.not (zen.triangle (zen.equal abst_T p p)))) =>
                     zen.Rnotand 
                       (zen.not (zen.triangle (zen.equal abst_T p p))) 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_equal p p)))) 
                       (v_Vsc:
                        (zen.proof 
                           (zen.not 
                              (zen.not (zen.triangle (zen.equal abst_T p p))))) =>
                        zen.Rnotnot (zen.triangle (zen.equal abst_T p p)) 
                          (v_Vtc:
                           (zen.proof (zen.triangle (zen.equal abst_T p p))) =>
                           zen.Rcut (zen.triangle (zen.equal abst_T p p)) 
                             (v_Vtc:
                              (zen.proof 
                                 (zen.triangle (zen.equal abst_T p p))) =>
                              zen.Rsubst abst_T 
                                (v_Vuc:(zen.term abst_T) =>
                                 zen.triangle (zen.equal abst_T v_Vuc p)) p 
                                p 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (zen.equal abst_T p p)))) =>
                                 zen.Raxiom 
                                   (zen.triangle (zen.equal abst_T p p)) 
                                   v_Vtc v_Vmc) 
                                (v_Vtc:
                                 (zen.proof 
                                    (zen.triangle (zen.equal abst_T p p))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vvc:(zen.term abst_T) =>
                                    zen.triangle (zen.equal abst_T p v_Vvc)) 
                                   p p 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T p p)))) =>
                                    zen.Rnoteq abst_T p v_Vmc) 
                                   (v_Vtc:
                                    (zen.proof 
                                       (zen.triangle (zen.equal abst_T p p))) =>
                                    zen.Raxiom 
                                      (zen.triangle (zen.equal abst_T p p)) 
                                      v_Vtc v_Vmc) v_Vtc) v_Vtc) 
                             (v_Vmc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle (zen.equal abst_T p p)))) =>
                              zen.Rnoteq abst_T p v_Vmc)) v_Vsc) 
                       (v_Vwc:
                        (zen.proof 
                           (zen.not 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal p p)))))) =>
                        zen.Rnotnot 
                          (zen.triangle (focal.is_true (abst_equal p p))) 
                          (v_Vxc:
                           (zen.proof 
                              (zen.triangle (focal.is_true (abst_equal p p)))) =>
                           zen.Rall abst_T 
                             (v_Vyc:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vzc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vyc v_Vzc))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vzc v_Vad))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vyc v_Vad))))))) 
                             p 
                             (v_Vbd:
                              (zen.proof 
                                 (zen.forall abst_T 
                                    (v_Vzc:(zen.term abst_T) =>
                                     zen.forall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal p v_Vzc))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal v_Vzc v_Vad))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p v_Vad)))))))) =>
                              zen.Rall abst_T 
                                (v_Vzc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p v_Vzc))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vzc v_Vad))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal p v_Vad)))))) p 
                                (v_Vcd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.imp 
                                          (zen.triangle 
                                             (focal.is_true (abst_equal p p))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p v_Vad))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p v_Vad))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p p))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal p v_Vad))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal p v_Vad))))) 
                                   (abst_constr (abst_prj_a p) (abst_prj_b p)) 
                                   (v_Vdd:
                                    (zen.proof 
                                       (zen.imp 
                                          (zen.triangle 
                                             (focal.is_true (abst_equal p p))) 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p 
                                                      (abst_constr 
                                                         (abst_prj_a p) 
                                                         (abst_prj_b p))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p 
                                                      (abst_constr 
                                                         (abst_prj_a p) 
                                                         (abst_prj_b p)))))))) =>
                                    zen.Rimply 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p p))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal p 
                                                  (abst_constr 
                                                     (abst_prj_a p) 
                                                     (abst_prj_b p))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal p 
                                                  (abst_constr 
                                                     (abst_prj_a p) 
                                                     (abst_prj_b p)))))) 
                                      (v_Vkc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p p))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal p p))) 
                                         v_Vxc v_Vkc) 
                                      (v_Ved:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p 
                                                      (abst_constr 
                                                         (abst_prj_a p) 
                                                         (abst_prj_b p))))) 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p 
                                                      (abst_constr 
                                                         (abst_prj_a p) 
                                                         (abst_prj_b p))))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal p 
                                                  (abst_constr 
                                                     (abst_prj_a p) 
                                                     (abst_prj_b p))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal p 
                                                  (abst_constr 
                                                     (abst_prj_a p) 
                                                     (abst_prj_b p))))) 
                                         (v_Vfd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p 
                                                         (abst_constr 
                                                            (abst_prj_a p) 
                                                            (abst_prj_b p))))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p 
                                                     (abst_constr 
                                                        (abst_prj_a p) 
                                                        (abst_prj_b p))))) 
                                            __C_1_1_LEMMA v_Vfd) 
                                         (__C_1_1_LEMMA:
                                          (zen.proof 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p 
                                                      (abst_constr 
                                                         (abst_prj_a p) 
                                                         (abst_prj_b p)))))) =>
                                          zen.Rsubst basics.bool__t 
                                            (v_Vpc:
                                             (zen.term basics.bool__t) =>
                                             zen.triangle 
                                               (focal.is_true v_Vpc)) 
                                            (abst_equal p 
                                               (abst_constr (abst_prj_a p) 
                                                  (abst_prj_b p))) 
                                            (abst_equal p p) 
                                            (v_Vqc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal p 
                                                            (abst_constr 
                                                               (abst_prj_a p) 
                                                               (abst_prj_b p))) 
                                                         (abst_equal p p))))) =>
                                             zen.Rsubst abst_T 
                                               (v_Vrc:(zen.term abst_T) =>
                                                zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal v_Vrc 
                                                           (abst_constr 
                                                              (abst_prj_a p) 
                                                              (abst_prj_b p))) 
                                                        (abst_equal p p)))) 
                                               p p 
                                               (v_Vmc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T p 
                                                            p)))) =>
                                                zen.Rnoteq abst_T p v_Vmc) 
                                               (v_Vqc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal p 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p) 
                                                                  (abst_prj_b 
                                                                    p))) 
                                                            (abst_equal p p))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vgd:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal p 
                                                              v_Vgd) 
                                                           (abst_equal p p)))) 
                                                  (abst_constr 
                                                     (abst_prj_a p) 
                                                     (abst_prj_b p)) p 
                                                  (v_Vhd:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p) 
                                                                  (abst_prj_b 
                                                                    p)) p)))) =>
                                                   zen.Raxiom 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_constr 
                                                              (abst_prj_a p) 
                                                              (abst_prj_b p)) 
                                                           p)) v_Voc v_Vhd) 
                                                  (v_Vid:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal p 
                                                                  p) 
                                                               (abst_equal p 
                                                                  p))))) =>
                                                   zen.Rnoteq basics.bool__t 
                                                     (abst_equal p p) v_Vid) 
                                                  v_Vqc) v_Vqc) 
                                            (v_Vxc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p p)))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p p))) 
                                               v_Vxc v_Vkc) __C_1_1_LEMMA) 
                                         v_Ved) v_Vdd) v_Vcd) v_Vbd) 
                             abst_equal_transitive) v_Vwc) v_Vnc) 
                    (v_Vqc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (abst_equal p 
                                    (abst_constr (abst_prj_a p) 
                                       (abst_prj_b p))) (abst_equal p p))))) =>
                     zen.Rsubst abst_T 
                       (v_Vgd:(zen.term abst_T) =>
                        zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t (abst_equal p v_Vgd) 
                                (abst_equal p p)))) 
                       (abst_constr (abst_prj_a p) (abst_prj_b p)) p 
                       (v_Vhd:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_constr (abst_prj_a p) 
                                       (abst_prj_b p)) p)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_constr (abst_prj_a p) (abst_prj_b p)) p)) 
                          v_Voc v_Vhd) 
                       (v_Vid:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t (abst_equal p p) 
                                    (abst_equal p p))))) =>
                        zen.Rnoteq basics.bool__t (abst_equal p p) v_Vid) 
                       v_Vqc) v_Vqc) 
                 (v_Vxc:
                  (zen.proof (zen.triangle (focal.is_true (abst_equal p p)))) =>
                  zen.Raxiom (zen.triangle (focal.is_true (abst_equal p p))) 
                    v_Vxc v_Vkc) __C_1_1_LEMMA) 
              (v_Vhd:
               (zen.proof 
                  (zen.not 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_constr (abst_prj_a p) (abst_prj_b p)) p)))) =>
               zen.Rcut 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_constr (abst_prj_a p) (abst_prj_b p)) p))) 
                 (v_Vjd:
                  (zen.proof 
                     (zen.triangle 
                        (focal.is_true 
                           (abst_equal 
                              (abst_constr (abst_prj_a p) (abst_prj_b p)) p)))) =>
                  zen.Rall abst_T 
                    (v_Vyc:(zen.term abst_T) =>
                     zen.forall abst_T 
                       (v_Vzc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal v_Vyc v_Vzc))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vyc v_Vad))))))) 
                    p 
                    (v_Vbd:
                     (zen.proof 
                        (zen.forall abst_T 
                           (v_Vzc:(zen.term abst_T) =>
                            zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal p v_Vzc))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal v_Vzc v_Vad))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal p v_Vad)))))))) =>
                     zen.Rall abst_T 
                       (v_Vzc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (abst_equal p v_Vzc))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal p v_Vad)))))) 
                       (abst_constr (abst_prj_a p) (abst_prj_b p)) 
                       (v_Vkd:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal p 
                                          (abst_constr (abst_prj_a p) 
                                             (abst_prj_b p))))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr (abst_prj_a p) 
                                                (abst_prj_b p)) v_Vad))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal p v_Vad))))))) =>
                        zen.Rall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal p 
                                      (abst_constr (abst_prj_a p) 
                                         (abst_prj_b p))))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p) 
                                            (abst_prj_b p)) v_Vad))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal p v_Vad))))) p 
                          (v_Vld:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal p 
                                          (abst_constr (abst_prj_a p) 
                                             (abst_prj_b p))))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr (abst_prj_a p) 
                                                (abst_prj_b p)) p))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal p p)))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal p 
                                      (abst_constr (abst_prj_a p) 
                                         (abst_prj_b p))))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p) 
                                            (abst_prj_b p)) p))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal p p)))) 
                             (v_Vfd:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal p 
                                             (abst_constr (abst_prj_a p) 
                                                (abst_prj_b p))))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal p 
                                         (abst_constr (abst_prj_a p) 
                                            (abst_prj_b p))))) __C_1_1_LEMMA 
                                v_Vfd) 
                             (v_Vmd:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr (abst_prj_a p) 
                                                (abst_prj_b p)) p))) 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal p p))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p) 
                                            (abst_prj_b p)) p))) 
                                (zen.triangle 
                                   (focal.is_true (abst_equal p p))) 
                                (v_Vnd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p) 
                                                   (abst_prj_b p)) p))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p) 
                                               (abst_prj_b p)) p))) v_Vjd 
                                   v_Vnd) 
                                (v_Vxc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal p p)))) =>
                                 zen.Rsubst basics.bool__t 
                                   (v_Vpc:(zen.term basics.bool__t) =>
                                    zen.triangle (focal.is_true v_Vpc)) 
                                   (abst_equal p p) (abst_equal p p) 
                                   (v_Vid:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal basics.bool__t 
                                                (abst_equal p p) 
                                                (abst_equal p p))))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vod:(zen.term abst_T) =>
                                       zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (abst_equal v_Vod p) 
                                               (abst_equal p p)))) p p 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T p p)))) =>
                                       zen.Rnotand 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T p p))) 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p p)))) 
                                         (v_Vsc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T p p))))) =>
                                          zen.Rnotnot 
                                            (zen.triangle 
                                               (zen.equal abst_T p p)) 
                                            (v_Vtc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (zen.equal abst_T p p))) =>
                                             zen.Reqsym abst_T p p v_Vtc 
                                               v_Vmc) v_Vsc) 
                                         (v_Vwc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal p p)))))) =>
                                          zen.Rnotnot 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p p))) 
                                            (v_Vxc:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p p)))) =>
                                             zen.Rall abst_T 
                                               (v_Vyc:(zen.term abst_T) =>
                                                zen.forall abst_T 
                                                  (v_Vzc:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal 
                                                                 v_Vyc v_Vzc))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vyc 
                                                                    v_Vad))))))) 
                                               p 
                                               (v_Vbd:
                                                (zen.proof 
                                                   (zen.forall abst_T 
                                                      (v_Vzc:
                                                       (zen.term abst_T) =>
                                                       zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    p v_Vzc))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p v_Vad)))))))) =>
                                                zen.Rall abst_T 
                                                  (v_Vzc:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal p 
                                                                 v_Vzc))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p v_Vad)))))) 
                                                  p 
                                                  (v_Vcd:
                                                   (zen.proof 
                                                      (zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    p p))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p v_Vad))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p v_Vad))))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal p p))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p v_Vad))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p v_Vad))))) 
                                                     p 
                                                     (v_Vpd:
                                                      (zen.proof 
                                                         (zen.imp 
                                                            (zen.triangle 
                                                               (focal.is_true 
                                                                  (abst_equal 
                                                                    p p))) 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p p))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p p)))))) =>
                                                      zen.Rimply 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal p p))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p p))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p p)))) 
                                                        (v_Vkc:
                                                         (zen.proof 
                                                            (zen.not 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p p))))) =>
                                                         zen.Raxiom 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p p))) 
                                                           v_Vxc v_Vkc) 
                                                        (v_Vqd:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p p))) 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p p))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p p))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p p))) 
                                                           (v_Vkc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p p))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p p))) 
                                                              v_Vxc v_Vkc) 
                                                           (v_Vxc:
                                                            (zen.proof 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p p)))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p p))) 
                                                              v_Vxc v_Vkc) 
                                                           v_Vqd) v_Vpd) 
                                                     v_Vcd) v_Vbd) 
                                               abst_equal_transitive) v_Vwc) 
                                         v_Vnc) 
                                      (v_Vid:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal p p) 
                                                   (abst_equal p p))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vgd:(zen.term abst_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal p v_Vgd) 
                                                  (abst_equal p p)))) p p 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T p p)))) =>
                                          zen.Rnoteq abst_T p v_Vmc) 
                                         (v_Vid:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal p p) 
                                                      (abst_equal p p))))) =>
                                          zen.Rnoteq basics.bool__t 
                                            (abst_equal p p) v_Vid) v_Vid) 
                                      v_Vid) 
                                   (v_Vxc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal p p)))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p p))) 
                                      v_Vxc v_Vkc) v_Vxc) v_Vmd) v_Vld) v_Vkd) 
                       v_Vbd) abst_equal_transitive) 
                 (v_Vnd:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_constr (abst_prj_a p) (abst_prj_b p)) 
                                 p))))) =>
                  zen.Rall abst_T 
                    (v_Vrd:(zen.term abst_T) =>
                     zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_constr (abst_prj_a v_Vrd) 
                                (abst_prj_b v_Vrd)) v_Vrd))) p 
                    (v_Vjd:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_constr (abst_prj_a p) (abst_prj_b p)) 
                                 p)))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_constr (abst_prj_a p) (abst_prj_b p)) p))) 
                       v_Vjd v_Vnd) abst_unicite_1))))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal p (abst_constr (abst_prj_a p) (abst_prj_b p))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal p 
                          (abst_constr (abst_prj_a p) (abst_prj_b p))))))) =>
           zen.Rall abst_T 
             (v_Vac:(zen.term abst_T) =>
              zen.triangle 
                (focal.is_true 
                   (abst_equal v_Vac 
                      (abst_constr (abst_prj_a v_Vac) (abst_prj_b v_Vac))))) 
             p 
             (v_Vbc:
              (zen.proof 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal p 
                          (abst_constr (abst_prj_a p) (abst_prj_b p)))))) =>
              zen.Raxiom 
                (zen.triangle 
                   (focal.is_true 
                      (abst_equal p 
                         (abst_constr (abst_prj_a p) (abst_prj_b p))))) 
                v_Vbc v_Vzb) abst_unicite_2))).

def Imp_pair__equal_reflexive2 :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) ->
  _p_S1_equal_reflexive:(dk_logic.eP 
                           (dk_logic.forall _p_S1_T 
                              (x:(cc.eT _p_S1_T) =>
                               dk_logic.ebP (_p_S1_equal x x)))) ->
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal_reflexive:(dk_logic.eP 
                           (dk_logic.forall _p_S2_T 
                              (x:(cc.eT _p_S2_T) =>
                               dk_logic.ebP (_p_S2_equal x x)))) ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_def_equal1:(dk_logic.eP 
                     (dk_logic.forall _p_S1_T 
                        (n1:(cc.eT _p_S1_T) =>
                         dk_logic.forall _p_S1_T 
                           (n3:(cc.eT _p_S1_T) =>
                            dk_logic.forall _p_S2_T 
                              (n2:(cc.eT _p_S2_T) =>
                               dk_logic.forall _p_S2_T 
                                 (n4:(cc.eT _p_S2_T) =>
                                  dk_logic.eqv 
                                    (dk_logic.ebP 
                                       (abst_equal (abst_constr n1 n2) 
                                          (abst_constr n3 n4))) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (_p_S1_equal n1 n3)) 
                                       (dk_logic.ebP (_p_S2_equal n2 n4))))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S1_T 
       (n1:(cc.eT _p_S1_T) =>
        dk_logic.forall _p_S2_T 
          (n2:(cc.eT _p_S2_T) =>
           dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n1 n2)))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  _p_S1_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) => dk_logic.ebP (_p_S1_equal x x)))) =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  _p_S2_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) => dk_logic.ebP (_p_S2_equal x x)))) =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_def_equal1:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (n1:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (n3:(cc.eT _p_S1_T) =>
            dk_logic.forall _p_S2_T 
              (n2:(cc.eT _p_S2_T) =>
               dk_logic.forall _p_S2_T 
                 (n4:(cc.eT _p_S2_T) =>
                  dk_logic.eqv 
                    (dk_logic.ebP 
                       (abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) 
                    (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
                       (dk_logic.ebP (_p_S2_equal n2 n4))))))))) =>
  zen.nnpp 
    (zen.forall _p_S1_T 
       (v_Vzb:(zen.term _p_S1_T) =>
        zen.forall _p_S2_T 
          (v_Vac:(zen.term _p_S2_T) =>
           zen.triangle 
             (focal.is_true 
                (abst_equal (abst_constr v_Vzb v_Vac) 
                   (abst_constr v_Vzb v_Vac)))))) 
    (v_Vbc:
     (zen.proof 
        (zen.not 
           (zen.forall _p_S1_T 
              (v_Vzb:(zen.term _p_S1_T) =>
               zen.forall _p_S2_T 
                 (v_Vac:(zen.term _p_S2_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_constr v_Vzb v_Vac) 
                          (abst_constr v_Vzb v_Vac)))))))) =>
     zen.Rnotall _p_S1_T 
       (v_Vzb:(zen.term _p_S1_T) =>
        zen.forall _p_S2_T 
          (v_Vac:(zen.term _p_S2_T) =>
           zen.triangle 
             (focal.is_true 
                (abst_equal (abst_constr v_Vzb v_Vac) 
                   (abst_constr v_Vzb v_Vac))))) 
       (v_Vcc:(zen.term _p_S1_T) =>
        v_Vdc:
        (zen.proof 
           (zen.not 
              (zen.forall _p_S2_T 
                 (v_Vac:(zen.term _p_S2_T) =>
                  zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_constr v_Vcc v_Vac) 
                          (abst_constr v_Vcc v_Vac))))))) =>
        zen.Rnotall _p_S2_T 
          (v_Vac:(zen.term _p_S2_T) =>
           zen.triangle 
             (focal.is_true 
                (abst_equal (abst_constr v_Vcc v_Vac) 
                   (abst_constr v_Vcc v_Vac)))) 
          (v_Vec:(zen.term _p_S2_T) =>
           v_Vfc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_constr v_Vcc v_Vec) 
                          (abst_constr v_Vcc v_Vec)))))) =>
           zen.Rall _p_S1_T 
             (v_Vzb:(zen.term _p_S1_T) =>
              zen.forall _p_S1_T 
                (v_Vgc:(zen.term _p_S1_T) =>
                 zen.forall _p_S2_T 
                   (v_Vac:(zen.term _p_S2_T) =>
                    zen.forall _p_S2_T 
                      (v_Vhc:(zen.term _p_S2_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr v_Vzb v_Vac) 
                                  (abst_constr v_Vgc v_Vhc)))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vzb v_Vgc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vac v_Vhc)))))))) 
             v_Vcc 
             (v_Vic:
              (zen.proof 
                 (zen.forall _p_S1_T 
                    (v_Vgc:(zen.term _p_S1_T) =>
                     zen.forall _p_S2_T 
                       (v_Vac:(zen.term _p_S2_T) =>
                        zen.forall _p_S2_T 
                          (v_Vhc:(zen.term _p_S2_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr v_Vcc v_Vac) 
                                      (abst_constr v_Vgc v_Vhc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal v_Vcc v_Vgc))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal v_Vac v_Vhc))))))))) =>
              zen.Rall _p_S1_T 
                (v_Vgc:(zen.term _p_S1_T) =>
                 zen.forall _p_S2_T 
                   (v_Vac:(zen.term _p_S2_T) =>
                    zen.forall _p_S2_T 
                      (v_Vhc:(zen.term _p_S2_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr v_Vcc v_Vac) 
                                  (abst_constr v_Vgc v_Vhc)))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vcc v_Vgc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vac v_Vhc))))))) 
                v_Vcc 
                (v_Vjc:
                 (zen.proof 
                    (zen.forall _p_S2_T 
                       (v_Vac:(zen.term _p_S2_T) =>
                        zen.forall _p_S2_T 
                          (v_Vhc:(zen.term _p_S2_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr v_Vcc v_Vac) 
                                      (abst_constr v_Vcc v_Vhc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal v_Vac v_Vhc)))))))) =>
                 zen.Rall _p_S2_T 
                   (v_Vac:(zen.term _p_S2_T) =>
                    zen.forall _p_S2_T 
                      (v_Vhc:(zen.term _p_S2_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr v_Vcc v_Vac) 
                                  (abst_constr v_Vcc v_Vhc)))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vac v_Vhc)))))) 
                   v_Vec 
                   (v_Vkc:
                    (zen.proof 
                       (zen.forall _p_S2_T 
                          (v_Vhc:(zen.term _p_S2_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr v_Vcc v_Vec) 
                                      (abst_constr v_Vcc v_Vhc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal v_Vec v_Vhc))))))) =>
                    zen.Rall _p_S2_T 
                      (v_Vhc:(zen.term _p_S2_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr v_Vcc v_Vec) 
                                  (abst_constr v_Vcc v_Vhc)))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vec v_Vhc))))) 
                      v_Vec 
                      (v_Vlc:
                       (zen.proof 
                          (zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr v_Vcc v_Vec) 
                                      (abst_constr v_Vcc v_Vec)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal v_Vec v_Vec)))))) =>
                       zen.Requiv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr v_Vcc v_Vec) 
                                  (abst_constr v_Vcc v_Vec)))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vec v_Vec)))) 
                         (v_Vfc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_constr v_Vcc v_Vec) 
                                         (abst_constr v_Vcc v_Vec)))))) =>
                          v_Vmc:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S1_equal v_Vcc v_Vcc))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal v_Vec v_Vec)))))) =>
                          zen.Rnotand 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vec v_Vec))) 
                            (v_Vnc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S1_equal v_Vcc v_Vcc))))) =>
                             zen.Rall _p_S1_T 
                               (v_Voc:(zen.term _p_S1_T) =>
                                zen.triangle 
                                  (focal.is_true (_p_S1_equal v_Voc v_Voc))) 
                               v_Vcc 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S1_equal v_Vcc v_Vcc)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                                  v_Vpc v_Vnc) _p_S1_equal_reflexive) 
                            (v_Vqc:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal v_Vec v_Vec))))) =>
                             zen.Rall _p_S2_T 
                               (v_Vrc:(zen.term _p_S2_T) =>
                                zen.triangle 
                                  (focal.is_true (_p_S2_equal v_Vrc v_Vrc))) 
                               v_Vec 
                               (v_Vsc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (_p_S2_equal v_Vec v_Vec)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal v_Vec v_Vec))) 
                                  v_Vsc v_Vqc) _p_S2_equal_reflexive) v_Vmc) 
                         (v_Vtc:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr v_Vcc v_Vec) 
                                      (abst_constr v_Vcc v_Vec))))) =>
                          v_Vuc:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal v_Vcc v_Vcc))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal v_Vec v_Vec))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr v_Vcc v_Vec) 
                                     (abst_constr v_Vcc v_Vec)))) v_Vtc v_Vfc) 
                         v_Vlc) v_Vkc) v_Vjc) v_Vic) abst_def_equal1) v_Vdc) 
       v_Vbc).

def Imp_pair__equal_symmetric2 :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) ->
  _p_S1_equal_symmetric:(dk_logic.eP 
                           (dk_logic.forall _p_S1_T 
                              (x:(cc.eT _p_S1_T) =>
                               dk_logic.forall _p_S1_T 
                                 (y:(cc.eT _p_S1_T) =>
                                  dk_logic.imp 
                                    (dk_logic.ebP (_p_S1_equal x y)) 
                                    (dk_logic.ebP (_p_S1_equal y x)))))) ->
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal_symmetric:(dk_logic.eP 
                           (dk_logic.forall _p_S2_T 
                              (x:(cc.eT _p_S2_T) =>
                               dk_logic.forall _p_S2_T 
                                 (y:(cc.eT _p_S2_T) =>
                                  dk_logic.imp 
                                    (dk_logic.ebP (_p_S2_equal x y)) 
                                    (dk_logic.ebP (_p_S2_equal y x)))))) ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_def_equal1:(dk_logic.eP 
                     (dk_logic.forall _p_S1_T 
                        (n1:(cc.eT _p_S1_T) =>
                         dk_logic.forall _p_S1_T 
                           (n3:(cc.eT _p_S1_T) =>
                            dk_logic.forall _p_S2_T 
                              (n2:(cc.eT _p_S2_T) =>
                               dk_logic.forall _p_S2_T 
                                 (n4:(cc.eT _p_S2_T) =>
                                  dk_logic.eqv 
                                    (dk_logic.ebP 
                                       (abst_equal (abst_constr n1 n2) 
                                          (abst_constr n3 n4))) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (_p_S1_equal n1 n3)) 
                                       (dk_logic.ebP (_p_S2_equal n2 n4))))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S1_T 
       (n1:(cc.eT _p_S1_T) =>
        dk_logic.forall _p_S1_T 
          (n3:(cc.eT _p_S1_T) =>
           dk_logic.forall _p_S2_T 
             (n2:(cc.eT _p_S2_T) =>
              dk_logic.forall _p_S2_T 
                (n4:(cc.eT _p_S2_T) =>
                 dk_logic.imp 
                   (dk_logic.ebP 
                      (abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) 
                   (dk_logic.ebP 
                      (abst_equal (abst_constr n3 n4) (abst_constr n1 n2))))))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  _p_S1_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (y:(cc.eT _p_S1_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S1_equal x y)) 
              (dk_logic.ebP (_p_S1_equal y x)))))) =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  _p_S2_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) =>
         dk_logic.forall _p_S2_T 
           (y:(cc.eT _p_S2_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S2_equal x y)) 
              (dk_logic.ebP (_p_S2_equal y x)))))) =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_def_equal1:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (n1:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (n3:(cc.eT _p_S1_T) =>
            dk_logic.forall _p_S2_T 
              (n2:(cc.eT _p_S2_T) =>
               dk_logic.forall _p_S2_T 
                 (n4:(cc.eT _p_S2_T) =>
                  dk_logic.eqv 
                    (dk_logic.ebP 
                       (abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) 
                    (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
                       (dk_logic.ebP (_p_S2_equal n2 n4))))))))) =>
  (__E_1_LEMMA:
   (n1:(cc.eT _p_S1_T) ->
    n3:(cc.eT _p_S1_T) ->
    n2:(cc.eT _p_S2_T) ->
    n4:(cc.eT _p_S2_T) ->
    H1:(dk_logic.eP 
          (dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) ->
    dk_logic.eP 
      (dk_logic.ebP (abst_equal (abst_constr n3 n4) (abst_constr n1 n2)))) =>
   zen.nnpp 
     (zen.forall _p_S1_T 
        (v_Vzb:(zen.term _p_S1_T) =>
         zen.forall _p_S1_T 
           (v_Vac:(zen.term _p_S1_T) =>
            zen.forall _p_S2_T 
              (v_Vbc:(zen.term _p_S2_T) =>
               zen.forall _p_S2_T 
                 (v_Vcc:(zen.term _p_S2_T) =>
                  zen.imp 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_constr v_Vzb v_Vbc) 
                             (abst_constr v_Vac v_Vcc)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_constr v_Vac v_Vcc) 
                             (abst_constr v_Vzb v_Vbc))))))))) 
     (v_Vdc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_S1_T 
               (v_Vzb:(zen.term _p_S1_T) =>
                zen.forall _p_S1_T 
                  (v_Vac:(zen.term _p_S1_T) =>
                   zen.forall _p_S2_T 
                     (v_Vbc:(zen.term _p_S2_T) =>
                      zen.forall _p_S2_T 
                        (v_Vcc:(zen.term _p_S2_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr v_Vzb v_Vbc) 
                                    (abst_constr v_Vac v_Vcc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr v_Vac v_Vcc) 
                                    (abst_constr v_Vzb v_Vbc))))))))))) =>
      zen.Raxiom 
        (zen.forall _p_S1_T 
           (v_Vzb:(zen.term _p_S1_T) =>
            zen.forall _p_S1_T 
              (v_Vac:(zen.term _p_S1_T) =>
               zen.forall _p_S2_T 
                 (v_Vbc:(zen.term _p_S2_T) =>
                  zen.forall _p_S2_T 
                    (v_Vcc:(zen.term _p_S2_T) =>
                     zen.imp 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_constr v_Vzb v_Vbc) 
                                (abst_constr v_Vac v_Vcc)))) 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_constr v_Vac v_Vcc) 
                                (abst_constr v_Vzb v_Vbc))))))))) 
        __E_1_LEMMA v_Vdc)) 
    (n1:(cc.eT _p_S1_T) =>
     n3:(cc.eT _p_S1_T) =>
     n2:(cc.eT _p_S2_T) =>
     n4:(cc.eT _p_S2_T) =>
     H1:
     (dk_logic.eP 
        (dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) =>
     (__E_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
            (dk_logic.ebP (_p_S2_equal n2 n4)))) =>
      (__E_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.imp 
             (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
                (dk_logic.ebP (_p_S2_equal n2 n4))) 
             (dk_logic.and (dk_logic.ebP (_p_S1_equal n3 n1)) 
                (dk_logic.ebP (_p_S2_equal n4 n2))))) =>
       (__E_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.imp 
              (dk_logic.and (dk_logic.ebP (_p_S1_equal n3 n1)) 
                 (dk_logic.ebP (_p_S2_equal n4 n2))) 
              (dk_logic.ebP 
                 (abst_equal (abst_constr n3 n4) (abst_constr n1 n2))))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_constr n3 n4) (abst_constr n1 n2)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_constr n3 n4) (abst_constr n1 n2)))))) =>
           zen.Rand (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
             (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
             (v_Vac:
              (zen.proof (zen.triangle (focal.is_true (_p_S1_equal n1 n3)))) =>
              v_Vbc:
              (zen.proof (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) =>
              zen.Rimply 
                (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                   (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) 
                (zen.and (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                   (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                          (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))))) =>
                 zen.Rnotand 
                   (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                   (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
                   (v_Vdc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_S1_equal n1 n3))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                      v_Vac v_Vdc) 
                   (v_Vec:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (_p_S2_equal n2 n4))))) =>
                    zen.Raxiom 
                      (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
                      v_Vbc v_Vec) v_Vcc) 
                (v_Vfc:
                 (zen.proof 
                    (zen.and 
                       (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                       (zen.triangle (focal.is_true (_p_S2_equal n4 n2))))) =>
                 zen.Rand (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                   (zen.triangle (focal.is_true (_p_S2_equal n4 n2))) 
                   (v_Vgc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_S1_equal n3 n1)))) =>
                    v_Vhc:
                    (zen.proof 
                       (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))) =>
                    zen.Rimply 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                         (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_constr n3 n4) 
                               (abst_constr n1 n2)))) 
                      (v_Vic:
                       (zen.proof 
                          (zen.not 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n3 n1))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n4 n2)))))) =>
                       zen.Rnotand 
                         (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                         (zen.triangle (focal.is_true (_p_S2_equal n4 n2))) 
                         (v_Vjc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n3 n1))))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                            v_Vgc v_Vjc) 
                         (v_Vkc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n4 n2))))) =>
                          zen.Raxiom 
                            (zen.triangle (focal.is_true (_p_S2_equal n4 n2))) 
                            v_Vhc v_Vkc) v_Vic) 
                      (v_Vlc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_constr n3 n4) 
                                   (abst_constr n1 n2))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr n3 n4) 
                                  (abst_constr n1 n2)))) v_Vlc v_Vzb) 
                      __E_1_3_LEMMA) v_Vfc) __E_1_2_LEMMA) __E_1_1_LEMMA)) 
         (zen.nnpp 
            (zen.imp 
               (zen.and (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                  (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))) 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_constr n3 n4) (abst_constr n1 n2))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.imp 
                      (zen.and 
                         (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                         (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))) 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_constr n3 n4) 
                               (abst_constr n1 n2))))))) =>
             zen.Rnotimply 
               (zen.and (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                  (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))) 
               (zen.triangle 
                  (focal.is_true 
                     (abst_equal (abst_constr n3 n4) (abst_constr n1 n2)))) 
               (v_Vac:
                (zen.proof 
                   (zen.and 
                      (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                      (zen.triangle (focal.is_true (_p_S2_equal n4 n2))))) =>
                v_Vbc:
                (zen.proof 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_constr n3 n4) 
                               (abst_constr n1 n2)))))) =>
                zen.Rand (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                  (zen.triangle (focal.is_true (_p_S2_equal n4 n2))) 
                  (v_Vcc:
                   (zen.proof 
                      (zen.triangle (focal.is_true (_p_S1_equal n3 n1)))) =>
                   v_Vdc:
                   (zen.proof 
                      (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))) =>
                   zen.Rall _p_S1_T 
                     (v_Vec:(zen.term _p_S1_T) =>
                      zen.forall _p_S1_T 
                        (v_Vfc:(zen.term _p_S1_T) =>
                         zen.forall _p_S2_T 
                           (v_Vgc:(zen.term _p_S2_T) =>
                            zen.forall _p_S2_T 
                              (v_Vhc:(zen.term _p_S2_T) =>
                               zen.eqv 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_constr v_Vec v_Vgc) 
                                          (abst_constr v_Vfc v_Vhc)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S1_equal v_Vec v_Vfc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S2_equal v_Vgc v_Vhc)))))))) 
                     n3 
                     (v_Vic:
                      (zen.proof 
                         (zen.forall _p_S1_T 
                            (v_Vfc:(zen.term _p_S1_T) =>
                             zen.forall _p_S2_T 
                               (v_Vgc:(zen.term _p_S2_T) =>
                                zen.forall _p_S2_T 
                                  (v_Vhc:(zen.term _p_S2_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr n3 v_Vgc) 
                                              (abst_constr v_Vfc v_Vhc)))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S1_equal n3 v_Vfc))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal v_Vgc v_Vhc))))))))) =>
                      zen.Rall _p_S1_T 
                        (v_Vfc:(zen.term _p_S1_T) =>
                         zen.forall _p_S2_T 
                           (v_Vgc:(zen.term _p_S2_T) =>
                            zen.forall _p_S2_T 
                              (v_Vhc:(zen.term _p_S2_T) =>
                               zen.eqv 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_constr n3 v_Vgc) 
                                          (abst_constr v_Vfc v_Vhc)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n3 v_Vfc))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S2_equal v_Vgc v_Vhc))))))) n1 
                        (v_Vjc:
                         (zen.proof 
                            (zen.forall _p_S2_T 
                               (v_Vgc:(zen.term _p_S2_T) =>
                                zen.forall _p_S2_T 
                                  (v_Vhc:(zen.term _p_S2_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr n3 v_Vgc) 
                                              (abst_constr n1 v_Vhc)))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true (_p_S1_equal n3 n1))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal v_Vgc v_Vhc)))))))) =>
                         zen.Rall _p_S2_T 
                           (v_Vgc:(zen.term _p_S2_T) =>
                            zen.forall _p_S2_T 
                              (v_Vhc:(zen.term _p_S2_T) =>
                               zen.eqv 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_constr n3 v_Vgc) 
                                          (abst_constr n1 v_Vhc)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n3 n1))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (_p_S2_equal v_Vgc v_Vhc)))))) n4 
                           (v_Vkc:
                            (zen.proof 
                               (zen.forall _p_S2_T 
                                  (v_Vhc:(zen.term _p_S2_T) =>
                                   zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_constr n3 n4) 
                                              (abst_constr n1 v_Vhc)))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true (_p_S1_equal n3 n1))) 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (_p_S2_equal n4 v_Vhc))))))) =>
                            zen.Rall _p_S2_T 
                              (v_Vhc:(zen.term _p_S2_T) =>
                               zen.eqv 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_constr n3 n4) 
                                          (abst_constr n1 v_Vhc)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n3 n1))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n4 v_Vhc))))) 
                              n2 
                              (v_Vlc:
                               (zen.proof 
                                  (zen.eqv 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_constr n3 n4) 
                                              (abst_constr n1 n2)))) 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true (_p_S1_equal n3 n1))) 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n4 n2)))))) =>
                               zen.Requiv 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_constr n3 n4) 
                                          (abst_constr n1 n2)))) 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n3 n1))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n4 n2)))) 
                                 (v_Vbc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr n3 n4) 
                                                 (abst_constr n1 n2)))))) =>
                                  v_Vmc:
                                  (zen.proof 
                                     (zen.not 
                                        (zen.and 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal n3 n1))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal n4 n2)))))) =>
                                  zen.Rnotand 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n3 n1))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n4 n2))) 
                                    (v_Vnc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal n3 n1))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (_p_S1_equal n3 n1))) 
                                       v_Vcc v_Vnc) 
                                    (v_Voc:
                                     (zen.proof 
                                        (zen.not 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal n4 n2))))) =>
                                     zen.Raxiom 
                                       (zen.triangle 
                                          (focal.is_true (_p_S2_equal n4 n2))) 
                                       v_Vdc v_Voc) v_Vmc) 
                                 (v_Vpc:
                                  (zen.proof 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal (abst_constr n3 n4) 
                                              (abst_constr n1 n2))))) =>
                                  v_Vac:
                                  (zen.proof 
                                     (zen.and 
                                        (zen.triangle 
                                           (focal.is_true (_p_S1_equal n3 n1))) 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n4 n2))))) =>
                                  zen.Raxiom 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal (abst_constr n3 n4) 
                                             (abst_constr n1 n2)))) v_Vpc 
                                    v_Vbc) v_Vlc) v_Vkc) v_Vjc) v_Vic) 
                     abst_def_equal1) v_Vac) v_Vzb))) 
        (zen.nnpp 
           (zen.imp 
              (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                 (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) 
              (zen.and (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                 (zen.triangle (focal.is_true (_p_S2_equal n4 n2))))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.and 
                        (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                        (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) 
                     (zen.and 
                        (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                        (zen.triangle (focal.is_true (_p_S2_equal n4 n2))))))) =>
            zen.Rnotimply 
              (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                 (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) 
              (zen.and (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                 (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))) 
              (v_Vac:
               (zen.proof 
                  (zen.and 
                     (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                     (zen.triangle (focal.is_true (_p_S2_equal n2 n4))))) =>
               v_Vbc:
               (zen.proof 
                  (zen.not 
                     (zen.and 
                        (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                        (zen.triangle (focal.is_true (_p_S2_equal n4 n2)))))) =>
               zen.Rand (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                 (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
                 (v_Vcc:
                  (zen.proof 
                     (zen.triangle (focal.is_true (_p_S1_equal n1 n3)))) =>
                  v_Vdc:
                  (zen.proof 
                     (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) =>
                  zen.Rnotand 
                    (zen.triangle (focal.is_true (_p_S1_equal n3 n1))) 
                    (zen.triangle (focal.is_true (_p_S2_equal n4 n2))) 
                    (v_Vec:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (_p_S1_equal n3 n1))))) =>
                     zen.Rall _p_S1_T 
                       (v_Vfc:(zen.term _p_S1_T) =>
                        zen.forall _p_S1_T 
                          (v_Vgc:(zen.term _p_S1_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal v_Vfc v_Vgc))) 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal v_Vgc v_Vfc))))) 
                       n1 
                       (v_Vhc:
                        (zen.proof 
                           (zen.forall _p_S1_T 
                              (v_Vgc:(zen.term _p_S1_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n1 v_Vgc))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal v_Vgc n1)))))) =>
                        zen.Rall _p_S1_T 
                          (v_Vgc:(zen.term _p_S1_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n1 v_Vgc))) 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal v_Vgc n1)))) n3 
                          (v_Vic:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n1 n3))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n3 n1))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n1 n3))) 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n3 n1))) 
                             (v_Vjc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n1 n3))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 n3))) 
                                v_Vcc v_Vjc) 
                             (v_Vkc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n3 n1)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n3 n1))) 
                                v_Vkc v_Vec) v_Vic) v_Vhc) 
                       _p_S1_equal_symmetric) 
                    (v_Vlc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle (focal.is_true (_p_S2_equal n4 n2))))) =>
                     zen.Rall _p_S2_T 
                       (v_Vmc:(zen.term _p_S2_T) =>
                        zen.forall _p_S2_T 
                          (v_Vnc:(zen.term _p_S2_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal v_Vmc v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal v_Vnc v_Vmc))))) 
                       n2 
                       (v_Voc:
                        (zen.proof 
                           (zen.forall _p_S2_T 
                              (v_Vnc:(zen.term _p_S2_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n2 v_Vnc))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal v_Vnc n2)))))) =>
                        zen.Rall _p_S2_T 
                          (v_Vnc:(zen.term _p_S2_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n2 v_Vnc))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal v_Vnc n2)))) n4 
                          (v_Vpc:
                           (zen.proof 
                              (zen.imp 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n2 n4))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n4 n2))))) =>
                           zen.Rimply 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n2 n4))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n4 n2))) 
                             (v_Vqc:
                              (zen.proof 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n2 n4))))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n2 n4))) 
                                v_Vdc v_Vqc) 
                             (v_Vrc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n4 n2)))) =>
                              zen.Raxiom 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n4 n2))) 
                                v_Vrc v_Vlc) v_Vpc) v_Voc) 
                       _p_S2_equal_symmetric) v_Vbc) v_Vac) v_Vzb))) 
       (zen.nnpp 
          (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
             (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                    (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))))) =>
           zen.Rall _p_S1_T 
             (v_Vac:(zen.term _p_S1_T) =>
              zen.forall _p_S1_T 
                (v_Vbc:(zen.term _p_S1_T) =>
                 zen.forall _p_S2_T 
                   (v_Vcc:(zen.term _p_S2_T) =>
                    zen.forall _p_S2_T 
                      (v_Vdc:(zen.term _p_S2_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr v_Vac v_Vcc) 
                                  (abst_constr v_Vbc v_Vdc)))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal v_Vac v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))))) 
             n1 
             (v_Vec:
              (zen.proof 
                 (zen.forall _p_S1_T 
                    (v_Vbc:(zen.term _p_S1_T) =>
                     zen.forall _p_S2_T 
                       (v_Vcc:(zen.term _p_S2_T) =>
                        zen.forall _p_S2_T 
                          (v_Vdc:(zen.term _p_S2_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr n1 v_Vcc) 
                                      (abst_constr v_Vbc v_Vdc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 v_Vbc))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal v_Vcc v_Vdc))))))))) =>
              zen.Rall _p_S1_T 
                (v_Vbc:(zen.term _p_S1_T) =>
                 zen.forall _p_S2_T 
                   (v_Vcc:(zen.term _p_S2_T) =>
                    zen.forall _p_S2_T 
                      (v_Vdc:(zen.term _p_S2_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr n1 v_Vcc) 
                                  (abst_constr v_Vbc v_Vdc)))) 
                         (zen.and 
                            (zen.triangle 
                               (focal.is_true (_p_S1_equal n1 v_Vbc))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vcc v_Vdc))))))) 
                n3 
                (v_Vfc:
                 (zen.proof 
                    (zen.forall _p_S2_T 
                       (v_Vcc:(zen.term _p_S2_T) =>
                        zen.forall _p_S2_T 
                          (v_Vdc:(zen.term _p_S2_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr n1 v_Vcc) 
                                      (abst_constr n3 v_Vdc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 n3))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))))) =>
                 zen.Rall _p_S2_T 
                   (v_Vcc:(zen.term _p_S2_T) =>
                    zen.forall _p_S2_T 
                      (v_Vdc:(zen.term _p_S2_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr n1 v_Vcc) 
                                  (abst_constr n3 v_Vdc)))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))) 
                   n2 
                   (v_Vgc:
                    (zen.proof 
                       (zen.forall _p_S2_T 
                          (v_Vdc:(zen.term _p_S2_T) =>
                           zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr n1 n2) 
                                      (abst_constr n3 v_Vdc)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 n3))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n2 v_Vdc))))))) =>
                    zen.Rall _p_S2_T 
                      (v_Vdc:(zen.term _p_S2_T) =>
                       zen.eqv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr n1 n2) 
                                  (abst_constr n3 v_Vdc)))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                            (zen.triangle 
                               (focal.is_true (_p_S2_equal n2 v_Vdc))))) n4 
                      (v_Vhc:
                       (zen.proof 
                          (zen.eqv 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr n1 n2) 
                                      (abst_constr n3 n4)))) 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 n3))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n2 n4)))))) =>
                       zen.Requiv 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal (abst_constr n1 n2) 
                                  (abst_constr n3 n4)))) 
                         (zen.and 
                            (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                            (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) 
                         (v_Vic:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_constr n1 n2) 
                                         (abst_constr n3 n4)))))) =>
                          v_Vzb:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 n3))) 
                                   (zen.triangle 
                                      (focal.is_true (_p_S2_equal n2 n4)))))) =>
                          zen.Raxiom 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal (abst_constr n1 n2) 
                                     (abst_constr n3 n4)))) H1 v_Vic) 
                         (H1:
                          (zen.proof 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr n1 n2) 
                                      (abst_constr n3 n4))))) =>
                          v_Vjc:
                          (zen.proof 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 n3))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n2 n4))))) =>
                          zen.Raxiom 
                            (zen.and 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal n1 n3))) 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal n2 n4)))) 
                            v_Vjc v_Vzb) v_Vhc) v_Vgc) v_Vfc) v_Vec) 
             abst_def_equal1))).

def Imp_pair__equal_transitive2 :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) ->
  _p_S1_equal_transitive:(dk_logic.eP 
                            (dk_logic.forall _p_S1_T 
                               (x:(cc.eT _p_S1_T) =>
                                dk_logic.forall _p_S1_T 
                                  (y:(cc.eT _p_S1_T) =>
                                   dk_logic.forall _p_S1_T 
                                     (z:(cc.eT _p_S1_T) =>
                                      dk_logic.imp 
                                        (dk_logic.ebP (_p_S1_equal x y)) 
                                        (dk_logic.imp 
                                           (dk_logic.ebP (_p_S1_equal y z)) 
                                           (dk_logic.ebP (_p_S1_equal x z)))))))) ->
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) ->
  _p_S2_equal_transitive:(dk_logic.eP 
                            (dk_logic.forall _p_S2_T 
                               (x:(cc.eT _p_S2_T) =>
                                dk_logic.forall _p_S2_T 
                                  (y:(cc.eT _p_S2_T) =>
                                   dk_logic.forall _p_S2_T 
                                     (z:(cc.eT _p_S2_T) =>
                                      dk_logic.imp 
                                        (dk_logic.ebP (_p_S2_equal x y)) 
                                        (dk_logic.imp 
                                           (dk_logic.ebP (_p_S2_equal y z)) 
                                           (dk_logic.ebP (_p_S2_equal x z)))))))) ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_def_equal1:(dk_logic.eP 
                     (dk_logic.forall _p_S1_T 
                        (n1:(cc.eT _p_S1_T) =>
                         dk_logic.forall _p_S1_T 
                           (n3:(cc.eT _p_S1_T) =>
                            dk_logic.forall _p_S2_T 
                              (n2:(cc.eT _p_S2_T) =>
                               dk_logic.forall _p_S2_T 
                                 (n4:(cc.eT _p_S2_T) =>
                                  dk_logic.eqv 
                                    (dk_logic.ebP 
                                       (abst_equal (abst_constr n1 n2) 
                                          (abst_constr n3 n4))) 
                                    (dk_logic.and 
                                       (dk_logic.ebP (_p_S1_equal n1 n3)) 
                                       (dk_logic.ebP (_p_S2_equal n2 n4))))))))) ->
  dk_logic.eP 
    (dk_logic.forall _p_S1_T 
       (n1:(cc.eT _p_S1_T) =>
        dk_logic.forall _p_S1_T 
          (n3:(cc.eT _p_S1_T) =>
           dk_logic.forall _p_S1_T 
             (n5:(cc.eT _p_S1_T) =>
              dk_logic.forall _p_S2_T 
                (n2:(cc.eT _p_S2_T) =>
                 dk_logic.forall _p_S2_T 
                   (n4:(cc.eT _p_S2_T) =>
                    dk_logic.forall _p_S2_T 
                      (n6:(cc.eT _p_S2_T) =>
                       dk_logic.imp 
                         (dk_logic.ebP 
                            (abst_equal (abst_constr n1 n2) 
                               (abst_constr n3 n4))) 
                         (dk_logic.imp 
                            (dk_logic.ebP 
                               (abst_equal (abst_constr n3 n4) 
                                  (abst_constr n5 n6))) 
                            (dk_logic.ebP 
                               (abst_equal (abst_constr n1 n2) 
                                  (abst_constr n5 n6)))))))))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  _p_S1_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (y:(cc.eT _p_S1_T) =>
            dk_logic.forall _p_S1_T 
              (z:(cc.eT _p_S1_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S1_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S1_equal y z)) 
                    (dk_logic.ebP (_p_S1_equal x z)))))))) =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  _p_S2_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) =>
         dk_logic.forall _p_S2_T 
           (y:(cc.eT _p_S2_T) =>
            dk_logic.forall _p_S2_T 
              (z:(cc.eT _p_S2_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S2_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S2_equal y z)) 
                    (dk_logic.ebP (_p_S2_equal x z)))))))) =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_def_equal1:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (n1:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (n3:(cc.eT _p_S1_T) =>
            dk_logic.forall _p_S2_T 
              (n2:(cc.eT _p_S2_T) =>
               dk_logic.forall _p_S2_T 
                 (n4:(cc.eT _p_S2_T) =>
                  dk_logic.eqv 
                    (dk_logic.ebP 
                       (abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) 
                    (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
                       (dk_logic.ebP (_p_S2_equal n2 n4))))))))) =>
  (__F_1_LEMMA:
   (n1:(cc.eT _p_S1_T) ->
    n3:(cc.eT _p_S1_T) ->
    n5:(cc.eT _p_S1_T) ->
    n2:(cc.eT _p_S2_T) ->
    n4:(cc.eT _p_S2_T) ->
    n6:(cc.eT _p_S2_T) ->
    H1:(dk_logic.eP 
          (dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) ->
    H2:(dk_logic.eP 
          (dk_logic.ebP (abst_equal (abst_constr n3 n4) (abst_constr n5 n6)))) ->
    dk_logic.eP 
      (dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n5 n6)))) =>
   zen.nnpp 
     (zen.forall _p_S1_T 
        (v_Vzb:(zen.term _p_S1_T) =>
         zen.forall _p_S1_T 
           (v_Vac:(zen.term _p_S1_T) =>
            zen.forall _p_S1_T 
              (v_Vbc:(zen.term _p_S1_T) =>
               zen.forall _p_S2_T 
                 (v_Vcc:(zen.term _p_S2_T) =>
                  zen.forall _p_S2_T 
                    (v_Vdc:(zen.term _p_S2_T) =>
                     zen.forall _p_S2_T 
                       (v_Vec:(zen.term _p_S2_T) =>
                        zen.imp 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_constr v_Vzb v_Vcc) 
                                   (abst_constr v_Vac v_Vdc)))) 
                          (zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr v_Vac v_Vdc) 
                                      (abst_constr v_Vbc v_Vec)))) 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr v_Vzb v_Vcc) 
                                      (abst_constr v_Vbc v_Vec)))))))))))) 
     (v_Vfc:
      (zen.proof 
         (zen.not 
            (zen.forall _p_S1_T 
               (v_Vzb:(zen.term _p_S1_T) =>
                zen.forall _p_S1_T 
                  (v_Vac:(zen.term _p_S1_T) =>
                   zen.forall _p_S1_T 
                     (v_Vbc:(zen.term _p_S1_T) =>
                      zen.forall _p_S2_T 
                        (v_Vcc:(zen.term _p_S2_T) =>
                         zen.forall _p_S2_T 
                           (v_Vdc:(zen.term _p_S2_T) =>
                            zen.forall _p_S2_T 
                              (v_Vec:(zen.term _p_S2_T) =>
                               zen.imp 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_constr v_Vzb v_Vcc) 
                                          (abst_constr v_Vac v_Vdc)))) 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr v_Vac v_Vdc) 
                                             (abst_constr v_Vbc v_Vec)))) 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr v_Vzb v_Vcc) 
                                             (abst_constr v_Vbc v_Vec)))))))))))))) =>
      zen.Raxiom 
        (zen.forall _p_S1_T 
           (v_Vzb:(zen.term _p_S1_T) =>
            zen.forall _p_S1_T 
              (v_Vac:(zen.term _p_S1_T) =>
               zen.forall _p_S1_T 
                 (v_Vbc:(zen.term _p_S1_T) =>
                  zen.forall _p_S2_T 
                    (v_Vcc:(zen.term _p_S2_T) =>
                     zen.forall _p_S2_T 
                       (v_Vdc:(zen.term _p_S2_T) =>
                        zen.forall _p_S2_T 
                          (v_Vec:(zen.term _p_S2_T) =>
                           zen.imp 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr v_Vzb v_Vcc) 
                                      (abst_constr v_Vac v_Vdc)))) 
                             (zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_constr v_Vac v_Vdc) 
                                         (abst_constr v_Vbc v_Vec)))) 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal (abst_constr v_Vzb v_Vcc) 
                                         (abst_constr v_Vbc v_Vec)))))))))))) 
        __F_1_LEMMA v_Vfc)) 
    (n1:(cc.eT _p_S1_T) =>
     n3:(cc.eT _p_S1_T) =>
     n5:(cc.eT _p_S1_T) =>
     n2:(cc.eT _p_S2_T) =>
     n4:(cc.eT _p_S2_T) =>
     n6:(cc.eT _p_S2_T) =>
     H1:
     (dk_logic.eP 
        (dk_logic.ebP (abst_equal (abst_constr n1 n2) (abst_constr n3 n4)))) =>
     H2:
     (dk_logic.eP 
        (dk_logic.ebP (abst_equal (abst_constr n3 n4) (abst_constr n5 n6)))) =>
     (__F_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.imp 
            (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n5)) 
               (dk_logic.ebP (_p_S2_equal n2 n6))) 
            (dk_logic.ebP 
               (abst_equal (abst_constr n1 n2) (abst_constr n5 n6))))) =>
      (__F_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.and (dk_logic.ebP (_p_S1_equal n1 n3)) 
             (dk_logic.ebP (_p_S2_equal n2 n4)))) =>
       (__F_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.and (dk_logic.ebP (_p_S1_equal n3 n5)) 
              (dk_logic.ebP (_p_S2_equal n4 n6)))) =>
        zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_constr n1 n2) (abst_constr n5 n6)))) 
          (v_Vvc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal (abst_constr n1 n2) (abst_constr n5 n6)))))) =>
           zen.Rand (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
             (zen.triangle (focal.is_true (_p_S2_equal n2 n4))) 
             (v_Vwc:
              (zen.proof (zen.triangle (focal.is_true (_p_S1_equal n1 n3)))) =>
              v_Vxc:
              (zen.proof (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) =>
              zen.Rand (zen.triangle (focal.is_true (_p_S1_equal n3 n5))) 
                (zen.triangle (focal.is_true (_p_S2_equal n4 n6))) 
                (v_Vyc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_S1_equal n3 n5)))) =>
                 v_Vzc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_S2_equal n4 n6)))) =>
                 zen.Rimply 
                   (zen.and 
                      (zen.triangle (focal.is_true (_p_S1_equal n1 n5))) 
                      (zen.triangle (focal.is_true (_p_S2_equal n2 n6)))) 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal (abst_constr n1 n2) (abst_constr n5 n6)))) 
                   (v_Vad:
                    (zen.proof 
                       (zen.not 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n1 n5))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n2 n6)))))) =>
                    zen.Rnotand 
                      (zen.triangle (focal.is_true (_p_S1_equal n1 n5))) 
                      (zen.triangle (focal.is_true (_p_S2_equal n2 n6))) 
                      (v_Vbd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n1 n5))))) =>
                       zen.Rcut 
                         (zen.and 
                            (zen.not (zen.triangle (zen.equal _p_S1_T n1 n3))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal n1 n3))))) 
                         (v_Vcd:
                          (zen.proof 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle (zen.equal _p_S1_T n1 n3))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 n3)))))) =>
                          zen.Rand 
                            (zen.not (zen.triangle (zen.equal _p_S1_T n1 n3))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal n1 n3)))) 
                            (v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal _p_S1_T n1 n3)))) =>
                             v_Ved:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 n3))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal n1 n3))) v_Vwc 
                               v_Ved) v_Vcd) 
                         (v_Vfd:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle (zen.equal _p_S1_T n1 n3))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (_p_S1_equal n1 n3))))))) =>
                          zen.Rcut (zen.triangle (zen.equal _p_S1_T n5 n5)) 
                            (v_Vgd:
                             (zen.proof 
                                (zen.triangle (zen.equal _p_S1_T n5 n5))) =>
                             zen.Rsubst basics.bool__t 
                               (v_Vhd:(zen.term basics.bool__t) =>
                                zen.triangle (focal.is_true v_Vhd)) 
                               (_p_S1_equal n3 n5) (_p_S1_equal n1 n5) 
                               (v_Vid:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_S1_equal n3 n5) 
                                            (_p_S1_equal n1 n5))))) =>
                                zen.Rsubst _p_S1_T 
                                  (v_Vjd:(zen.term _p_S1_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_S1_equal v_Vjd n5) 
                                           (_p_S1_equal n1 n5)))) n3 n1 
                                  (v_Vkd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_S1_T n3 n1)))) =>
                                   zen.Rnotand 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_S1_T n1 n3))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true (_p_S1_equal n1 n3)))) 
                                     (v_Vld:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_S1_T n1 n3))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (zen.equal _p_S1_T n1 n3)) 
                                        (v_Vmd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_S1_T n1 n3))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (zen.equal _p_S1_T n1 n1)) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_S1_T n1 n1))) =>
                                            zen.Rsubst _p_S1_T 
                                              (v_Vod:(zen.term _p_S1_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_S1_T v_Vod n1)) 
                                              n1 n3 
                                              (v_Vdd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_S1_T 
                                                           n1 n3)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_S1_T n1 n3)) 
                                                 v_Vmd v_Vdd) 
                                              (v_Vpd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_S1_T n3 n1))) =>
                                               zen.Rsubst _p_S1_T 
                                                 (v_Vqd:(zen.term _p_S1_T) =>
                                                  zen.triangle 
                                                    (zen.equal _p_S1_T n3 
                                                       v_Vqd)) n1 n1 
                                                 (v_Vrd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_S1_T n1 n1)))) =>
                                                  zen.Rnoteq _p_S1_T n1 v_Vrd) 
                                                 (v_Vpd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_S1_T 
                                                           n3 n1))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal _p_S1_T n3 
                                                          n1)) v_Vpd v_Vkd) 
                                                 v_Vpd) v_Vnd) 
                                           (v_Vrd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_S1_T n1 n1)))) =>
                                            zen.Rnoteq _p_S1_T n1 v_Vrd)) 
                                        v_Vld) 
                                     (v_Vsd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal n1 n3)))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (focal.is_true (_p_S1_equal n1 n3))) 
                                        (v_Vwc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S1_equal n1 n3)))) =>
                                         zen.Rall _p_S1_T 
                                           (v_Vtd:(zen.term _p_S1_T) =>
                                            zen.forall _p_S1_T 
                                              (v_Vud:(zen.term _p_S1_T) =>
                                               zen.forall _p_S1_T 
                                                 (v_Vvd:(zen.term _p_S1_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal v_Vtd 
                                                             v_Vud))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal 
                                                                v_Vud v_Vvd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal 
                                                                v_Vtd v_Vvd))))))) 
                                           n1 
                                           (v_Vwd:
                                            (zen.proof 
                                               (zen.forall _p_S1_T 
                                                  (v_Vud:
                                                   (zen.term _p_S1_T) =>
                                                   zen.forall _p_S1_T 
                                                     (v_Vvd:
                                                      (zen.term _p_S1_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S1_equal 
                                                                 n1 v_Vud))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    v_Vud 
                                                                    v_Vvd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n1 v_Vvd)))))))) =>
                                            zen.Rall _p_S1_T 
                                              (v_Vud:(zen.term _p_S1_T) =>
                                               zen.forall _p_S1_T 
                                                 (v_Vvd:(zen.term _p_S1_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 
                                                             v_Vud))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal 
                                                                v_Vud v_Vvd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n1 
                                                                v_Vvd)))))) 
                                              n3 
                                              (v_Vxd:
                                               (zen.proof 
                                                  (zen.forall _p_S1_T 
                                                     (v_Vvd:
                                                      (zen.term _p_S1_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S1_equal 
                                                                 n1 n3))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n3 v_Vvd))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n1 v_Vvd))))))) =>
                                               zen.Rall _p_S1_T 
                                                 (v_Vvd:(zen.term _p_S1_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 n3))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n3 
                                                                v_Vvd))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n1 
                                                                v_Vvd))))) 
                                                 n5 
                                                 (v_Vyd:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S1_equal 
                                                                 n1 n3))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n3 n5))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n1 n5)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 n3))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n3 
                                                                n5))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n1 
                                                                n5)))) 
                                                    (v_Ved:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n1 n3))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n1 
                                                                n3))) v_Vwc 
                                                       v_Ved) 
                                                    (v_Vzd:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n3 n5))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n1 n5))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n3 
                                                                n5))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S1_equal n1 
                                                                n5))) 
                                                       (v_Vae:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    n3 n5))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   n3 n5))) 
                                                          v_Vyc v_Vae) 
                                                       (v_Vbe:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S1_equal 
                                                                    n1 n5)))) =>
                                                        zen.Rsubst 
                                                          basics.bool__t 
                                                          (v_Vce:
                                                           (zen.term 
                                                              basics.bool__t) =>
                                                           zen.triangle 
                                                             (focal.is_true 
                                                                v_Vce)) 
                                                          (_p_S1_equal n1 n5) 
                                                          (_p_S1_equal n1 n5) 
                                                          (v_Vde:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    n1 n5) 
                                                                    (_p_S1_equal 
                                                                    n1 n5))))) =>
                                                           zen.Rsubst 
                                                             _p_S1_T 
                                                             (v_Vee:
                                                              (zen.term 
                                                                 _p_S1_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    v_Vee n5) 
                                                                    (_p_S1_equal 
                                                                    n1 n5)))) 
                                                             n1 n1 
                                                             (v_Vrd:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S1_T 
                                                                    n1 n1)))) =>
                                                              zen.Rnoteq 
                                                                _p_S1_T n1 
                                                                v_Vrd) 
                                                             (v_Vde:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    n1 n5) 
                                                                    (_p_S1_equal 
                                                                    n1 n5))))) =>
                                                              zen.Rsubst 
                                                                _p_S1_T 
                                                                (v_Vfe:
                                                                 (zen.term 
                                                                    _p_S1_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vfe) 
                                                                    (_p_S1_equal 
                                                                    n1 n5)))) 
                                                                n5 n5 
                                                                (v_Vge:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S1_T 
                                                                    n5 n5)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S1_T 
                                                                    n5 n5)) 
                                                                   v_Vgd 
                                                                   v_Vge) 
                                                                (v_Vde:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S1_equal 
                                                                    n1 n5) 
                                                                    (_p_S1_equal 
                                                                    n1 n5))))) =>
                                                                 zen.Rnoteq 
                                                                   basics.bool__t 
                                                                   (_p_S1_equal 
                                                                    n1 n5) 
                                                                   v_Vde) 
                                                                v_Vde) v_Vde) 
                                                          (v_Vbe:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    n1 n5)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S1_equal 
                                                                    n1 n5))) 
                                                             v_Vbe v_Vbd) 
                                                          v_Vbe) v_Vzd) v_Vyd) 
                                                 v_Vxd) v_Vwd) 
                                           _p_S1_equal_transitive) v_Vsd) 
                                     v_Vfd) 
                                  (v_Vde:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_S1_equal n1 n5) 
                                               (_p_S1_equal n1 n5))))) =>
                                   zen.Rsubst _p_S1_T 
                                     (v_Vfe:(zen.term _p_S1_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_S1_equal n1 v_Vfe) 
                                              (_p_S1_equal n1 n5)))) n5 n5 
                                     (v_Vge:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_S1_T n5 n5)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_S1_T n5 n5)) v_Vgd 
                                        v_Vge) 
                                     (v_Vde:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_S1_equal n1 n5) 
                                                  (_p_S1_equal n1 n5))))) =>
                                      zen.Rnoteq basics.bool__t 
                                        (_p_S1_equal n1 n5) v_Vde) v_Vde) 
                                  v_Vid) 
                               (v_Vbe:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n1 n5)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n1 n5))) 
                                  v_Vbe v_Vbd) v_Vyc) 
                            (v_Vge:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal _p_S1_T n5 n5)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (focal.is_true (_p_S1_equal n5 n5))) 
                               (v_Vhe:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (_p_S1_equal n5 n5)))) =>
                                zen.Rall _p_S1_T 
                                  (v_Vtd:(zen.term _p_S1_T) =>
                                   zen.forall _p_S1_T 
                                     (v_Vud:(zen.term _p_S1_T) =>
                                      zen.forall _p_S1_T 
                                        (v_Vvd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal v_Vtd v_Vud))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vud v_Vvd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vtd v_Vvd))))))) 
                                  n3 
                                  (v_Vie:
                                   (zen.proof 
                                      (zen.forall _p_S1_T 
                                         (v_Vud:(zen.term _p_S1_T) =>
                                          zen.forall _p_S1_T 
                                            (v_Vvd:(zen.term _p_S1_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal n3 v_Vud))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal v_Vud 
                                                           v_Vvd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n3 v_Vvd)))))))) =>
                                   zen.Rall _p_S1_T 
                                     (v_Vud:(zen.term _p_S1_T) =>
                                      zen.forall _p_S1_T 
                                        (v_Vvd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal n3 v_Vud))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal v_Vud v_Vvd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n3 v_Vvd)))))) 
                                     n5 
                                     (v_Vje:
                                      (zen.proof 
                                         (zen.forall _p_S1_T 
                                            (v_Vvd:(zen.term _p_S1_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal n3 n5))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n5 v_Vvd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n3 v_Vvd))))))) =>
                                      zen.Rall _p_S1_T 
                                        (v_Vvd:(zen.term _p_S1_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal n3 n5))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n5 v_Vvd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n3 v_Vvd))))) 
                                        n5 
                                        (v_Vke:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S1_equal n3 n5))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n5 n5))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n3 n5)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S1_equal n3 n5))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n5 n5))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n3 n5)))) 
                                           (v_Vae:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n3 n5))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n3 n5))) 
                                              v_Vyc v_Vae) 
                                           (v_Vle:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n5 n5))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n3 n5))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n5 n5))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S1_equal n3 n5))) 
                                              (v_Vme:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S1_equal n5 n5))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S1_equal n5 n5))) 
                                                 v_Vhe v_Vme) 
                                              (v_Vyc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S1_equal n3 n5)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vce:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vce)) 
                                                 (_p_S1_equal n3 n5) 
                                                 (_p_S1_equal n1 n5) 
                                                 (v_Vid:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S1_equal 
                                                                 n3 n5) 
                                                              (_p_S1_equal 
                                                                 n1 n5))))) =>
                                                  zen.Rsubst _p_S1_T 
                                                    (v_Vee:
                                                     (zen.term _p_S1_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S1_equal 
                                                                v_Vee n5) 
                                                             (_p_S1_equal n1 
                                                                n5)))) n3 n1 
                                                    (v_Vkd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S1_T n3 
                                                                 n1)))) =>
                                                     zen.Rnotand 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S1_T n1 n3))) 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   n1 n3)))) 
                                                       (v_Vld:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_S1_T 
                                                                    n1 n3))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S1_T n1 n3)) 
                                                          (v_Vmd:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_S1_T 
                                                                    n1 n3))) =>
                                                           zen.Reqsym 
                                                             _p_S1_T n1 n3 
                                                             v_Vmd v_Vkd) 
                                                          v_Vld) 
                                                       (v_Vsd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3)))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S1_equal 
                                                                   n1 n3))) 
                                                          (v_Vwc:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S1_equal 
                                                                    n1 n3)))) =>
                                                           zen.Rall _p_S1_T 
                                                             (v_Vtd:
                                                              (zen.term 
                                                                 _p_S1_T) =>
                                                              zen.forall 
                                                                _p_S1_T 
                                                                (v_Vud:
                                                                 (zen.term 
                                                                    _p_S1_T) =>
                                                                 zen.forall 
                                                                   _p_S1_T 
                                                                   (v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vtd 
                                                                    v_Vud))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vud 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vtd 
                                                                    v_Vvd))))))) 
                                                             n1 
                                                             (v_Vwd:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_S1_T 
                                                                    (
                                                                    v_Vud:
                                                                    (
                                                                    zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.forall 
                                                                    _p_S1_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vud))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vud 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vvd)))))))) =>
                                                              zen.Rall 
                                                                _p_S1_T 
                                                                (v_Vud:
                                                                 (zen.term 
                                                                    _p_S1_T) =>
                                                                 zen.forall 
                                                                   _p_S1_T 
                                                                   (v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vud))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    v_Vud 
                                                                    v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vvd)))))) 
                                                                n3 
                                                                (v_Vxd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    _p_S1_T 
                                                                    (v_Vvd:
                                                                    (zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n3 v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vvd))))))) =>
                                                                 zen.Rall 
                                                                   _p_S1_T 
                                                                   (v_Vvd:
                                                                    (
                                                                    zen.term 
                                                                    _p_S1_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n3 v_Vvd))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 v_Vvd))))) 
                                                                   n5 
                                                                   (v_Vyd:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n3 n5))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n5)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n3 n5))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n5)))) 
                                                                    (v_Ved:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n3))) 
                                                                    v_Vwc 
                                                                    v_Ved) 
                                                                    (v_Vzd:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n3 n5))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n5))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n3 n5))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n5))) 
                                                                    (v_Vae:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n3 n5))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n3 n5))) 
                                                                    v_Vyc 
                                                                    v_Vae) 
                                                                    (v_Vbe:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n5)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S1_equal 
                                                                    n1 n5))) 
                                                                    v_Vbe 
                                                                    v_Vbd) 
                                                                    v_Vzd) 
                                                                    v_Vyd) 
                                                                   v_Vxd) 
                                                                v_Vwd) 
                                                             _p_S1_equal_transitive) 
                                                          v_Vsd) v_Vfd) 
                                                    (v_Vde:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_S1_equal 
                                                                    n1 n5) 
                                                                 (_p_S1_equal 
                                                                    n1 n5))))) =>
                                                     zen.Rsubst _p_S1_T 
                                                       (v_Vfe:
                                                        (zen.term _p_S1_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S1_equal 
                                                                   n1 v_Vfe) 
                                                                (_p_S1_equal 
                                                                   n1 n5)))) 
                                                       n5 n5 
                                                       (v_Vge:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_S1_T 
                                                                    n5 n5)))) =>
                                                        zen.Rnoteq _p_S1_T 
                                                          n5 v_Vge) 
                                                       (v_Vde:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_S1_equal 
                                                                    n1 n5) 
                                                                    (
                                                                    _p_S1_equal 
                                                                    n1 n5))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_S1_equal n1 n5) 
                                                          v_Vde) v_Vde) v_Vid) 
                                                 (v_Vbe:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S1_equal n1 n5)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S1_equal n1 n5))) 
                                                    v_Vbe v_Vbd) v_Vyc) v_Vle) 
                                           v_Vke) v_Vje) v_Vie) 
                                  _p_S1_equal_transitive) 
                               (v_Vme:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (_p_S1_equal n5 n5))))) =>
                                zen.Rnoteq _p_S1_T n5 v_Vge)))) 
                      (v_Vne:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n2 n6))))) =>
                       zen.Rcut 
                         (zen.and 
                            (zen.not (zen.triangle (zen.equal _p_S2_T n2 n4))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal n2 n4))))) 
                         (v_Voe:
                          (zen.proof 
                             (zen.and 
                                (zen.not 
                                   (zen.triangle (zen.equal _p_S2_T n2 n4))) 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_S2_equal n2 n4)))))) =>
                          zen.Rand 
                            (zen.not (zen.triangle (zen.equal _p_S2_T n2 n4))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal n2 n4)))) 
                            (v_Vpe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal _p_S2_T n2 n4)))) =>
                             v_Vqe:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true (_p_S2_equal n2 n4))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal n2 n4))) v_Vxc 
                               v_Vqe) v_Voe) 
                         (v_Vre:
                          (zen.proof 
                             (zen.not 
                                (zen.and 
                                   (zen.not 
                                      (zen.triangle (zen.equal _p_S2_T n2 n4))) 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (_p_S2_equal n2 n4))))))) =>
                          zen.Rcut (zen.triangle (zen.equal _p_S2_T n6 n6)) 
                            (v_Vse:
                             (zen.proof 
                                (zen.triangle (zen.equal _p_S2_T n6 n6))) =>
                             zen.Rsubst basics.bool__t 
                               (v_Vce:(zen.term basics.bool__t) =>
                                zen.triangle (focal.is_true v_Vce)) 
                               (_p_S2_equal n4 n6) (_p_S2_equal n2 n6) 
                               (v_Vte:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal basics.bool__t 
                                            (_p_S2_equal n4 n6) 
                                            (_p_S2_equal n2 n6))))) =>
                                zen.Rsubst _p_S2_T 
                                  (v_Vue:(zen.term _p_S2_T) =>
                                   zen.not 
                                     (zen.triangle 
                                        (zen.equal basics.bool__t 
                                           (_p_S2_equal v_Vue n6) 
                                           (_p_S2_equal n2 n6)))) n4 n2 
                                  (v_Vve:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal _p_S2_T n4 n2)))) =>
                                   zen.Rnotand 
                                     (zen.not 
                                        (zen.triangle 
                                           (zen.equal _p_S2_T n2 n4))) 
                                     (zen.not 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n2 n4)))) 
                                     (v_Vwe:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal _p_S2_T n2 n4))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (zen.equal _p_S2_T n2 n4)) 
                                        (v_Vxe:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal _p_S2_T n2 n4))) =>
                                         zen.Rcut 
                                           (zen.triangle 
                                              (zen.equal _p_S2_T n2 n2)) 
                                           (v_Vye:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (zen.equal _p_S2_T n2 n2))) =>
                                            zen.Rsubst _p_S2_T 
                                              (v_Vze:(zen.term _p_S2_T) =>
                                               zen.triangle 
                                                 (zen.equal _p_S2_T v_Vze n2)) 
                                              n2 n4 
                                              (v_Vpe:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal _p_S2_T 
                                                           n2 n4)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (zen.equal _p_S2_T n2 n4)) 
                                                 v_Vxe v_Vpe) 
                                              (v_Vaf:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal _p_S2_T n4 n2))) =>
                                               zen.Rsubst _p_S2_T 
                                                 (v_Vbf:(zen.term _p_S2_T) =>
                                                  zen.triangle 
                                                    (zen.equal _p_S2_T n4 
                                                       v_Vbf)) n2 n2 
                                                 (v_Vcf:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              _p_S2_T n2 n2)))) =>
                                                  zen.Rnoteq _p_S2_T n2 v_Vcf) 
                                                 (v_Vaf:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal _p_S2_T 
                                                           n4 n2))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (zen.equal _p_S2_T n4 
                                                          n2)) v_Vaf v_Vve) 
                                                 v_Vaf) v_Vye) 
                                           (v_Vcf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal _p_S2_T n2 n2)))) =>
                                            zen.Rnoteq _p_S2_T n2 v_Vcf)) 
                                        v_Vwe) 
                                     (v_Vdf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal n2 n4)))))) =>
                                      zen.Rnotnot 
                                        (zen.triangle 
                                           (focal.is_true (_p_S2_equal n2 n4))) 
                                        (v_Vxc:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (_p_S2_equal n2 n4)))) =>
                                         zen.Rall _p_S2_T 
                                           (v_Vef:(zen.term _p_S2_T) =>
                                            zen.forall _p_S2_T 
                                              (v_Vff:(zen.term _p_S2_T) =>
                                               zen.forall _p_S2_T 
                                                 (v_Vgf:(zen.term _p_S2_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal v_Vef 
                                                             v_Vff))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal 
                                                                v_Vff v_Vgf))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal 
                                                                v_Vef v_Vgf))))))) 
                                           n2 
                                           (v_Vhf:
                                            (zen.proof 
                                               (zen.forall _p_S2_T 
                                                  (v_Vff:
                                                   (zen.term _p_S2_T) =>
                                                   zen.forall _p_S2_T 
                                                     (v_Vgf:
                                                      (zen.term _p_S2_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S2_equal 
                                                                 n2 v_Vff))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    v_Vff 
                                                                    v_Vgf))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n2 v_Vgf)))))))) =>
                                            zen.Rall _p_S2_T 
                                              (v_Vff:(zen.term _p_S2_T) =>
                                               zen.forall _p_S2_T 
                                                 (v_Vgf:(zen.term _p_S2_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal n2 
                                                             v_Vff))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal 
                                                                v_Vff v_Vgf))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n2 
                                                                v_Vgf)))))) 
                                              n4 
                                              (v_Vif:
                                               (zen.proof 
                                                  (zen.forall _p_S2_T 
                                                     (v_Vgf:
                                                      (zen.term _p_S2_T) =>
                                                      zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S2_equal 
                                                                 n2 n4))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n4 v_Vgf))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n2 v_Vgf))))))) =>
                                               zen.Rall _p_S2_T 
                                                 (v_Vgf:(zen.term _p_S2_T) =>
                                                  zen.imp 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal n2 n4))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n4 
                                                                v_Vgf))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n2 
                                                                v_Vgf))))) 
                                                 n6 
                                                 (v_Vjf:
                                                  (zen.proof 
                                                     (zen.imp 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (_p_S2_equal 
                                                                 n2 n4))) 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n4 n6))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n2 n6)))))) =>
                                                  zen.Rimply 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal n2 n4))) 
                                                    (zen.imp 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n4 
                                                                n6))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n2 
                                                                n6)))) 
                                                    (v_Vqe:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n2 n4))))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n2 
                                                                n4))) v_Vxc 
                                                       v_Vqe) 
                                                    (v_Vkf:
                                                     (zen.proof 
                                                        (zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n4 n6))) 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n2 n6))))) =>
                                                     zen.Rimply 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n4 
                                                                n6))) 
                                                       (zen.triangle 
                                                          (focal.is_true 
                                                             (_p_S2_equal n2 
                                                                n6))) 
                                                       (v_Vlf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    n4 n6))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   n4 n6))) 
                                                          v_Vzc v_Vlf) 
                                                       (v_Vmf:
                                                        (zen.proof 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (_p_S2_equal 
                                                                    n2 n6)))) =>
                                                        zen.Rsubst 
                                                          basics.bool__t 
                                                          (v_Vce:
                                                           (zen.term 
                                                              basics.bool__t) =>
                                                           zen.triangle 
                                                             (focal.is_true 
                                                                v_Vce)) 
                                                          (_p_S2_equal n2 n6) 
                                                          (_p_S2_equal n2 n6) 
                                                          (v_Vnf:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    n2 n6) 
                                                                    (_p_S2_equal 
                                                                    n2 n6))))) =>
                                                           zen.Rsubst 
                                                             _p_S2_T 
                                                             (v_Vue:
                                                              (zen.term 
                                                                 _p_S2_T) =>
                                                              zen.not 
                                                                (zen.triangle 
                                                                   (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    v_Vue n6) 
                                                                    (_p_S2_equal 
                                                                    n2 n6)))) 
                                                             n2 n2 
                                                             (v_Vcf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S2_T 
                                                                    n2 n2)))) =>
                                                              zen.Rnoteq 
                                                                _p_S2_T n2 
                                                                v_Vcf) 
                                                             (v_Vnf:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    n2 n6) 
                                                                    (_p_S2_equal 
                                                                    n2 n6))))) =>
                                                              zen.Rsubst 
                                                                _p_S2_T 
                                                                (v_Vof:
                                                                 (zen.term 
                                                                    _p_S2_T) =>
                                                                 zen.not 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vof) 
                                                                    (_p_S2_equal 
                                                                    n2 n6)))) 
                                                                n6 n6 
                                                                (v_Vpf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S2_T 
                                                                    n6 n6)))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (zen.equal 
                                                                    _p_S2_T 
                                                                    n6 n6)) 
                                                                   v_Vse 
                                                                   v_Vpf) 
                                                                (v_Vnf:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (zen.equal 
                                                                    basics.bool__t 
                                                                    (_p_S2_equal 
                                                                    n2 n6) 
                                                                    (_p_S2_equal 
                                                                    n2 n6))))) =>
                                                                 zen.Rnoteq 
                                                                   basics.bool__t 
                                                                   (_p_S2_equal 
                                                                    n2 n6) 
                                                                   v_Vnf) 
                                                                v_Vnf) v_Vnf) 
                                                          (v_Vmf:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    n2 n6)))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (_p_S2_equal 
                                                                    n2 n6))) 
                                                             v_Vmf v_Vne) 
                                                          v_Vmf) v_Vkf) v_Vjf) 
                                                 v_Vif) v_Vhf) 
                                           _p_S2_equal_transitive) v_Vdf) 
                                     v_Vre) 
                                  (v_Vnf:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal basics.bool__t 
                                               (_p_S2_equal n2 n6) 
                                               (_p_S2_equal n2 n6))))) =>
                                   zen.Rsubst _p_S2_T 
                                     (v_Vof:(zen.term _p_S2_T) =>
                                      zen.not 
                                        (zen.triangle 
                                           (zen.equal basics.bool__t 
                                              (_p_S2_equal n2 v_Vof) 
                                              (_p_S2_equal n2 n6)))) n6 n6 
                                     (v_Vpf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal _p_S2_T n6 n6)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal _p_S2_T n6 n6)) v_Vse 
                                        v_Vpf) 
                                     (v_Vnf:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (_p_S2_equal n2 n6) 
                                                  (_p_S2_equal n2 n6))))) =>
                                      zen.Rnoteq basics.bool__t 
                                        (_p_S2_equal n2 n6) v_Vnf) v_Vnf) 
                                  v_Vte) 
                               (v_Vmf:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (_p_S2_equal n2 n6)))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal n2 n6))) 
                                  v_Vmf v_Vne) v_Vzc) 
                            (v_Vpf:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle (zen.equal _p_S2_T n6 n6)))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (focal.is_true (_p_S2_equal n6 n6))) 
                               (v_Vqf:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true (_p_S2_equal n6 n6)))) =>
                                zen.Rall _p_S2_T 
                                  (v_Vef:(zen.term _p_S2_T) =>
                                   zen.forall _p_S2_T 
                                     (v_Vff:(zen.term _p_S2_T) =>
                                      zen.forall _p_S2_T 
                                        (v_Vgf:(zen.term _p_S2_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal v_Vef v_Vff))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vff v_Vgf))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vef v_Vgf))))))) 
                                  n4 
                                  (v_Vrf:
                                   (zen.proof 
                                      (zen.forall _p_S2_T 
                                         (v_Vff:(zen.term _p_S2_T) =>
                                          zen.forall _p_S2_T 
                                            (v_Vgf:(zen.term _p_S2_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal n4 v_Vff))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal v_Vff 
                                                           v_Vgf))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n4 v_Vgf)))))))) =>
                                   zen.Rall _p_S2_T 
                                     (v_Vff:(zen.term _p_S2_T) =>
                                      zen.forall _p_S2_T 
                                        (v_Vgf:(zen.term _p_S2_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal n4 v_Vff))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal v_Vff v_Vgf))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n4 v_Vgf)))))) 
                                     n6 
                                     (v_Vsf:
                                      (zen.proof 
                                         (zen.forall _p_S2_T 
                                            (v_Vgf:(zen.term _p_S2_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal n4 n6))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n6 v_Vgf))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n4 v_Vgf))))))) =>
                                      zen.Rall _p_S2_T 
                                        (v_Vgf:(zen.term _p_S2_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal n4 n6))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n6 v_Vgf))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n4 v_Vgf))))) 
                                        n6 
                                        (v_Vtf:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (_p_S2_equal n4 n6))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n6 n6))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n4 n6)))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (_p_S2_equal n4 n6))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n6 n6))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n4 n6)))) 
                                           (v_Vlf:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n4 n6))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n4 n6))) 
                                              v_Vzc v_Vlf) 
                                           (v_Vuf:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n6 n6))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n4 n6))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n6 n6))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (_p_S2_equal n4 n6))) 
                                              (v_Vvf:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal n6 n6))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (_p_S2_equal n6 n6))) 
                                                 v_Vqf v_Vvf) 
                                              (v_Vzc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (_p_S2_equal n4 n6)))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vce:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vce)) 
                                                 (_p_S2_equal n4 n6) 
                                                 (_p_S2_equal n2 n6) 
                                                 (v_Vte:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (_p_S2_equal 
                                                                 n4 n6) 
                                                              (_p_S2_equal 
                                                                 n2 n6))))) =>
                                                  zen.Rsubst _p_S2_T 
                                                    (v_Vue:
                                                     (zen.term _p_S2_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (_p_S2_equal 
                                                                v_Vue n6) 
                                                             (_p_S2_equal n2 
                                                                n6)))) n4 n2 
                                                    (v_Vve:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 _p_S2_T n4 
                                                                 n2)))) =>
                                                     zen.Rnotand 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S2_T n2 n4))) 
                                                       (zen.not 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   n2 n4)))) 
                                                       (v_Vwe:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    zen.equal 
                                                                    _p_S2_T 
                                                                    n2 n4))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                _p_S2_T n2 n4)) 
                                                          (v_Vxe:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_S2_T 
                                                                    n2 n4))) =>
                                                           zen.Reqsym 
                                                             _p_S2_T n2 n4 
                                                             v_Vxe v_Vve) 
                                                          v_Vwe) 
                                                       (v_Vdf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4)))))) =>
                                                        zen.Rnotnot 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (_p_S2_equal 
                                                                   n2 n4))) 
                                                          (v_Vxc:
                                                           (zen.proof 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    _p_S2_equal 
                                                                    n2 n4)))) =>
                                                           zen.Rall _p_S2_T 
                                                             (v_Vef:
                                                              (zen.term 
                                                                 _p_S2_T) =>
                                                              zen.forall 
                                                                _p_S2_T 
                                                                (v_Vff:
                                                                 (zen.term 
                                                                    _p_S2_T) =>
                                                                 zen.forall 
                                                                   _p_S2_T 
                                                                   (v_Vgf:
                                                                    (
                                                                    zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vef 
                                                                    v_Vff))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vff 
                                                                    v_Vgf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vef 
                                                                    v_Vgf))))))) 
                                                             n2 
                                                             (v_Vhf:
                                                              (zen.proof 
                                                                 (zen.forall 
                                                                    _p_S2_T 
                                                                    (
                                                                    v_Vff:
                                                                    (
                                                                    zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.forall 
                                                                    _p_S2_T 
                                                                    (v_Vgf:
                                                                    (zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vff))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vff 
                                                                    v_Vgf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vgf)))))))) =>
                                                              zen.Rall 
                                                                _p_S2_T 
                                                                (v_Vff:
                                                                 (zen.term 
                                                                    _p_S2_T) =>
                                                                 zen.forall 
                                                                   _p_S2_T 
                                                                   (v_Vgf:
                                                                    (
                                                                    zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vff))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    v_Vff 
                                                                    v_Vgf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vgf)))))) 
                                                                n4 
                                                                (v_Vif:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.forall 
                                                                    _p_S2_T 
                                                                    (v_Vgf:
                                                                    (zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n4 v_Vgf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vgf))))))) =>
                                                                 zen.Rall 
                                                                   _p_S2_T 
                                                                   (v_Vgf:
                                                                    (
                                                                    zen.term 
                                                                    _p_S2_T) =>
                                                                    zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n4 v_Vgf))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 v_Vgf))))) 
                                                                   n6 
                                                                   (v_Vjf:
                                                                    (
                                                                    zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n4 n6))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n6)))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n4 n6))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n6)))) 
                                                                    (v_Vqe:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n4))) 
                                                                    v_Vxc 
                                                                    v_Vqe) 
                                                                    (v_Vkf:
                                                                    (zen.proof 
                                                                    (zen.imp 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n4 n6))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n6))))) =>
                                                                    zen.Rimply 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n4 n6))) 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n6))) 
                                                                    (v_Vlf:
                                                                    (zen.proof 
                                                                    (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n4 n6))))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n4 n6))) 
                                                                    v_Vzc 
                                                                    v_Vlf) 
                                                                    (v_Vmf:
                                                                    (zen.proof 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n6)))) =>
                                                                    zen.Raxiom 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (_p_S2_equal 
                                                                    n2 n6))) 
                                                                    v_Vmf 
                                                                    v_Vne) 
                                                                    v_Vkf) 
                                                                    v_Vjf) 
                                                                   v_Vif) 
                                                                v_Vhf) 
                                                             _p_S2_equal_transitive) 
                                                          v_Vdf) v_Vre) 
                                                    (v_Vnf:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (_p_S2_equal 
                                                                    n2 n6) 
                                                                 (_p_S2_equal 
                                                                    n2 n6))))) =>
                                                     zen.Rsubst _p_S2_T 
                                                       (v_Vof:
                                                        (zen.term _p_S2_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (_p_S2_equal 
                                                                   n2 v_Vof) 
                                                                (_p_S2_equal 
                                                                   n2 n6)))) 
                                                       n6 n6 
                                                       (v_Vpf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    _p_S2_T 
                                                                    n6 n6)))) =>
                                                        zen.Rnoteq _p_S2_T 
                                                          n6 v_Vpf) 
                                                       (v_Vnf:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    _p_S2_equal 
                                                                    n2 n6) 
                                                                    (
                                                                    _p_S2_equal 
                                                                    n2 n6))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (_p_S2_equal n2 n6) 
                                                          v_Vnf) v_Vnf) v_Vte) 
                                                 (v_Vmf:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (_p_S2_equal n2 n6)))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (_p_S2_equal n2 n6))) 
                                                    v_Vmf v_Vne) v_Vzc) v_Vuf) 
                                           v_Vtf) v_Vsf) v_Vrf) 
                                  _p_S2_equal_transitive) 
                               (v_Vvf:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (_p_S2_equal n6 n6))))) =>
                                zen.Rnoteq _p_S2_T n6 v_Vpf)))) v_Vad) 
                   (v_Vwf:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal (abst_constr n1 n2) 
                                (abst_constr n5 n6))))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal (abst_constr n1 n2) 
                               (abst_constr n5 n6)))) v_Vwf v_Vvc) 
                   __F_1_1_LEMMA) __F_1_3_LEMMA) __F_1_2_LEMMA)) 
         (zen.nnpp 
            (zen.and (zen.triangle (focal.is_true (_p_S1_equal n3 n5))) 
               (zen.triangle (focal.is_true (_p_S2_equal n4 n6)))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.and 
                      (zen.triangle (focal.is_true (_p_S1_equal n3 n5))) 
                      (zen.triangle (focal.is_true (_p_S2_equal n4 n6)))))) =>
             zen.Rall _p_S1_T 
               (v_Vac:(zen.term _p_S1_T) =>
                zen.forall _p_S1_T 
                  (v_Vbc:(zen.term _p_S1_T) =>
                   zen.forall _p_S2_T 
                     (v_Vcc:(zen.term _p_S2_T) =>
                      zen.forall _p_S2_T 
                        (v_Vdc:(zen.term _p_S2_T) =>
                         zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr v_Vac v_Vcc) 
                                    (abst_constr v_Vbc v_Vdc)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (_p_S1_equal v_Vac v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))))) 
               n3 
               (v_Vec:
                (zen.proof 
                   (zen.forall _p_S1_T 
                      (v_Vbc:(zen.term _p_S1_T) =>
                       zen.forall _p_S2_T 
                         (v_Vcc:(zen.term _p_S2_T) =>
                          zen.forall _p_S2_T 
                            (v_Vdc:(zen.term _p_S2_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n3 v_Vcc) 
                                        (abst_constr v_Vbc v_Vdc)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n3 v_Vbc))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal v_Vcc v_Vdc))))))))) =>
                zen.Rall _p_S1_T 
                  (v_Vbc:(zen.term _p_S1_T) =>
                   zen.forall _p_S2_T 
                     (v_Vcc:(zen.term _p_S2_T) =>
                      zen.forall _p_S2_T 
                        (v_Vdc:(zen.term _p_S2_T) =>
                         zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr n3 v_Vcc) 
                                    (abst_constr v_Vbc v_Vdc)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (_p_S1_equal n3 v_Vbc))) 
                              (zen.triangle 
                                 (focal.is_true (_p_S2_equal v_Vcc v_Vdc))))))) 
                  n5 
                  (v_Vfc:
                   (zen.proof 
                      (zen.forall _p_S2_T 
                         (v_Vcc:(zen.term _p_S2_T) =>
                          zen.forall _p_S2_T 
                            (v_Vdc:(zen.term _p_S2_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n3 v_Vcc) 
                                        (abst_constr n5 v_Vdc)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n3 n5))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))))) =>
                   zen.Rall _p_S2_T 
                     (v_Vcc:(zen.term _p_S2_T) =>
                      zen.forall _p_S2_T 
                        (v_Vdc:(zen.term _p_S2_T) =>
                         zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr n3 v_Vcc) 
                                    (abst_constr n5 v_Vdc)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (_p_S1_equal n3 n5))) 
                              (zen.triangle 
                                 (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))) 
                     n4 
                     (v_Vgc:
                      (zen.proof 
                         (zen.forall _p_S2_T 
                            (v_Vdc:(zen.term _p_S2_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n3 n4) 
                                        (abst_constr n5 v_Vdc)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n3 n5))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal n4 v_Vdc))))))) =>
                      zen.Rall _p_S2_T 
                        (v_Vdc:(zen.term _p_S2_T) =>
                         zen.eqv 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr n3 n4) 
                                    (abst_constr n5 v_Vdc)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (_p_S1_equal n3 n5))) 
                              (zen.triangle 
                                 (focal.is_true (_p_S2_equal n4 v_Vdc))))) 
                        n6 
                        (v_Vhc:
                         (zen.proof 
                            (zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n3 n4) 
                                        (abst_constr n5 n6)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n3 n5))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal n4 n6)))))) =>
                         zen.Requiv 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr n3 n4) 
                                    (abst_constr n5 n6)))) 
                           (zen.and 
                              (zen.triangle 
                                 (focal.is_true (_p_S1_equal n3 n5))) 
                              (zen.triangle 
                                 (focal.is_true (_p_S2_equal n4 n6)))) 
                           (v_Vic:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_constr n3 n4) 
                                           (abst_constr n5 n6)))))) =>
                            v_Vzb:
                            (zen.proof 
                               (zen.not 
                                  (zen.and 
                                     (zen.triangle 
                                        (focal.is_true (_p_S1_equal n3 n5))) 
                                     (zen.triangle 
                                        (focal.is_true (_p_S2_equal n4 n6)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_constr n3 n4) 
                                       (abst_constr n5 n6)))) H2 v_Vic) 
                           (H2:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n3 n4) 
                                        (abst_constr n5 n6))))) =>
                            v_Vjc:
                            (zen.proof 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n3 n5))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal n4 n6))))) =>
                            zen.Raxiom 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n3 n5))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n4 n6)))) 
                              v_Vjc v_Vzb) v_Vhc) v_Vgc) v_Vfc) v_Vec) 
               abst_def_equal1))) 
        (zen.nnpp 
           (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
              (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))) 
           (v_Vzb:
            (zen.proof 
               (zen.not 
                  (zen.and 
                     (zen.triangle (focal.is_true (_p_S1_equal n1 n3))) 
                     (zen.triangle (focal.is_true (_p_S2_equal n2 n4)))))) =>
            zen.Rall _p_S1_T 
              (v_Vac:(zen.term _p_S1_T) =>
               zen.forall _p_S1_T 
                 (v_Vbc:(zen.term _p_S1_T) =>
                  zen.forall _p_S2_T 
                    (v_Vcc:(zen.term _p_S2_T) =>
                     zen.forall _p_S2_T 
                       (v_Vdc:(zen.term _p_S2_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_constr v_Vac v_Vcc) 
                                   (abst_constr v_Vbc v_Vdc)))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal v_Vac v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))))) 
              n1 
              (v_Vec:
               (zen.proof 
                  (zen.forall _p_S1_T 
                     (v_Vbc:(zen.term _p_S1_T) =>
                      zen.forall _p_S2_T 
                        (v_Vcc:(zen.term _p_S2_T) =>
                         zen.forall _p_S2_T 
                           (v_Vdc:(zen.term _p_S2_T) =>
                            zen.eqv 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_constr n1 v_Vcc) 
                                       (abst_constr v_Vbc v_Vdc)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n1 v_Vbc))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal v_Vcc v_Vdc))))))))) =>
               zen.Rall _p_S1_T 
                 (v_Vbc:(zen.term _p_S1_T) =>
                  zen.forall _p_S2_T 
                    (v_Vcc:(zen.term _p_S2_T) =>
                     zen.forall _p_S2_T 
                       (v_Vdc:(zen.term _p_S2_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_constr n1 v_Vcc) 
                                   (abst_constr v_Vbc v_Vdc)))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n1 v_Vbc))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal v_Vcc v_Vdc))))))) 
                 n3 
                 (v_Vfc:
                  (zen.proof 
                     (zen.forall _p_S2_T 
                        (v_Vcc:(zen.term _p_S2_T) =>
                         zen.forall _p_S2_T 
                           (v_Vdc:(zen.term _p_S2_T) =>
                            zen.eqv 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_constr n1 v_Vcc) 
                                       (abst_constr n3 v_Vdc)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n1 n3))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))))) =>
                  zen.Rall _p_S2_T 
                    (v_Vcc:(zen.term _p_S2_T) =>
                     zen.forall _p_S2_T 
                       (v_Vdc:(zen.term _p_S2_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_constr n1 v_Vcc) 
                                   (abst_constr n3 v_Vdc)))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n1 n3))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal v_Vcc v_Vdc)))))) 
                    n2 
                    (v_Vgc:
                     (zen.proof 
                        (zen.forall _p_S2_T 
                           (v_Vdc:(zen.term _p_S2_T) =>
                            zen.eqv 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_constr n1 n2) 
                                       (abst_constr n3 v_Vdc)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n1 n3))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n2 v_Vdc))))))) =>
                     zen.Rall _p_S2_T 
                       (v_Vdc:(zen.term _p_S2_T) =>
                        zen.eqv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_constr n1 n2) 
                                   (abst_constr n3 v_Vdc)))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n1 n3))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n2 v_Vdc))))) n4 
                       (v_Vhc:
                        (zen.proof 
                           (zen.eqv 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_constr n1 n2) 
                                       (abst_constr n3 n4)))) 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n1 n3))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n2 n4)))))) =>
                        zen.Requiv 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal (abst_constr n1 n2) 
                                   (abst_constr n3 n4)))) 
                          (zen.and 
                             (zen.triangle 
                                (focal.is_true (_p_S1_equal n1 n3))) 
                             (zen.triangle 
                                (focal.is_true (_p_S2_equal n2 n4)))) 
                          (v_Vic:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal (abst_constr n1 n2) 
                                          (abst_constr n3 n4)))))) =>
                           v_Vzb:
                           (zen.proof 
                              (zen.not 
                                 (zen.and 
                                    (zen.triangle 
                                       (focal.is_true (_p_S1_equal n1 n3))) 
                                    (zen.triangle 
                                       (focal.is_true (_p_S2_equal n2 n4)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal (abst_constr n1 n2) 
                                      (abst_constr n3 n4)))) H1 v_Vic) 
                          (H1:
                           (zen.proof 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal (abst_constr n1 n2) 
                                       (abst_constr n3 n4))))) =>
                           v_Vjc:
                           (zen.proof 
                              (zen.and 
                                 (zen.triangle 
                                    (focal.is_true (_p_S1_equal n1 n3))) 
                                 (zen.triangle 
                                    (focal.is_true (_p_S2_equal n2 n4))))) =>
                           zen.Raxiom 
                             (zen.and 
                                (zen.triangle 
                                   (focal.is_true (_p_S1_equal n1 n3))) 
                                (zen.triangle 
                                   (focal.is_true (_p_S2_equal n2 n4)))) 
                             v_Vjc v_Vzb) v_Vhc) v_Vgc) v_Vfc) v_Vec) 
              abst_def_equal1))) 
       (zen.nnpp 
          (zen.imp 
             (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n5))) 
                (zen.triangle (focal.is_true (_p_S2_equal n2 n6)))) 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_constr n1 n2) (abst_constr n5 n6))))) 
          (v_Vzb:
           (zen.proof 
              (zen.not 
                 (zen.imp 
                    (zen.and 
                       (zen.triangle (focal.is_true (_p_S1_equal n1 n5))) 
                       (zen.triangle (focal.is_true (_p_S2_equal n2 n6)))) 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_constr n1 n2) (abst_constr n5 n6))))))) =>
           zen.Rnotimply 
             (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n5))) 
                (zen.triangle (focal.is_true (_p_S2_equal n2 n6)))) 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal (abst_constr n1 n2) (abst_constr n5 n6)))) 
             (v_Vac:
              (zen.proof 
                 (zen.and (zen.triangle (focal.is_true (_p_S1_equal n1 n5))) 
                    (zen.triangle (focal.is_true (_p_S2_equal n2 n6))))) =>
              v_Vbc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal (abst_constr n1 n2) (abst_constr n5 n6)))))) =>
              zen.Rand (zen.triangle (focal.is_true (_p_S1_equal n1 n5))) 
                (zen.triangle (focal.is_true (_p_S2_equal n2 n6))) 
                (v_Vcc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_S1_equal n1 n5)))) =>
                 v_Vdc:
                 (zen.proof 
                    (zen.triangle (focal.is_true (_p_S2_equal n2 n6)))) =>
                 zen.Rall _p_S1_T 
                   (v_Vec:(zen.term _p_S1_T) =>
                    zen.forall _p_S1_T 
                      (v_Vfc:(zen.term _p_S1_T) =>
                       zen.forall _p_S2_T 
                         (v_Vgc:(zen.term _p_S2_T) =>
                          zen.forall _p_S2_T 
                            (v_Vhc:(zen.term _p_S2_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr v_Vec v_Vgc) 
                                        (abst_constr v_Vfc v_Vhc)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal v_Vec v_Vfc))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal v_Vgc v_Vhc)))))))) 
                   n1 
                   (v_Vic:
                    (zen.proof 
                       (zen.forall _p_S1_T 
                          (v_Vfc:(zen.term _p_S1_T) =>
                           zen.forall _p_S2_T 
                             (v_Vgc:(zen.term _p_S2_T) =>
                              zen.forall _p_S2_T 
                                (v_Vhc:(zen.term _p_S2_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_constr n1 v_Vgc) 
                                            (abst_constr v_Vfc v_Vhc)))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S1_equal n1 v_Vfc))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vgc v_Vhc))))))))) =>
                    zen.Rall _p_S1_T 
                      (v_Vfc:(zen.term _p_S1_T) =>
                       zen.forall _p_S2_T 
                         (v_Vgc:(zen.term _p_S2_T) =>
                          zen.forall _p_S2_T 
                            (v_Vhc:(zen.term _p_S2_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n1 v_Vgc) 
                                        (abst_constr v_Vfc v_Vhc)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n1 v_Vfc))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal v_Vgc v_Vhc))))))) 
                      n5 
                      (v_Vjc:
                       (zen.proof 
                          (zen.forall _p_S2_T 
                             (v_Vgc:(zen.term _p_S2_T) =>
                              zen.forall _p_S2_T 
                                (v_Vhc:(zen.term _p_S2_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_constr n1 v_Vgc) 
                                            (abst_constr n5 v_Vhc)))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true (_p_S1_equal n1 n5))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal v_Vgc v_Vhc)))))))) =>
                       zen.Rall _p_S2_T 
                         (v_Vgc:(zen.term _p_S2_T) =>
                          zen.forall _p_S2_T 
                            (v_Vhc:(zen.term _p_S2_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n1 v_Vgc) 
                                        (abst_constr n5 v_Vhc)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n1 n5))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal v_Vgc v_Vhc)))))) 
                         n2 
                         (v_Vkc:
                          (zen.proof 
                             (zen.forall _p_S2_T 
                                (v_Vhc:(zen.term _p_S2_T) =>
                                 zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_constr n1 n2) 
                                            (abst_constr n5 v_Vhc)))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true (_p_S1_equal n1 n5))) 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (_p_S2_equal n2 v_Vhc))))))) =>
                          zen.Rall _p_S2_T 
                            (v_Vhc:(zen.term _p_S2_T) =>
                             zen.eqv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n1 n2) 
                                        (abst_constr n5 v_Vhc)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n1 n5))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal n2 v_Vhc))))) 
                            n6 
                            (v_Vlc:
                             (zen.proof 
                                (zen.eqv 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_constr n1 n2) 
                                            (abst_constr n5 n6)))) 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true (_p_S1_equal n1 n5))) 
                                      (zen.triangle 
                                         (focal.is_true (_p_S2_equal n2 n6)))))) =>
                             zen.Requiv 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr n1 n2) 
                                        (abst_constr n5 n6)))) 
                               (zen.and 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n1 n5))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal n2 n6)))) 
                               (v_Vbc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal (abst_constr n1 n2) 
                                               (abst_constr n5 n6)))))) =>
                                v_Vmc:
                                (zen.proof 
                                   (zen.not 
                                      (zen.and 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal n1 n5))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal n2 n6)))))) =>
                                zen.Rnotand 
                                  (zen.triangle 
                                     (focal.is_true (_p_S1_equal n1 n5))) 
                                  (zen.triangle 
                                     (focal.is_true (_p_S2_equal n2 n6))) 
                                  (v_Vnc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S1_equal n1 n5))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (_p_S1_equal n1 n5))) 
                                     v_Vcc v_Vnc) 
                                  (v_Voc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (_p_S2_equal n2 n6))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (_p_S2_equal n2 n6))) 
                                     v_Vdc v_Voc) v_Vmc) 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal (abst_constr n1 n2) 
                                            (abst_constr n5 n6))))) =>
                                v_Vac:
                                (zen.proof 
                                   (zen.and 
                                      (zen.triangle 
                                         (focal.is_true (_p_S1_equal n1 n5))) 
                                      (zen.triangle 
                                         (focal.is_true (_p_S2_equal n2 n6))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal (abst_constr n1 n2) 
                                           (abst_constr n5 n6)))) v_Vpc v_Vbc) 
                               v_Vlc) v_Vkc) v_Vjc) v_Vic) abst_def_equal1) 
                v_Vac) v_Vzb))).

def Imp_pair__equal_symmetric :
  _p_S1_T:cc.uT ->
  _p_S2_T:cc.uT ->
  abst_T:cc.uT ->
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) ->
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) ->
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) ->
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) ->
  abst_unicite_1:(dk_logic.eP 
                    (dk_logic.forall abst_T 
                       (a:(cc.eT abst_T) =>
                        dk_logic.ebP 
                          (abst_equal 
                             (abst_constr (abst_prj_a a) (abst_prj_b a)) a)))) ->
  abst_unicite_2:(dk_logic.eP 
                    (dk_logic.forall abst_T 
                       (a:(cc.eT abst_T) =>
                        dk_logic.ebP 
                          (abst_equal a 
                             (abst_constr (abst_prj_a a) (abst_prj_b a)))))) ->
  abst_equal_transitive:(dk_logic.eP 
                           (dk_logic.forall abst_T 
                              (x:(cc.eT abst_T) =>
                               dk_logic.forall abst_T 
                                 (y:(cc.eT abst_T) =>
                                  dk_logic.forall abst_T 
                                    (z:(cc.eT abst_T) =>
                                     dk_logic.imp 
                                       (dk_logic.ebP (abst_equal x y)) 
                                       (dk_logic.imp 
                                          (dk_logic.ebP (abst_equal y z)) 
                                          (dk_logic.ebP (abst_equal x z)))))))) ->
  abst_equal_symmetric2:(dk_logic.eP 
                           (dk_logic.forall _p_S1_T 
                              (n1:(cc.eT _p_S1_T) =>
                               dk_logic.forall _p_S1_T 
                                 (n3:(cc.eT _p_S1_T) =>
                                  dk_logic.forall _p_S2_T 
                                    (n2:(cc.eT _p_S2_T) =>
                                     dk_logic.forall _p_S2_T 
                                       (n4:(cc.eT _p_S2_T) =>
                                        dk_logic.imp 
                                          (dk_logic.ebP 
                                             (abst_equal (abst_constr n1 n2) 
                                                (abst_constr n3 n4))) 
                                          (dk_logic.ebP 
                                             (abst_equal (abst_constr n3 n4) 
                                                (abst_constr n1 n2))))))))) ->
  dk_logic.eP 
    (dk_logic.forall abst_T 
       (x:(cc.eT abst_T) =>
        dk_logic.forall abst_T 
          (y:(cc.eT abst_T) =>
           dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
             (dk_logic.ebP (abst_equal y x)))))
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  abst_T:cc.uT =>
  abst_constr:((cc.eT _p_S1_T) -> (cc.eT _p_S2_T) -> cc.eT abst_T) =>
  abst_equal:((cc.eT abst_T) -> (cc.eT abst_T) -> cc.eT basics.bool__t) =>
  abst_prj_a:((cc.eT abst_T) -> cc.eT _p_S1_T) =>
  abst_prj_b:((cc.eT abst_T) -> cc.eT _p_S2_T) =>
  abst_unicite_1:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (a:(cc.eT abst_T) =>
         dk_logic.ebP 
           (abst_equal (abst_constr (abst_prj_a a) (abst_prj_b a)) a)))) =>
  abst_unicite_2:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (a:(cc.eT abst_T) =>
         dk_logic.ebP 
           (abst_equal a (abst_constr (abst_prj_a a) (abst_prj_b a)))))) =>
  abst_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall abst_T 
        (x:(cc.eT abst_T) =>
         dk_logic.forall abst_T 
           (y:(cc.eT abst_T) =>
            dk_logic.forall abst_T 
              (z:(cc.eT abst_T) =>
               dk_logic.imp (dk_logic.ebP (abst_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (abst_equal y z)) 
                    (dk_logic.ebP (abst_equal x z)))))))) =>
  abst_equal_symmetric2:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (n1:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (n3:(cc.eT _p_S1_T) =>
            dk_logic.forall _p_S2_T 
              (n2:(cc.eT _p_S2_T) =>
               dk_logic.forall _p_S2_T 
                 (n4:(cc.eT _p_S2_T) =>
                  dk_logic.imp 
                    (dk_logic.ebP 
                       (abst_equal (abst_constr n1 n2) (abst_constr n3 n4))) 
                    (dk_logic.ebP 
                       (abst_equal (abst_constr n3 n4) (abst_constr n1 n2))))))))) =>
  (__G_1_LEMMA:
   (p1:(cc.eT abst_T) ->
    p2:(cc.eT abst_T) ->
    H1:(dk_logic.eP (dk_logic.ebP (abst_equal p1 p2))) ->
    dk_logic.eP (dk_logic.ebP (abst_equal p2 p1))) =>
   zen.nnpp 
     (zen.forall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
              (zen.triangle (focal.is_true (abst_equal v_Vac v_Vzb)))))) 
     (v_Vbc:
      (zen.proof 
         (zen.not 
            (zen.forall abst_T 
               (v_Vzb:(zen.term abst_T) =>
                zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                     (zen.triangle (focal.is_true (abst_equal v_Vac v_Vzb)))))))) =>
      zen.Rnotall abst_T 
        (v_Vzb:(zen.term abst_T) =>
         zen.forall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
              (zen.triangle (focal.is_true (abst_equal v_Vac v_Vzb))))) 
        (v_Vcc:(zen.term abst_T) =>
         v_Vdc:
         (zen.proof 
            (zen.not 
               (zen.forall abst_T 
                  (v_Vac:(zen.term abst_T) =>
                   zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))) 
                     (zen.triangle (focal.is_true (abst_equal v_Vac v_Vcc))))))) =>
         zen.Rnotall abst_T 
           (v_Vac:(zen.term abst_T) =>
            zen.imp (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))) 
              (zen.triangle (focal.is_true (abst_equal v_Vac v_Vcc)))) 
           (v_Vec:(zen.term abst_T) =>
            v_Vfc:
            (zen.proof 
               (zen.not 
                  (zen.imp 
                     (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                     (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc)))))) =>
            zen.Rnotimply 
              (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
              (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
              (v_Vgc:
               (zen.proof 
                  (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec)))) =>
               v_Vhc:
               (zen.proof 
                  (zen.not 
                     (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))))) =>
               zen.Rall abst_T 
                 (v_Vzb:(zen.term abst_T) =>
                  zen.forall abst_T 
                    (v_Vac:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vzb v_Vac))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vac v_Vzb))))) 
                 v_Vcc 
                 (v_Vic:
                  (zen.proof 
                     (zen.forall abst_T 
                        (v_Vac:(zen.term abst_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vcc v_Vac))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vac v_Vcc)))))) =>
                  zen.Rall abst_T 
                    (v_Vac:(zen.term abst_T) =>
                     zen.imp 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vac))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vac v_Vcc)))) 
                    v_Vec 
                    (v_Vjc:
                     (zen.proof 
                        (zen.imp 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vcc v_Vec))) 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vec v_Vcc))))) =>
                     zen.Rimply 
                       (zen.triangle (focal.is_true (abst_equal v_Vcc v_Vec))) 
                       (zen.triangle (focal.is_true (abst_equal v_Vec v_Vcc))) 
                       (v_Vkc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (focal.is_true (abst_equal v_Vcc v_Vec))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vcc v_Vec))) v_Vgc 
                          v_Vkc) 
                       (v_Vlc:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true (abst_equal v_Vec v_Vcc)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true (abst_equal v_Vec v_Vcc))) v_Vlc 
                          v_Vhc) v_Vjc) v_Vic) __G_1_LEMMA) v_Vfc) v_Vdc) 
        v_Vbc)) 
    (p1:(cc.eT abst_T) =>
     p2:(cc.eT abst_T) =>
     H1:(dk_logic.eP (dk_logic.ebP (abst_equal p1 p2))) =>
     (__G_1_1_LEMMA:
      (dk_logic.eP 
         (dk_logic.ebP 
            (abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p2))) =>
      (__G_1_2_LEMMA:
       (dk_logic.eP 
          (dk_logic.ebP 
             (abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                (abst_constr (abst_prj_a p2) (abst_prj_b p2))))) =>
       (__G_1_3_LEMMA:
        (dk_logic.eP 
           (dk_logic.ebP 
              (abst_equal (abst_constr (abst_prj_a p2) (abst_prj_b p2)) 
                 (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) =>
        (__G_1_4_LEMMA:
         (dk_logic.eP 
            (dk_logic.ebP 
               (abst_equal p2 (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) =>
         zen.nnpp (zen.triangle (focal.is_true (abst_equal p2 p1))) 
           (v_Vkc:
            (zen.proof 
               (zen.not (zen.triangle (focal.is_true (abst_equal p2 p1))))) =>
            zen.Rcut 
              (zen.and (zen.not (zen.triangle (zen.equal abst_T p2 p2))) 
                 (zen.not (zen.triangle (focal.is_true (abst_equal p2 p2))))) 
              (v_Vlc:
               (zen.proof 
                  (zen.and (zen.not (zen.triangle (zen.equal abst_T p2 p2))) 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_equal p2 p2)))))) =>
               zen.Rand (zen.not (zen.triangle (zen.equal abst_T p2 p2))) 
                 (zen.not (zen.triangle (focal.is_true (abst_equal p2 p2)))) 
                 (v_Vmc:
                  (zen.proof 
                     (zen.not (zen.triangle (zen.equal abst_T p2 p2)))) =>
                  v_Vnc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle (focal.is_true (abst_equal p2 p2))))) =>
                  zen.Rnoteq abst_T p2 v_Vmc) v_Vlc) 
              (v_Voc:
               (zen.proof 
                  (zen.not 
                     (zen.and 
                        (zen.not (zen.triangle (zen.equal abst_T p2 p2))) 
                        (zen.not 
                           (zen.triangle (focal.is_true (abst_equal p2 p2))))))) =>
               zen.Rcut 
                 (zen.triangle 
                    (zen.equal abst_T 
                       (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1)) 
                 (v_Vpc:
                  (zen.proof 
                     (zen.triangle 
                        (zen.equal abst_T 
                           (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1))) =>
                  zen.Rsubst basics.bool__t 
                    (v_Vqc:(zen.term basics.bool__t) =>
                     zen.triangle (focal.is_true v_Vqc)) 
                    (abst_equal p2 
                       (abst_constr (abst_prj_a p1) (abst_prj_b p1))) 
                    (abst_equal p2 p1) 
                    (v_Vrc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (abst_equal p2 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1))) (abst_equal p2 p1))))) =>
                     zen.Rsubst abst_T 
                       (v_Vsc:(zen.term abst_T) =>
                        zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t 
                                (abst_equal v_Vsc 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1))) (abst_equal p2 p1)))) 
                       p2 p2 
                       (v_Vmc:
                        (zen.proof 
                           (zen.not (zen.triangle (zen.equal abst_T p2 p2)))) =>
                        zen.Rnotand 
                          (zen.not (zen.triangle (zen.equal abst_T p2 p2))) 
                          (zen.not 
                             (zen.triangle (focal.is_true (abst_equal p2 p2)))) 
                          (v_Vtc:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle (zen.equal abst_T p2 p2))))) =>
                           zen.Rnotnot 
                             (zen.triangle (zen.equal abst_T p2 p2)) 
                             (v_Vuc:
                              (zen.proof 
                                 (zen.triangle (zen.equal abst_T p2 p2))) =>
                              zen.Rcut 
                                (zen.triangle (zen.equal abst_T p2 p2)) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.triangle (zen.equal abst_T p2 p2))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vvc:(zen.term abst_T) =>
                                    zen.triangle (zen.equal abst_T v_Vvc p2)) 
                                   p2 p2 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T p2 p2)))) =>
                                    zen.Raxiom 
                                      (zen.triangle (zen.equal abst_T p2 p2)) 
                                      v_Vuc v_Vmc) 
                                   (v_Vuc:
                                    (zen.proof 
                                       (zen.triangle (zen.equal abst_T p2 p2))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vwc:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T p2 v_Vwc)) p2 p2 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T p2 p2)))) =>
                                       zen.Rnoteq abst_T p2 v_Vmc) 
                                      (v_Vuc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T p2 p2))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T p2 p2)) v_Vuc 
                                         v_Vmc) v_Vuc) v_Vuc) 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle (zen.equal abst_T p2 p2)))) =>
                                 zen.Rnoteq abst_T p2 v_Vmc)) v_Vtc) 
                          (v_Vxc:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal p2 p2)))))) =>
                           zen.Rnotnot 
                             (zen.triangle (focal.is_true (abst_equal p2 p2))) 
                             (v_Vyc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true (abst_equal p2 p2)))) =>
                              zen.Rall abst_T 
                                (v_Vzc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vzc v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vad v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vzc v_Vbd))))))) 
                                p2 
                                (v_Vcd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p2 v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vad v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 v_Vbd)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal p2 v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vad v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 v_Vbd)))))) 
                                   p2 
                                   (v_Vdd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p2 p2))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 v_Vbd))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal p2 p2))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 v_Vbd))))) 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) 
                                      (v_Ved:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal p2 p2))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)))))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal p2 p2))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1))))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)))))) 
                                         (v_Vnc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 p2))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 p2))) v_Vyc 
                                            v_Vnc) 
                                         (v_Vfd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1))))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1))))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1))))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1))))) 
                                            (v_Vgd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal p2 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1))))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p2 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1))))) 
                                               __G_1_4_LEMMA v_Vgd) 
                                            (__G_1_4_LEMMA:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal p2 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)))))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vqc:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vqc)) 
                                               (abst_equal p2 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1))) 
                                               (abst_equal p2 p1) 
                                               (v_Vrc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal p2 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1))) 
                                                            (abst_equal p2 p1))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vsc:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal v_Vsc 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1))) 
                                                           (abst_equal p2 p1)))) 
                                                  p2 p2 
                                                  (v_Vmc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T p2 p2)))) =>
                                                   zen.Rnoteq abst_T p2 v_Vmc) 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  p2 
                                                                  (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))) 
                                                               (abst_equal 
                                                                  p2 p1))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vhd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal p2 
                                                                 v_Vhd) 
                                                              (abst_equal p2 
                                                                 p1)))) 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) p1 
                                                     (v_Vid:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T 
                                                                  (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p1)))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1)) p1)) 
                                                        v_Vpc v_Vid) 
                                                     (v_Vjd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    p2 p1) 
                                                                  (abst_equal 
                                                                    p2 p1))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (abst_equal p2 p1) 
                                                        v_Vjd) v_Vrc) v_Vrc) 
                                               (v_Vkd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal p2 p1)))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal p2 p1))) 
                                                  v_Vkd v_Vkc) __G_1_4_LEMMA) 
                                            v_Vfd) v_Ved) v_Vdd) v_Vcd) 
                                abst_equal_transitive) v_Vxc) v_Voc) 
                       (v_Vrc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal p2 
                                       (abst_constr (abst_prj_a p1) 
                                          (abst_prj_b p1))) 
                                    (abst_equal p2 p1))))) =>
                        zen.Rsubst abst_T 
                          (v_Vhd:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal p2 v_Vhd) (abst_equal p2 p1)))) 
                          (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1 
                          (v_Vid:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_constr (abst_prj_a p1) 
                                          (abst_prj_b p1)) p1)))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) p1)) v_Vpc v_Vid) 
                          (v_Vjd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal p2 p1) (abst_equal p2 p1))))) =>
                           zen.Rnoteq basics.bool__t (abst_equal p2 p1) v_Vjd) 
                          v_Vrc) v_Vrc) 
                    (v_Vkd:
                     (zen.proof 
                        (zen.triangle (focal.is_true (abst_equal p2 p1)))) =>
                     zen.Raxiom 
                       (zen.triangle (focal.is_true (abst_equal p2 p1))) 
                       v_Vkd v_Vkc) __G_1_4_LEMMA) 
                 (v_Vid:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T 
                              (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                              p1)))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1))) 
                    (v_Vld:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                 p1)))) =>
                     zen.Rall abst_T 
                       (v_Vzc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vzc v_Vbd))))))) 
                       p2 
                       (v_Vcd:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true (abst_equal p2 v_Vad))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vad v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal p2 v_Vbd)))))))) =>
                        zen.Rall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal p2 v_Vad))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal p2 v_Vbd)))))) 
                          (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                          (v_Vmd:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal p2 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1))))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal p2 v_Vbd))))))) =>
                           zen.Rall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal p2 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1))))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal p2 v_Vbd))))) 
                             p1 
                             (v_Vnd:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal p2 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1))))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) p1))) 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal p2 p1)))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal p2 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1))))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) p1))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal p2 p1)))) 
                                (v_Vgd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal p2 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1))))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal p2 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1))))) 
                                   __G_1_4_LEMMA v_Vgd) 
                                (v_Vod:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) p1))) 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal p2 p1))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) p1))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal p2 p1))) 
                                   (v_Vpd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_constr 
                                                      (abst_prj_a p1) 
                                                      (abst_prj_b p1)) p1))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_constr (abst_prj_a p1) 
                                                  (abst_prj_b p1)) p1))) 
                                      v_Vld v_Vpd) 
                                   (v_Vkd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true (abst_equal p2 p1)))) =>
                                    zen.Rsubst basics.bool__t 
                                      (v_Vqc:(zen.term basics.bool__t) =>
                                       zen.triangle (focal.is_true v_Vqc)) 
                                      (abst_equal p2 p1) (abst_equal p2 p1) 
                                      (v_Vjd:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal p2 p1) 
                                                   (abst_equal p2 p1))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vqd:(zen.term abst_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal v_Vqd p1) 
                                                  (abst_equal p2 p1)))) p2 
                                         p2 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T p2 p2)))) =>
                                          zen.Rnotand 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T p2 p2))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p2 p2)))) 
                                            (v_Vtc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            p2 p2))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (zen.equal abst_T p2 p2)) 
                                               (v_Vuc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T p2 p2))) =>
                                                zen.Reqsym abst_T p2 p2 
                                                  v_Vuc v_Vmc) v_Vtc) 
                                            (v_Vxc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal p2 p2)))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p2 p2))) 
                                               (v_Vyc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal p2 p2)))) =>
                                                zen.Rall abst_T 
                                                  (v_Vzc:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                  p2 
                                                  (v_Vcd:
                                                   (zen.proof 
                                                      (zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vad))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vbd)))))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p2 v_Vad))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p2 v_Vbd)))))) 
                                                     p2 
                                                     (v_Vdd:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p2))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vbd))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p2 p2))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p2 v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p2 v_Vbd))))) 
                                                        p1 
                                                        (v_Vrd:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p2))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p1))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p1)))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    p2 p2))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p2 p1))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p2 p1)))) 
                                                           (v_Vnc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p2))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p2 p2))) 
                                                              v_Vyc v_Vnc) 
                                                           (v_Vsd:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p1))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p1))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p2 p1))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    p2 p1))) 
                                                              (v_Vkc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p1))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p1))) 
                                                                 v_Vkd v_Vkc) 
                                                              (v_Vkd:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p1)))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    p2 p1))) 
                                                                 v_Vkd v_Vkc) 
                                                              v_Vsd) v_Vrd) 
                                                        v_Vdd) v_Vcd) 
                                                  abst_equal_transitive) 
                                               v_Vxc) v_Voc) 
                                         (v_Vjd:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal p2 p1) 
                                                      (abst_equal p2 p1))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vhd:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal p2 v_Vhd) 
                                                     (abst_equal p2 p1)))) 
                                            p1 p1 
                                            (v_Vtd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T p1 p1)))) =>
                                             zen.Rnoteq abst_T p1 v_Vtd) 
                                            (v_Vjd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal p2 p1) 
                                                         (abst_equal p2 p1))))) =>
                                             zen.Rnoteq basics.bool__t 
                                               (abst_equal p2 p1) v_Vjd) 
                                            v_Vjd) v_Vjd) 
                                      (v_Vkd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal p2 p1)))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal p2 p1))) 
                                         v_Vkd v_Vkc) v_Vkd) v_Vod) v_Vnd) 
                             v_Vmd) v_Vcd) abst_equal_transitive) 
                    (v_Vpd:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)) p1))))) =>
                     zen.Rall abst_T 
                       (v_Vud:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_constr (abst_prj_a v_Vud) 
                                   (abst_prj_b v_Vud)) v_Vud))) p1 
                       (v_Vld:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)) p1)))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) p1))) v_Vld v_Vpd) 
                       abst_unicite_1))))) 
          (zen.nnpp 
             (zen.triangle 
                (focal.is_true 
                   (abst_equal p2 
                      (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) 
             (v_Vkc:
              (zen.proof 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal p2 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1))))))) =>
              zen.Rcut 
                (zen.and 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T p2 
                            (abst_constr (abst_prj_a p2) (abst_prj_b p2))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal p2 
                               (abst_constr (abst_prj_a p2) (abst_prj_b p2))))))) 
                (v_Vlc:
                 (zen.proof 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T p2 
                                (abst_constr (abst_prj_a p2) (abst_prj_b p2))))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal p2 
                                   (abst_constr (abst_prj_a p2) 
                                      (abst_prj_b p2)))))))) =>
                 zen.Rand 
                   (zen.not 
                      (zen.triangle 
                         (zen.equal abst_T p2 
                            (abst_constr (abst_prj_a p2) (abst_prj_b p2))))) 
                   (zen.not 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal p2 
                               (abst_constr (abst_prj_a p2) (abst_prj_b p2)))))) 
                   (v_Vmc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T p2 
                                (abst_constr (abst_prj_a p2) (abst_prj_b p2)))))) =>
                    v_Vnc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal p2 
                                   (abst_constr (abst_prj_a p2) 
                                      (abst_prj_b p2))))))) =>
                    zen.Rall abst_T 
                      (v_Voc:(zen.term abst_T) =>
                       zen.triangle 
                         (focal.is_true 
                            (abst_equal v_Voc 
                               (abst_constr (abst_prj_a v_Voc) 
                                  (abst_prj_b v_Voc))))) p2 
                      (v_Vpc:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal p2 
                                   (abst_constr (abst_prj_a p2) 
                                      (abst_prj_b p2)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal p2 
                                  (abst_constr (abst_prj_a p2) 
                                     (abst_prj_b p2))))) v_Vpc v_Vnc) 
                      abst_unicite_2) v_Vlc) 
                (v_Vqc:
                 (zen.proof 
                    (zen.not 
                       (zen.and 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T p2 
                                   (abst_constr (abst_prj_a p2) 
                                      (abst_prj_b p2))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal p2 
                                      (abst_constr (abst_prj_a p2) 
                                         (abst_prj_b p2))))))))) =>
                 zen.Rcut 
                   (zen.triangle 
                      (zen.equal abst_T 
                         (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                         (abst_constr (abst_prj_a p1) (abst_prj_b p1)))) 
                   (v_Vrc:
                    (zen.proof 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) =>
                    zen.Rsubst basics.bool__t 
                      (v_Vsc:(zen.term basics.bool__t) =>
                       zen.triangle (focal.is_true v_Vsc)) 
                      (abst_equal 
                         (abst_constr (abst_prj_a p2) (abst_prj_b p2)) 
                         (abst_constr (abst_prj_a p1) (abst_prj_b p1))) 
                      (abst_equal p2 
                         (abst_constr (abst_prj_a p1) (abst_prj_b p1))) 
                      (v_Vtc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_constr (abst_prj_a p2) 
                                         (abst_prj_b p2)) 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1))) 
                                   (abst_equal p2 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1))))))) =>
                       zen.Rsubst abst_T 
                         (v_Vuc:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal v_Vuc 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1))) 
                                  (abst_equal p2 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)))))) 
                         (abst_constr (abst_prj_a p2) (abst_prj_b p2)) p2 
                         (v_Vvc:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_constr (abst_prj_a p2) 
                                         (abst_prj_b p2)) p2)))) =>
                          zen.Rnotand 
                            (zen.not 
                               (zen.triangle 
                                  (zen.equal abst_T p2 
                                     (abst_constr (abst_prj_a p2) 
                                        (abst_prj_b p2))))) 
                            (zen.not 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal p2 
                                        (abst_constr (abst_prj_a p2) 
                                           (abst_prj_b p2)))))) 
                            (v_Vwc:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T p2 
                                            (abst_constr (abst_prj_a p2) 
                                               (abst_prj_b p2))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (zen.equal abst_T p2 
                                     (abst_constr (abst_prj_a p2) 
                                        (abst_prj_b p2)))) 
                               (v_Vxc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T p2 
                                         (abst_constr (abst_prj_a p2) 
                                            (abst_prj_b p2))))) =>
                                zen.Rcut 
                                  (zen.triangle (zen.equal abst_T p2 p2)) 
                                  (v_Vyc:
                                   (zen.proof 
                                      (zen.triangle (zen.equal abst_T p2 p2))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vzc:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T v_Vzc p2)) p2 
                                     (abst_constr (abst_prj_a p2) 
                                        (abst_prj_b p2)) 
                                     (v_Vmc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T p2 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2)))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T p2 
                                              (abst_constr (abst_prj_a p2) 
                                                 (abst_prj_b p2)))) v_Vxc 
                                        v_Vmc) 
                                     (v_Vad:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_constr (abst_prj_a p2) 
                                                  (abst_prj_b p2)) p2))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vbd:(zen.term abst_T) =>
                                         zen.triangle 
                                           (zen.equal abst_T 
                                              (abst_constr (abst_prj_a p2) 
                                                 (abst_prj_b p2)) v_Vbd)) p2 
                                        p2 
                                        (v_Vcd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T p2 p2)))) =>
                                         zen.Rnoteq abst_T p2 v_Vcd) 
                                        (v_Vad:
                                         (zen.proof 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2)) p2))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (zen.equal abst_T 
                                                 (abst_constr 
                                                    (abst_prj_a p2) 
                                                    (abst_prj_b p2)) p2)) 
                                           v_Vad v_Vvc) v_Vad) v_Vyc) 
                                  (v_Vcd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T p2 p2)))) =>
                                   zen.Rnoteq abst_T p2 v_Vcd)) v_Vwc) 
                            (v_Vdd:
                             (zen.proof 
                                (zen.not 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal p2 
                                               (abst_constr (abst_prj_a p2) 
                                                  (abst_prj_b p2)))))))) =>
                             zen.Rnotnot 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal p2 
                                        (abst_constr (abst_prj_a p2) 
                                           (abst_prj_b p2))))) 
                               (v_Vpc:
                                (zen.proof 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal p2 
                                            (abst_constr (abst_prj_a p2) 
                                               (abst_prj_b p2)))))) =>
                                zen.Rall abst_T 
                                  (v_Ved:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vfd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Ved v_Vfd))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vfd v_Vgd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Ved v_Vgd))))))) 
                                  p2 
                                  (v_Vhd:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vfd:(zen.term abst_T) =>
                                          zen.forall abst_T 
                                            (v_Vgd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p2 v_Vfd))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal v_Vfd 
                                                           v_Vgd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal p2 v_Vgd)))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vfd:(zen.term abst_T) =>
                                      zen.forall abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal p2 v_Vfd))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal v_Vfd v_Vgd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal p2 v_Vgd)))))) 
                                     (abst_constr (abst_prj_a p2) 
                                        (abst_prj_b p2)) 
                                     (v_Vid:
                                      (zen.proof 
                                         (zen.forall abst_T 
                                            (v_Vgd:(zen.term abst_T) =>
                                             zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p2 
                                                        (abst_constr 
                                                           (abst_prj_a p2) 
                                                           (abst_prj_b p2))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p2) 
                                                              (abst_prj_b p2)) 
                                                           v_Vgd))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal p2 v_Vgd))))))) =>
                                      zen.Rall abst_T 
                                        (v_Vgd:(zen.term abst_T) =>
                                         zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal p2 
                                                    (abst_constr 
                                                       (abst_prj_a p2) 
                                                       (abst_prj_b p2))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_b p2)) 
                                                       v_Vgd))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal p2 v_Vgd))))) 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)) 
                                        (v_Vjd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p2 
                                                        (abst_constr 
                                                           (abst_prj_a p2) 
                                                           (abst_prj_b p2))))) 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p2) 
                                                              (abst_prj_b p2)) 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1))))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal p2 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)))))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal p2 
                                                    (abst_constr 
                                                       (abst_prj_a p2) 
                                                       (abst_prj_b p2))))) 
                                           (zen.imp 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_b p2)) 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal p2 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1)))))) 
                                           (v_Vnc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal p2 
                                                           (abst_constr 
                                                              (abst_prj_a p2) 
                                                              (abst_prj_b p2))))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal p2 
                                                       (abst_constr 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_b p2))))) 
                                              v_Vpc v_Vnc) 
                                           (v_Vkd:
                                            (zen.proof 
                                               (zen.imp 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p2) 
                                                              (abst_prj_b p2)) 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1))))) 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal p2 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1))))))) =>
                                            zen.Rimply 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_b p2)) 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1))))) 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal p2 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1))))) 
                                              (v_Vld:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p2) 
                                                                 (abst_prj_b 
                                                                    p2)) 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1))))))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_constr 
                                                             (abst_prj_a p2) 
                                                             (abst_prj_b p2)) 
                                                          (abst_constr 
                                                             (abst_prj_a p1) 
                                                             (abst_prj_b p1))))) 
                                                 __G_1_3_LEMMA v_Vld) 
                                              (v_Vmd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal p2 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)))))) =>
                                               zen.Rsubst basics.bool__t 
                                                 (v_Vsc:
                                                  (zen.term basics.bool__t) =>
                                                  zen.triangle 
                                                    (focal.is_true v_Vsc)) 
                                                 (abst_equal p2 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1))) 
                                                 (abst_equal p2 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1))) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal p2 
                                                                 (abst_constr 
                                                                    (
                                                                    abst_prj_a 
                                                                    p1) 
                                                                    (
                                                                    abst_prj_b 
                                                                    p1))) 
                                                              (abst_equal p2 
                                                                 (abst_constr 
                                                                    (
                                                                    abst_prj_a 
                                                                    p1) 
                                                                    (
                                                                    abst_prj_b 
                                                                    p1))))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vuc:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                v_Vuc 
                                                                (abst_constr 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p1))) 
                                                             (abst_equal p2 
                                                                (abst_constr 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p1)))))) 
                                                    p2 p2 
                                                    (v_Vcd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T p2 p2)))) =>
                                                     zen.Rnoteq abst_T p2 
                                                       v_Vcd) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    p2 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))) 
                                                                 (abst_equal 
                                                                    p2 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))))) =>
                                                     zen.Rsubst abst_T 
                                                       (v_Vod:
                                                        (zen.term abst_T) =>
                                                        zen.not 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                basics.bool__t 
                                                                (abst_equal 
                                                                   p2 v_Vod) 
                                                                (abst_equal 
                                                                   p2 
                                                                   (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))))) 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1)) 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1)) 
                                                       (v_Vpd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    abst_T 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))))) =>
                                                        zen.Raxiom 
                                                          (zen.triangle 
                                                             (zen.equal 
                                                                abst_T 
                                                                (abst_constr 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p1)) 
                                                                (abst_constr 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p1)))) 
                                                          v_Vrc v_Vpd) 
                                                       (v_Vnd:
                                                        (zen.proof 
                                                           (zen.not 
                                                              (zen.triangle 
                                                                 (zen.equal 
                                                                    basics.bool__t 
                                                                    (
                                                                    abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))) 
                                                                    (
                                                                    abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))))) =>
                                                        zen.Rnoteq 
                                                          basics.bool__t 
                                                          (abst_equal p2 
                                                             (abst_constr 
                                                                (abst_prj_a 
                                                                   p1) 
                                                                (abst_prj_b 
                                                                   p1))) 
                                                          v_Vnd) v_Vnd) v_Vnd) 
                                                 (v_Vmd:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal p2 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1)))))) =>
                                                  zen.Raxiom 
                                                    (zen.triangle 
                                                       (focal.is_true 
                                                          (abst_equal p2 
                                                             (abst_constr 
                                                                (abst_prj_a 
                                                                   p1) 
                                                                (abst_prj_b 
                                                                   p1))))) 
                                                    v_Vmd v_Vkc) v_Vmd) v_Vkd) 
                                           v_Vjd) v_Vid) v_Vhd) 
                                  abst_equal_transitive) v_Vdd) v_Vqc) 
                         (v_Vnd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal p2 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1))) 
                                      (abst_equal p2 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1))))))) =>
                          zen.Rsubst abst_T 
                            (v_Vod:(zen.term abst_T) =>
                             zen.not 
                               (zen.triangle 
                                  (zen.equal basics.bool__t 
                                     (abst_equal p2 v_Vod) 
                                     (abst_equal p2 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)))))) 
                            (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                            (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                            (v_Vpd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)))))) =>
                             zen.Raxiom 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)) 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)))) v_Vrc v_Vpd) 
                            (v_Vnd:
                             (zen.proof 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal basics.bool__t 
                                         (abst_equal p2 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1))) 
                                         (abst_equal p2 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1))))))) =>
                             zen.Rnoteq basics.bool__t 
                               (abst_equal p2 
                                  (abst_constr (abst_prj_a p1) 
                                     (abst_prj_b p1))) v_Vnd) v_Vnd) v_Vtc) 
                      (v_Vmd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal p2 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)))))) =>
                       zen.Raxiom 
                         (zen.triangle 
                            (focal.is_true 
                               (abst_equal p2 
                                  (abst_constr (abst_prj_a p1) 
                                     (abst_prj_b p1))))) v_Vmd v_Vkc) 
                      __G_1_3_LEMMA) 
                   (v_Vpd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)))))) =>
                    zen.Rcut 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                               (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) 
                      (v_Vqd:
                       (zen.proof 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)))))) =>
                       zen.Rall abst_T 
                         (v_Ved:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vfd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vgd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Ved v_Vfd))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vfd v_Vgd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Ved v_Vgd))))))) 
                         (abst_constr (abst_prj_a p2) (abst_prj_b p2)) 
                         (v_Vrd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vfd:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vgd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_constr (abst_prj_a p2) 
                                                  (abst_prj_b p2)) v_Vfd))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vfd v_Vgd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2)) v_Vgd)))))))) =>
                          zen.Rall abst_T 
                            (v_Vfd:(zen.term abst_T) =>
                             zen.forall abst_T 
                               (v_Vgd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_constr (abst_prj_a p2) 
                                              (abst_prj_b p2)) v_Vfd))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal v_Vfd v_Vgd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr (abst_prj_a p2) 
                                                 (abst_prj_b p2)) v_Vgd)))))) 
                            (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                            (v_Vsd:
                             (zen.proof 
                                (zen.forall abst_T 
                                   (v_Vgd:(zen.term abst_T) =>
                                    zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_constr (abst_prj_a p2) 
                                                  (abst_prj_b p2)) 
                                               (abst_constr (abst_prj_a p1) 
                                                  (abst_prj_b p1))))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) v_Vgd))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2)) v_Vgd))))))) =>
                             zen.Rall abst_T 
                               (v_Vgd:(zen.term abst_T) =>
                                zen.imp 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_constr (abst_prj_a p2) 
                                              (abst_prj_b p2)) 
                                           (abst_constr (abst_prj_a p1) 
                                              (abst_prj_b p1))))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1)) v_Vgd))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr (abst_prj_a p2) 
                                                 (abst_prj_b p2)) v_Vgd))))) 
                               (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                               (v_Vtd:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal 
                                               (abst_constr (abst_prj_a p2) 
                                                  (abst_prj_b p2)) 
                                               (abst_constr (abst_prj_a p1) 
                                                  (abst_prj_b p1))))) 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)))))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_constr (abst_prj_a p2) 
                                              (abst_prj_b p2)) 
                                           (abst_constr (abst_prj_a p1) 
                                              (abst_prj_b p1))))) 
                                  (zen.imp 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1)) 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr (abst_prj_a p2) 
                                                 (abst_prj_b p2)) 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1)))))) 
                                  (v_Vld:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1))))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr (abst_prj_a p2) 
                                                 (abst_prj_b p2)) 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1))))) 
                                     __G_1_3_LEMMA v_Vld) 
                                  (v_Vud:
                                   (zen.proof 
                                      (zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1))))) 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1))))))) =>
                                   zen.Rimply 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1)) 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1))))) 
                                     (zen.triangle 
                                        (focal.is_true 
                                           (abst_equal 
                                              (abst_constr (abst_prj_a p2) 
                                                 (abst_prj_b p2)) 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1))))) 
                                     (v_Vvd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1))))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1))))) 
                                        v_Vqd v_Vvd) 
                                     (__G_1_3_LEMMA:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)))))) =>
                                      zen.Rsubst basics.bool__t 
                                        (v_Vsc:(zen.term basics.bool__t) =>
                                         zen.triangle (focal.is_true v_Vsc)) 
                                        (abst_equal 
                                           (abst_constr (abst_prj_a p2) 
                                              (abst_prj_b p2)) 
                                           (abst_constr (abst_prj_a p1) 
                                              (abst_prj_b p1))) 
                                        (abst_equal p2 
                                           (abst_constr (abst_prj_a p1) 
                                              (abst_prj_b p1))) 
                                        (v_Vtc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p2) 
                                                           (abst_prj_b p2)) 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1))) 
                                                     (abst_equal p2 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1))))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vuc:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal v_Vuc 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1))) 
                                                    (abst_equal p2 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1)))))) 
                                           (abst_constr (abst_prj_a p2) 
                                              (abst_prj_b p2)) p2 
                                           (v_Vvc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_constr 
                                                           (abst_prj_a p2) 
                                                           (abst_prj_b p2)) 
                                                        p2)))) =>
                                            zen.Rnotand 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (zen.equal abst_T p2 
                                                       (abst_constr 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_b p2))))) 
                                              (zen.not 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal p2 
                                                          (abst_constr 
                                                             (abst_prj_a p2) 
                                                             (abst_prj_b p2)))))) 
                                              (v_Vwc:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              p2 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p2) 
                                                                 (abst_prj_b 
                                                                    p2))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (zen.equal abst_T p2 
                                                       (abst_constr 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_b p2)))) 
                                                 (v_Vxc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (zen.equal abst_T p2 
                                                           (abst_constr 
                                                              (abst_prj_a p2) 
                                                              (abst_prj_b p2))))) =>
                                                  zen.Reqsym abst_T p2 
                                                    (abst_constr 
                                                       (abst_prj_a p2) 
                                                       (abst_prj_b p2)) 
                                                    v_Vxc v_Vvc) v_Vwc) 
                                              (v_Vdd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (focal.is_true 
                                                              (abst_equal p2 
                                                                 (abst_constr 
                                                                    (
                                                                    abst_prj_a 
                                                                    p2) 
                                                                    (
                                                                    abst_prj_b 
                                                                    p2)))))))) =>
                                               zen.Rnotnot 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal p2 
                                                          (abst_constr 
                                                             (abst_prj_a p2) 
                                                             (abst_prj_b p2))))) 
                                                 (v_Vpc:
                                                  (zen.proof 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal p2 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p2) 
                                                                 (abst_prj_b 
                                                                    p2)))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Ved:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vfd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vgd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Ved 
                                                                    v_Vfd))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Ved 
                                                                    v_Vgd))))))) 
                                                    p2 
                                                    (v_Vhd:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vfd:
                                                            (zen.term abst_T) =>
                                                            zen.forall 
                                                              abst_T 
                                                              (v_Vgd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vfd))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vgd)))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vfd:
                                                        (zen.term abst_T) =>
                                                        zen.forall abst_T 
                                                          (v_Vgd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    p2 v_Vfd))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vgd)))))) 
                                                       (abst_constr 
                                                          (abst_prj_a p2) 
                                                          (abst_prj_b p2)) 
                                                       (v_Vid:
                                                        (zen.proof 
                                                           (zen.forall 
                                                              abst_T 
                                                              (v_Vgd:
                                                               (zen.term 
                                                                  abst_T) =>
                                                               zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    v_Vgd))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vgd))))))) =>
                                                        zen.Rall abst_T 
                                                          (v_Vgd:
                                                           (zen.term abst_T) =>
                                                           zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    v_Vgd))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 v_Vgd))))) 
                                                          (abst_constr 
                                                             (abst_prj_a p1) 
                                                             (abst_prj_b p1)) 
                                                          (v_Vjd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                             (zen.imp 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))))) 
                                                             (v_Vnc:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                                v_Vpc v_Vnc) 
                                                             (v_Vkd:
                                                              (zen.proof 
                                                                 (zen.imp 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))))) =>
                                                              zen.Rimply 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                                (v_Vld:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                                   __G_1_3_LEMMA 
                                                                   v_Vld) 
                                                                (v_Vmd:
                                                                 (zen.proof 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)))))) =>
                                                                 zen.Raxiom 
                                                                   (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p2 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                                   v_Vmd 
                                                                   v_Vkc) 
                                                                v_Vkd) v_Vjd) 
                                                          v_Vid) v_Vhd) 
                                                    abst_equal_transitive) 
                                                 v_Vdd) v_Vqc) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal p2 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1))) 
                                                        (abst_equal p2 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1))))))) =>
                                            zen.Rsubst abst_T 
                                              (v_Vod:(zen.term abst_T) =>
                                               zen.not 
                                                 (zen.triangle 
                                                    (zen.equal 
                                                       basics.bool__t 
                                                       (abst_equal p2 v_Vod) 
                                                       (abst_equal p2 
                                                          (abst_constr 
                                                             (abst_prj_a p1) 
                                                             (abst_prj_b p1)))))) 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1)) 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1)) 
                                              (v_Vpd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)) 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)))))) =>
                                               zen.Rnoteq abst_T 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) v_Vpd) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal p2 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1))) 
                                                           (abst_equal p2 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1))))))) =>
                                               zen.Rnoteq basics.bool__t 
                                                 (abst_equal p2 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1))) 
                                                 v_Vnd) v_Vnd) v_Vtc) 
                                        (v_Vmd:
                                         (zen.proof 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal p2 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal p2 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1))))) 
                                           v_Vmd v_Vkc) __G_1_3_LEMMA) v_Vud) 
                                  v_Vtd) v_Vsd) v_Vrd) abst_equal_transitive) 
                      (v_Vvd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1))))))) =>
                       zen.Rnoteq abst_T 
                         (abst_constr (abst_prj_a p1) (abst_prj_b p1)) v_Vpd)))))) 
         (zen.nnpp 
            (zen.triangle 
               (focal.is_true 
                  (abst_equal (abst_constr (abst_prj_a p2) (abst_prj_b p2)) 
                     (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) 
            (v_Vzb:
             (zen.proof 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_constr (abst_prj_a p2) (abst_prj_b p2)) 
                            (abst_constr (abst_prj_a p1) (abst_prj_b p1))))))) =>
             zen.Rall _p_S1_T 
               (v_Vac:(zen.term _p_S1_T) =>
                zen.forall _p_S1_T 
                  (v_Vbc:(zen.term _p_S1_T) =>
                   zen.forall _p_S2_T 
                     (v_Vcc:(zen.term _p_S2_T) =>
                      zen.forall _p_S2_T 
                        (v_Vdc:(zen.term _p_S2_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr v_Vac v_Vcc) 
                                    (abst_constr v_Vbc v_Vdc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr v_Vbc v_Vdc) 
                                    (abst_constr v_Vac v_Vcc)))))))) 
               (abst_prj_a p1) 
               (v_Vec:
                (zen.proof 
                   (zen.forall _p_S1_T 
                      (v_Vbc:(zen.term _p_S1_T) =>
                       zen.forall _p_S2_T 
                         (v_Vcc:(zen.term _p_S2_T) =>
                          zen.forall _p_S2_T 
                            (v_Vdc:(zen.term _p_S2_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p1) v_Vcc) 
                                        (abst_constr v_Vbc v_Vdc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal (abst_constr v_Vbc v_Vdc) 
                                        (abst_constr (abst_prj_a p1) v_Vcc))))))))) =>
                zen.Rall _p_S1_T 
                  (v_Vbc:(zen.term _p_S1_T) =>
                   zen.forall _p_S2_T 
                     (v_Vcc:(zen.term _p_S2_T) =>
                      zen.forall _p_S2_T 
                        (v_Vdc:(zen.term _p_S2_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) v_Vcc) 
                                    (abst_constr v_Vbc v_Vdc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal (abst_constr v_Vbc v_Vdc) 
                                    (abst_constr (abst_prj_a p1) v_Vcc))))))) 
                  (abst_prj_a p2) 
                  (v_Vfc:
                   (zen.proof 
                      (zen.forall _p_S2_T 
                         (v_Vcc:(zen.term _p_S2_T) =>
                          zen.forall _p_S2_T 
                            (v_Vdc:(zen.term _p_S2_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p1) v_Vcc) 
                                        (abst_constr (abst_prj_a p2) v_Vdc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p2) v_Vdc) 
                                        (abst_constr (abst_prj_a p1) v_Vcc)))))))) =>
                   zen.Rall _p_S2_T 
                     (v_Vcc:(zen.term _p_S2_T) =>
                      zen.forall _p_S2_T 
                        (v_Vdc:(zen.term _p_S2_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) v_Vcc) 
                                    (abst_constr (abst_prj_a p2) v_Vdc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p2) v_Vdc) 
                                    (abst_constr (abst_prj_a p1) v_Vcc)))))) 
                     (abst_prj_b p1) 
                     (v_Vgc:
                      (zen.proof 
                         (zen.forall _p_S2_T 
                            (v_Vdc:(zen.term _p_S2_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)) 
                                        (abst_constr (abst_prj_a p2) v_Vdc)))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p2) v_Vdc) 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)))))))) =>
                      zen.Rall _p_S2_T 
                        (v_Vdc:(zen.term _p_S2_T) =>
                         zen.imp 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)) 
                                    (abst_constr (abst_prj_a p2) v_Vdc)))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p2) v_Vdc) 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)))))) (abst_prj_b p2) 
                        (v_Vhc:
                         (zen.proof 
                            (zen.imp 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)) 
                                        (abst_constr (abst_prj_a p2) 
                                           (abst_prj_b p2))))) 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p2) 
                                           (abst_prj_b p2)) 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1))))))) =>
                         zen.Rimply 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)) 
                                    (abst_constr (abst_prj_a p2) 
                                       (abst_prj_b p2))))) 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p2) 
                                       (abst_prj_b p2)) 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1))))) 
                           (v_Vic:
                            (zen.proof 
                               (zen.not 
                                  (zen.triangle 
                                     (focal.is_true 
                                        (abst_equal 
                                           (abst_constr (abst_prj_a p1) 
                                              (abst_prj_b p1)) 
                                           (abst_constr (abst_prj_a p2) 
                                              (abst_prj_b p2))))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_constr (abst_prj_a p1) 
                                          (abst_prj_b p1)) 
                                       (abst_constr (abst_prj_a p2) 
                                          (abst_prj_b p2))))) __G_1_2_LEMMA 
                              v_Vic) 
                           (v_Vjc:
                            (zen.proof 
                               (zen.triangle 
                                  (focal.is_true 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p2) 
                                           (abst_prj_b p2)) 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)))))) =>
                            zen.Raxiom 
                              (zen.triangle 
                                 (focal.is_true 
                                    (abst_equal 
                                       (abst_constr (abst_prj_a p2) 
                                          (abst_prj_b p2)) 
                                       (abst_constr (abst_prj_a p1) 
                                          (abst_prj_b p1))))) v_Vjc v_Vzb) 
                           v_Vhc) v_Vgc) v_Vfc) v_Vec) abst_equal_symmetric2))) 
        (zen.nnpp 
           (zen.triangle 
              (focal.is_true 
                 (abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                    (abst_constr (abst_prj_a p2) (abst_prj_b p2))))) 
           (v_Vkc:
            (zen.proof 
               (zen.not 
                  (zen.triangle 
                     (focal.is_true 
                        (abst_equal 
                           (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                           (abst_constr (abst_prj_a p2) (abst_prj_b p2))))))) =>
            zen.Rcut 
              (zen.and 
                 (zen.not 
                    (zen.triangle 
                       (zen.equal abst_T 
                          (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                          (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1))))))) 
              (v_Vlc:
               (zen.proof 
                  (zen.and 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T 
                              (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                              (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                 (abst_constr (abst_prj_a p1) (abst_prj_b p1)))))))) =>
               zen.Rand 
                 (zen.not 
                    (zen.triangle 
                       (zen.equal abst_T 
                          (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                          (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) 
                 (zen.not 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1)))))) 
                 (v_Vmc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T 
                              (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                              (abst_constr (abst_prj_a p1) (abst_prj_b p1)))))) =>
                  v_Vnc:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                 (abst_constr (abst_prj_a p1) (abst_prj_b p1))))))) =>
                  zen.Rnoteq abst_T 
                    (abst_constr (abst_prj_a p1) (abst_prj_b p1)) v_Vmc) 
                 v_Vlc) 
              (v_Voc:
               (zen.proof 
                  (zen.not 
                     (zen.and 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal abst_T 
                                 (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                 (abst_constr (abst_prj_a p1) (abst_prj_b p1))))) 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)) 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1))))))))) =>
               zen.Rcut 
                 (zen.triangle 
                    (zen.equal abst_T p2 
                       (abst_constr (abst_prj_a p2) (abst_prj_b p2)))) 
                 (v_Vpc:
                  (zen.proof 
                     (zen.triangle 
                        (zen.equal abst_T p2 
                           (abst_constr (abst_prj_a p2) (abst_prj_b p2))))) =>
                  zen.Rsubst basics.bool__t 
                    (v_Vqc:(zen.term basics.bool__t) =>
                     zen.triangle (focal.is_true v_Vqc)) 
                    (abst_equal 
                       (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p2) 
                    (abst_equal 
                       (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                       (abst_constr (abst_prj_a p2) (abst_prj_b p2))) 
                    (v_Vrc:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (zen.equal basics.bool__t 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)) p2) 
                                 (abst_equal 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)) 
                                    (abst_constr (abst_prj_a p2) 
                                       (abst_prj_b p2))))))) =>
                     zen.Rsubst abst_T 
                       (v_Vsc:(zen.term abst_T) =>
                        zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t (abst_equal v_Vsc p2) 
                                (abst_equal 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) 
                                   (abst_constr (abst_prj_a p2) 
                                      (abst_prj_b p2)))))) 
                       (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                       (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                       (v_Vmc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal abst_T 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)) 
                                    (abst_constr (abst_prj_a p1) 
                                       (abst_prj_b p1)))))) =>
                        zen.Rnotand 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1))))) 
                          (zen.not 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)))))) 
                          (v_Vtc:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_constr (abst_prj_a p1) 
                                             (abst_prj_b p1)) 
                                          (abst_constr (abst_prj_a p1) 
                                             (abst_prj_b p1))))))) =>
                           zen.Rnotnot 
                             (zen.triangle 
                                (zen.equal abst_T 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)))) 
                             (v_Vuc:
                              (zen.proof 
                                 (zen.triangle 
                                    (zen.equal abst_T 
                                       (abst_constr (abst_prj_a p1) 
                                          (abst_prj_b p1)) 
                                       (abst_constr (abst_prj_a p1) 
                                          (abst_prj_b p1))))) =>
                              zen.Rcut 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)))) 
                                (v_Vuc:
                                 (zen.proof 
                                    (zen.triangle 
                                       (zen.equal abst_T 
                                          (abst_constr (abst_prj_a p1) 
                                             (abst_prj_b p1)) 
                                          (abst_constr (abst_prj_a p1) 
                                             (abst_prj_b p1))))) =>
                                 zen.Rsubst abst_T 
                                   (v_Vvc:(zen.term abst_T) =>
                                    zen.triangle 
                                      (zen.equal abst_T v_Vvc 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)))) 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) 
                                   (v_Vmc:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)))) v_Vuc v_Vmc) 
                                   (v_Vuc:
                                    (zen.proof 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1)) 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1))))) =>
                                    zen.Rsubst abst_T 
                                      (v_Vwc:(zen.term abst_T) =>
                                       zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) v_Vwc)) 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) 
                                      (v_Vmc:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal abst_T 
                                                   (abst_constr 
                                                      (abst_prj_a p1) 
                                                      (abst_prj_b p1)) 
                                                   (abst_constr 
                                                      (abst_prj_a p1) 
                                                      (abst_prj_b p1)))))) =>
                                       zen.Rnoteq abst_T 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) v_Vmc) 
                                      (v_Vuc:
                                       (zen.proof 
                                          (zen.triangle 
                                             (zen.equal abst_T 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_constr (abst_prj_a p1) 
                                                  (abst_prj_b p1)) 
                                               (abst_constr (abst_prj_a p1) 
                                                  (abst_prj_b p1)))) v_Vuc 
                                         v_Vmc) v_Vuc) v_Vuc) 
                                (v_Vmc:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (zen.equal abst_T 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1)) 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1)))))) =>
                                 zen.Rnoteq abst_T 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) v_Vmc)) v_Vtc) 
                          (v_Vxc:
                           (zen.proof 
                              (zen.not 
                                 (zen.not 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1)) 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1)))))))) =>
                           zen.Rnotnot 
                             (zen.triangle 
                                (focal.is_true 
                                   (abst_equal 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1))))) 
                             (v_Vyc:
                              (zen.proof 
                                 (zen.triangle 
                                    (focal.is_true 
                                       (abst_equal 
                                          (abst_constr (abst_prj_a p1) 
                                             (abst_prj_b p1)) 
                                          (abst_constr (abst_prj_a p1) 
                                             (abst_prj_b p1)))))) =>
                              zen.Rall abst_T 
                                (v_Vzc:(zen.term abst_T) =>
                                 zen.forall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal v_Vzc v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vad v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vzc v_Vbd))))))) 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                (v_Vcd:
                                 (zen.proof 
                                    (zen.forall abst_T 
                                       (v_Vad:(zen.term abst_T) =>
                                        zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1)) 
                                                      v_Vad))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal v_Vad v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         v_Vbd)))))))) =>
                                 zen.Rall abst_T 
                                   (v_Vad:(zen.term abst_T) =>
                                    zen.forall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) v_Vad))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal v_Vad v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     v_Vbd)))))) 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) 
                                   (v_Vdd:
                                    (zen.proof 
                                       (zen.forall abst_T 
                                          (v_Vbd:(zen.term abst_T) =>
                                           zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1)) 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1))))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         v_Vbd))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         v_Vbd))))))) =>
                                    zen.Rall abst_T 
                                      (v_Vbd:(zen.term abst_T) =>
                                       zen.imp 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1))))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     v_Vbd))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     v_Vbd))))) p2 
                                      (v_Ved:
                                       (zen.proof 
                                          (zen.imp 
                                             (zen.triangle 
                                                (focal.is_true 
                                                   (abst_equal 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1)) 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1))))) 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         p2))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         p2)))))) =>
                                       zen.Rimply 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1))))) 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) p2))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) p2)))) 
                                         (v_Vnc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1))))))) =>
                                          zen.Raxiom 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1))))) 
                                            v_Vyc v_Vnc) 
                                         (v_Vfd:
                                          (zen.proof 
                                             (zen.imp 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         p2))) 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         p2))))) =>
                                          zen.Rimply 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) p2))) 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) p2))) 
                                            (v_Vgd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1)) 
                                                            p2))))) =>
                                             zen.Raxiom 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        p2))) __G_1_1_LEMMA 
                                               v_Vgd) 
                                            (__G_1_1_LEMMA:
                                             (zen.proof 
                                                (zen.triangle 
                                                   (focal.is_true 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         p2)))) =>
                                             zen.Rsubst basics.bool__t 
                                               (v_Vhd:
                                                (zen.term basics.bool__t) =>
                                                zen.triangle 
                                                  (focal.is_true v_Vhd)) 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) p2) 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2))) 
                                               (v_Vrc:
                                                (zen.proof 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal 
                                                            basics.bool__t 
                                                            (abst_equal 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1)) p2) 
                                                            (abst_equal 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1)) 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p2) 
                                                                  (abst_prj_b 
                                                                    p2))))))) =>
                                                zen.Rsubst abst_T 
                                                  (v_Vid:(zen.term abst_T) =>
                                                   zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal v_Vid 
                                                              p2) 
                                                           (abst_equal 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1)) 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p2) 
                                                                 (abst_prj_b 
                                                                    p2)))))) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (v_Vmc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               abst_T 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1)) 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1)))))) =>
                                                   zen.Rnoteq abst_T 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     v_Vmc) 
                                                  (v_Vrc:
                                                   (zen.proof 
                                                      (zen.not 
                                                         (zen.triangle 
                                                            (zen.equal 
                                                               basics.bool__t 
                                                               (abst_equal 
                                                                  (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2) 
                                                               (abst_equal 
                                                                  (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                  (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))))) =>
                                                   zen.Rsubst abst_T 
                                                     (v_Vjd:
                                                      (zen.term abst_T) =>
                                                      zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_constr 
                                                                    (
                                                                    abst_prj_a 
                                                                    p1) 
                                                                    (
                                                                    abst_prj_b 
                                                                    p1)) 
                                                                 v_Vjd) 
                                                              (abst_equal 
                                                                 (abst_constr 
                                                                    (
                                                                    abst_prj_a 
                                                                    p1) 
                                                                    (
                                                                    abst_prj_b 
                                                                    p1)) 
                                                                 (abst_constr 
                                                                    (
                                                                    abst_prj_a 
                                                                    p2) 
                                                                    (
                                                                    abst_prj_b 
                                                                    p2)))))) 
                                                     p2 
                                                     (abst_constr 
                                                        (abst_prj_a p2) 
                                                        (abst_prj_b p2)) 
                                                     (v_Vkd:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  abst_T p2 
                                                                  (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)))))) =>
                                                      zen.Raxiom 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              p2 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p2) 
                                                                 (abst_prj_b 
                                                                    p2)))) 
                                                        v_Vpc v_Vkd) 
                                                     (v_Vld:
                                                      (zen.proof 
                                                         (zen.not 
                                                            (zen.triangle 
                                                               (zen.equal 
                                                                  basics.bool__t 
                                                                  (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))) 
                                                                  (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))))) =>
                                                      zen.Rnoteq 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)) 
                                                           (abst_constr 
                                                              (abst_prj_a p2) 
                                                              (abst_prj_b p2))) 
                                                        v_Vld) v_Vrc) v_Vrc) 
                                               (v_Vmd:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1)) 
                                                            (abst_constr 
                                                               (abst_prj_a p2) 
                                                               (abst_prj_b p2)))))) =>
                                                zen.Raxiom 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)) 
                                                           (abst_constr 
                                                              (abst_prj_a p2) 
                                                              (abst_prj_b p2))))) 
                                                  v_Vmd v_Vkc) __G_1_1_LEMMA) 
                                            v_Vfd) v_Ved) v_Vdd) v_Vcd) 
                                abst_equal_transitive) v_Vxc) v_Voc) 
                       (v_Vrc:
                        (zen.proof 
                           (zen.not 
                              (zen.triangle 
                                 (zen.equal basics.bool__t 
                                    (abst_equal 
                                       (abst_constr (abst_prj_a p1) 
                                          (abst_prj_b p1)) p2) 
                                    (abst_equal 
                                       (abst_constr (abst_prj_a p1) 
                                          (abst_prj_b p1)) 
                                       (abst_constr (abst_prj_a p2) 
                                          (abst_prj_b p2))))))) =>
                        zen.Rsubst abst_T 
                          (v_Vjd:(zen.term abst_T) =>
                           zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) v_Vjd) 
                                   (abst_equal 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) 
                                      (abst_constr (abst_prj_a p2) 
                                         (abst_prj_b p2)))))) p2 
                          (abst_constr (abst_prj_a p2) (abst_prj_b p2)) 
                          (v_Vkd:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal abst_T p2 
                                       (abst_constr (abst_prj_a p2) 
                                          (abst_prj_b p2)))))) =>
                           zen.Raxiom 
                             (zen.triangle 
                                (zen.equal abst_T p2 
                                   (abst_constr (abst_prj_a p2) 
                                      (abst_prj_b p2)))) v_Vpc v_Vkd) 
                          (v_Vld:
                           (zen.proof 
                              (zen.not 
                                 (zen.triangle 
                                    (zen.equal basics.bool__t 
                                       (abst_equal 
                                          (abst_constr (abst_prj_a p1) 
                                             (abst_prj_b p1)) 
                                          (abst_constr (abst_prj_a p2) 
                                             (abst_prj_b p2))) 
                                       (abst_equal 
                                          (abst_constr (abst_prj_a p1) 
                                             (abst_prj_b p1)) 
                                          (abst_constr (abst_prj_a p2) 
                                             (abst_prj_b p2))))))) =>
                           zen.Rnoteq basics.bool__t 
                             (abst_equal 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                (abst_constr (abst_prj_a p2) (abst_prj_b p2))) 
                             v_Vld) v_Vrc) v_Vrc) 
                    (v_Vmd:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal 
                                 (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                 (abst_constr (abst_prj_a p2) (abst_prj_b p2)))))) =>
                     zen.Raxiom 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                (abst_constr (abst_prj_a p2) (abst_prj_b p2))))) 
                       v_Vmd v_Vkc) __G_1_1_LEMMA) 
                 (v_Vkd:
                  (zen.proof 
                     (zen.not 
                        (zen.triangle 
                           (zen.equal abst_T p2 
                              (abst_constr (abst_prj_a p2) (abst_prj_b p2)))))) =>
                  zen.Rcut 
                    (zen.triangle 
                       (focal.is_true 
                          (abst_equal p2 
                             (abst_constr (abst_prj_a p2) (abst_prj_b p2))))) 
                    (v_Vnd:
                     (zen.proof 
                        (zen.triangle 
                           (focal.is_true 
                              (abst_equal p2 
                                 (abst_constr (abst_prj_a p2) (abst_prj_b p2)))))) =>
                     zen.Rall abst_T 
                       (v_Vzc:(zen.term abst_T) =>
                        zen.forall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true (abst_equal v_Vzc v_Vad))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vzc v_Vbd))))))) 
                       (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                       (v_Vcd:
                        (zen.proof 
                           (zen.forall abst_T 
                              (v_Vad:(zen.term abst_T) =>
                               zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1)) v_Vad))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal v_Vad v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) v_Vbd)))))))) =>
                        zen.Rall abst_T 
                          (v_Vad:(zen.term abst_T) =>
                           zen.forall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) v_Vad))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal v_Vad v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) v_Vbd)))))) 
                          p2 
                          (v_Vod:
                           (zen.proof 
                              (zen.forall abst_T 
                                 (v_Vbd:(zen.term abst_T) =>
                                  zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1)) p2))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal p2 v_Vbd))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) v_Vbd))))))) =>
                           zen.Rall abst_T 
                             (v_Vbd:(zen.term abst_T) =>
                              zen.imp 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) p2))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal p2 v_Vbd))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) v_Vbd))))) 
                             (abst_constr (abst_prj_a p2) (abst_prj_b p2)) 
                             (v_Vpd:
                              (zen.proof 
                                 (zen.imp 
                                    (zen.triangle 
                                       (focal.is_true 
                                          (abst_equal 
                                             (abst_constr (abst_prj_a p1) 
                                                (abst_prj_b p1)) p2))) 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal p2 
                                                (abst_constr (abst_prj_a p2) 
                                                   (abst_prj_b p2))))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) 
                                                (abst_constr (abst_prj_a p2) 
                                                   (abst_prj_b p2)))))))) =>
                              zen.Rimply 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) p2))) 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal p2 
                                            (abst_constr (abst_prj_a p2) 
                                               (abst_prj_b p2))))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) 
                                            (abst_constr (abst_prj_a p2) 
                                               (abst_prj_b p2)))))) 
                                (v_Vgd:
                                 (zen.proof 
                                    (zen.not 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) p2))))) =>
                                 zen.Raxiom 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) p2))) 
                                   __G_1_1_LEMMA v_Vgd) 
                                (v_Vqd:
                                 (zen.proof 
                                    (zen.imp 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal p2 
                                                (abst_constr (abst_prj_a p2) 
                                                   (abst_prj_b p2))))) 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) 
                                                (abst_constr (abst_prj_a p2) 
                                                   (abst_prj_b p2))))))) =>
                                 zen.Rimply 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal p2 
                                            (abst_constr (abst_prj_a p2) 
                                               (abst_prj_b p2))))) 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) 
                                            (abst_constr (abst_prj_a p2) 
                                               (abst_prj_b p2))))) 
                                   (v_Vrd:
                                    (zen.proof 
                                       (zen.not 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal p2 
                                                   (abst_constr 
                                                      (abst_prj_a p2) 
                                                      (abst_prj_b p2))))))) =>
                                    zen.Raxiom 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal p2 
                                               (abst_constr (abst_prj_a p2) 
                                                  (abst_prj_b p2))))) v_Vnd 
                                      v_Vrd) 
                                   (v_Vmd:
                                    (zen.proof 
                                       (zen.triangle 
                                          (focal.is_true 
                                             (abst_equal 
                                                (abst_constr (abst_prj_a p1) 
                                                   (abst_prj_b p1)) 
                                                (abst_constr (abst_prj_a p2) 
                                                   (abst_prj_b p2)))))) =>
                                    zen.Rsubst basics.bool__t 
                                      (v_Vhd:(zen.term basics.bool__t) =>
                                       zen.triangle (focal.is_true v_Vhd)) 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) 
                                         (abst_constr (abst_prj_a p2) 
                                            (abst_prj_b p2))) 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) 
                                         (abst_constr (abst_prj_a p2) 
                                            (abst_prj_b p2))) 
                                      (v_Vld:
                                       (zen.proof 
                                          (zen.not 
                                             (zen.triangle 
                                                (zen.equal basics.bool__t 
                                                   (abst_equal 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1)) 
                                                      (abst_constr 
                                                         (abst_prj_a p2) 
                                                         (abst_prj_b p2))) 
                                                   (abst_equal 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1)) 
                                                      (abst_constr 
                                                         (abst_prj_a p2) 
                                                         (abst_prj_b p2))))))) =>
                                       zen.Rsubst abst_T 
                                         (v_Vsd:(zen.term abst_T) =>
                                          zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal v_Vsd 
                                                     (abst_constr 
                                                        (abst_prj_a p2) 
                                                        (abst_prj_b p2))) 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     (abst_constr 
                                                        (abst_prj_a p2) 
                                                        (abst_prj_b p2)))))) 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) 
                                         (v_Vmc:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal abst_T 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1)) 
                                                      (abst_constr 
                                                         (abst_prj_a p1) 
                                                         (abst_prj_b p1)))))) =>
                                          zen.Rnotand 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1))))) 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)))))) 
                                            (v_Vtc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (zen.equal abst_T 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1)) 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1))))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (zen.equal abst_T 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)))) 
                                               (v_Vuc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1))))) =>
                                                zen.Reqsym abst_T 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) v_Vuc 
                                                  v_Vmc) v_Vtc) 
                                            (v_Vxc:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.not 
                                                      (zen.triangle 
                                                         (focal.is_true 
                                                            (abst_equal 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1)) 
                                                               (abst_constr 
                                                                  (abst_prj_a 
                                                                    p1) 
                                                                  (abst_prj_b 
                                                                    p1)))))))) =>
                                             zen.Rnotnot 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1))))) 
                                               (v_Vyc:
                                                (zen.proof 
                                                   (zen.triangle 
                                                      (focal.is_true 
                                                         (abst_equal 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1)) 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1)))))) =>
                                                zen.Rall abst_T 
                                                  (v_Vzc:(zen.term abst_T) =>
                                                   zen.forall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    v_Vzc 
                                                                    v_Vad))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vzc 
                                                                    v_Vbd))))))) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (v_Vcd:
                                                   (zen.proof 
                                                      (zen.forall abst_T 
                                                         (v_Vad:
                                                          (zen.term abst_T) =>
                                                          zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vad))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vbd)))))))) =>
                                                   zen.Rall abst_T 
                                                     (v_Vad:
                                                      (zen.term abst_T) =>
                                                      zen.forall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vad))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    v_Vad 
                                                                    v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vbd)))))) 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     (v_Vdd:
                                                      (zen.proof 
                                                         (zen.forall abst_T 
                                                            (v_Vbd:
                                                             (zen.term abst_T) =>
                                                             zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vbd))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vbd))))))) =>
                                                      zen.Rall abst_T 
                                                        (v_Vbd:
                                                         (zen.term abst_T) =>
                                                         zen.imp 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vbd))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vbd))))) 
                                                        (abst_constr 
                                                           (abst_prj_a p2) 
                                                           (abst_prj_b p2)) 
                                                        (v_Vtd:
                                                         (zen.proof 
                                                            (zen.imp 
                                                               (zen.triangle 
                                                                  (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)))))))) =>
                                                         zen.Rimply 
                                                           (zen.triangle 
                                                              (focal.is_true 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)))))) 
                                                           (v_Vnc:
                                                            (zen.proof 
                                                               (zen.not 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))))) =>
                                                            zen.Raxiom 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1))))) 
                                                              v_Vyc v_Vnc) 
                                                           (v_Vud:
                                                            (zen.proof 
                                                               (zen.imp 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))))) =>
                                                            zen.Rimply 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                              (v_Vkc:
                                                               (zen.proof 
                                                                  (zen.not 
                                                                    (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                                 v_Vmd v_Vkc) 
                                                              (v_Vmd:
                                                               (zen.proof 
                                                                  (zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2)))))) =>
                                                               zen.Raxiom 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p2) 
                                                                    (abst_prj_b 
                                                                    p2))))) 
                                                                 v_Vmd v_Vkc) 
                                                              v_Vud) v_Vtd) 
                                                        v_Vdd) v_Vcd) 
                                                  abst_equal_transitive) 
                                               v_Vxc) v_Voc) 
                                         (v_Vld:
                                          (zen.proof 
                                             (zen.not 
                                                (zen.triangle 
                                                   (zen.equal basics.bool__t 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         (abst_constr 
                                                            (abst_prj_a p2) 
                                                            (abst_prj_b p2))) 
                                                      (abst_equal 
                                                         (abst_constr 
                                                            (abst_prj_a p1) 
                                                            (abst_prj_b p1)) 
                                                         (abst_constr 
                                                            (abst_prj_a p2) 
                                                            (abst_prj_b p2))))))) =>
                                          zen.Rsubst abst_T 
                                            (v_Vjd:(zen.term abst_T) =>
                                             zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        v_Vjd) 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        (abst_constr 
                                                           (abst_prj_a p2) 
                                                           (abst_prj_b p2)))))) 
                                            (abst_constr (abst_prj_a p2) 
                                               (abst_prj_b p2)) 
                                            (abst_constr (abst_prj_a p2) 
                                               (abst_prj_b p2)) 
                                            (v_Vvd:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal abst_T 
                                                         (abst_constr 
                                                            (abst_prj_a p2) 
                                                            (abst_prj_b p2)) 
                                                         (abst_constr 
                                                            (abst_prj_a p2) 
                                                            (abst_prj_b p2)))))) =>
                                             zen.Rnoteq abst_T 
                                               (abst_constr (abst_prj_a p2) 
                                                  (abst_prj_b p2)) v_Vvd) 
                                            (v_Vld:
                                             (zen.proof 
                                                (zen.not 
                                                   (zen.triangle 
                                                      (zen.equal 
                                                         basics.bool__t 
                                                         (abst_equal 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1)) 
                                                            (abst_constr 
                                                               (abst_prj_a p2) 
                                                               (abst_prj_b p2))) 
                                                         (abst_equal 
                                                            (abst_constr 
                                                               (abst_prj_a p1) 
                                                               (abst_prj_b p1)) 
                                                            (abst_constr 
                                                               (abst_prj_a p2) 
                                                               (abst_prj_b p2))))))) =>
                                             zen.Rnoteq basics.bool__t 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2))) v_Vld) 
                                            v_Vld) v_Vld) 
                                      (v_Vmd:
                                       (zen.proof 
                                          (zen.triangle 
                                             (focal.is_true 
                                                (abst_equal 
                                                   (abst_constr 
                                                      (abst_prj_a p1) 
                                                      (abst_prj_b p1)) 
                                                   (abst_constr 
                                                      (abst_prj_a p2) 
                                                      (abst_prj_b p2)))))) =>
                                       zen.Raxiom 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p2) 
                                                     (abst_prj_b p2))))) 
                                         v_Vmd v_Vkc) v_Vmd) v_Vqd) v_Vpd) 
                             v_Vod) v_Vcd) abst_equal_transitive) 
                    (v_Vrd:
                     (zen.proof 
                        (zen.not 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal p2 
                                    (abst_constr (abst_prj_a p2) 
                                       (abst_prj_b p2))))))) =>
                     zen.Rall abst_T 
                       (v_Vwd:(zen.term abst_T) =>
                        zen.triangle 
                          (focal.is_true 
                             (abst_equal v_Vwd 
                                (abst_constr (abst_prj_a v_Vwd) 
                                   (abst_prj_b v_Vwd))))) p2 
                       (v_Vnd:
                        (zen.proof 
                           (zen.triangle 
                              (focal.is_true 
                                 (abst_equal p2 
                                    (abst_constr (abst_prj_a p2) 
                                       (abst_prj_b p2)))))) =>
                        zen.Raxiom 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal p2 
                                   (abst_constr (abst_prj_a p2) 
                                      (abst_prj_b p2))))) v_Vnd v_Vrd) 
                       abst_unicite_2)))))) 
       (zen.nnpp 
          (zen.triangle 
             (focal.is_true 
                (abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p2))) 
          (v_Vkc:
           (zen.proof 
              (zen.not 
                 (zen.triangle 
                    (focal.is_true 
                       (abst_equal 
                          (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p2))))) =>
           zen.Rcut 
             (zen.and 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T 
                         (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1))))) 
             (v_Vlc:
              (zen.proof 
                 (zen.and 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1))) 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                p1)))))) =>
              zen.Rand 
                (zen.not 
                   (zen.triangle 
                      (zen.equal abst_T 
                         (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1))) 
                (zen.not 
                   (zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1)))) 
                (v_Vmc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (zen.equal abst_T 
                             (abst_constr (abst_prj_a p1) (abst_prj_b p1)) p1)))) =>
                 v_Vnc:
                 (zen.proof 
                    (zen.not 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                p1))))) =>
                 zen.Rall abst_T 
                   (v_Voc:(zen.term abst_T) =>
                    zen.triangle 
                      (focal.is_true 
                         (abst_equal 
                            (abst_constr (abst_prj_a v_Voc) 
                               (abst_prj_b v_Voc)) v_Voc))) p1 
                   (v_Vpc:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                p1)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                               p1))) v_Vpc v_Vnc) abst_unicite_1) v_Vlc) 
             (v_Vqc:
              (zen.proof 
                 (zen.not 
                    (zen.and 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal abst_T 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                p1))) 
                       (zen.not 
                          (zen.triangle 
                             (focal.is_true 
                                (abst_equal 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) p1))))))) =>
              zen.Rcut (zen.triangle (zen.equal abst_T p2 p2)) 
                (v_Vrc:(zen.proof (zen.triangle (zen.equal abst_T p2 p2))) =>
                 zen.Rsubst basics.bool__t 
                   (v_Vsc:(zen.term basics.bool__t) =>
                    zen.triangle (focal.is_true v_Vsc)) (abst_equal p1 p2) 
                   (abst_equal (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                      p2) 
                   (v_Vtc:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle 
                             (zen.equal basics.bool__t (abst_equal p1 p2) 
                                (abst_equal 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)) p2))))) =>
                    zen.Rsubst abst_T 
                      (v_Vuc:(zen.term abst_T) =>
                       zen.not 
                         (zen.triangle 
                            (zen.equal basics.bool__t (abst_equal v_Vuc p2) 
                               (abst_equal 
                                  (abst_constr (abst_prj_a p1) 
                                     (abst_prj_b p1)) p2)))) p1 
                      (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                      (v_Vvc:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal abst_T p1 
                                   (abst_constr (abst_prj_a p1) 
                                      (abst_prj_b p1)))))) =>
                       zen.Rnotand 
                         (zen.not 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_constr (abst_prj_a p1) 
                                     (abst_prj_b p1)) p1))) 
                         (zen.not 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)) p1)))) 
                         (v_Vwc:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) p1))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (zen.equal abst_T 
                                  (abst_constr (abst_prj_a p1) 
                                     (abst_prj_b p1)) p1)) 
                            (v_Vxc:
                             (zen.proof 
                                (zen.triangle 
                                   (zen.equal abst_T 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) p1))) =>
                             zen.Rcut 
                               (zen.triangle 
                                  (zen.equal abst_T 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)) 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)))) 
                               (v_Vyc:
                                (zen.proof 
                                   (zen.triangle 
                                      (zen.equal abst_T 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1))))) =>
                                zen.Rsubst abst_T 
                                  (v_Vzc:(zen.term abst_T) =>
                                   zen.triangle 
                                     (zen.equal abst_T v_Vzc 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)))) 
                                  (abst_constr (abst_prj_a p1) 
                                     (abst_prj_b p1)) p1 
                                  (v_Vmc:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (zen.equal abst_T 
                                               (abst_constr (abst_prj_a p1) 
                                                  (abst_prj_b p1)) p1)))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (zen.equal abst_T 
                                           (abst_constr (abst_prj_a p1) 
                                              (abst_prj_b p1)) p1)) v_Vxc 
                                     v_Vmc) 
                                  (v_Vad:
                                   (zen.proof 
                                      (zen.triangle 
                                         (zen.equal abst_T p1 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1))))) =>
                                   zen.Rsubst abst_T 
                                     (v_Vbd:(zen.term abst_T) =>
                                      zen.triangle 
                                        (zen.equal abst_T p1 v_Vbd)) 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)) 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)) 
                                     (v_Vcd:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal abst_T 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)))))) =>
                                      zen.Rnoteq abst_T 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)) v_Vcd) 
                                     (v_Vad:
                                      (zen.proof 
                                         (zen.triangle 
                                            (zen.equal abst_T p1 
                                               (abst_constr (abst_prj_a p1) 
                                                  (abst_prj_b p1))))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (zen.equal abst_T p1 
                                              (abst_constr (abst_prj_a p1) 
                                                 (abst_prj_b p1)))) v_Vad 
                                        v_Vvc) v_Vad) v_Vyc) 
                               (v_Vcd:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (zen.equal abst_T 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)))))) =>
                                zen.Rnoteq abst_T 
                                  (abst_constr (abst_prj_a p1) 
                                     (abst_prj_b p1)) v_Vcd)) v_Vwc) 
                         (v_Vdd:
                          (zen.proof 
                             (zen.not 
                                (zen.not 
                                   (zen.triangle 
                                      (focal.is_true 
                                         (abst_equal 
                                            (abst_constr (abst_prj_a p1) 
                                               (abst_prj_b p1)) p1)))))) =>
                          zen.Rnotnot 
                            (zen.triangle 
                               (focal.is_true 
                                  (abst_equal 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)) p1))) 
                            (v_Vpc:
                             (zen.proof 
                                (zen.triangle 
                                   (focal.is_true 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) p1)))) =>
                             zen.Rall abst_T 
                               (v_Ved:(zen.term abst_T) =>
                                zen.forall abst_T 
                                  (v_Vfd:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vgd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal v_Ved v_Vfd))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vfd v_Vgd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Ved v_Vgd))))))) 
                               (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                               (v_Vhd:
                                (zen.proof 
                                   (zen.forall abst_T 
                                      (v_Vfd:(zen.term abst_T) =>
                                       zen.forall abst_T 
                                         (v_Vgd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) 
                                                     v_Vfd))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal v_Vfd v_Vgd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        v_Vgd)))))))) =>
                                zen.Rall abst_T 
                                  (v_Vfd:(zen.term abst_T) =>
                                   zen.forall abst_T 
                                     (v_Vgd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) v_Vfd))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal v_Vfd v_Vgd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) v_Vgd)))))) 
                                  p1 
                                  (v_Vid:
                                   (zen.proof 
                                      (zen.forall abst_T 
                                         (v_Vgd:(zen.term abst_T) =>
                                          zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) p1))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p1 v_Vgd))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        v_Vgd))))))) =>
                                   zen.Rall abst_T 
                                     (v_Vgd:(zen.term abst_T) =>
                                      zen.imp 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) p1))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal p1 v_Vgd))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) v_Vgd))))) 
                                     p2 
                                     (v_Vjd:
                                      (zen.proof 
                                         (zen.imp 
                                            (zen.triangle 
                                               (focal.is_true 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) p1))) 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p1 p2))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        p2)))))) =>
                                      zen.Rimply 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) p1))) 
                                        (zen.imp 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal p1 p2))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) p2)))) 
                                        (v_Vnc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        p1))))) =>
                                         zen.Raxiom 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) p1))) 
                                           v_Vpc v_Vnc) 
                                        (v_Vkd:
                                         (zen.proof 
                                            (zen.imp 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal p1 p2))) 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        p2))))) =>
                                         zen.Rimply 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal p1 p2))) 
                                           (zen.triangle 
                                              (focal.is_true 
                                                 (abst_equal 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) p2))) 
                                           (v_Vld:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal p1 p2))))) =>
                                            zen.Raxiom 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal p1 p2))) H1 
                                              v_Vld) 
                                           (v_Vmd:
                                            (zen.proof 
                                               (zen.triangle 
                                                  (focal.is_true 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        p2)))) =>
                                            zen.Rsubst basics.bool__t 
                                              (v_Vsc:
                                               (zen.term basics.bool__t) =>
                                               zen.triangle 
                                                 (focal.is_true v_Vsc)) 
                                              (abst_equal 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) p2) 
                                              (abst_equal 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) p2) 
                                              (v_Vnd:
                                               (zen.proof 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal 
                                                           basics.bool__t 
                                                           (abst_equal 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1)) p2) 
                                                           (abst_equal 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1)) p2))))) =>
                                               zen.Rsubst abst_T 
                                                 (v_Vuc:(zen.term abst_T) =>
                                                  zen.not 
                                                    (zen.triangle 
                                                       (zen.equal 
                                                          basics.bool__t 
                                                          (abst_equal v_Vuc 
                                                             p2) 
                                                          (abst_equal 
                                                             (abst_constr 
                                                                (abst_prj_a 
                                                                   p1) 
                                                                (abst_prj_b 
                                                                   p1)) p2)))) 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) 
                                                 (v_Vcd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal abst_T 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1)) 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1)))))) =>
                                                  zen.Rnoteq abst_T 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) v_Vcd) 
                                                 (v_Vnd:
                                                  (zen.proof 
                                                     (zen.not 
                                                        (zen.triangle 
                                                           (zen.equal 
                                                              basics.bool__t 
                                                              (abst_equal 
                                                                 (abst_constr 
                                                                    (
                                                                    abst_prj_a 
                                                                    p1) 
                                                                    (
                                                                    abst_prj_b 
                                                                    p1)) p2) 
                                                              (abst_equal 
                                                                 (abst_constr 
                                                                    (
                                                                    abst_prj_a 
                                                                    p1) 
                                                                    (
                                                                    abst_prj_b 
                                                                    p1)) p2))))) =>
                                                  zen.Rsubst abst_T 
                                                    (v_Vod:
                                                     (zen.term abst_T) =>
                                                     zen.not 
                                                       (zen.triangle 
                                                          (zen.equal 
                                                             basics.bool__t 
                                                             (abst_equal 
                                                                (abst_constr 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p1)) 
                                                                v_Vod) 
                                                             (abst_equal 
                                                                (abst_constr 
                                                                   (abst_prj_a 
                                                                    p1) 
                                                                   (abst_prj_b 
                                                                    p1)) p2)))) 
                                                    p2 p2 
                                                    (v_Vpd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 abst_T p2 p2)))) =>
                                                     zen.Raxiom 
                                                       (zen.triangle 
                                                          (zen.equal abst_T 
                                                             p2 p2)) v_Vrc 
                                                       v_Vpd) 
                                                    (v_Vnd:
                                                     (zen.proof 
                                                        (zen.not 
                                                           (zen.triangle 
                                                              (zen.equal 
                                                                 basics.bool__t 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2) 
                                                                 (abst_equal 
                                                                    (
                                                                    abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2))))) =>
                                                     zen.Rnoteq 
                                                       basics.bool__t 
                                                       (abst_equal 
                                                          (abst_constr 
                                                             (abst_prj_a p1) 
                                                             (abst_prj_b p1)) 
                                                          p2) v_Vnd) v_Vnd) 
                                                 v_Vnd) 
                                              (v_Vmd:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)) 
                                                           p2)))) =>
                                               zen.Raxiom 
                                                 (zen.triangle 
                                                    (focal.is_true 
                                                       (abst_equal 
                                                          (abst_constr 
                                                             (abst_prj_a p1) 
                                                             (abst_prj_b p1)) 
                                                          p2))) v_Vmd v_Vkc) 
                                              v_Vmd) v_Vkd) v_Vjd) v_Vid) 
                                  v_Vhd) abst_equal_transitive) v_Vdd) v_Vqc) 
                      (v_Vnd:
                       (zen.proof 
                          (zen.not 
                             (zen.triangle 
                                (zen.equal basics.bool__t 
                                   (abst_equal 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) p2) 
                                   (abst_equal 
                                      (abst_constr (abst_prj_a p1) 
                                         (abst_prj_b p1)) p2))))) =>
                       zen.Rsubst abst_T 
                         (v_Vod:(zen.term abst_T) =>
                          zen.not 
                            (zen.triangle 
                               (zen.equal basics.bool__t 
                                  (abst_equal 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)) v_Vod) 
                                  (abst_equal 
                                     (abst_constr (abst_prj_a p1) 
                                        (abst_prj_b p1)) p2)))) p2 p2 
                         (v_Vpd:
                          (zen.proof 
                             (zen.not (zen.triangle (zen.equal abst_T p2 p2)))) =>
                          zen.Raxiom (zen.triangle (zen.equal abst_T p2 p2)) 
                            v_Vrc v_Vpd) 
                         (v_Vnd:
                          (zen.proof 
                             (zen.not 
                                (zen.triangle 
                                   (zen.equal basics.bool__t 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) p2) 
                                      (abst_equal 
                                         (abst_constr (abst_prj_a p1) 
                                            (abst_prj_b p1)) p2))))) =>
                          zen.Rnoteq basics.bool__t 
                            (abst_equal 
                               (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                               p2) v_Vnd) v_Vnd) v_Vtc) 
                   (v_Vmd:
                    (zen.proof 
                       (zen.triangle 
                          (focal.is_true 
                             (abst_equal 
                                (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                                p2)))) =>
                    zen.Raxiom 
                      (zen.triangle 
                         (focal.is_true 
                            (abst_equal 
                               (abst_constr (abst_prj_a p1) (abst_prj_b p1)) 
                               p2))) v_Vmd v_Vkc) H1) 
                (v_Vpd:
                 (zen.proof (zen.not (zen.triangle (zen.equal abst_T p2 p2)))) =>
                 zen.Rcut (zen.triangle (focal.is_true (abst_equal p2 p2))) 
                   (v_Vqd:
                    (zen.proof 
                       (zen.triangle (focal.is_true (abst_equal p2 p2)))) =>
                    zen.Rall abst_T 
                      (v_Ved:(zen.term abst_T) =>
                       zen.forall abst_T 
                         (v_Vfd:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vgd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal v_Ved v_Vfd))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vfd v_Vgd))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Ved v_Vgd))))))) 
                      p1 
                      (v_Vrd:
                       (zen.proof 
                          (zen.forall abst_T 
                             (v_Vfd:(zen.term abst_T) =>
                              zen.forall abst_T 
                                (v_Vgd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal p1 v_Vfd))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true 
                                            (abst_equal v_Vfd v_Vgd))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p1 v_Vgd)))))))) =>
                       zen.Rall abst_T 
                         (v_Vfd:(zen.term abst_T) =>
                          zen.forall abst_T 
                            (v_Vgd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal p1 v_Vfd))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal v_Vfd v_Vgd))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal p1 v_Vgd)))))) 
                         p2 
                         (v_Vsd:
                          (zen.proof 
                             (zen.forall abst_T 
                                (v_Vgd:(zen.term abst_T) =>
                                 zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal p1 p2))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p2 v_Vgd))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p1 v_Vgd))))))) =>
                          zen.Rall abst_T 
                            (v_Vgd:(zen.term abst_T) =>
                             zen.imp 
                               (zen.triangle 
                                  (focal.is_true (abst_equal p1 p2))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal p2 v_Vgd))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal p1 v_Vgd))))) 
                            p2 
                            (v_Vtd:
                             (zen.proof 
                                (zen.imp 
                                   (zen.triangle 
                                      (focal.is_true (abst_equal p1 p2))) 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p2 p2))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p1 p2)))))) =>
                             zen.Rimply 
                               (zen.triangle 
                                  (focal.is_true (abst_equal p1 p2))) 
                               (zen.imp 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal p2 p2))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal p1 p2)))) 
                               (v_Vld:
                                (zen.proof 
                                   (zen.not 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p1 p2))))) =>
                                zen.Raxiom 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal p1 p2))) H1 
                                  v_Vld) 
                               (v_Vud:
                                (zen.proof 
                                   (zen.imp 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p2 p2))) 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p1 p2))))) =>
                                zen.Rimply 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal p2 p2))) 
                                  (zen.triangle 
                                     (focal.is_true (abst_equal p1 p2))) 
                                  (v_Vvd:
                                   (zen.proof 
                                      (zen.not 
                                         (zen.triangle 
                                            (focal.is_true (abst_equal p2 p2))))) =>
                                   zen.Raxiom 
                                     (zen.triangle 
                                        (focal.is_true (abst_equal p2 p2))) 
                                     v_Vqd v_Vvd) 
                                  (H1:
                                   (zen.proof 
                                      (zen.triangle 
                                         (focal.is_true (abst_equal p1 p2)))) =>
                                   zen.Rsubst basics.bool__t 
                                     (v_Vsc:(zen.term basics.bool__t) =>
                                      zen.triangle (focal.is_true v_Vsc)) 
                                     (abst_equal p1 p2) 
                                     (abst_equal 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)) p2) 
                                     (v_Vtc:
                                      (zen.proof 
                                         (zen.not 
                                            (zen.triangle 
                                               (zen.equal basics.bool__t 
                                                  (abst_equal p1 p2) 
                                                  (abst_equal 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)) p2))))) =>
                                      zen.Rsubst abst_T 
                                        (v_Vuc:(zen.term abst_T) =>
                                         zen.not 
                                           (zen.triangle 
                                              (zen.equal basics.bool__t 
                                                 (abst_equal v_Vuc p2) 
                                                 (abst_equal 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) p2)))) 
                                        p1 
                                        (abst_constr (abst_prj_a p1) 
                                           (abst_prj_b p1)) 
                                        (v_Vvc:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal abst_T p1 
                                                     (abst_constr 
                                                        (abst_prj_a p1) 
                                                        (abst_prj_b p1)))))) =>
                                         zen.Rnotand 
                                           (zen.not 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) p1))) 
                                           (zen.not 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1)) p1)))) 
                                           (v_Vwc:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (zen.equal abst_T 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)) 
                                                           p1))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (zen.equal abst_T 
                                                    (abst_constr 
                                                       (abst_prj_a p1) 
                                                       (abst_prj_b p1)) p1)) 
                                              (v_Vxc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (zen.equal abst_T 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        p1))) =>
                                               zen.Reqsym abst_T 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) p1 
                                                 v_Vxc v_Vvc) v_Vwc) 
                                           (v_Vdd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.not 
                                                     (zen.triangle 
                                                        (focal.is_true 
                                                           (abst_equal 
                                                              (abst_constr 
                                                                 (abst_prj_a 
                                                                    p1) 
                                                                 (abst_prj_b 
                                                                    p1)) p1)))))) =>
                                            zen.Rnotnot 
                                              (zen.triangle 
                                                 (focal.is_true 
                                                    (abst_equal 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1)) p1))) 
                                              (v_Vpc:
                                               (zen.proof 
                                                  (zen.triangle 
                                                     (focal.is_true 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)) 
                                                           p1)))) =>
                                               zen.Rall abst_T 
                                                 (v_Ved:(zen.term abst_T) =>
                                                  zen.forall abst_T 
                                                    (v_Vfd:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vgd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   v_Ved 
                                                                   v_Vfd))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Ved 
                                                                    v_Vgd))))))) 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) 
                                                 (v_Vhd:
                                                  (zen.proof 
                                                     (zen.forall abst_T 
                                                        (v_Vfd:
                                                         (zen.term abst_T) =>
                                                         zen.forall abst_T 
                                                           (v_Vgd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vfd))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vgd)))))))) =>
                                                  zen.Rall abst_T 
                                                    (v_Vfd:
                                                     (zen.term abst_T) =>
                                                     zen.forall abst_T 
                                                       (v_Vgd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                   v_Vfd))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    v_Vfd 
                                                                    v_Vgd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vgd)))))) 
                                                    p1 
                                                    (v_Vid:
                                                     (zen.proof 
                                                        (zen.forall abst_T 
                                                           (v_Vgd:
                                                            (zen.term abst_T) =>
                                                            zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p1))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    p1 v_Vgd))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vgd))))))) =>
                                                     zen.Rall abst_T 
                                                       (v_Vgd:
                                                        (zen.term abst_T) =>
                                                        zen.imp 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p1))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    p1 v_Vgd))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) 
                                                                    v_Vgd))))) 
                                                       p2 
                                                       (v_Vjd:
                                                        (zen.proof 
                                                           (zen.imp 
                                                              (zen.triangle 
                                                                 (focal.is_true 
                                                                    (
                                                                    abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p1))) 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    p1 p2))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2)))))) =>
                                                        zen.Rimply 
                                                          (zen.triangle 
                                                             (focal.is_true 
                                                                (abst_equal 
                                                                   (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p1))) 
                                                          (zen.imp 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    p1 p2))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2)))) 
                                                          (v_Vnc:
                                                           (zen.proof 
                                                              (zen.not 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p1))))) =>
                                                           zen.Raxiom 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p1))) 
                                                             v_Vpc v_Vnc) 
                                                          (v_Vkd:
                                                           (zen.proof 
                                                              (zen.imp 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    p1 p2))) 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2))))) =>
                                                           zen.Rimply 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    p1 p2))) 
                                                             (zen.triangle 
                                                                (focal.is_true 
                                                                   (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2))) 
                                                             (v_Vld:
                                                              (zen.proof 
                                                                 (zen.not 
                                                                    (
                                                                    zen.triangle 
                                                                    (focal.is_true 
                                                                    (abst_equal 
                                                                    p1 p2))))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    p1 p2))) 
                                                                H1 v_Vld) 
                                                             (v_Vmd:
                                                              (zen.proof 
                                                                 (zen.triangle 
                                                                    (
                                                                    focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2)))) =>
                                                              zen.Raxiom 
                                                                (zen.triangle 
                                                                   (focal.is_true 
                                                                    (abst_equal 
                                                                    (abst_constr 
                                                                    (abst_prj_a 
                                                                    p1) 
                                                                    (abst_prj_b 
                                                                    p1)) p2))) 
                                                                v_Vmd v_Vkc) 
                                                             v_Vkd) v_Vjd) 
                                                       v_Vid) v_Vhd) 
                                                 abst_equal_transitive) v_Vdd) 
                                           v_Vqc) 
                                        (v_Vnd:
                                         (zen.proof 
                                            (zen.not 
                                               (zen.triangle 
                                                  (zen.equal basics.bool__t 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        p2) 
                                                     (abst_equal 
                                                        (abst_constr 
                                                           (abst_prj_a p1) 
                                                           (abst_prj_b p1)) 
                                                        p2))))) =>
                                         zen.Rsubst abst_T 
                                           (v_Vod:(zen.term abst_T) =>
                                            zen.not 
                                              (zen.triangle 
                                                 (zen.equal basics.bool__t 
                                                    (abst_equal 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1)) 
                                                       v_Vod) 
                                                    (abst_equal 
                                                       (abst_constr 
                                                          (abst_prj_a p1) 
                                                          (abst_prj_b p1)) p2)))) 
                                           p2 p2 
                                           (v_Vpd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal abst_T p2 p2)))) =>
                                            zen.Rnoteq abst_T p2 v_Vpd) 
                                           (v_Vnd:
                                            (zen.proof 
                                               (zen.not 
                                                  (zen.triangle 
                                                     (zen.equal 
                                                        basics.bool__t 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)) 
                                                           p2) 
                                                        (abst_equal 
                                                           (abst_constr 
                                                              (abst_prj_a p1) 
                                                              (abst_prj_b p1)) 
                                                           p2))))) =>
                                            zen.Rnoteq basics.bool__t 
                                              (abst_equal 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) p2) 
                                              v_Vnd) v_Vnd) v_Vtc) 
                                     (v_Vmd:
                                      (zen.proof 
                                         (zen.triangle 
                                            (focal.is_true 
                                               (abst_equal 
                                                  (abst_constr 
                                                     (abst_prj_a p1) 
                                                     (abst_prj_b p1)) p2)))) =>
                                      zen.Raxiom 
                                        (zen.triangle 
                                           (focal.is_true 
                                              (abst_equal 
                                                 (abst_constr 
                                                    (abst_prj_a p1) 
                                                    (abst_prj_b p1)) p2))) 
                                        v_Vmd v_Vkc) H1) v_Vud) v_Vtd) v_Vsd) 
                         v_Vrd) abst_equal_transitive) 
                   (v_Vvd:
                    (zen.proof 
                       (zen.not 
                          (zen.triangle (focal.is_true (abst_equal p2 p2))))) =>
                    zen.Rnoteq abst_T p2 v_Vpd)))))).

def Imp_pair__collection_create
  :=
  _p_S1_T:cc.uT =>
  _p_S2_T:cc.uT =>
  _p_S1_element:(cc.eT _p_S1_T) =>
  _p_S1_equal:((cc.eT _p_S1_T) -> (cc.eT _p_S1_T) -> cc.eT basics.bool__t) =>
  _p_S1_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) => dk_logic.ebP (_p_S1_equal x x)))) =>
  _p_S1_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (y:(cc.eT _p_S1_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S1_equal x y)) 
              (dk_logic.ebP (_p_S1_equal y x)))))) =>
  _p_S1_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S1_T 
        (x:(cc.eT _p_S1_T) =>
         dk_logic.forall _p_S1_T 
           (y:(cc.eT _p_S1_T) =>
            dk_logic.forall _p_S1_T 
              (z:(cc.eT _p_S1_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S1_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S1_equal y z)) 
                    (dk_logic.ebP (_p_S1_equal x z)))))))) =>
  _p_S2_element:(cc.eT _p_S2_T) =>
  _p_S2_equal:((cc.eT _p_S2_T) -> (cc.eT _p_S2_T) -> cc.eT basics.bool__t) =>
  _p_S2_equal_reflexive:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) => dk_logic.ebP (_p_S2_equal x x)))) =>
  _p_S2_equal_symmetric:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) =>
         dk_logic.forall _p_S2_T 
           (y:(cc.eT _p_S2_T) =>
            dk_logic.imp (dk_logic.ebP (_p_S2_equal x y)) 
              (dk_logic.ebP (_p_S2_equal y x)))))) =>
  _p_S2_equal_transitive:
  (dk_logic.eP 
     (dk_logic.forall _p_S2_T 
        (x:(cc.eT _p_S2_T) =>
         dk_logic.forall _p_S2_T 
           (y:(cc.eT _p_S2_T) =>
            dk_logic.forall _p_S2_T 
              (z:(cc.eT _p_S2_T) =>
               dk_logic.imp (dk_logic.ebP (_p_S2_equal x y)) 
                 (dk_logic.imp (dk_logic.ebP (_p_S2_equal y z)) 
                    (dk_logic.ebP (_p_S2_equal x z)))))))) =>
  Imp_pair__mk_record _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
    (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
    (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
    (basics.Basic_object__parse (dk_tuple.prod _p_S1_T _p_S2_T)) 
    (basics.Basic_object__print (dk_tuple.prod _p_S1_T _p_S2_T)) 
    (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T) 
    (Imp_pair__element _p_S1_T _p_S2_T _p_S1_element _p_S2_element 
       (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T)) 
    (sets.Setoid__different (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal)) 
    (Imp_pair__prj_a_is_first_of_pair _p_S1_T _p_S2_T _p_S1_equal 
       (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__prj_a _p_S1_T _p_S2_T)) 
    (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
       (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
    (Imp_pair__prj_b_is_snd_of_pair _p_S1_T _p_S2_T _p_S2_equal 
       (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
    (Imp_pair__unicite_1 _p_S1_T _p_S2_T (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
    (Imp_pair__unicite_2 _p_S1_T _p_S2_T (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
    (sets.Setoid__same_is_not_different (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal)) 
    (Imp_pair__equal_transitive _p_S1_T _p_S2_T _p_S1_equal 
       _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
       (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T) 
       (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
          (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T))) 
    (Imp_pair__def_equal1 _p_S1_T _p_S2_T _p_S1_equal _p_S1_equal_symmetric 
       _p_S1_equal_transitive _p_S2_equal _p_S2_equal_symmetric 
       _p_S2_equal_transitive (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T) 
       (Imp_pair__prj_a_is_first_of_pair _p_S1_T _p_S2_T _p_S1_equal 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T)) 
       (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
          (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
       (Imp_pair__prj_b_is_snd_of_pair _p_S1_T _p_S2_T _p_S2_equal 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T))) 
    (Imp_pair__equal_reflexive _p_S1_T _p_S2_T 
       (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T) 
       (Imp_pair__unicite_1 _p_S1_T _p_S2_T (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
       (Imp_pair__unicite_2 _p_S1_T _p_S2_T (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
       (Imp_pair__equal_transitive _p_S1_T _p_S2_T _p_S1_equal 
          _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
          (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)))) 
    (Imp_pair__equal_reflexive2 _p_S1_T _p_S2_T _p_S1_equal 
       _p_S1_equal_reflexive _p_S2_equal _p_S2_equal_reflexive 
       (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__def_equal1 _p_S1_T _p_S2_T _p_S1_equal 
          _p_S1_equal_symmetric _p_S1_equal_transitive _p_S2_equal 
          _p_S2_equal_symmetric _p_S2_equal_transitive 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__prj_a_is_first_of_pair _p_S1_T _p_S2_T _p_S1_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T)) 
          (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__prj_b_is_snd_of_pair _p_S1_T _p_S2_T _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)))) 
    (Imp_pair__equal_symmetric2 _p_S1_T _p_S2_T _p_S1_equal 
       _p_S1_equal_symmetric _p_S2_equal _p_S2_equal_symmetric 
       (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__def_equal1 _p_S1_T _p_S2_T _p_S1_equal 
          _p_S1_equal_symmetric _p_S1_equal_transitive _p_S2_equal 
          _p_S2_equal_symmetric _p_S2_equal_transitive 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__prj_a_is_first_of_pair _p_S1_T _p_S2_T _p_S1_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T)) 
          (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__prj_b_is_snd_of_pair _p_S1_T _p_S2_T _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)))) 
    (Imp_pair__equal_transitive2 _p_S1_T _p_S2_T _p_S1_equal 
       _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
       (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__def_equal1 _p_S1_T _p_S2_T _p_S1_equal 
          _p_S1_equal_symmetric _p_S1_equal_transitive _p_S2_equal 
          _p_S2_equal_symmetric _p_S2_equal_transitive 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__prj_a_is_first_of_pair _p_S1_T _p_S2_T _p_S1_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T)) 
          (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__prj_b_is_snd_of_pair _p_S1_T _p_S2_T _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)))) 
    (sets.Setoid__different_is_irreflexive (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (sets.Setoid__different (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal)) 
       (Imp_pair__equal_reflexive _p_S1_T _p_S2_T 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__unicite_1 _p_S1_T _p_S2_T 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__unicite_2 _p_S1_T _p_S2_T 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__equal_transitive _p_S1_T _p_S2_T _p_S1_equal 
             _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T) 
             (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                (Imp_pair__prj_b _p_S1_T _p_S2_T)))) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal))) 
    (Imp_pair__equal_symmetric _p_S1_T _p_S2_T 
       (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T) 
       (Imp_pair__unicite_1 _p_S1_T _p_S2_T (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
       (Imp_pair__unicite_2 _p_S1_T _p_S2_T (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
       (Imp_pair__equal_transitive _p_S1_T _p_S2_T _p_S1_equal 
          _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
          (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T))) 
       (Imp_pair__equal_symmetric2 _p_S1_T _p_S2_T _p_S1_equal 
          _p_S1_equal_symmetric _p_S2_equal _p_S2_equal_symmetric 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__def_equal1 _p_S1_T _p_S2_T _p_S1_equal 
             _p_S1_equal_symmetric _p_S1_equal_transitive _p_S2_equal 
             _p_S2_equal_symmetric _p_S2_equal_transitive 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T) 
             (Imp_pair__prj_a_is_first_of_pair _p_S1_T _p_S2_T _p_S1_equal 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__constr _p_S1_T _p_S2_T) 
                (Imp_pair__prj_a _p_S1_T _p_S2_T)) 
             (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
             (Imp_pair__prj_b_is_snd_of_pair _p_S1_T _p_S2_T _p_S2_equal 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__constr _p_S1_T _p_S2_T) 
                (Imp_pair__prj_b _p_S1_T _p_S2_T))))) 
    (sets.Setoid__different_is_complete (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (sets.Setoid__different (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal)) 
       (Imp_pair__equal_reflexive _p_S1_T _p_S2_T 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__unicite_1 _p_S1_T _p_S2_T 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__unicite_2 _p_S1_T _p_S2_T 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__equal_transitive _p_S1_T _p_S2_T _p_S1_equal 
             _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T) 
             (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                (Imp_pair__prj_b _p_S1_T _p_S2_T)))) 
       (Imp_pair__equal_symmetric _p_S1_T _p_S2_T 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__unicite_1 _p_S1_T _p_S2_T 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__unicite_2 _p_S1_T _p_S2_T 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__equal_transitive _p_S1_T _p_S2_T _p_S1_equal 
             _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T) 
             (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                (Imp_pair__prj_b _p_S1_T _p_S2_T))) 
          (Imp_pair__equal_symmetric2 _p_S1_T _p_S2_T _p_S1_equal 
             _p_S1_equal_symmetric _p_S2_equal _p_S2_equal_symmetric 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__def_equal1 _p_S1_T _p_S2_T _p_S1_equal 
                _p_S1_equal_symmetric _p_S1_equal_transitive _p_S2_equal 
                _p_S2_equal_symmetric _p_S2_equal_transitive 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__constr _p_S1_T _p_S2_T) 
                (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                (Imp_pair__prj_b _p_S1_T _p_S2_T) 
                (Imp_pair__prj_a_is_first_of_pair _p_S1_T _p_S2_T 
                   _p_S1_equal (dk_tuple.prod _p_S1_T _p_S2_T) 
                   (Imp_pair__constr _p_S1_T _p_S2_T) 
                   (Imp_pair__prj_a _p_S1_T _p_S2_T)) 
                (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
                   (dk_tuple.prod _p_S1_T _p_S2_T) 
                   (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                   (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                   (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
                (Imp_pair__prj_b_is_snd_of_pair _p_S1_T _p_S2_T _p_S2_equal 
                   (dk_tuple.prod _p_S1_T _p_S2_T) 
                   (Imp_pair__constr _p_S1_T _p_S2_T) 
                   (Imp_pair__prj_b _p_S1_T _p_S2_T))))) 
       (Imp_pair__equal_transitive _p_S1_T _p_S2_T _p_S1_equal 
          _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
          (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T))) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal))) 
    (sets.Setoid__different_is_symmetric (dk_tuple.prod _p_S1_T _p_S2_T) 
       (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
       (sets.Setoid__different (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal)) 
       (Imp_pair__equal_symmetric _p_S1_T _p_S2_T 
          (dk_tuple.prod _p_S1_T _p_S2_T) (Imp_pair__constr _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
          (Imp_pair__prj_a _p_S1_T _p_S2_T) 
          (Imp_pair__prj_b _p_S1_T _p_S2_T) 
          (Imp_pair__unicite_1 _p_S1_T _p_S2_T 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__unicite_2 _p_S1_T _p_S2_T 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
          (Imp_pair__equal_transitive _p_S1_T _p_S2_T _p_S1_equal 
             _p_S1_equal_transitive _p_S2_equal _p_S2_equal_transitive 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__prj_a _p_S1_T _p_S2_T) 
             (Imp_pair__prj_b _p_S1_T _p_S2_T) 
             (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                (Imp_pair__prj_b _p_S1_T _p_S2_T))) 
          (Imp_pair__equal_symmetric2 _p_S1_T _p_S2_T _p_S1_equal 
             _p_S1_equal_symmetric _p_S2_equal _p_S2_equal_symmetric 
             (dk_tuple.prod _p_S1_T _p_S2_T) 
             (Imp_pair__constr _p_S1_T _p_S2_T) 
             (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
             (Imp_pair__def_equal1 _p_S1_T _p_S2_T _p_S1_equal 
                _p_S1_equal_symmetric _p_S1_equal_transitive _p_S2_equal 
                _p_S2_equal_symmetric _p_S2_equal_transitive 
                (dk_tuple.prod _p_S1_T _p_S2_T) 
                (Imp_pair__constr _p_S1_T _p_S2_T) 
                (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                (Imp_pair__prj_b _p_S1_T _p_S2_T) 
                (Imp_pair__prj_a_is_first_of_pair _p_S1_T _p_S2_T 
                   _p_S1_equal (dk_tuple.prod _p_S1_T _p_S2_T) 
                   (Imp_pair__constr _p_S1_T _p_S2_T) 
                   (Imp_pair__prj_a _p_S1_T _p_S2_T)) 
                (Imp_pair__def_equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal 
                   (dk_tuple.prod _p_S1_T _p_S2_T) 
                   (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal) 
                   (Imp_pair__prj_a _p_S1_T _p_S2_T) 
                   (Imp_pair__prj_b _p_S1_T _p_S2_T)) 
                (Imp_pair__prj_b_is_snd_of_pair _p_S1_T _p_S2_T _p_S2_equal 
                   (dk_tuple.prod _p_S1_T _p_S2_T) 
                   (Imp_pair__constr _p_S1_T _p_S2_T) 
                   (Imp_pair__prj_b _p_S1_T _p_S2_T))))) 
       (sets.Setoid__same_is_not_different (dk_tuple.prod _p_S1_T _p_S2_T) 
          (Imp_pair__equal _p_S1_T _p_S2_T _p_S1_equal _p_S2_equal))).

