(; This file was automatically generated from Matita. ;)

#NAME matita_arithmetics_nat.

nat : cic.Univ univs.Type0.

O : cic.Term univs.Type0 matita_arithmetics_nat.nat.

S :
  __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
  cic.Term univs.Type0 matita_arithmetics_nat.nat.

def match_nat :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ return_sort) ->
      case_O : cic.Term return_sort (return_type matita_arithmetics_nat.O) ->
      case_S :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term return_sort (return_type (matita_arithmetics_nat.S __))) ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term return_sort (return_type z).

[ return_sort, return_type, case_O, case_S ]
  match_nat return_sort return_type case_O case_S matita_arithmetics_nat.O -->
  case_O.

[ return_sort, return_type, case_O, case_S, __ ]
  match_nat return_sort return_type case_O case_S
    (matita_arithmetics_nat.S __) -->
  case_S __.

def filter_nat :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term return_sort (return_type z).

[ return_sort, return_type, return ]
  filter_nat return_sort return_type return matita_arithmetics_nat.O -->
  return matita_arithmetics_nat.O.

[ __, return_sort, return_type, return ]
  filter_nat return_sort return_type return (matita_arithmetics_nat.S __) -->
  return (matita_arithmetics_nat.S __).

def nat_ind :
      Q_ :
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_368 : cic.Term cic.prop (Q_ x_366) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_366))) ->
      x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_365).

def nat_ind_body :
      Q_ :
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_368 : cic.Term cic.prop (Q_ x_366) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_366))) ->
      x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_365).

[ Q_, _H_O, _H_S, x_365 ] nat_ind Q_ _H_O _H_S x_365 -->
  matita_arithmetics_nat.filter_nat cic.prop
    (x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_365)
    (matita_arithmetics_nat.nat_ind_body Q_ _H_O _H_S) x_365.

[ Q_, _H_O, _H_S, x_365 ] nat_ind_body Q_ _H_O _H_S x_365 -->
  matita_arithmetics_nat.match_nat cic.prop Q_ _H_O
    (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_366 (matita_arithmetics_nat.nat_ind Q_ _H_O _H_S x_366))
    x_365.

def nat_rect_Type4 :
      Q_ :
        (_x_369 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type4) ->
      _H_O : cic.Term univs.Type4 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_370 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_372 : cic.Term univs.Type4 (Q_ x_370) ->
         cic.Term univs.Type4 (Q_ (matita_arithmetics_nat.S x_370))) ->
      x_369 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type4 (Q_ x_369).

def nat_rect_Type4_body :
      Q_ :
        (_x_369 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type4) ->
      _H_O : cic.Term univs.Type4 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_370 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_372 : cic.Term univs.Type4 (Q_ x_370) ->
         cic.Term univs.Type4 (Q_ (matita_arithmetics_nat.S x_370))) ->
      x_369 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type4 (Q_ x_369).

[ Q_, _H_O, _H_S, x_369 ] nat_rect_Type4 Q_ _H_O _H_S x_369 -->
  matita_arithmetics_nat.filter_nat univs.Type4
    (x_369 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_369)
    (matita_arithmetics_nat.nat_rect_Type4_body Q_ _H_O _H_S) x_369.

[ Q_, _H_O, _H_S, x_369 ] nat_rect_Type4_body Q_ _H_O _H_S x_369 -->
  matita_arithmetics_nat.match_nat univs.Type4 Q_ _H_O
    (x_370 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_370 (matita_arithmetics_nat.nat_rect_Type4 Q_ _H_O _H_S x_370))
    x_369.

def nat_rect_Type3 :
      Q_ :
        (_x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type3) ->
      _H_O : cic.Term univs.Type3 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_378 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_380 : cic.Term univs.Type3 (Q_ x_378) ->
         cic.Term univs.Type3 (Q_ (matita_arithmetics_nat.S x_378))) ->
      x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type3 (Q_ x_377).

def nat_rect_Type3_body :
      Q_ :
        (_x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type3) ->
      _H_O : cic.Term univs.Type3 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_378 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_380 : cic.Term univs.Type3 (Q_ x_378) ->
         cic.Term univs.Type3 (Q_ (matita_arithmetics_nat.S x_378))) ->
      x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type3 (Q_ x_377).

[ Q_, _H_O, _H_S, x_377 ] nat_rect_Type3 Q_ _H_O _H_S x_377 -->
  matita_arithmetics_nat.filter_nat univs.Type3
    (x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_377)
    (matita_arithmetics_nat.nat_rect_Type3_body Q_ _H_O _H_S) x_377.

[ Q_, _H_O, _H_S, x_377 ] nat_rect_Type3_body Q_ _H_O _H_S x_377 -->
  matita_arithmetics_nat.match_nat univs.Type3 Q_ _H_O
    (x_378 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_378 (matita_arithmetics_nat.nat_rect_Type3 Q_ _H_O _H_S x_378))
    x_377.

def nat_rect_Type2 :
      Q_ :
        (_x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type2) ->
      _H_O : cic.Term univs.Type2 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_382 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_384 : cic.Term univs.Type2 (Q_ x_382) ->
         cic.Term univs.Type2 (Q_ (matita_arithmetics_nat.S x_382))) ->
      x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type2 (Q_ x_381).

def nat_rect_Type2_body :
      Q_ :
        (_x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type2) ->
      _H_O : cic.Term univs.Type2 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_382 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_384 : cic.Term univs.Type2 (Q_ x_382) ->
         cic.Term univs.Type2 (Q_ (matita_arithmetics_nat.S x_382))) ->
      x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type2 (Q_ x_381).

[ Q_, _H_O, _H_S, x_381 ] nat_rect_Type2 Q_ _H_O _H_S x_381 -->
  matita_arithmetics_nat.filter_nat univs.Type2
    (x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_381)
    (matita_arithmetics_nat.nat_rect_Type2_body Q_ _H_O _H_S) x_381.

[ Q_, _H_O, _H_S, x_381 ] nat_rect_Type2_body Q_ _H_O _H_S x_381 -->
  matita_arithmetics_nat.match_nat univs.Type2 Q_ _H_O
    (x_382 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_382 (matita_arithmetics_nat.nat_rect_Type2 Q_ _H_O _H_S x_382))
    x_381.

def nat_rect_Type1 :
      Q_ :
        (_x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type1) ->
      _H_O : cic.Term univs.Type1 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_388 : cic.Term univs.Type1 (Q_ x_386) ->
         cic.Term univs.Type1 (Q_ (matita_arithmetics_nat.S x_386))) ->
      x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type1 (Q_ x_385).

def nat_rect_Type1_body :
      Q_ :
        (_x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type1) ->
      _H_O : cic.Term univs.Type1 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_388 : cic.Term univs.Type1 (Q_ x_386) ->
         cic.Term univs.Type1 (Q_ (matita_arithmetics_nat.S x_386))) ->
      x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type1 (Q_ x_385).

[ Q_, _H_O, _H_S, x_385 ] nat_rect_Type1 Q_ _H_O _H_S x_385 -->
  matita_arithmetics_nat.filter_nat univs.Type1
    (x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_385)
    (matita_arithmetics_nat.nat_rect_Type1_body Q_ _H_O _H_S) x_385.

[ Q_, _H_O, _H_S, x_385 ] nat_rect_Type1_body Q_ _H_O _H_S x_385 -->
  matita_arithmetics_nat.match_nat univs.Type1 Q_ _H_O
    (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_386 (matita_arithmetics_nat.nat_rect_Type1 Q_ _H_O _H_S x_386))
    x_385.

def nat_rect_Type0 :
      Q_ :
        (_x_389 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type0) ->
      _H_O : cic.Term univs.Type0 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_392 : cic.Term univs.Type0 (Q_ x_390) ->
         cic.Term univs.Type0 (Q_ (matita_arithmetics_nat.S x_390))) ->
      x_389 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 (Q_ x_389).

def nat_rect_Type0_body :
      Q_ :
        (_x_389 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type0) ->
      _H_O : cic.Term univs.Type0 (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_392 : cic.Term univs.Type0 (Q_ x_390) ->
         cic.Term univs.Type0 (Q_ (matita_arithmetics_nat.S x_390))) ->
      x_389 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 (Q_ x_389).

[ Q_, _H_O, _H_S, x_389 ] nat_rect_Type0 Q_ _H_O _H_S x_389 -->
  matita_arithmetics_nat.filter_nat univs.Type0
    (x_389 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_389)
    (matita_arithmetics_nat.nat_rect_Type0_body Q_ _H_O _H_S) x_389.

[ Q_, _H_O, _H_S, x_389 ] nat_rect_Type0_body Q_ _H_O _H_S x_389 -->
  matita_arithmetics_nat.match_nat univs.Type0 Q_ _H_O
    (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_390 (matita_arithmetics_nat.nat_rect_Type0 Q_ _H_O _H_S x_390))
    x_389.

def nat_rect_CProp4 :
      Q_ :
        (_x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_394 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_396 : cic.Term cic.prop (Q_ x_394) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_394))) ->
      x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_393).

def nat_rect_CProp4_body :
      Q_ :
        (_x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_394 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_396 : cic.Term cic.prop (Q_ x_394) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_394))) ->
      x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_393).

[ Q_, _H_O, _H_S, x_393 ] nat_rect_CProp4 Q_ _H_O _H_S x_393 -->
  matita_arithmetics_nat.filter_nat cic.prop
    (x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_393)
    (matita_arithmetics_nat.nat_rect_CProp4_body Q_ _H_O _H_S) x_393.

[ Q_, _H_O, _H_S, x_393 ] nat_rect_CProp4_body Q_ _H_O _H_S x_393 -->
  matita_arithmetics_nat.match_nat cic.prop Q_ _H_O
    (x_394 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_394 (matita_arithmetics_nat.nat_rect_CProp4 Q_ _H_O _H_S x_394))
    x_393.

def nat_rect_CProp3 :
      Q_ :
        (_x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_404 : cic.Term cic.prop (Q_ x_402) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_402))) ->
      x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_401).

def nat_rect_CProp3_body :
      Q_ :
        (_x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_404 : cic.Term cic.prop (Q_ x_402) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_402))) ->
      x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_401).

[ Q_, _H_O, _H_S, x_401 ] nat_rect_CProp3 Q_ _H_O _H_S x_401 -->
  matita_arithmetics_nat.filter_nat cic.prop
    (x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_401)
    (matita_arithmetics_nat.nat_rect_CProp3_body Q_ _H_O _H_S) x_401.

[ Q_, _H_O, _H_S, x_401 ] nat_rect_CProp3_body Q_ _H_O _H_S x_401 -->
  matita_arithmetics_nat.match_nat cic.prop Q_ _H_O
    (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_402 (matita_arithmetics_nat.nat_rect_CProp3 Q_ _H_O _H_S x_402))
    x_401.

def nat_rect_CProp2 :
      Q_ :
        (_x_405 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_406 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_408 : cic.Term cic.prop (Q_ x_406) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_406))) ->
      x_405 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_405).

def nat_rect_CProp2_body :
      Q_ :
        (_x_405 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_406 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_408 : cic.Term cic.prop (Q_ x_406) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_406))) ->
      x_405 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_405).

[ Q_, _H_O, _H_S, x_405 ] nat_rect_CProp2 Q_ _H_O _H_S x_405 -->
  matita_arithmetics_nat.filter_nat cic.prop
    (x_405 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_405)
    (matita_arithmetics_nat.nat_rect_CProp2_body Q_ _H_O _H_S) x_405.

[ Q_, _H_O, _H_S, x_405 ] nat_rect_CProp2_body Q_ _H_O _H_S x_405 -->
  matita_arithmetics_nat.match_nat cic.prop Q_ _H_O
    (x_406 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_406 (matita_arithmetics_nat.nat_rect_CProp2 Q_ _H_O _H_S x_406))
    x_405.

def nat_rect_CProp1 :
      Q_ :
        (_x_409 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_410 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_412 : cic.Term cic.prop (Q_ x_410) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_410))) ->
      x_409 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_409).

def nat_rect_CProp1_body :
      Q_ :
        (_x_409 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_410 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_412 : cic.Term cic.prop (Q_ x_410) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_410))) ->
      x_409 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_409).

[ Q_, _H_O, _H_S, x_409 ] nat_rect_CProp1 Q_ _H_O _H_S x_409 -->
  matita_arithmetics_nat.filter_nat cic.prop
    (x_409 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_409)
    (matita_arithmetics_nat.nat_rect_CProp1_body Q_ _H_O _H_S) x_409.

[ Q_, _H_O, _H_S, x_409 ] nat_rect_CProp1_body Q_ _H_O _H_S x_409 -->
  matita_arithmetics_nat.match_nat cic.prop Q_ _H_O
    (x_410 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_410 (matita_arithmetics_nat.nat_rect_CProp1 Q_ _H_O _H_S x_410))
    x_409.

def nat_rect_CProp0 :
      Q_ :
        (_x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_414 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_416 : cic.Term cic.prop (Q_ x_414) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_414))) ->
      x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_413).

def nat_rect_CProp0_body :
      Q_ :
        (_x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H_O : cic.Term cic.prop (Q_ matita_arithmetics_nat.O) ->
      _H_S :
        (x_414 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_416 : cic.Term cic.prop (Q_ x_414) ->
         cic.Term cic.prop (Q_ (matita_arithmetics_nat.S x_414))) ->
      x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (Q_ x_413).

[ Q_, _H_O, _H_S, x_413 ] nat_rect_CProp0 Q_ _H_O _H_S x_413 -->
  matita_arithmetics_nat.filter_nat cic.prop
    (x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat => Q_ x_413)
    (matita_arithmetics_nat.nat_rect_CProp0_body Q_ _H_O _H_S) x_413.

[ Q_, _H_O, _H_S, x_413 ] nat_rect_CProp0_body Q_ _H_O _H_S x_413 -->
  matita_arithmetics_nat.match_nat cic.prop Q_ _H_O
    (x_414 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     _H_S x_414 (matita_arithmetics_nat.nat_rect_CProp0 Q_ _H_O _H_S x_414))
    x_413.

def nat_inv_ind :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z653 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z654 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_368 :
           (_z654 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_366) ->
            cic.Term cic.prop (P x_366)) ->
         _z654 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_366)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_366))) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z653 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      H1 :
        (_z654 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_368 :
           (_z654 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_366) ->
            cic.Term cic.prop (P x_366)) ->
         _z654 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_366)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_366))) =>
      (Hcut :
         (_z654 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_ind
           (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_365)
              (_z654 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_365) =>
               P _x_365))
           H1 H2 Hterm).

def nat_inv_rect_Type4 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z659 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type4) ->
      _H1 :
        (_z660 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type4 (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_370 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_372 :
           (_z660 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_370) ->
            cic.Term univs.Type4 (P x_370)) ->
         _z660 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_370)) ->
         cic.Term univs.Type4 (P (matita_arithmetics_nat.S x_370))) ->
      cic.Term univs.Type4 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z659 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type4) =>
      H1 :
        (_z660 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type4 (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_370 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_372 :
           (_z660 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_370) ->
            cic.Term univs.Type4 (P x_370)) ->
         _z660 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_370)) ->
         cic.Term univs.Type4 (P (matita_arithmetics_nat.S x_370))) =>
      (Hcut :
         (_z660 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term univs.Type4 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_Type4
           (_x_369 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop univs.Type4
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_369)
              (_z660 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_369) =>
               P _x_369))
           H1 H2 Hterm).

def nat_inv_rect_Type3 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z665 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type3) ->
      _H1 :
        (_z666 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type3 (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_378 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_380 :
           (_z666 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_378) ->
            cic.Term univs.Type3 (P x_378)) ->
         _z666 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_378)) ->
         cic.Term univs.Type3 (P (matita_arithmetics_nat.S x_378))) ->
      cic.Term univs.Type3 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z665 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type3) =>
      H1 :
        (_z666 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type3 (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_378 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_380 :
           (_z666 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_378) ->
            cic.Term univs.Type3 (P x_378)) ->
         _z666 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_378)) ->
         cic.Term univs.Type3 (P (matita_arithmetics_nat.S x_378))) =>
      (Hcut :
         (_z666 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term univs.Type3 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_Type3
           (_x_377 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop univs.Type3
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_377)
              (_z666 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_377) =>
               P _x_377))
           H1 H2 Hterm).

def nat_inv_rect_Type2 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z671 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type2) ->
      _H1 :
        (_z672 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type2 (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_382 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_384 :
           (_z672 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_382) ->
            cic.Term univs.Type2 (P x_382)) ->
         _z672 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_382)) ->
         cic.Term univs.Type2 (P (matita_arithmetics_nat.S x_382))) ->
      cic.Term univs.Type2 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z671 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type2) =>
      H1 :
        (_z672 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type2 (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_382 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_384 :
           (_z672 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_382) ->
            cic.Term univs.Type2 (P x_382)) ->
         _z672 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_382)) ->
         cic.Term univs.Type2 (P (matita_arithmetics_nat.S x_382))) =>
      (Hcut :
         (_z672 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term univs.Type2 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_Type2
           (_x_381 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop univs.Type2
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_381)
              (_z672 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_381) =>
               P _x_381))
           H1 H2 Hterm).

def nat_inv_rect_Type1 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z677 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type1) ->
      _H1 :
        (_z678 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type1 (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_388 :
           (_z678 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_386) ->
            cic.Term univs.Type1 (P x_386)) ->
         _z678 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_386)) ->
         cic.Term univs.Type1 (P (matita_arithmetics_nat.S x_386))) ->
      cic.Term univs.Type1 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z677 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type1) =>
      H1 :
        (_z678 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type1 (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_386 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_388 :
           (_z678 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_386) ->
            cic.Term univs.Type1 (P x_386)) ->
         _z678 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_386)) ->
         cic.Term univs.Type1 (P (matita_arithmetics_nat.S x_386))) =>
      (Hcut :
         (_z678 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term univs.Type1 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_Type1
           (_x_385 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop univs.Type1
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_385)
              (_z678 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_385) =>
               P _x_385))
           H1 H2 Hterm).

def nat_inv_rect_Type0 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z683 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type0) ->
      _H1 :
        (_z684 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type0 (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_392 :
           (_z684 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_390) ->
            cic.Term univs.Type0 (P x_390)) ->
         _z684 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_390)) ->
         cic.Term univs.Type0 (P (matita_arithmetics_nat.S x_390))) ->
      cic.Term univs.Type0 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z683 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ univs.Type0) =>
      H1 :
        (_z684 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term univs.Type0 (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_390 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_392 :
           (_z684 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_390) ->
            cic.Term univs.Type0 (P x_390)) ->
         _z684 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_390)) ->
         cic.Term univs.Type0 (P (matita_arithmetics_nat.S x_390))) =>
      (Hcut :
         (_z684 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term univs.Type0 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_Type0
           (_x_389 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_389)
              (_z684 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_389) =>
               P _x_389))
           H1 H2 Hterm).

def nat_inv_rect_CProp4 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z689 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z690 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_394 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_396 :
           (_z690 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_394) ->
            cic.Term cic.prop (P x_394)) ->
         _z690 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_394)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_394))) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z689 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      H1 :
        (_z690 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_394 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_396 :
           (_z690 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_394) ->
            cic.Term cic.prop (P x_394)) ->
         _z690 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_394)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_394))) =>
      (Hcut :
         (_z690 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_CProp4
           (_x_393 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_393)
              (_z690 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_393) =>
               P _x_393))
           H1 H2 Hterm).

def nat_inv_rect_CProp3 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z695 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z696 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_404 :
           (_z696 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_402) ->
            cic.Term cic.prop (P x_402)) ->
         _z696 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_402)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_402))) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z695 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      H1 :
        (_z696 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_402 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_404 :
           (_z696 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_402) ->
            cic.Term cic.prop (P x_402)) ->
         _z696 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_402)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_402))) =>
      (Hcut :
         (_z696 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_CProp3
           (_x_401 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_401)
              (_z696 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_401) =>
               P _x_401))
           H1 H2 Hterm).

def nat_inv_rect_CProp2 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z701 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z702 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_406 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_408 :
           (_z702 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_406) ->
            cic.Term cic.prop (P x_406)) ->
         _z702 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_406)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_406))) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z701 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      H1 :
        (_z702 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_406 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_408 :
           (_z702 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_406) ->
            cic.Term cic.prop (P x_406)) ->
         _z702 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_406)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_406))) =>
      (Hcut :
         (_z702 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_CProp2
           (_x_405 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_405)
              (_z702 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_405) =>
               P _x_405))
           H1 H2 Hterm).

def nat_inv_rect_CProp1 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z707 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z708 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_410 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_412 :
           (_z708 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_410) ->
            cic.Term cic.prop (P x_410)) ->
         _z708 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_410)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_410))) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z707 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      H1 :
        (_z708 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_410 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_412 :
           (_z708 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_410) ->
            cic.Term cic.prop (P x_410)) ->
         _z708 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_410)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_410))) =>
      (Hcut :
         (_z708 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_CProp1
           (_x_409 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_409)
              (_z708 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_409) =>
               P _x_409))
           H1 H2 Hterm).

def nat_inv_rect_CProp0 :
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (_z713 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z714 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) ->
      _H2 :
        (x_414 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_416 :
           (_z714 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_414) ->
            cic.Term cic.prop (P x_414)) ->
         _z714 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_414)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_414))) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (_z713 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      H1 :
        (_z714 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
      H2 :
        (x_414 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_416 :
           (_z714 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   Hterm x_414) ->
            cic.Term cic.prop (P x_414)) ->
         _z714 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                Hterm (matita_arithmetics_nat.S x_414)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S x_414))) =>
      (Hcut :
         (_z714 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
            Hterm))
        (matita_arithmetics_nat.nat_rect_CProp0
           (_x_413 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 Hterm _x_413)
              (_z714 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      Hterm _x_413) =>
               P _x_413))
           H1 H2 Hterm).

def nat_discr :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _e :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
             y) ->
      cic.Term univs.Type2
        (matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.univ univs.Type2)
           (matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1 P
                    (_z23 : cic.Term univs.Type1 P => P)))
              (u0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              y)
           (t0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              (u0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_basics_logic.R0 matita_arithmetics_nat.nat
                             t0)
                          u0)
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_basics_logic.R0
                                  matita_arithmetics_nat.nat t0)
                               u0) =>
                        P))
                    (_z24 :
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_basics_logic.R0
                                  matita_arithmetics_nat.nat t0)
                               u0) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              y)
           x)
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Deq :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
             y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
        (x_13 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_14 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x x_13) =>
         matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.univ univs.Type2)
           (matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1 P
                    (_z23 : cic.Term univs.Type1 P => P)))
              (u0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              x_13)
           (t0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              (u0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_basics_logic.R0 matita_arithmetics_nat.nat
                             t0)
                          u0)
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_basics_logic.R0
                                  matita_arithmetics_nat.nat t0)
                               u0) =>
                        P))
                    (_z24 :
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_basics_logic.R0
                                  matita_arithmetics_nat.nat t0)
                               u0) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              x_13)
           x)
        (matita_arithmetics_nat.match_nat univs.Type2
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
              (_0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.univ univs.Type2)
              (matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
                 (_0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.univ univs.Type2)
                 (cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1 P
                       (_z23 : cic.Term univs.Type1 P => P)))
                 (u0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
                 __)
              (t0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.match_nat (cic.succ univs.Type2)
                 (_0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.univ univs.Type2)
                 (cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
                 (u0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1
                       (cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_basics_logic.R0
                                matita_arithmetics_nat.nat t0)
                             u0)
                          (_e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_basics_logic.R0
                                     matita_arithmetics_nat.nat t0)
                                  u0) =>
                           P))
                       (_z24 :
                          (_e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_basics_logic.R0
                                     matita_arithmetics_nat.nat t0)
                                  u0) ->
                           cic.Term univs.Type1 P) =>
                        P)))
                 __)
              __)
           (P : cic.Univ univs.Type1 => DH : cic.Term univs.Type1 P => DH)
           (a0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            P : cic.Univ univs.Type1 =>
            DH :
              (_e0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_basics_logic.R0 matita_arithmetics_nat.nat a0)
                      a0) ->
               cic.Term univs.Type1 P) =>
            DH
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_logic.R0 matita_arithmetics_nat.nat a0)))
           x)
        y Deq.

def pred :
      _n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat univs.Type0
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => p) n.

def not_zero :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Univ cic.prop :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat (cic.type cic.z)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.univ cic.prop)
        matita_basics_logic.False
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.True)
        n.

le :
  _n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
  __ : cic.Term univs.Type0 matita_arithmetics_nat.nat -> cic.Univ cic.prop.

le_n :
  n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
  cic.Term cic.prop (matita_arithmetics_nat.le n n).

le_S :
  n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
  m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
  __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
  cic.Term cic.prop
    (matita_arithmetics_nat.le n (matita_arithmetics_nat.S m)).

def match_le :
      _n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      return_sort : cic.Sort ->
      return_type :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         z : cic.Term cic.prop (matita_arithmetics_nat.le _n __) ->
         cic.Univ return_sort) ->
      case_le_n :
        cic.Term return_sort
          (return_type _n (matita_arithmetics_nat.le_n _n)) ->
      case_le_S :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le _n m) ->
         cic.Term return_sort
           (return_type (matita_arithmetics_nat.S m)
              (matita_arithmetics_nat.le_S _n m __))) ->
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term cic.prop (matita_arithmetics_nat.le _n __) ->
      cic.Term return_sort (return_type __ z).

[ _n, return_sort, return_type, case_le_n, case_le_S ]
  match_le _n return_sort return_type case_le_n case_le_S (_n)
    (matita_arithmetics_nat.le_n _n) -->
  case_le_n.

[ _n, return_sort, return_type, case_le_n, case_le_S, m, __ ]
  match_le _n return_sort return_type case_le_n case_le_S
    (matita_arithmetics_nat.S m) (matita_arithmetics_nat.le_S _n m __) -->
  case_le_S m __.

def filter_le :
      _n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term cic.prop (matita_arithmetics_nat.le _n __) ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term cic.prop (matita_arithmetics_nat.le _n __) ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term cic.prop (matita_arithmetics_nat.le _n __) ->
      cic.Term return_sort (return_type z).

[ n, return_sort, return_type, return ]
  filter_le (n) (n) return_sort return_type return
    (matita_arithmetics_nat.le_n n) -->
  return (matita_arithmetics_nat.le_n n).

[ n, m, __, return_sort, return_type, return ]
  filter_le (n) (matita_arithmetics_nat.S m) return_sort return_type return
    (matita_arithmetics_nat.le_S n m __) -->
  return (matita_arithmetics_nat.le_S n m __).

def le_ind :
      _n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      Q_ :
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417) ->
         cic.Univ cic.prop) ->
      _H_le_n : cic.Term cic.prop (Q_ _n (matita_arithmetics_nat.le_n _n)) ->
      _H_le_S :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         x_419 : cic.Term cic.prop (matita_arithmetics_nat.le _n m) ->
         _x_421 : cic.Term cic.prop (Q_ m x_419) ->
         cic.Term cic.prop
           (Q_ (matita_arithmetics_nat.S m)
              (matita_arithmetics_nat.le_S _n m x_419))) ->
      x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417) ->
      cic.Term cic.prop (Q_ x_417 x_418).

def le_ind_body :
      _n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      Q_ :
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417) ->
         cic.Univ cic.prop) ->
      _H_le_n : cic.Term cic.prop (Q_ _n (matita_arithmetics_nat.le_n _n)) ->
      _H_le_S :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         x_419 : cic.Term cic.prop (matita_arithmetics_nat.le _n m) ->
         _x_421 : cic.Term cic.prop (Q_ m x_419) ->
         cic.Term cic.prop
           (Q_ (matita_arithmetics_nat.S m)
              (matita_arithmetics_nat.le_S _n m x_419))) ->
      x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417) ->
      cic.Term cic.prop (Q_ x_417 x_418).

[ _n, Q_, _H_le_n, _H_le_S, x_417, x_418 ]
  le_ind _n Q_ _H_le_n _H_le_S x_417 x_418 -->
  matita_arithmetics_nat.filter_le _n x_417 cic.prop
    (x_418 : cic.Term cic.prop (matita_arithmetics_nat.le _n x_417) =>
     Q_ x_417 x_418)
    (matita_arithmetics_nat.le_ind_body _n Q_ _H_le_n _H_le_S x_417) x_418.

[ _n, Q_, _H_le_n, _H_le_S, x_417, x_418 ]
  le_ind_body _n Q_ _H_le_n _H_le_S x_417 x_418 -->
  matita_arithmetics_nat.match_le _n cic.prop Q_ _H_le_n
    (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     x_419 : cic.Term cic.prop (matita_arithmetics_nat.le _n m) =>
     _H_le_S m x_419
       (matita_arithmetics_nat.le_ind _n Q_ _H_le_n _H_le_S m x_419))
    x_417 x_418.

def le_inv_ind :
      x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _Hterm : cic.Term cic.prop (matita_arithmetics_nat.le x1 x2) ->
      P :
        (_z724 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z725 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x2 x1) ->
         cic.Term cic.prop (P x1)) ->
      _H2 :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le x1 m) ->
         _x_421 :
           (_z725 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x2 m) ->
            cic.Term cic.prop (P m)) ->
         _z725 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x2 (matita_arithmetics_nat.S m)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S m))) ->
      cic.Term cic.prop (P x2) :=
      x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hterm : cic.Term cic.prop (matita_arithmetics_nat.le x1 x2) =>
      P :
        (_z724 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      H1 :
        (_z725 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x2 x1) ->
         cic.Term cic.prop (P x1)) =>
      H2 :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le x1 m) ->
         _x_421 :
           (_z725 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x2 m) ->
            cic.Term cic.prop (P m)) ->
         _z725 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x2 (matita_arithmetics_nat.S m)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S m))) =>
      (Hcut :
         (_z725 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 x2 x2) ->
          cic.Term cic.prop (P x2)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x2))
        (matita_arithmetics_nat.le_ind x1
           (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _x_418 :
              cic.Term cic.prop (matita_arithmetics_nat.le x1 x_417) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 x2 x_417)
              (_z725 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x2 x_417) =>
               P x_417))
           H1 H2 x2 Hterm).

def lt :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Univ cic.prop :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m.

def ge :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Univ cic.prop :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.le m n.

def gt :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Univ cic.prop :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.lt m n.

def increasing :
      _f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      cic.Univ cic.prop :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.lt (f n) (f (matita_arithmetics_nat.S n))).

def plus :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

def plus_body :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

[ __ ] plus __ -->
  matita_arithmetics_nat.filter_nat univs.Type0
    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_nat.nat))
    matita_arithmetics_nat.plus_body __.

[ __ ] plus_body __ -->
  m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
  matita_arithmetics_nat.match_nat univs.Type0
    (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    m
    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.S (matita_arithmetics_nat.plus p m))
    __.

def times :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

def times_body :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

[ __ ] times __ -->
  matita_arithmetics_nat.filter_nat univs.Type0
    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_nat.nat))
    matita_arithmetics_nat.times_body __.

[ __ ] times_body __ -->
  m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
  matita_arithmetics_nat.match_nat univs.Type0
    (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.plus m (matita_arithmetics_nat.times p m))
    __.

def minus :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

def minus_body :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

[ __ ] minus __ -->
  matita_arithmetics_nat.filter_nat univs.Type0
    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_nat.nat))
    matita_arithmetics_nat.minus_body __.

[ __ ] minus_body __ -->
  m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
  matita_arithmetics_nat.match_nat univs.Type0
    (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    matita_arithmetics_nat.O
    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.match_nat univs.Type0
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_nat.nat)
       (matita_arithmetics_nat.S p)
       (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_nat.minus p q)
       m)
    __.

def nat_case :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      __ :
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n matita_arithmetics_nat.O) ->
         cic.Term cic.prop (P matita_arithmetics_nat.O)) ->
      __1 :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n (matita_arithmetics_nat.S m)) ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S m))) ->
      cic.Term cic.prop (P n) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 _x_365 matita_arithmetics_nat.O)
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      _x_365 matita_arithmetics_nat.O) =>
               P matita_arithmetics_nat.O))
           (__ :
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      _x_365 matita_arithmetics_nat.O) ->
               cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
            cic.prod cic.prop cic.prop
              (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                 (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       _x_365 (matita_arithmetics_nat.S m))
                    (__1 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            _x_365 (matita_arithmetics_nat.S m)) =>
                     P (matita_arithmetics_nat.S m))))
              (__1 :
                 (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  __1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         _x_365 (matita_arithmetics_nat.S m)) ->
                  cic.Term cic.prop (P (matita_arithmetics_nat.S m))) =>
               P _x_365)))
        (auto :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O matita_arithmetics_nat.O) ->
            cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
         auto' :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O (matita_arithmetics_nat.S m)) ->
            cic.Term cic.prop (P (matita_arithmetics_nat.S m))) =>
         auto
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (__ :
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x_366 matita_arithmetics_nat.O) ->
               cic.Term cic.prop (P matita_arithmetics_nat.O)) ->
            __1 :
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               __1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x_366 (matita_arithmetics_nat.S m)) ->
               cic.Term cic.prop (P (matita_arithmetics_nat.S m))) ->
            cic.Term cic.prop (P x_366)) =>
         auto :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S x_366) matita_arithmetics_nat.O) ->
            cic.Term cic.prop (P matita_arithmetics_nat.O)) =>
         auto' :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S x_366)
                   (matita_arithmetics_nat.S m)) ->
            cic.Term cic.prop (P (matita_arithmetics_nat.S m))) =>
         auto' x_366
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S x_366)))
        n.

def nat_elim2 :
      R :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      __ :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term cic.prop (R matita_arithmetics_nat.O n)) ->
      __1 :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term cic.prop
           (R (matita_arithmetics_nat.S n) matita_arithmetics_nat.O)) ->
      __2 :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __2 : cic.Term cic.prop (R n m) ->
         cic.Term cic.prop
           (R (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (R n m) :=
      R :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      ROn :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term cic.prop (R matita_arithmetics_nat.O n)) =>
      RSO :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term cic.prop
           (R (matita_arithmetics_nat.S n) matita_arithmetics_nat.O)) =>
      RSS :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (R n m) ->
         cic.Term cic.prop
           (R (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat => R _x_365 m))
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat => ROn m)
        (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Rn0m :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop (R n0 m)) =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            R (matita_arithmetics_nat.S n0) __)
           (RSO n0)
           (auto : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            RSS n0 auto (Rn0m auto))
           m)
        n.

def le_gen :
      P :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
         cic.Term cic.prop (P i)) ->
      cic.Term cic.prop (P n) :=
      P :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
         cic.Term cic.prop (P i)) =>
      auto n (matita_arithmetics_nat.le_n n).

def pred_Sn :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n.

def injective_S :
      cic.Term cic.prop
        (matita_basics_relations.{|injective|} matita_arithmetics_nat.nat
           matita_arithmetics_nat.nat matita_arithmetics_nat.S)
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.S x) (matita_arithmetics_nat.S y)) =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x0 y)
              __))
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y)
        x
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.pred (matita_arithmetics_nat.S x))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  y x0)
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S y)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     y (matita_arithmetics_nat.pred x0))
                    __))
              (matita_arithmetics_nat.pred_Sn y) (matita_arithmetics_nat.S x)
              auto)
           x (matita_arithmetics_nat.pred_Sn x)).

def S_pred :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S (matita_arithmetics_nat.pred n)) n)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      matita_arithmetics_nat.match_le
        (matita_arithmetics_nat.S matita_arithmetics_nat.O) cic.prop
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) __) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S (matita_arithmetics_nat.pred __)) __)
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.S x)
                  (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_arithmetics_nat.pred
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_arithmetics_nat.pred_Sn matita_arithmetics_nat.O))
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) m) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.S x) (matita_arithmetics_nat.S m))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.pred_Sn m))
        n posn.

def plus_O_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.plus matita_arithmetics_nat.O n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n.

def plus_n_O :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.plus n matita_arithmetics_nat.O))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           _x_365
           (matita_arithmetics_nat.plus _x_365 matita_arithmetics_nat.O))
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x_366
                (matita_arithmetics_nat.plus x_366 matita_arithmetics_nat.O)) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           x_366
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.S x_366)
                  (matita_arithmetics_nat.S x))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S x_366))
           (matita_arithmetics_nat.plus x_366 matita_arithmetics_nat.O)
           _x_368)
        n.

def plus_n_Sm :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S (matita_arithmetics_nat.plus n m))
           (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S m)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.plus _x_365 m))
              (matita_arithmetics_nat.plus _x_365
                 (matita_arithmetics_nat.S m))))
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S m))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.plus x_366 m))
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.S m)))) =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x_366 (matita_arithmetics_nat.S m))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.S x)
                  (matita_arithmetics_nat.S
                     (matita_arithmetics_nat.plus x_366
                        (matita_arithmetics_nat.S m))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus x_366
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.S m)))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     x
                     (matita_arithmetics_nat.S
                        (matita_arithmetics_nat.plus x_366
                           (matita_arithmetics_nat.S m))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.S (matita_arithmetics_nat.S m)))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.plus x_366
                           (matita_arithmetics_nat.S
                              (matita_arithmetics_nat.S m)))
                        x)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus x_366
                       (matita_arithmetics_nat.S (matita_arithmetics_nat.S m))))
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.plus x_366
                       (matita_arithmetics_nat.S m)))
                 (_x_368 (matita_arithmetics_nat.S m)))
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.S m)))
              (_x_368 (matita_arithmetics_nat.S m)))
           (matita_arithmetics_nat.S (matita_arithmetics_nat.plus x_366 m))
           (_x_368 m))
        n.

def commutative_plus :
      cic.Term cic.prop
        (matita_basics_relations.commutative matita_arithmetics_nat.nat
           matita_arithmetics_nat.plus)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus _x_365 y)
              (matita_arithmetics_nat.plus y _x_365)))
        (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  y x)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y)
           (matita_arithmetics_nat.plus y matita_arithmetics_nat.O)
           (matita_arithmetics_nat.plus_n_O y))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x_366 y)
                 (matita_arithmetics_nat.plus y x_366))) =>
         y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x_366 (matita_arithmetics_nat.S y))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x
                  (matita_arithmetics_nat.plus y
                     (matita_arithmetics_nat.S x_366)))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus y (matita_arithmetics_nat.S x_366))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     x
                     (matita_arithmetics_nat.plus y
                        (matita_arithmetics_nat.S x_366)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus y
                    (matita_arithmetics_nat.S x_366)))
              (matita_arithmetics_nat.plus x_366 (matita_arithmetics_nat.S y))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.plus x_366 y))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        x
                        (matita_arithmetics_nat.plus y
                           (matita_arithmetics_nat.S x_366)))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus y x_366)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.S x)
                           (matita_arithmetics_nat.plus y
                              (matita_arithmetics_nat.S x_366)))
                          __))
                    (matita_arithmetics_nat.plus_n_Sm y x_366)
                    (matita_arithmetics_nat.plus x_366 y) (_x_368 y))
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.S y))
                 (matita_arithmetics_nat.plus_n_Sm x_366 y)))
           (matita_arithmetics_nat.S (matita_arithmetics_nat.plus x_366 y))
           (matita_arithmetics_nat.plus_n_Sm x_366 y))
        n.

def associative_plus :
      cic.Term cic.prop
        (matita_basics_relations.associative matita_arithmetics_nat.nat
           matita_arithmetics_nat.plus)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus _x_365 y) z)
                 (matita_arithmetics_nat.plus _x_365
                    (matita_arithmetics_nat.plus y z)))))
        (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus y z))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus x_366 y) z)
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.plus y z)))) =>
         y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x_366
              (matita_arithmetics_nat.plus y z))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.S x)
                  (matita_arithmetics_nat.S
                     (matita_arithmetics_nat.plus x_366
                        (matita_arithmetics_nat.plus y z))))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.plus y z))))
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus x_366 y)
              z)
           (_x_368 y z))
        n.

def assoc_plus1 :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus c (matita_arithmetics_nat.plus b a))
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus b c) a))
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus a b)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_nat.plus c x)
               (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus b c)
                  a))
              __))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus a (matita_arithmetics_nat.plus b c))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.plus c
                     (matita_arithmetics_nat.plus a b))
                  x)
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus a
                 (matita_arithmetics_nat.plus b c))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     x
                     (matita_arithmetics_nat.plus a
                        (matita_arithmetics_nat.plus b c)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus a
                    (matita_arithmetics_nat.plus b c)))
              (matita_arithmetics_nat.plus c
                 (matita_arithmetics_nat.plus a b))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus a b) c)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.plus c
                           (matita_arithmetics_nat.plus a b))
                        x)
                       __))
                 (matita_arithmetics_nat.commutative_plus c
                    (matita_arithmetics_nat.plus a b))
                 (matita_arithmetics_nat.plus a
                    (matita_arithmetics_nat.plus b c))
                 (matita_arithmetics_nat.associative_plus a b c)))
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus b c) a)
           (matita_arithmetics_nat.commutative_plus
              (matita_arithmetics_nat.plus b c) a))
        (matita_arithmetics_nat.plus b a)
        (matita_arithmetics_nat.commutative_plus b a).

def injective_plus_r :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_relations.{|injective|} matita_arithmetics_nat.nat
           matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.plus n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_relations.{|injective|} matita_arithmetics_nat.nat
           matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.plus _x_365 m))
        (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x y) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x x0)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x)
           y auto)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.plus x_366 x)
                   (matita_arithmetics_nat.plus x_366 y)) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 x y)) =>
         x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S
                   (matita_arithmetics_nat.plus x_366 x))
                (matita_arithmetics_nat.S
                   (matita_arithmetics_nat.plus x_366 y))) =>
         _x_368 x y
           (matita_arithmetics_nat.injective_S
              (matita_arithmetics_nat.plus x_366 x)
              (matita_arithmetics_nat.plus x_366 y)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.S x))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        x0
                        (matita_arithmetics_nat.S
                           (matita_arithmetics_nat.plus x_366 y)))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus x_366
                       (matita_arithmetics_nat.S y))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x0 :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus x_366
                              (matita_arithmetics_nat.S x))
                           x0)
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x_366
                          (matita_arithmetics_nat.S x))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x0 :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.plus x_366
                                 (matita_arithmetics_nat.S x))
                              x0)
                             __))
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus x_366
                             (matita_arithmetics_nat.S x)))
                       (matita_arithmetics_nat.plus x_366
                          (matita_arithmetics_nat.S y))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.plus x_366 y))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x0 :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_nat.plus x_366
                                    (matita_arithmetics_nat.S x))
                                 x0)
                                __))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.plus x_366 x))
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x0 :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2
                                       matita_arithmetics_nat.nat)
                                    x0
                                    (matita_arithmetics_nat.S
                                       (matita_arithmetics_nat.plus x_366 y)))
                                   __))
                             auto
                             (matita_arithmetics_nat.plus x_366
                                (matita_arithmetics_nat.S x))
                             (matita_arithmetics_nat.plus_n_Sm x_366 x))
                          (matita_arithmetics_nat.plus x_366
                             (matita_arithmetics_nat.S y))
                          (matita_arithmetics_nat.plus_n_Sm x_366 y)))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.plus x_366 y))
                    (matita_arithmetics_nat.plus_n_Sm x_366 y))
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.plus x_366 x))
                 (matita_arithmetics_nat.plus_n_Sm x_366 x))))
        n.

def injective_plus_l :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_relations.{|injective|} matita_arithmetics_nat.nat
           matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.plus m n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.plus x n)
             (matita_arithmetics_nat.plus y n)) =>
      matita_arithmetics_nat.injective_plus_r n x y
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus n y)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x0 (matita_arithmetics_nat.plus n y))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus n y))
           (matita_arithmetics_nat.plus n x)
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus y n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.plus n x) x0)
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x n)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        x0 (matita_arithmetics_nat.plus y n))
                       __))
                 auto (matita_arithmetics_nat.plus n x)
                 (matita_arithmetics_nat.commutative_plus x n))
              (matita_arithmetics_nat.plus n y)
              (matita_arithmetics_nat.commutative_plus y n))).

def times_Sn_m :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus m (matita_arithmetics_nat.times n m))
           (matita_arithmetics_nat.times (matita_arithmetics_nat.S n) m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus m (matita_arithmetics_nat.times n m)).

def times_O_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (matita_arithmetics_nat.times matita_arithmetics_nat.O n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O.

def times_n_O :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (matita_arithmetics_nat.times n matita_arithmetics_nat.O))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (matita_arithmetics_nat.times _x_365 matita_arithmetics_nat.O))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  matita_arithmetics_nat.O x)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.times matita_arithmetics_nat.O
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.times_O_n matita_arithmetics_nat.O))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                (matita_arithmetics_nat.times x_366 matita_arithmetics_nat.O)) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus matita_arithmetics_nat.O
              (matita_arithmetics_nat.times x_366 matita_arithmetics_nat.O))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  matita_arithmetics_nat.O x)
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     matita_arithmetics_nat.O
                     (matita_arithmetics_nat.plus matita_arithmetics_nat.O x))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        matita_arithmetics_nat.O x)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                    matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.plus_O_n matita_arithmetics_nat.O))
              (matita_arithmetics_nat.times x_366 matita_arithmetics_nat.O)
              _x_368)
           (matita_arithmetics_nat.times (matita_arithmetics_nat.S x_366)
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.times_Sn_m x_366 matita_arithmetics_nat.O))
        n.

def times_n_Sm :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus n (matita_arithmetics_nat.times n m))
           (matita_arithmetics_nat.times n (matita_arithmetics_nat.S m)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus _x_365
                 (matita_arithmetics_nat.times _x_365 m))
              (matita_arithmetics_nat.times _x_365
                 (matita_arithmetics_nat.S m))))
        (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.times x_366 m))
                 (matita_arithmetics_nat.times x_366
                    (matita_arithmetics_nat.S m)))) =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x_366
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.times x_366 m))))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x
                  (matita_arithmetics_nat.S
                     (matita_arithmetics_nat.plus m
                        (matita_arithmetics_nat.times x_366
                           (matita_arithmetics_nat.S m)))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus m
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.times x_366 m)))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.plus x_366 x)
                     (matita_arithmetics_nat.S
                        (matita_arithmetics_nat.plus m
                           (matita_arithmetics_nat.times x_366
                              (matita_arithmetics_nat.S m)))))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.times x_366 m))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.plus x_366
                           (matita_arithmetics_nat.plus m
                              (matita_arithmetics_nat.S
                                 (matita_arithmetics_nat.times x_366 m))))
                        (matita_arithmetics_nat.S
                           (matita_arithmetics_nat.plus m x)))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus x_366
                       (matita_arithmetics_nat.plus m
                          (matita_arithmetics_nat.times x_366 m)))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus x_366
                              (matita_arithmetics_nat.plus m
                                 (matita_arithmetics_nat.S
                                    (matita_arithmetics_nat.times x_366 m))))
                           (matita_arithmetics_nat.S x))
                          __))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x_366
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.times x_366 m))))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.plus x_366
                                 (matita_arithmetics_nat.plus m
                                    (matita_arithmetics_nat.S
                                       (matita_arithmetics_nat.times x_366 m))))
                              x)
                             __))
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus m
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.times x_366 m)))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_nat.plus x_366
                                    (matita_arithmetics_nat.plus m
                                       (matita_arithmetics_nat.S
                                          (matita_arithmetics_nat.times x_366
                                             m))))
                                 (matita_arithmetics_nat.plus x_366 x))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus x_366
                                (matita_arithmetics_nat.plus m
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.times x_366 m)))))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.times x_366 m)))
                          (matita_arithmetics_nat.plus_n_Sm m
                             (matita_arithmetics_nat.times x_366 m)))
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.plus x_366
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.times x_366 m))))
                       (matita_arithmetics_nat.plus_n_Sm x_366
                          (matita_arithmetics_nat.plus m
                             (matita_arithmetics_nat.times x_366 m))))
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.plus x_366
                          (matita_arithmetics_nat.times x_366 m)))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.plus x_366 m)
                          (matita_arithmetics_nat.times x_366 m))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.plus m
                                 (matita_arithmetics_nat.plus x_366
                                    (matita_arithmetics_nat.times x_366 m)))
                              x)
                             __))
                       (matita_arithmetics_nat.assoc_plus1
                          (matita_arithmetics_nat.times x_366 m) x_366 m)
                       (matita_arithmetics_nat.plus x_366
                          (matita_arithmetics_nat.plus m
                             (matita_arithmetics_nat.times x_366 m)))
                       (matita_arithmetics_nat.associative_plus x_366 m
                          (matita_arithmetics_nat.times x_366 m))))
                 (matita_arithmetics_nat.times x_366
                    (matita_arithmetics_nat.S m))
                 (_x_368 m))
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.times x_366 m)))
              (matita_arithmetics_nat.plus_n_Sm m
                 (matita_arithmetics_nat.times x_366 m)))
           (matita_arithmetics_nat.S
              (matita_arithmetics_nat.plus x_366
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.times x_366 m))))
           (matita_arithmetics_nat.plus_n_Sm x_366
              (matita_arithmetics_nat.plus m
                 (matita_arithmetics_nat.times x_366 m))))
        n.

def commutative_times :
      cic.Term cic.prop
        (matita_basics_relations.commutative matita_arithmetics_nat.nat
           matita_arithmetics_nat.times)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times _x_365 y)
              (matita_arithmetics_nat.times y _x_365)))
        (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  matita_arithmetics_nat.O x)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.times y matita_arithmetics_nat.O)
           (matita_arithmetics_nat.times_n_O y))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times x_366 y)
                 (matita_arithmetics_nat.times y x_366))) =>
         y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus y
              (matita_arithmetics_nat.times y x_366))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.plus y
                     (matita_arithmetics_nat.times x_366 y))
                  x)
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times x_366 y)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.plus y
                        (matita_arithmetics_nat.times x_366 y))
                     (matita_arithmetics_nat.plus y x))
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus y
                    (matita_arithmetics_nat.times x_366 y)))
              (matita_arithmetics_nat.times y x_366) (_x_368 y))
           (matita_arithmetics_nat.times y (matita_arithmetics_nat.S x_366))
           (matita_arithmetics_nat.times_n_Sm y x_366))
        n.

def distributive_times_plus :
      cic.Term cic.prop
        (matita_basics_relations.distributive matita_arithmetics_nat.nat
           matita_arithmetics_nat.times matita_arithmetics_nat.plus)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times _x_365
                    (matita_arithmetics_nat.plus y z))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.times _x_365 y)
                    (matita_arithmetics_nat.times _x_365 z)))))
        (_y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times x_366
                    (matita_arithmetics_nat.plus y z))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.times x_366 y)
                    (matita_arithmetics_nat.times x_366 z)))) =>
         y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus y
              (matita_arithmetics_nat.plus z
                 (matita_arithmetics_nat.times x_366
                    (matita_arithmetics_nat.plus y z))))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x
                  (matita_arithmetics_nat.plus
                     (matita_arithmetics_nat.plus y
                        (matita_arithmetics_nat.times x_366 y))
                     (matita_arithmetics_nat.plus z
                        (matita_arithmetics_nat.times x_366 z))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus y
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.times x_366 y)
                    (matita_arithmetics_nat.plus z
                       (matita_arithmetics_nat.times x_366 z))))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.plus y
                        (matita_arithmetics_nat.plus z
                           (matita_arithmetics_nat.times x_366
                              (matita_arithmetics_nat.plus y z))))
                     x)
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus z
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times x_366 y)
                       (matita_arithmetics_nat.times x_366 z)))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.plus y
                           (matita_arithmetics_nat.plus z
                              (matita_arithmetics_nat.times x_366
                                 (matita_arithmetics_nat.plus y z))))
                        (matita_arithmetics_nat.plus y x))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times x_366
                       (matita_arithmetics_nat.plus y z))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus y
                              (matita_arithmetics_nat.plus z
                                 (matita_arithmetics_nat.times x_366
                                    (matita_arithmetics_nat.plus y z))))
                           (matita_arithmetics_nat.plus y
                              (matita_arithmetics_nat.plus z x)))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus y
                          (matita_arithmetics_nat.plus z
                             (matita_arithmetics_nat.times x_366
                                (matita_arithmetics_nat.plus y z)))))
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times x_366 y)
                       (matita_arithmetics_nat.times x_366 z))
                    (_x_368 y z))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.times x_366 y)
                    (matita_arithmetics_nat.plus z
                       (matita_arithmetics_nat.times x_366 z)))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.plus z
                          (matita_arithmetics_nat.times x_366 y))
                       (matita_arithmetics_nat.times x_366 z))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus
                              (matita_arithmetics_nat.times x_366 y)
                              (matita_arithmetics_nat.plus z
                                 (matita_arithmetics_nat.times x_366 z)))
                           x)
                          __))
                    (matita_arithmetics_nat.assoc_plus1
                       (matita_arithmetics_nat.times x_366 z) z
                       (matita_arithmetics_nat.times x_366 y))
                    (matita_arithmetics_nat.plus z
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.times x_366 y)
                          (matita_arithmetics_nat.times x_366 z)))
                    (matita_arithmetics_nat.associative_plus z
                       (matita_arithmetics_nat.times x_366 y)
                       (matita_arithmetics_nat.times x_366 z))))
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.plus y
                    (matita_arithmetics_nat.times x_366 y))
                 (matita_arithmetics_nat.plus z
                    (matita_arithmetics_nat.times x_366 z)))
              (matita_arithmetics_nat.associative_plus y
                 (matita_arithmetics_nat.times x_366 y)
                 (matita_arithmetics_nat.plus z
                    (matita_arithmetics_nat.times x_366 z))))
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus y z)
              (matita_arithmetics_nat.times x_366
                 (matita_arithmetics_nat.plus y z)))
           (matita_arithmetics_nat.associative_plus y z
              (matita_arithmetics_nat.times x_366
                 (matita_arithmetics_nat.plus y z))))
        n.

def distributive_times_plus_r :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times (matita_arithmetics_nat.plus b c) a)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.times b a)
              (matita_arithmetics_nat.times c a)))
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times a (matita_arithmetics_nat.plus b c))
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x
               (matita_arithmetics_nat.plus
                  (matita_arithmetics_nat.times b a)
                  (matita_arithmetics_nat.times c a)))
              __))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times a b)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.times a
                     (matita_arithmetics_nat.plus b c))
                  (matita_arithmetics_nat.plus x
                     (matita_arithmetics_nat.times c a)))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times a c)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.times a
                        (matita_arithmetics_nat.plus b c))
                     (matita_arithmetics_nat.plus
                        (matita_arithmetics_nat.times a b) x))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times a
                    (matita_arithmetics_nat.plus b c))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.times a
                           (matita_arithmetics_nat.plus b c))
                        x)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.plus b c)))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.times a b)
                    (matita_arithmetics_nat.times a c))
                 (matita_arithmetics_nat.distributive_times_plus a b c))
              (matita_arithmetics_nat.times c a)
              (matita_arithmetics_nat.commutative_times c a))
           (matita_arithmetics_nat.times b a)
           (matita_arithmetics_nat.commutative_times b a))
        (matita_arithmetics_nat.times (matita_arithmetics_nat.plus b c) a)
        (matita_arithmetics_nat.commutative_times
           (matita_arithmetics_nat.plus b c) a).

def associative_times :
      cic.Term cic.prop
        (matita_basics_relations.associative matita_arithmetics_nat.nat
           matita_arithmetics_nat.times)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.times _x_365 y) z)
                 (matita_arithmetics_nat.times _x_365
                    (matita_arithmetics_nat.times y z)))))
        (_y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.times x_366 y) z)
                 (matita_arithmetics_nat.times x_366
                    (matita_arithmetics_nat.times y z)))) =>
         y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.times y z)
              (matita_arithmetics_nat.times x_366
                 (matita_arithmetics_nat.times y z)))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x
                  (matita_arithmetics_nat.plus
                     (matita_arithmetics_nat.times y z)
                     (matita_arithmetics_nat.times x_366
                        (matita_arithmetics_nat.times y z))))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.times y z)
                 (matita_arithmetics_nat.times x_366
                    (matita_arithmetics_nat.times y z))))
           (matita_arithmetics_nat.times
              (matita_arithmetics_nat.plus y
                 (matita_arithmetics_nat.times x_366 y))
              z)
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.times x_366 y) z)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.times
                        (matita_arithmetics_nat.plus y
                           (matita_arithmetics_nat.times x_366 y))
                        z)
                     (matita_arithmetics_nat.plus
                        (matita_arithmetics_nat.times y z) x))
                    __))
              (matita_arithmetics_nat.distributive_times_plus_r z y
                 (matita_arithmetics_nat.times x_366 y))
              (matita_arithmetics_nat.times x_366
                 (matita_arithmetics_nat.times y z))
              (_x_368 y z)))
        n.

def times_times :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times x (matita_arithmetics_nat.times y z))
           (matita_arithmetics_nat.times y (matita_arithmetics_nat.times x z)))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times y (matita_arithmetics_nat.times x z))
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x0
               (matita_arithmetics_nat.times y
                  (matita_arithmetics_nat.times x z)))
              __))
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times y (matita_arithmetics_nat.times x z)))
        (matita_arithmetics_nat.times x (matita_arithmetics_nat.times y z))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times (matita_arithmetics_nat.times x y) z)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x0
                  (matita_arithmetics_nat.times y
                     (matita_arithmetics_nat.times x z)))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times y x)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.times x0 z)
                     (matita_arithmetics_nat.times y
                        (matita_arithmetics_nat.times x z)))
                    __))
              (matita_arithmetics_nat.associative_times y x z)
              (matita_arithmetics_nat.times x y)
              (matita_arithmetics_nat.commutative_times y x))
           (matita_arithmetics_nat.times x (matita_arithmetics_nat.times y z))
           (matita_arithmetics_nat.associative_times x y z)).

def times_n_1 :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.times n
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus n
           (matita_arithmetics_nat.times n matita_arithmetics_nat.O))
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               n x)
              __))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  n (matita_arithmetics_nat.plus n x))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     n x)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n)
              (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
              (matita_arithmetics_nat.plus_n_O n))
           (matita_arithmetics_nat.times n matita_arithmetics_nat.O)
           (matita_arithmetics_nat.times_n_O n))
        (matita_arithmetics_nat.times n
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
        (matita_arithmetics_nat.times_n_Sm n matita_arithmetics_nat.O).

def minus_S_S :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.minus n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.minus (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.S m)).

def minus_O_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (matita_arithmetics_nat.minus matita_arithmetics_nat.O n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (matita_arithmetics_nat.minus matita_arithmetics_nat.O __))
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
        (auto : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
        n.

def minus_n_O :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.minus n matita_arithmetics_nat.O))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) __
           (matita_arithmetics_nat.minus __ matita_arithmetics_nat.O))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  matita_arithmetics_nat.O x)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus matita_arithmetics_nat.O
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus_O_n matita_arithmetics_nat.O))
        (auto : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S auto))
        n.

def minus_n_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O (matita_arithmetics_nat.minus n n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (matita_arithmetics_nat.minus _x_365 _x_365))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  matita_arithmetics_nat.O x)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus matita_arithmetics_nat.O
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus_O_n matita_arithmetics_nat.O))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                (matita_arithmetics_nat.minus x_366 x_366)) =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus x_366 x_366)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  matita_arithmetics_nat.O x)
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     matita_arithmetics_nat.O x)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O)
              (matita_arithmetics_nat.minus x_366 x_366) _x_368)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.S x_366)
              (matita_arithmetics_nat.S x_366))
           (matita_arithmetics_nat.minus_S_S x_366 x_366))
        n.

def minus_Sn_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.S n) n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.S _x_365)
              _x_365))
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                (matita_arithmetics_nat.match_nat univs.Type0
                   (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S x_366)
                   (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.minus x_366 q)
                   x_366)) =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.match_nat univs.Type0
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S x_366)
              (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.minus x_366 q)
              x_366)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x
                  (matita_arithmetics_nat.match_nat univs.Type0
                     (__1 :
                        cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.S x_366)
                     (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.minus x_366 q)
                     x_366))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.match_nat univs.Type0
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S x_366)
                 (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.minus x_366 q)
                 x_366))
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) _x_368)
        n.

def eq_minus_S_pred :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.pred (matita_arithmetics_nat.minus n m)))
      :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus __ (matita_arithmetics_nat.S _0))
           (matita_arithmetics_nat.pred (matita_arithmetics_nat.minus __ _0)))
        (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x n)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n)
           (matita_arithmetics_nat.minus n matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus_n_O n))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m))
                (matita_arithmetics_nat.match_nat univs.Type0
                   (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O
                   (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => p)
                   (matita_arithmetics_nat.minus n m))) =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.match_nat univs.Type0
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => p)
              (matita_arithmetics_nat.minus n m))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x
                  (matita_arithmetics_nat.match_nat univs.Type0
                     (_0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_arithmetics_nat.nat)
                     matita_arithmetics_nat.O
                     (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      p)
                     (matita_arithmetics_nat.minus n m)))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.match_nat univs.Type0
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O
                 (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => p)
                 (matita_arithmetics_nat.minus n m)))
           (matita_arithmetics_nat.minus n (matita_arithmetics_nat.S m)) auto).

def let_clause_73 :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      x134 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      x135 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      x136 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x134
              (matita_arithmetics_nat.plus x135 x136))
           (matita_arithmetics_nat.plus x135
              (matita_arithmetics_nat.plus x134 x136)))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x134 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x135 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x136 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus x135 x134)
           x136)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_nat.plus x134
                  (matita_arithmetics_nat.plus x135 x136))
               x0)
              __))
        (matita_arithmetics_nat.assoc_plus1 x136 x135 x134)
        (matita_arithmetics_nat.plus x135
           (matita_arithmetics_nat.plus x134 x136))
        (matita_arithmetics_nat.associative_plus x135 x134 x136).

def plus_plus_comm_23 :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus x y) z)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus x z) y))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus z (matita_arithmetics_nat.plus x y))
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x0
               (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus x z)
                  y))
              __))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x (matita_arithmetics_nat.plus z y))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x0
                  (matita_arithmetics_nat.plus
                     (matita_arithmetics_nat.plus x z) y))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus y z)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.plus x x0)
                     (matita_arithmetics_nat.plus
                        (matita_arithmetics_nat.plus x z) y))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus y
                    (matita_arithmetics_nat.plus x z))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.plus x
                           (matita_arithmetics_nat.plus y z))
                        x0)
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus x
                       (matita_arithmetics_nat.plus y z))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x0 :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus x
                              (matita_arithmetics_nat.plus y z))
                           x0)
                          __))
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x
                          (matita_arithmetics_nat.plus y z)))
                    (matita_arithmetics_nat.plus y
                       (matita_arithmetics_nat.plus x z))
                    (matita_arithmetics_nat.let_clause_73 x y z y x z))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus x z) y)
                 (matita_arithmetics_nat.commutative_plus
                    (matita_arithmetics_nat.plus x z) y))
              (matita_arithmetics_nat.plus z y)
              (matita_arithmetics_nat.commutative_plus z y))
           (matita_arithmetics_nat.plus z (matita_arithmetics_nat.plus x y))
           (matita_arithmetics_nat.let_clause_73 x y z z x y))
        (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus x y) z)
        (matita_arithmetics_nat.commutative_plus
           (matita_arithmetics_nat.plus x y) z).

def discr_plus_xy_minus_xz :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.plus x y)
             (matita_arithmetics_nat.minus x z)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
           matita_arithmetics_nat.O)
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus _x_365 y)
                    (matita_arithmetics_nat.minus _x_365 z))
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus _x_365 y)
                         (matita_arithmetics_nat.minus _x_365 z)) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    y matita_arithmetics_nat.O))))
        (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.plus matita_arithmetics_nat.O y)
                (matita_arithmetics_nat.minus matita_arithmetics_nat.O z)) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  y x0)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y)
           matita_arithmetics_nat.O
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus matita_arithmetics_nat.O z)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     y x0)
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus y matita_arithmetics_nat.O)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        x0
                        (matita_arithmetics_nat.minus
                           matita_arithmetics_nat.O z))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O y)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x0 :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           x0
                           (matita_arithmetics_nat.minus
                              matita_arithmetics_nat.O z))
                          __))
                    auto
                    (matita_arithmetics_nat.plus y matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.commutative_plus
                       matita_arithmetics_nat.O y))
                 y (matita_arithmetics_nat.plus_n_O y))
              matita_arithmetics_nat.O (matita_arithmetics_nat.minus_O_n z)))
        (x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         IHx :
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.plus x0 y)
                   (matita_arithmetics_nat.minus x0 z)) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 y matita_arithmetics_nat.O)) =>
         _clearme : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.S x0) y)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.S x0) __))
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.S x0) y)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.S x0) __)) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    y matita_arithmetics_nat.O)))
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            H :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S
                      (matita_arithmetics_nat.plus x0 y))
                   (matita_arithmetics_nat.S x0)) =>
            IHx matita_arithmetics_nat.O y
              (matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 x0
                 (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         x0 x_1) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus x0 y) x_1)
                 (matita_arithmetics_nat.injective_S
                    (matita_arithmetics_nat.plus x0 y) x0
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x0
                          (matita_arithmetics_nat.S y))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x1 :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              x1 (matita_arithmetics_nat.S x0))
                             __))
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S x0)
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x1 :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 x1 (matita_arithmetics_nat.S x0))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S x0))
                          (matita_arithmetics_nat.plus x0
                             (matita_arithmetics_nat.S y))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.plus x0 y))
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x1 :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2
                                       matita_arithmetics_nat.nat)
                                    x1 (matita_arithmetics_nat.S x0))
                                   __))
                             H
                             (matita_arithmetics_nat.plus x0
                                (matita_arithmetics_nat.S y))
                             (matita_arithmetics_nat.plus_n_Sm x0 y)))
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.plus x0 y))
                       (matita_arithmetics_nat.plus_n_Sm x0 y)))
                 (matita_arithmetics_nat.minus x0 matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.minus_n_O x0)))
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus x0 (matita_arithmetics_nat.S y))
              (x1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x1
                      (matita_arithmetics_nat.plus x0
                         (matita_arithmetics_nat.S y))) =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    x1 (matita_arithmetics_nat.minus x0 z))
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         x1 (matita_arithmetics_nat.minus x0 z)) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    y matita_arithmetics_nat.O))
              (H :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.plus x0
                         (matita_arithmetics_nat.S y))
                      (matita_arithmetics_nat.minus x0 z)) =>
               matita_arithmetics_nat.nat_discr (matita_arithmetics_nat.S y)
                 matita_arithmetics_nat.O
                 (IHx z (matita_arithmetics_nat.S y) H)
                 (cic.lift cic.prop univs.Type1
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       y matita_arithmetics_nat.O)))
              (matita_arithmetics_nat.S (matita_arithmetics_nat.plus x0 y))
              (matita_arithmetics_nat.plus_n_Sm x0 y))
           _clearme)
        x.

def not_eq_S :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m)) ->
      cic.Term cic.prop
        (matita_basics_logic.Not
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m)) =>
      matita_basics_logic.not_to_not
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)
        (auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x m)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m)
           n
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     m x)
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S m)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        m (matita_arithmetics_nat.pred x))
                       __))
                 (matita_arithmetics_nat.pred_Sn m)
                 (matita_arithmetics_nat.S n) auto')
              n (matita_arithmetics_nat.pred_Sn n)))
        auto.

def not_eq_O_S :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.Not
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O (matita_arithmetics_nat.S n)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.nmk
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O (matita_arithmetics_nat.S n))
        (eqOS :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O (matita_arithmetics_nat.S n)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S n)
           (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x (matita_arithmetics_nat.S n)) =>
            matita_arithmetics_nat.not_zero x)
           matita_basics_logic.I matita_arithmetics_nat.O eqOS).

def not_eq_n_Sn :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.Not
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (matita_arithmetics_nat.S n)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.Not
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              _x_365 (matita_arithmetics_nat.S _x_365)))
        (matita_arithmetics_nat.not_eq_O_S matita_arithmetics_nat.O)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x_366 (matita_arithmetics_nat.S x_366))) =>
         matita_arithmetics_nat.not_eq_S x_366
           (matita_arithmetics_nat.S x_366) _x_368)
        n.

def lt_to_not_zero :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m) ->
      cic.Term cic.prop (matita_arithmetics_nat.not_zero m) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hlt : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      matita_arithmetics_nat.le_ind (matita_arithmetics_nat.S n)
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) x_417) =>
         matita_arithmetics_nat.not_zero x_417)
        matita_basics_logic.I
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m0) =>
         _x_421 : cic.Term cic.prop (matita_arithmetics_nat.not_zero m0) =>
         matita_basics_logic.I)
        m Hlt.

def le_S_S :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.S m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_arithmetics_nat.le_ind n
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le n x_417) =>
         matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.S x_417))
        (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S n))
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le n m0) =>
         _x_421 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m0)) =>
         matita_arithmetics_nat.le_S (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.S m0) _x_421)
        m lenm.

def le_O_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le matita_arithmetics_nat.O n)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (matita_arithmetics_nat.le matita_arithmetics_nat.O)
        (matita_arithmetics_nat.le_n matita_arithmetics_nat.O)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le matita_arithmetics_nat.O x_366) =>
         matita_arithmetics_nat.le_S matita_arithmetics_nat.O x_366 _x_368)
        n.

def le_n_Sn :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le n (matita_arithmetics_nat.S n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.le_S n n (matita_arithmetics_nat.le_n n).

def transitive_le :
      cic.Term cic.prop
        (matita_basics_relations.transitive matita_arithmetics_nat.nat
           matita_arithmetics_nat.le)
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      leab : cic.Term cic.prop (matita_arithmetics_nat.le a b) =>
      lebc : cic.Term cic.prop (matita_arithmetics_nat.le b c) =>
      matita_arithmetics_nat.le_ind b
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le b x_417) =>
         matita_arithmetics_nat.le a x_417)
        leab
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le b m) =>
         _x_421 : cic.Term cic.prop (matita_arithmetics_nat.le a m) =>
         matita_arithmetics_nat.le_S a m _x_421)
        c lebc.

def le_pred_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.pred n) n)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le (matita_arithmetics_nat.pred _x_365)
           _x_365)
        (matita_arithmetics_nat.le_n
           (matita_arithmetics_nat.pred matita_arithmetics_nat.O))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.pred x_366)
                x_366) =>
         matita_arithmetics_nat.le_n_Sn
           (matita_arithmetics_nat.pred (matita_arithmetics_nat.S x_366)))
        n.

def monotonic_pred :
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.le matita_arithmetics_nat.pred)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_arithmetics_nat.le_ind n
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le n x_417) =>
         matita_arithmetics_nat.le (matita_arithmetics_nat.pred n)
           (matita_arithmetics_nat.pred x_417))
        (matita_arithmetics_nat.le_n (matita_arithmetics_nat.pred n))
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le n m0) =>
         _x_421 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.pred n)
                (matita_arithmetics_nat.pred m0)) =>
         matita_arithmetics_nat.transitive_le (matita_arithmetics_nat.pred n)
           n (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m0))
           (matita_arithmetics_nat.le_pred_n n) _x_419)
        m lenm.

def le_S_S_to_le :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
             (matita_arithmetics_nat.S m)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le n m) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
             (matita_arithmetics_nat.S m)) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
              (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))))
        (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.le n m))
        (matita_arithmetics_nat.monotonic_pred (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.S m) auto)
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le x
                        (matita_arithmetics_nat.pred
                           (matita_arithmetics_nat.S m))))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le n m)))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le n x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le n m)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le n m)))
              (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))
              (matita_arithmetics_nat.pred_Sn m))
           (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
           (matita_arithmetics_nat.pred_Sn n)).

def monotonic_le_plus_r :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.le
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.plus n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop (matita_arithmetics_nat.le a b)
           (__ : cic.Term cic.prop (matita_arithmetics_nat.le a b) =>
            matita_arithmetics_nat.le (matita_arithmetics_nat.plus _x_365 a)
              (matita_arithmetics_nat.plus _x_365 b)))
        (auto : cic.Term cic.prop (matita_arithmetics_nat.le a b) => auto)
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         H :
           (__ : cic.Term cic.prop (matita_arithmetics_nat.le a b) ->
            cic.Term cic.prop
              (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m a)
                 (matita_arithmetics_nat.plus m b))) =>
         leab : cic.Term cic.prop (matita_arithmetics_nat.le a b) =>
         matita_arithmetics_nat.le_S_S (matita_arithmetics_nat.plus m a)
           (matita_arithmetics_nat.plus m b) (H leab))
        n.

def monotonic_le_plus_l :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.le
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.plus n m))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.le x y) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m x)
              (matita_arithmetics_nat.plus m y)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x m)
              (matita_arithmetics_nat.plus y m)))
        (matita_arithmetics_nat.monotonic_le_plus_r m x y auto)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus m x)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le
                        (matita_arithmetics_nat.plus m x)
                        (matita_arithmetics_nat.plus m y)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le x0
                        (matita_arithmetics_nat.plus y m))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus m y)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.plus m x)
                           (matita_arithmetics_nat.plus m y)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.plus m x) x0)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.plus m x)
                       (matita_arithmetics_nat.plus m y))))
              (matita_arithmetics_nat.plus y m)
              (matita_arithmetics_nat.commutative_plus y m))
           (matita_arithmetics_nat.plus x m)
           (matita_arithmetics_nat.commutative_plus x m)).

def le_plus :
      n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n1 n2) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le m1 m2) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1)
           (matita_arithmetics_nat.plus n2 m2))
      :=
      n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      len : cic.Term cic.prop (matita_arithmetics_nat.le n1 n2) =>
      lem : cic.Term cic.prop (matita_arithmetics_nat.le m1 m2) =>
      matita_arithmetics_nat.transitive_le
        (matita_arithmetics_nat.plus n1 m1)
        (matita_arithmetics_nat.plus n1 m2)
        (matita_arithmetics_nat.plus n2 m2)
        (matita_arithmetics_nat.monotonic_le_plus_r n1 m1 m2 lem)
        (matita_arithmetics_nat.monotonic_le_plus_l m2 n1 n2 len).

def le_plus_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le m (matita_arithmetics_nat.plus n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.plus matita_arithmetics_nat.O m)
              (matita_arithmetics_nat.plus n m)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le m (matita_arithmetics_nat.plus n m)))
        (matita_arithmetics_nat.monotonic_le_plus_l m
           matita_arithmetics_nat.O n (matita_arithmetics_nat.le_O_n n))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le x
                        (matita_arithmetics_nat.plus n m)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le m
                        (matita_arithmetics_nat.plus n m))))
                 __))
           (matita_basics_logic.refl
              (cic.lift (cic.succ univs.Type0) univs.Type2
                 (cic.univ univs.Type0))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le m
                    (matita_arithmetics_nat.plus n m))))
           (matita_arithmetics_nat.plus matita_arithmetics_nat.O m)
           (matita_arithmetics_nat.plus_O_n m)).

def le_plus_a :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus a m))
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.plus matita_arithmetics_nat.O n)
              (matita_arithmetics_nat.plus a m)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus a m)))
        (matita_arithmetics_nat.le_plus matita_arithmetics_nat.O a n m
           (matita_arithmetics_nat.le_O_n a) auto)
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le x
                        (matita_arithmetics_nat.plus a m)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le n
                        (matita_arithmetics_nat.plus a m))))
                 __))
           (matita_basics_logic.refl
              (cic.lift (cic.succ univs.Type0) univs.Type2
                 (cic.univ univs.Type0))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le n
                    (matita_arithmetics_nat.plus a m))))
           (matita_arithmetics_nat.plus matita_arithmetics_nat.O n)
           (matita_arithmetics_nat.plus_O_n n)).

def le_plus_b :
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n b) m) ->
      cic.Term cic.prop (matita_arithmetics_nat.le n m) :=
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n b) m) =>
      matita_arithmetics_nat.transitive_le n
        (matita_arithmetics_nat.plus n b) m
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus b n)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus n b)))
           (matita_arithmetics_nat.le_plus_n b n)
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus b n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le n
                           (matita_arithmetics_nat.plus b n)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le n x)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le n
                       (matita_arithmetics_nat.plus b n))))
              (matita_arithmetics_nat.plus n b)
              (matita_arithmetics_nat.commutative_plus n b)))
        auto.

def le_plus_n_r :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le m (matita_arithmetics_nat.plus m n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le m (matita_arithmetics_nat.plus n m)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le m (matita_arithmetics_nat.plus m n)))
        (matita_arithmetics_nat.le_plus_n n m)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus n m)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le m
                        (matita_arithmetics_nat.plus n m)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le m x)))
                 __))
           (matita_basics_logic.refl
              (cic.lift (cic.succ univs.Type0) univs.Type2
                 (cic.univ univs.Type0))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le m
                    (matita_arithmetics_nat.plus n m))))
           (matita_arithmetics_nat.plus m n)
           (matita_arithmetics_nat.commutative_plus m n)).

def eq_plus_to_le :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             (matita_arithmetics_nat.plus m p)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le m n) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             (matita_arithmetics_nat.plus m p)) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le m (matita_arithmetics_nat.plus m p)))
        (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.le m n))
        (matita_arithmetics_nat.le_plus_n_r p m)
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le m x))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le m n)))
                 __))
           (matita_basics_logic.refl
              (cic.lift (cic.succ univs.Type0) univs.Type2
                 (cic.univ univs.Type0))
              (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.le m n)))
           (matita_arithmetics_nat.plus m p) auto).

def le_plus_to_le :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus a n)
             (matita_arithmetics_nat.plus a m)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le n m) :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.plus _x_365 n)
                    (matita_arithmetics_nat.plus _x_365 m))
                 (__ :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le
                         (matita_arithmetics_nat.plus _x_365 n)
                         (matita_arithmetics_nat.plus _x_365 m)) =>
                  matita_arithmetics_nat.le n m))))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto : cic.Term cic.prop (matita_arithmetics_nat.le n m) => auto)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le
                   (matita_arithmetics_nat.plus x_366 n)
                   (matita_arithmetics_nat.plus x_366 m)) ->
            cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.S
                   (matita_arithmetics_nat.plus x_366 n))
                (matita_arithmetics_nat.S
                   (matita_arithmetics_nat.plus x_366 m))) =>
         matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))))
           (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.le n m))
           (matita_arithmetics_nat.monotonic_pred
              (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)
              (_x_368 (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.S m)
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.plus x_366 n))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.plus x_366 m))))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.plus x_366
                             (matita_arithmetics_nat.S n))
                          (matita_arithmetics_nat.plus x_366
                             (matita_arithmetics_nat.S m))))
                    auto
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x_366
                          (matita_arithmetics_nat.S n))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le x
                                    (matita_arithmetics_nat.S
                                       (matita_arithmetics_nat.plus x_366 m))))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.plus x_366
                                       (matita_arithmetics_nat.S n))
                                    (matita_arithmetics_nat.plus x_366
                                       (matita_arithmetics_nat.S m)))))
                             __))
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus x_366
                             (matita_arithmetics_nat.S m))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.plus x_366
                                          (matita_arithmetics_nat.S n))
                                       x))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.plus x_366
                                          (matita_arithmetics_nat.S n))
                                       (matita_arithmetics_nat.plus x_366
                                          (matita_arithmetics_nat.S m)))))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.le
                                   (matita_arithmetics_nat.plus x_366
                                      (matita_arithmetics_nat.S n))
                                   (matita_arithmetics_nat.plus x_366
                                      (matita_arithmetics_nat.S m)))))
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.plus x_366 m))
                          (matita_arithmetics_nat.plus_n_Sm x_366 m))
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.plus x_366 n))
                       (matita_arithmetics_nat.plus_n_Sm x_366 n)))))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x
                           (matita_arithmetics_nat.pred
                              (matita_arithmetics_nat.S m))))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le n m)))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 m
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le n x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le n m)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le n m)))
                 (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.pred_Sn m))
              (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
              (matita_arithmetics_nat.pred_Sn n)))
        a.

def le_plus_to_le_r :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n a)
             (matita_arithmetics_nat.plus m a)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le n m) :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n a)
             (matita_arithmetics_nat.plus m a)) =>
      matita_arithmetics_nat.le_plus_to_le a n m
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n a)
                 (matita_arithmetics_nat.plus m a)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.plus a n)
                 (matita_arithmetics_nat.plus a m)))
           auto
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus a n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x
                           (matita_arithmetics_nat.plus m a)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.plus a n)
                           (matita_arithmetics_nat.plus a m))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus a m)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.plus a n) x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.plus a n)
                              (matita_arithmetics_nat.plus a m))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.plus a n)
                          (matita_arithmetics_nat.plus a m))))
                 (matita_arithmetics_nat.plus m a)
                 (matita_arithmetics_nat.commutative_plus m a))
              (matita_arithmetics_nat.plus n a)
              (matita_arithmetics_nat.commutative_plus n a))).

def monotonic_le_times_r :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.le
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.times n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lexy : cic.Term cic.prop (matita_arithmetics_nat.le x y) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le (matita_arithmetics_nat.times _x_365 x)
           (matita_arithmetics_nat.times _x_365 y))
        (matita_arithmetics_nat.le_O_n matita_arithmetics_nat.O)
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         lea :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.times a x)
                (matita_arithmetics_nat.times a y)) =>
         matita_arithmetics_nat.le_plus x y
           (matita_arithmetics_nat.times a x)
           (matita_arithmetics_nat.times a y) lexy lea)
        n.

def le_times :
      n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n1 n2) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le m1 m2) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.times n1 m1)
           (matita_arithmetics_nat.times n2 m2))
      :=
      n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      len : cic.Term cic.prop (matita_arithmetics_nat.le n1 n2) =>
      lem : cic.Term cic.prop (matita_arithmetics_nat.le m1 m2) =>
      matita_arithmetics_nat.transitive_le
        (matita_arithmetics_nat.times n1 m1)
        (matita_arithmetics_nat.times n1 m2)
        (matita_arithmetics_nat.times n2 m2)
        (matita_arithmetics_nat.monotonic_le_times_r n1 m1 m2 lem)
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.times m2 n1)
                 (matita_arithmetics_nat.times m2 n2)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.times n1 m2)
                 (matita_arithmetics_nat.times n2 m2)))
           (matita_arithmetics_nat.monotonic_le_times_r m2 n1 n2 len)
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times n1 m2)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x
                           (matita_arithmetics_nat.times m2 n2)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.times n1 m2)
                           (matita_arithmetics_nat.times n2 m2))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n2 m2)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.times n1 m2) x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.times n1 m2)
                              (matita_arithmetics_nat.times n2 m2))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.times n1 m2)
                          (matita_arithmetics_nat.times n2 m2))))
                 (matita_arithmetics_nat.times m2 n2)
                 (matita_arithmetics_nat.commutative_times m2 n2))
              (matita_arithmetics_nat.times m2 n1)
              (matita_arithmetics_nat.commutative_times m2 n1))).

def lt_times_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le m (matita_arithmetics_nat.times n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.times m
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_nat.times m n)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le m (matita_arithmetics_nat.times n m)))
        (matita_arithmetics_nat.monotonic_le_times_r m
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n H)
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le x
                        (matita_arithmetics_nat.times m n)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le m
                        (matita_arithmetics_nat.times n m))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times n m)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le m x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le m
                           (matita_arithmetics_nat.times n m))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le m
                       (matita_arithmetics_nat.times n m))))
              (matita_arithmetics_nat.times m n)
              (matita_arithmetics_nat.commutative_times m n))
           (matita_arithmetics_nat.times m
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_arithmetics_nat.times_n_1 m)).

def le_times_to_le :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O a) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.times a n)
             (matita_arithmetics_nat.times a m)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le n m) :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O a)
           (__1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O a) =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_nat.le (matita_arithmetics_nat.times a __)
                 (matita_arithmetics_nat.times a _0))
              (__2 :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le
                      (matita_arithmetics_nat.times a __)
                      (matita_arithmetics_nat.times a _0)) =>
               matita_arithmetics_nat.le __ _0)))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) a) =>
         auto' :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.times a matita_arithmetics_nat.O)
                (matita_arithmetics_nat.times a n)) =>
         matita_arithmetics_nat.le_O_n n)
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         H1 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) a) =>
         H2 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.times a (matita_arithmetics_nat.S n))
                (matita_arithmetics_nat.times a matita_arithmetics_nat.O)) =>
         matita_arithmetics_nat.transitive_le (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.times a (matita_arithmetics_nat.S n))
           matita_arithmetics_nat.O
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S n)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S n) a)))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.S n))))
              (matita_arithmetics_nat.monotonic_le_times_r
                 (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) a H1)
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus a
                    (matita_arithmetics_nat.times a n))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.times
                                 (matita_arithmetics_nat.S n)
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O))
                              (matita_arithmetics_nat.times
                                 (matita_arithmetics_nat.S n) a)))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S n) x)))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.S n))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.times
                                    (matita_arithmetics_nat.S n)
                                    (matita_arithmetics_nat.S
                                       matita_arithmetics_nat.O))
                                 x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.S n)
                                 (matita_arithmetics_nat.plus a
                                    (matita_arithmetics_nat.times a n)))))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S n)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le x
                                    (matita_arithmetics_nat.times a
                                       (matita_arithmetics_nat.S n))))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.S n)
                                    (matita_arithmetics_nat.plus a
                                       (matita_arithmetics_nat.times a n)))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus a
                             (matita_arithmetics_nat.times a n))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.S n) x))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.S n)
                                       (matita_arithmetics_nat.plus a
                                          (matita_arithmetics_nat.times a n)))))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.le
                                   (matita_arithmetics_nat.S n)
                                   (matita_arithmetics_nat.plus a
                                      (matita_arithmetics_nat.times a n)))))
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_nat.S n))
                          (matita_arithmetics_nat.times_n_Sm a n))
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.S n)
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       (matita_arithmetics_nat.times_n_1
                          (matita_arithmetics_nat.S n)))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S n) a)
                    (matita_arithmetics_nat.commutative_times
                       (matita_arithmetics_nat.S n) a))
                 (matita_arithmetics_nat.times a (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.times_n_Sm a n)))
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.S n))
                    (matita_arithmetics_nat.times a matita_arithmetics_nat.O)))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.S n))
                    matita_arithmetics_nat.O))
              H2
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus a
                    (matita_arithmetics_nat.times a n))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le x
                              (matita_arithmetics_nat.times a
                                 matita_arithmetics_nat.O)))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.times a
                                 (matita_arithmetics_nat.S n))
                              matita_arithmetics_nat.O)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.plus a
                                    (matita_arithmetics_nat.times a n))
                                 x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.times a
                                    (matita_arithmetics_nat.S n))
                                 matita_arithmetics_nat.O)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus a
                          (matita_arithmetics_nat.times a n))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.plus a
                                       (matita_arithmetics_nat.times a n))
                                    matita_arithmetics_nat.O))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le x
                                    matita_arithmetics_nat.O)))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le
                                (matita_arithmetics_nat.plus a
                                   (matita_arithmetics_nat.times a n))
                                matita_arithmetics_nat.O)))
                       (matita_arithmetics_nat.times a
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.times_n_Sm a n))
                    (matita_arithmetics_nat.times a matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.times_n_O a))
                 (matita_arithmetics_nat.times a (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.times_n_Sm a n))))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         H :
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) a) ->
            __1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.times a n)
                   (matita_arithmetics_nat.times a m)) ->
            cic.Term cic.prop (matita_arithmetics_nat.le n m)) =>
         lta :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) a) =>
         le :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.times a (matita_arithmetics_nat.S n))
                (matita_arithmetics_nat.times a (matita_arithmetics_nat.S m))) =>
         matita_arithmetics_nat.le_S_S n m
           (H lta
              (matita_arithmetics_nat.le_plus_to_le a
                 (matita_arithmetics_nat.times a n)
                 (matita_arithmetics_nat.times a m)
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_nat.S n))
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_nat.S m))))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.plus a
                             (matita_arithmetics_nat.times a n))
                          (matita_arithmetics_nat.plus a
                             (matita_arithmetics_nat.times a m))))
                    le
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus a
                          (matita_arithmetics_nat.times a n))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le x
                                    (matita_arithmetics_nat.times a
                                       (matita_arithmetics_nat.S m))))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.plus a
                                       (matita_arithmetics_nat.times a n))
                                    (matita_arithmetics_nat.plus a
                                       (matita_arithmetics_nat.times a m)))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus a
                             (matita_arithmetics_nat.times a m))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.plus a
                                          (matita_arithmetics_nat.times a n))
                                       x))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.plus a
                                          (matita_arithmetics_nat.times a n))
                                       (matita_arithmetics_nat.plus a
                                          (matita_arithmetics_nat.times a m)))))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.le
                                   (matita_arithmetics_nat.plus a
                                      (matita_arithmetics_nat.times a n))
                                   (matita_arithmetics_nat.plus a
                                      (matita_arithmetics_nat.times a m)))))
                          (matita_arithmetics_nat.times a
                             (matita_arithmetics_nat.S m))
                          (matita_arithmetics_nat.times_n_Sm a m))
                       (matita_arithmetics_nat.times a
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.times_n_Sm a n)))))).

def le_plus_minus_m_m :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le n
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _x_365
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.minus _x_365 m) m)))
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le_plus_n_r m matita_arithmetics_nat.O)
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop
              (matita_arithmetics_nat.le a
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus a m) m))) =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.minus (matita_arithmetics_nat.S a)
                    __)
                 __))
           (matita_arithmetics_nat.le_plus_n_r matita_arithmetics_nat.O
              (matita_arithmetics_nat.S a))
           (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.minus a n0) n0))))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.minus a n0)
                       (matita_arithmetics_nat.S n0))))
              (matita_arithmetics_nat.le_S_S a
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus a n0) n0)
                 (Hind n0))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus a n0)
                    (matita_arithmetics_nat.S n0))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S a) x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S a)
                              (matita_arithmetics_nat.plus
                                 (matita_arithmetics_nat.minus a n0)
                                 (matita_arithmetics_nat.S n0)))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.S a)
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.minus a n0)
                             (matita_arithmetics_nat.S n0)))))
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.minus a n0) n0))
                 (matita_arithmetics_nat.plus_n_Sm
                    (matita_arithmetics_nat.minus a n0) n0)))
           m)
        n.

def le_plus_to_minus_r :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus a b) c) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le a (matita_arithmetics_nat.minus c b))
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus a b) c) =>
      matita_arithmetics_nat.le_plus_to_le_r b a
        (matita_arithmetics_nat.minus c b)
        (matita_arithmetics_nat.transitive_le
           (matita_arithmetics_nat.plus a b) c
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus c b) b)
           H (matita_arithmetics_nat.le_plus_minus_m_m c b)).

def lt_to_le :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt x y) ->
      cic.Term cic.prop (matita_arithmetics_nat.le x y) :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.lt x y) =>
      matita_arithmetics_nat.le_plus_b
        (matita_arithmetics_nat.S matita_arithmetics_nat.O) x y
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S x) y))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.plus x
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 y))
           auto
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus x
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x0 y))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.plus x
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O))
                           y)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.plus x
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       y)))
              (matita_arithmetics_nat.S x)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x matita_arithmetics_nat.O)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.S x0)
                        (matita_arithmetics_nat.plus x
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                       __))
                 (matita_arithmetics_nat.plus_n_Sm x matita_arithmetics_nat.O)
                 x (matita_arithmetics_nat.plus_n_O x)))).

def inv_eq_minus_O :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus x y) matita_arithmetics_nat.O) ->
      cic.Term cic.prop (matita_arithmetics_nat.le x y) :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus x y) matita_arithmetics_nat.O) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le x
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus x y)
                 y)))
        (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.le x y))
        (matita_arithmetics_nat.le_plus_minus_m_m x y)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus y (matita_arithmetics_nat.minus x y))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le x x0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le x y)))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x
                           (matita_arithmetics_nat.plus y x0)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x y)))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 y
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le x x0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le x y)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le x y)))
                 (matita_arithmetics_nat.plus y matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.plus_n_O y))
              (matita_arithmetics_nat.minus x y) auto)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus x y) y)
           (matita_arithmetics_nat.commutative_plus
              (matita_arithmetics_nat.minus x y) y)).

def le_x_times_x :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le x (matita_arithmetics_nat.times x x))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le _x_365
           (matita_arithmetics_nat.times _x_365 _x_365))
        (matita_arithmetics_nat.le_O_n
           (matita_arithmetics_nat.times matita_arithmetics_nat.O
              matita_arithmetics_nat.O))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le x_366
                (matita_arithmetics_nat.times x_366 x_366)) =>
         matita_arithmetics_nat.le_plus_n_r
           (matita_arithmetics_nat.times x_366
              (matita_arithmetics_nat.S x_366))
           (matita_arithmetics_nat.S x_366))
        x.

def transitive_lt :
      cic.Term cic.prop
        (matita_basics_relations.transitive matita_arithmetics_nat.nat
           matita_arithmetics_nat.lt)
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      ltab : cic.Term cic.prop (matita_arithmetics_nat.lt a b) =>
      ltbc : cic.Term cic.prop (matita_arithmetics_nat.lt b c) =>
      matita_arithmetics_nat.le_ind (matita_arithmetics_nat.S b)
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S b) x_417) =>
         matita_arithmetics_nat.lt a x_417)
        (matita_arithmetics_nat.le_S (matita_arithmetics_nat.S a) b ltab)
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S b) m) =>
         _x_421 : cic.Term cic.prop (matita_arithmetics_nat.lt a m) =>
         matita_arithmetics_nat.le_S (matita_arithmetics_nat.S a) m _x_421)
        c ltbc.

def lt_to_le_to_lt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le m p) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt n p) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      H1 : cic.Term cic.prop (matita_arithmetics_nat.le m p) =>
      matita_arithmetics_nat.le_ind m
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le m x_417) =>
         matita_arithmetics_nat.lt n x_417)
        H
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le m m0) =>
         _x_421 : cic.Term cic.prop (matita_arithmetics_nat.lt n m0) =>
         matita_arithmetics_nat.transitive_lt n m0
           (matita_arithmetics_nat.S m0) _x_421
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S m0)
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.S m0))))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S m0)
                    (matita_arithmetics_nat.S m0)))
              (matita_arithmetics_nat.le_plus_n matita_arithmetics_nat.O
                 (matita_arithmetics_nat.S m0))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S m0)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S m0) x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S m0)
                              (matita_arithmetics_nat.S m0))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.S m0)
                          (matita_arithmetics_nat.S m0))))
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S m0))
                 (matita_arithmetics_nat.plus_O_n
                    (matita_arithmetics_nat.S m0)))))
        p H1.

def le_to_lt_to_lt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.lt m p) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt n p) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_arithmetics_nat.le_ind n
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le n x_417) =>
         cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt x_417 p)
           (__ : cic.Term cic.prop (matita_arithmetics_nat.lt x_417 p) =>
            matita_arithmetics_nat.lt n p))
        (auto : cic.Term cic.prop (matita_arithmetics_nat.lt n p) => auto)
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le n m0) =>
         _x_421 :
           (__ : cic.Term cic.prop (matita_arithmetics_nat.lt m0 p) ->
            cic.Term cic.prop (matita_arithmetics_nat.lt n p)) =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt (matita_arithmetics_nat.S m0) p) =>
         _x_421
           (matita_arithmetics_nat.transitive_lt m0
              (matita_arithmetics_nat.S m0) p
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le (matita_arithmetics_nat.S m0)
                       (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                          (matita_arithmetics_nat.S m0))))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le (matita_arithmetics_nat.S m0)
                       (matita_arithmetics_nat.S m0)))
                 (matita_arithmetics_nat.le_plus_n matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S m0))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S m0)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.S m0) x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.S m0)
                                 (matita_arithmetics_nat.S m0))))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le
                             (matita_arithmetics_nat.S m0)
                             (matita_arithmetics_nat.S m0))))
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.S m0))
                    (matita_arithmetics_nat.plus_O_n
                       (matita_arithmetics_nat.S m0))))
              auto))
        m H.

def lt_S_to_lt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n) m) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt n m) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n) m) =>
      matita_arithmetics_nat.transitive_lt n (matita_arithmetics_nat.S n) m
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S n))))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.S n)))
           (matita_arithmetics_nat.le_plus_n matita_arithmetics_nat.O
              (matita_arithmetics_nat.S n))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S n) x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S n)
                           (matita_arithmetics_nat.S n))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                       (matita_arithmetics_nat.S n))))
              (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                 (matita_arithmetics_nat.S n))
              (matita_arithmetics_nat.plus_O_n (matita_arithmetics_nat.S n))))
        auto.

def ltn_to_ltO :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      matita_arithmetics_nat.lt_to_le_to_lt matita_arithmetics_nat.O
        (matita_arithmetics_nat.S n) m
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.plus n
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.S n)))
           (matita_arithmetics_nat.le_plus_n n
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                           x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                           (matita_arithmetics_nat.S n))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.S n))))
              (matita_arithmetics_nat.plus n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.S x)
                        (matita_arithmetics_nat.plus n
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                       __))
                 (matita_arithmetics_nat.plus_n_Sm n matita_arithmetics_nat.O)
                 n (matita_arithmetics_nat.plus_n_O n))))
        auto.

def lt_O_S :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O
           (matita_arithmetics_nat.S n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.ltn_to_ltO n (matita_arithmetics_nat.S n)
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S n))))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.S n)))
           (matita_arithmetics_nat.le_plus_n matita_arithmetics_nat.O
              (matita_arithmetics_nat.S n))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S n) x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S n)
                           (matita_arithmetics_nat.S n))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                       (matita_arithmetics_nat.S n))))
              (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                 (matita_arithmetics_nat.S n))
              (matita_arithmetics_nat.plus_O_n (matita_arithmetics_nat.S n)))).

def monotonic_lt_plus_r :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.lt
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.plus n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.lt x y) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S x))
              (matita_arithmetics_nat.plus n y)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.S (matita_arithmetics_nat.plus n x))
              (matita_arithmetics_nat.plus n y)))
        (matita_arithmetics_nat.monotonic_le_plus_r n
           (matita_arithmetics_nat.S x) y auto)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S x))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le
                        (matita_arithmetics_nat.plus n
                           (matita_arithmetics_nat.S x))
                        (matita_arithmetics_nat.plus n y)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le x0
                        (matita_arithmetics_nat.plus n y))))
                 __))
           (matita_basics_logic.refl
              (cic.lift (cic.succ univs.Type0) univs.Type2
                 (cic.univ univs.Type0))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.plus n
                       (matita_arithmetics_nat.S x))
                    (matita_arithmetics_nat.plus n y))))
           (matita_arithmetics_nat.S (matita_arithmetics_nat.plus n x))
           (matita_arithmetics_nat.plus_n_Sm n x)).

def monotonic_lt_plus_l :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.lt
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.plus m n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.lt x y) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S x))
              (matita_arithmetics_nat.plus n y)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.S (matita_arithmetics_nat.plus x n))
              (matita_arithmetics_nat.plus y n)))
        (matita_arithmetics_nat.monotonic_le_plus_r n
           (matita_arithmetics_nat.S x) y auto)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus n x)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le
                        (matita_arithmetics_nat.plus n
                           (matita_arithmetics_nat.S x))
                        (matita_arithmetics_nat.plus n y)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le (matita_arithmetics_nat.S x0)
                        (matita_arithmetics_nat.plus y n))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S x))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.plus n
                              (matita_arithmetics_nat.S x))
                           (matita_arithmetics_nat.plus n y)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x0
                           (matita_arithmetics_nat.plus y n))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus n y)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.plus n
                                 (matita_arithmetics_nat.S x))
                              (matita_arithmetics_nat.plus n y)))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.plus n
                                 (matita_arithmetics_nat.S x))
                              x0)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.plus n
                             (matita_arithmetics_nat.S x))
                          (matita_arithmetics_nat.plus n y))))
                 (matita_arithmetics_nat.plus y n)
                 (matita_arithmetics_nat.commutative_plus y n))
              (matita_arithmetics_nat.S (matita_arithmetics_nat.plus n x))
              (matita_arithmetics_nat.plus_n_Sm n x))
           (matita_arithmetics_nat.plus x n)
           (matita_arithmetics_nat.commutative_plus x n)).

def lt_plus :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.lt p q) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus n p)
           (matita_arithmetics_nat.plus m q))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      ltnm : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      ltpq : cic.Term cic.prop (matita_arithmetics_nat.lt p q) =>
      matita_arithmetics_nat.transitive_lt (matita_arithmetics_nat.plus n p)
        (matita_arithmetics_nat.plus n q) (matita_arithmetics_nat.plus m q)
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S p))
                 (matita_arithmetics_nat.plus n q)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.plus n p))
                 (matita_arithmetics_nat.plus n q)))
           (matita_arithmetics_nat.monotonic_le_plus_r n
              (matita_arithmetics_nat.S p) q ltpq)
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S p))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.plus n
                              (matita_arithmetics_nat.S p))
                           (matita_arithmetics_nat.plus n q)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x
                           (matita_arithmetics_nat.plus n q))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.plus n
                          (matita_arithmetics_nat.S p))
                       (matita_arithmetics_nat.plus n q))))
              (matita_arithmetics_nat.S (matita_arithmetics_nat.plus n p))
              (matita_arithmetics_nat.plus_n_Sm n p)))
        (matita_arithmetics_nat.monotonic_lt_plus_l q n m ltnm).

def lt_plus_to_lt_l :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus p n)
             (matita_arithmetics_nat.plus q n)) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt p q) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus p n)
             (matita_arithmetics_nat.plus q n)) =>
      matita_arithmetics_nat.le_plus_to_le n (matita_arithmetics_nat.S p) q
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.plus p n))
                 (matita_arithmetics_nat.plus q n)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S p))
                 (matita_arithmetics_nat.plus n q)))
           auto
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus n p)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S x)
                           (matita_arithmetics_nat.plus q n)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.plus n
                              (matita_arithmetics_nat.S p))
                           (matita_arithmetics_nat.plus n q))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus n (matita_arithmetics_nat.S p))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le x
                              (matita_arithmetics_nat.plus q n)))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.plus n
                                 (matita_arithmetics_nat.S p))
                              (matita_arithmetics_nat.plus n q))))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus n q)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.plus n
                                    (matita_arithmetics_nat.S p))
                                 x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.plus n
                                    (matita_arithmetics_nat.S p))
                                 (matita_arithmetics_nat.plus n q))))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le
                             (matita_arithmetics_nat.plus n
                                (matita_arithmetics_nat.S p))
                             (matita_arithmetics_nat.plus n q))))
                    (matita_arithmetics_nat.plus q n)
                    (matita_arithmetics_nat.commutative_plus q n))
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.plus n p))
                 (matita_arithmetics_nat.plus_n_Sm n p))
              (matita_arithmetics_nat.plus p n)
              (matita_arithmetics_nat.commutative_plus p n))).

def lt_plus_to_lt_r :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus n p)
             (matita_arithmetics_nat.plus n q)) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt p q) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus n p)
             (matita_arithmetics_nat.plus n q)) =>
      matita_arithmetics_nat.lt_plus_to_lt_l n p q
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus n p)
                 (matita_arithmetics_nat.plus n q)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus p n)
                 (matita_arithmetics_nat.plus q n)))
           auto
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus p n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.lt x
                           (matita_arithmetics_nat.plus n q)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.lt
                           (matita_arithmetics_nat.plus p n)
                           (matita_arithmetics_nat.plus q n))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus q n)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              (matita_arithmetics_nat.plus p n) x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              (matita_arithmetics_nat.plus p n)
                              (matita_arithmetics_nat.plus q n))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.plus p n)
                          (matita_arithmetics_nat.plus q n))))
                 (matita_arithmetics_nat.plus n q)
                 (matita_arithmetics_nat.commutative_plus n q))
              (matita_arithmetics_nat.plus n p)
              (matita_arithmetics_nat.commutative_plus n p))).

def increasing_to_monotonic :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.increasing f) ->
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.lt f)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      incr : cic.Term cic.prop (matita_arithmetics_nat.increasing f) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      ltnm : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      matita_arithmetics_nat.le_ind (matita_arithmetics_nat.S n)
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) x_417) =>
         matita_arithmetics_nat.lt (f n) (f x_417))
        (incr n)
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m0) =>
         _x_421 :
           cic.Term cic.prop (matita_arithmetics_nat.lt (f n) (f m0)) =>
         matita_arithmetics_nat.transitive_lt (f n) (f m0)
           (f (matita_arithmetics_nat.S m0)) _x_421 (incr m0))
        m ltnm.

def monotonic_lt_times_r :
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) ->
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.lt
           (t : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.times c t))
      :=
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posc :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      ltnm : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      matita_arithmetics_nat.le_ind (matita_arithmetics_nat.S n)
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) x_417) =>
         matita_arithmetics_nat.lt (matita_arithmetics_nat.times c n)
           (matita_arithmetics_nat.times c x_417))
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.times c n)))
                 (matita_arithmetics_nat.plus c
                    (matita_arithmetics_nat.times c n))))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.times c n))
                 (matita_arithmetics_nat.times c (matita_arithmetics_nat.S n))))
           (matita_arithmetics_nat.monotonic_lt_plus_l
              (matita_arithmetics_nat.times c n) matita_arithmetics_nat.O c
              posc)
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.times c n)))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x
                           (matita_arithmetics_nat.plus c
                              (matita_arithmetics_nat.times c n))))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S
                              (matita_arithmetics_nat.times c n))
                           (matita_arithmetics_nat.times c
                              (matita_arithmetics_nat.S n)))))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus c
                    (matita_arithmetics_nat.times c n))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.plus
                                 matita_arithmetics_nat.O
                                 (matita_arithmetics_nat.S
                                    (matita_arithmetics_nat.times c n)))
                              (matita_arithmetics_nat.plus c
                                 (matita_arithmetics_nat.times c n))))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S
                                 (matita_arithmetics_nat.times c n))
                              x)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.times c n))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le x
                                 (matita_arithmetics_nat.plus c
                                    (matita_arithmetics_nat.times c n))))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.S
                                    (matita_arithmetics_nat.times c n))
                                 (matita_arithmetics_nat.plus c
                                    (matita_arithmetics_nat.times c n)))))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.times c n))
                             (matita_arithmetics_nat.plus c
                                (matita_arithmetics_nat.times c n)))))
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.times c n)))
                    (matita_arithmetics_nat.plus_O_n
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.times c n))))
                 (matita_arithmetics_nat.times c (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.times_n_Sm c n))
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                    (matita_arithmetics_nat.times c n)))
              (matita_arithmetics_nat.plus_n_Sm matita_arithmetics_nat.O
                 (matita_arithmetics_nat.times c n))))
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) a) =>
         lt1 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le
                (matita_arithmetics_nat.S (matita_arithmetics_nat.times c n))
                (matita_arithmetics_nat.times c a)) =>
         matita_arithmetics_nat.transitive_le
           (matita_arithmetics_nat.S (matita_arithmetics_nat.times c n))
           (matita_arithmetics_nat.times c a)
           (matita_arithmetics_nat.times c (matita_arithmetics_nat.S a)) lt1
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.times c a)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times c a) c)))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.times c a)
                    (matita_arithmetics_nat.times c
                       (matita_arithmetics_nat.S a))))
              (matita_arithmetics_nat.le_plus_n_r c
                 (matita_arithmetics_nat.times c a))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus c
                    (matita_arithmetics_nat.times c a))
                 (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.times c a)
                              (matita_arithmetics_nat.plus
                                 (matita_arithmetics_nat.times c a) c)))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.times c a) x)))
                       __1))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus c
                       (matita_arithmetics_nat.times c a))
                    (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.times c a) x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.times c a)
                                 (matita_arithmetics_nat.plus c
                                    (matita_arithmetics_nat.times c a)))))
                          __1))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le
                             (matita_arithmetics_nat.times c a)
                             (matita_arithmetics_nat.plus c
                                (matita_arithmetics_nat.times c a)))))
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times c a) c)
                    (matita_arithmetics_nat.commutative_plus
                       (matita_arithmetics_nat.times c a) c))
                 (matita_arithmetics_nat.times c (matita_arithmetics_nat.S a))
                 (matita_arithmetics_nat.times_n_Sm c a))))
        m ltnm.

def monotonic_lt_times_l :
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) ->
      cic.Term cic.prop
        (matita_basics_relations.monotonic matita_arithmetics_nat.nat
           matita_arithmetics_nat.lt
           (t : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.times t c))
      :=
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto' : cic.Term cic.prop (matita_arithmetics_nat.lt x y) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.S (matita_arithmetics_nat.times c x))
              (matita_arithmetics_nat.times c y)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le
              (matita_arithmetics_nat.S (matita_arithmetics_nat.times x c))
              (matita_arithmetics_nat.times y c)))
        (matita_arithmetics_nat.monotonic_lt_times_r c auto x y auto')
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times c x)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le
                        (matita_arithmetics_nat.S
                           (matita_arithmetics_nat.times c x))
                        (matita_arithmetics_nat.times c y)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le (matita_arithmetics_nat.S x0)
                        (matita_arithmetics_nat.times y c))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times c y)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S
                              (matita_arithmetics_nat.times c x))
                           (matita_arithmetics_nat.times c y)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S
                              (matita_arithmetics_nat.times c x))
                           x0)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_nat.times c x))
                       (matita_arithmetics_nat.times c y))))
              (matita_arithmetics_nat.times y c)
              (matita_arithmetics_nat.commutative_times y c))
           (matita_arithmetics_nat.times x c)
           (matita_arithmetics_nat.commutative_times x c)).

def lt_to_le_to_lt_times :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le p q) ->
      __2 :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O q) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p)
           (matita_arithmetics_nat.times m q))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      ltnm : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      lepq : cic.Term cic.prop (matita_arithmetics_nat.le p q) =>
      posq :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O q) =>
      matita_arithmetics_nat.le_to_lt_to_lt
        (matita_arithmetics_nat.times n p) (matita_arithmetics_nat.times n q)
        (matita_arithmetics_nat.times m q)
        (matita_arithmetics_nat.monotonic_le_times_r n p q lepq)
        (matita_arithmetics_nat.monotonic_lt_times_l q posq n m ltnm).

def lt_times :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.lt p q) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p)
           (matita_arithmetics_nat.times m q))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      ltnm : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      ltpq : cic.Term cic.prop (matita_arithmetics_nat.lt p q) =>
      matita_arithmetics_nat.lt_to_le_to_lt_times n m p q ltnm
        (matita_arithmetics_nat.lt_to_le p q ltpq)
        (matita_arithmetics_nat.ltn_to_ltO p q ltpq).

def lt_plus_to_minus_r :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus a b) c) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt a (matita_arithmetics_nat.minus c b))
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus a b) c) =>
      matita_arithmetics_nat.le_plus_to_minus_r (matita_arithmetics_nat.S a)
        b c H.

def lt_plus_Sn_r :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt a
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus a x)
              (matita_arithmetics_nat.S n)))
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus a x) n))))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus a x)
                 (matita_arithmetics_nat.S n))))
        (matita_arithmetics_nat.le_S_S a
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus a x) n)
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le a
                    (matita_arithmetics_nat.plus a
                       (matita_arithmetics_nat.plus x n))))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le a
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.plus a x) n)))
              (matita_arithmetics_nat.le_plus_n_r
                 (matita_arithmetics_nat.plus x n) a)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus n
                    (matita_arithmetics_nat.plus a x))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le a
                              (matita_arithmetics_nat.plus a
                                 (matita_arithmetics_nat.plus x n))))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le a x0)))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus a
                       (matita_arithmetics_nat.plus n x))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x0 :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le a
                                 (matita_arithmetics_nat.plus a
                                    (matita_arithmetics_nat.plus x n))))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le a x0)))
                          __))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x n)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x0 :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le a
                                    (matita_arithmetics_nat.plus a
                                       (matita_arithmetics_nat.plus x n))))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le a
                                    (matita_arithmetics_nat.plus a x0))))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le a
                                (matita_arithmetics_nat.plus a
                                   (matita_arithmetics_nat.plus x n)))))
                       (matita_arithmetics_nat.plus n x)
                       (matita_arithmetics_nat.commutative_plus n x))
                    (matita_arithmetics_nat.plus n
                       (matita_arithmetics_nat.plus a x))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.plus a n) x)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x0 :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.plus n
                                 (matita_arithmetics_nat.plus a x))
                              x0)
                             __))
                       (matita_arithmetics_nat.assoc_plus1 x a n)
                       (matita_arithmetics_nat.plus a
                          (matita_arithmetics_nat.plus n x))
                       (matita_arithmetics_nat.associative_plus a n x)))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus a x) n)
                 (matita_arithmetics_nat.commutative_plus
                    (matita_arithmetics_nat.plus a x) n))))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus a
              (matita_arithmetics_nat.plus x (matita_arithmetics_nat.S n)))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
                        (matita_arithmetics_nat.S
                           (matita_arithmetics_nat.plus
                              (matita_arithmetics_nat.plus a x) n))))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
                        x0)))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus a x)
                 (matita_arithmetics_nat.S n))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S a) x0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.S a)
                           (matita_arithmetics_nat.plus a
                              (matita_arithmetics_nat.plus x
                                 (matita_arithmetics_nat.S n))))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus a
                    (matita_arithmetics_nat.plus x
                       (matita_arithmetics_nat.S n)))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S a) x0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S a)
                              (matita_arithmetics_nat.plus a
                                 (matita_arithmetics_nat.plus x
                                    (matita_arithmetics_nat.S n))))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.S a)
                          (matita_arithmetics_nat.plus a
                             (matita_arithmetics_nat.plus x
                                (matita_arithmetics_nat.S n))))))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus a x)
                    (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.associative_plus a x
                    (matita_arithmetics_nat.S n)))
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus a x) n))
              (matita_arithmetics_nat.plus_n_Sm
                 (matita_arithmetics_nat.plus a x) n))
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus a x)
              (matita_arithmetics_nat.S n))
           (matita_arithmetics_nat.associative_plus a x
              (matita_arithmetics_nat.S n))).

def let_clause_16 :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
             (matita_arithmetics_nat.S m)) ->
      x32 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S x32)
           (matita_arithmetics_nat.plus x32
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
             (matita_arithmetics_nat.S m)) =>
      x32 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus x32 matita_arithmetics_nat.O)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_nat.S x)
               (matita_arithmetics_nat.plus x32
                  (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              __))
        (matita_arithmetics_nat.plus_n_Sm x32 matita_arithmetics_nat.O) x32
        (matita_arithmetics_nat.plus_n_O x32).

def lt_S_S_to_lt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
             (matita_arithmetics_nat.S m)) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt n m) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
             (matita_arithmetics_nat.S m)) =>
      matita_arithmetics_nat.lt_plus_to_lt_l
        (matita_arithmetics_nat.S matita_arithmetics_nat.O) n m
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.S m)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.lt
                 (matita_arithmetics_nat.plus n
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           auto
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.lt x
                           (matita_arithmetics_nat.S m)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.lt
                           (matita_arithmetics_nat.plus n
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O))
                           (matita_arithmetics_nat.plus m
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O)))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              (matita_arithmetics_nat.plus n
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O))
                              x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              (matita_arithmetics_nat.plus n
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O))
                              (matita_arithmetics_nat.plus m
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.plus n
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.plus m
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)))))
                 (matita_arithmetics_nat.S m)
                 (matita_arithmetics_nat.let_clause_16 n m auto m))
              (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.let_clause_16 n m auto n))).

def not_le_Sn_O :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.Not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
              matita_arithmetics_nat.O))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.nmk
        (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
           matita_arithmetics_nat.O)
        (Hlen0 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                matita_arithmetics_nat.O) =>
         matita_arithmetics_nat.lt_to_not_zero n matita_arithmetics_nat.O
           Hlen0).

def not_le_to_not_le_S_S :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) ->
      cic.Term cic.prop
        (matita_basics_logic.Not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.S m)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
      matita_basics_logic.not_to_not
        (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.S m))
        (matita_arithmetics_nat.le n m)
        (auto' :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m)) =>
         matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))))
           (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.le n m))
           (matita_arithmetics_nat.monotonic_pred
              (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m) auto')
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x
                           (matita_arithmetics_nat.pred
                              (matita_arithmetics_nat.S m))))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le n m)))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 m
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le n x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le n m)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le n m)))
                 (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.pred_Sn m))
              (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
              (matita_arithmetics_nat.pred_Sn n)))
        auto.

def not_le_S_S_to_not_le :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m))) ->
      cic.Term cic.prop
        (matita_basics_logic.Not (matita_arithmetics_nat.le n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m))) =>
      matita_basics_logic.not_to_not (matita_arithmetics_nat.le n m)
        (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.S m))
        (auto' : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         matita_arithmetics_nat.le_S_S n m auto')
        auto.

def not_le_Sn_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.Not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.Not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S _x_365)
              _x_365))
        (matita_arithmetics_nat.not_le_Sn_O matita_arithmetics_nat.O)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S x_366)
                   x_366)) =>
         matita_arithmetics_nat.not_le_to_not_le_S_S
           (matita_arithmetics_nat.S x_366) x_366 _x_368)
        n.

def lt_to_not_le :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m) ->
      cic.Term cic.prop
        (matita_basics_logic.Not (matita_arithmetics_nat.le m n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hltnm : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      matita_arithmetics_nat.le_ind (matita_arithmetics_nat.S n)
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) x_417) =>
         matita_basics_logic.Not (matita_arithmetics_nat.le x_417 n))
        (matita_arithmetics_nat.not_le_Sn_n n)
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m0) =>
         _x_421 :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le m0 n)) =>
         matita_basics_logic.not_to_not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S m0) n)
           (matita_arithmetics_nat.le m0 n)
           (auto :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S m0) n) =>
            matita_arithmetics_nat.lt_to_le m0 n auto)
           _x_421)
        m Hltnm.

def not_le_to_lt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt m n) :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.Not (matita_arithmetics_nat.le __ _0))
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.Not (matita_arithmetics_nat.le __ _0)) =>
            matita_arithmetics_nat.lt _0 __))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         abs :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_arithmetics_nat.le matita_arithmetics_nat.O n)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_arithmetics_nat.lt n matita_arithmetics_nat.O)
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.le matita_arithmetics_nat.O n)
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le matita_arithmetics_nat.O
                       (matita_arithmetics_nat.plus n
                          matita_arithmetics_nat.O)))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le matita_arithmetics_nat.O n))
                 (matita_arithmetics_nat.le_plus_n n matita_arithmetics_nat.O)
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 matita_arithmetics_nat.O x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 matita_arithmetics_nat.O n)))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le matita_arithmetics_nat.O
                             n)))
                    (matita_arithmetics_nat.plus n matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.plus_n_O n)))
              abs))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                   matita_arithmetics_nat.O)) =>
         matita_arithmetics_nat.lt_O_S n)
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) ->
            cic.Term cic.prop (matita_arithmetics_nat.lt m n)) =>
         HnotleSS :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                   (matita_arithmetics_nat.S m))) =>
         matita_arithmetics_nat.le_S_S (matita_arithmetics_nat.S m) n
           (Hind (matita_arithmetics_nat.not_le_S_S_to_not_le n m HnotleSS))).

def not_lt_to_le :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_nat.lt n m)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le m n) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_nat.lt n m)) =>
      matita_arithmetics_nat.le_S_S_to_le m n
        (matita_arithmetics_nat.not_le_to_lt (matita_arithmetics_nat.S n) m
           (matita_basics_logic.not_to_not
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m)
              (matita_arithmetics_nat.lt n m)
              (auto :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m) =>
               auto)
              H)).

def le_to_not_lt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      cic.Term cic.prop
        (matita_basics_logic.Not (matita_arithmetics_nat.lt m n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_arithmetics_nat.lt_to_not_le n (matita_arithmetics_nat.S m)
        (matita_arithmetics_nat.le_to_lt_to_lt n m
           (matita_arithmetics_nat.S m) H
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S m)
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.S m))))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S m)
                    (matita_arithmetics_nat.S m)))
              (matita_arithmetics_nat.le_plus_n matita_arithmetics_nat.O
                 (matita_arithmetics_nat.S m))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S m)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S m) x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S m)
                              (matita_arithmetics_nat.S m))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.S m)
                          (matita_arithmetics_nat.S m))))
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.plus_O_n
                    (matita_arithmetics_nat.S m))))).

def decidable_eq_nat :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.decidable
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m))
      :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.decidable
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              __ _0))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.decidable
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O __))
           (matita_basics_logic.or_introl
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O matita_arithmetics_nat.O)
              (matita_basics_logic.Not
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.O))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O))
           (auto : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.or_intror
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O (matita_arithmetics_nat.S auto))
              (matita_basics_logic.Not
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O (matita_arithmetics_nat.S auto)))
              (matita_arithmetics_nat.not_eq_O_S auto))
           n)
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.or_intror
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n) matita_arithmetics_nat.O)
           (matita_basics_logic.Not
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S n) matita_arithmetics_nat.O))
           (matita_basics_logic.sym_not_eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.not_eq_O_S n)))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           cic.Term cic.prop
             (matita_basics_logic.decidable
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m)) =>
         matita_basics_logic.match_Or
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m)
           (matita_basics_logic.Not
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n m))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      n m)
                   (matita_basics_logic.Not
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         n m))) =>
            matita_basics_logic.decidable
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))
           (auto :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m) =>
            matita_basics_logic.or_introl
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))
              (matita_basics_logic.Not
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.S n)
                        (matita_arithmetics_nat.S x))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n))
                 m auto))
           (auto :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      n m)) =>
            matita_basics_logic.or_intror
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m))
              (matita_basics_logic.Not
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)))
              (matita_arithmetics_nat.not_eq_S n m auto))
           Hind).

def decidable_le :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.decidable (matita_arithmetics_nat.le n m))
      :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.decidable (matita_arithmetics_nat.le __ _0))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.or_introl
           (matita_arithmetics_nat.le matita_arithmetics_nat.O n)
           (matita_basics_logic.Not
              (matita_arithmetics_nat.le matita_arithmetics_nat.O n))
           (matita_arithmetics_nat.le_O_n n))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.or_intror
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
              matita_arithmetics_nat.O)
           (matita_basics_logic.Not
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 matita_arithmetics_nat.O))
           (matita_arithmetics_nat.not_le_Sn_O n))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.decidable (matita_arithmetics_nat.le n m)) =>
         matita_basics_logic.match_Or (matita_arithmetics_nat.le n m)
           (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or (matita_arithmetics_nat.le n m)
                   (matita_basics_logic.Not (matita_arithmetics_nat.le n m))) =>
            matita_basics_logic.decidable
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.S m)))
           (auto : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
            matita_basics_logic.or_introl
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.S m))
              (matita_basics_logic.Not
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.S m)))
              (matita_arithmetics_nat.le_S_S n m auto))
           (auto :
              cic.Term cic.prop
                (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
            matita_basics_logic.or_intror
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.S m))
              (matita_basics_logic.Not
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                    (matita_arithmetics_nat.S m)))
              (matita_arithmetics_nat.not_le_to_not_le_S_S n m auto))
           _clearme).

def decidable_lt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.decidable (matita_arithmetics_nat.lt n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.decidable_le (matita_arithmetics_nat.S n) m.

def le_to_or_lt_eq :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      cic.Term cic.prop
        (matita_basics_logic.Or (matita_arithmetics_nat.lt n m)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_arithmetics_nat.le_ind n
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le n x_417) =>
         matita_basics_logic.Or (matita_arithmetics_nat.lt n x_417)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              x_417))
        (matita_basics_relations.RC_reflexive matita_arithmetics_nat.nat
           matita_arithmetics_nat.lt n)
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le n m0) =>
         _x_421 :
           cic.Term cic.prop
             (matita_basics_logic.Or (matita_arithmetics_nat.lt n m0)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m0)) =>
         matita_basics_logic.or_introl
           (matita_arithmetics_nat.lt n (matita_arithmetics_nat.S m0))
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (matita_arithmetics_nat.S m0))
           (matita_arithmetics_nat.le_to_lt_to_lt n m0
              (matita_arithmetics_nat.S m0) _x_419
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le (matita_arithmetics_nat.S m0)
                       (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                          (matita_arithmetics_nat.S m0))))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le (matita_arithmetics_nat.S m0)
                       (matita_arithmetics_nat.S m0)))
                 (matita_arithmetics_nat.le_plus_n matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S m0))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S m0)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.S m0) x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.S m0)
                                 (matita_arithmetics_nat.S m0))))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le
                             (matita_arithmetics_nat.S m0)
                             (matita_arithmetics_nat.S m0))))
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.S m0))
                    (matita_arithmetics_nat.plus_O_n
                       (matita_arithmetics_nat.S m0))))))
        m lenm.

def eq_or_gt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.Or
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O n)
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.Or_ind
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        (_x_170 :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         matita_basics_logic.Or
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O n)
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
        (_x_171 :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         matita_basics_logic.or_intror
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O n)
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) _x_171)
        (_x_172 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_basics_logic.or_introl
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O n)
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     x n)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n)
              matita_arithmetics_nat.O _x_172))
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def increasing_to_le2 :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.increasing f) ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (f matita_arithmetics_nat.O) m) ->
      cic.Term cic.prop
        (matita_basics_logic.ex matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le (f i) m)
              (matita_arithmetics_nat.lt m (f (matita_arithmetics_nat.S i)))))
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      incr : cic.Term cic.prop (matita_arithmetics_nat.increasing f) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lem :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (f matita_arithmetics_nat.O) m) =>
      matita_arithmetics_nat.le_ind (f matita_arithmetics_nat.O)
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (f matita_arithmetics_nat.O) x_417) =>
         matita_basics_logic.ex matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le (f i) x_417)
              (matita_arithmetics_nat.lt x_417
                 (f (matita_arithmetics_nat.S i)))))
        (matita_basics_logic.ex_intro matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And
              (matita_arithmetics_nat.le (f i) (f matita_arithmetics_nat.O))
              (matita_arithmetics_nat.lt (f matita_arithmetics_nat.O)
                 (f (matita_arithmetics_nat.S i))))
           matita_arithmetics_nat.O
           (matita_basics_logic.conj
              (matita_arithmetics_nat.le (f matita_arithmetics_nat.O)
                 (f matita_arithmetics_nat.O))
              (matita_arithmetics_nat.lt (f matita_arithmetics_nat.O)
                 (f (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (matita_arithmetics_nat.le_n (f matita_arithmetics_nat.O))
              (incr matita_arithmetics_nat.O)))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         len :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (f matita_arithmetics_nat.O) n) =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.ex matita_arithmetics_nat.nat
                (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                 matita_basics_logic.And (matita_arithmetics_nat.le (f i) n)
                   (matita_arithmetics_nat.lt n
                      (f (matita_arithmetics_nat.S i))))) =>
         matita_basics_logic.match_ex matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le (f i) n)
              (matita_arithmetics_nat.lt n (f (matita_arithmetics_nat.S i))))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.ex matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_basics_logic.And
                      (matita_arithmetics_nat.le (f i) n)
                      (matita_arithmetics_nat.lt n
                         (f (matita_arithmetics_nat.S i))))) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And
                 (matita_arithmetics_nat.le (f i)
                    (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
                    (f (matita_arithmetics_nat.S i)))))
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _clearme0 :
              cic.Term cic.prop
                (matita_basics_logic.And (matita_arithmetics_nat.le (f a) n)
                   (matita_arithmetics_nat.lt n
                      (f (matita_arithmetics_nat.S a)))) =>
            matita_basics_logic.match_And (matita_arithmetics_nat.le (f a) n)
              (matita_arithmetics_nat.lt n (f (matita_arithmetics_nat.S a)))
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.And
                      (matita_arithmetics_nat.le (f a) n)
                      (matita_arithmetics_nat.lt n
                         (f (matita_arithmetics_nat.S a)))) =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.And
                    (matita_arithmetics_nat.le (f i)
                       (matita_arithmetics_nat.S n))
                    (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
                       (f (matita_arithmetics_nat.S i)))))
              (len0 :
                 cic.Term cic.prop (matita_arithmetics_nat.le (f a) n) =>
               ltnr :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.lt n
                      (f (matita_arithmetics_nat.S a))) =>
               matita_basics_logic.match_Or
                 (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
                    (f (matita_arithmetics_nat.S a)))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (f (matita_arithmetics_nat.S a)))
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.Or
                         (matita_arithmetics_nat.lt
                            (matita_arithmetics_nat.S n)
                            (f (matita_arithmetics_nat.S a)))
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.S n)
                            (f (matita_arithmetics_nat.S a)))) =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.And
                       (matita_arithmetics_nat.le (f i)
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.S n)
                          (f (matita_arithmetics_nat.S i)))))
                 (H :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt (matita_arithmetics_nat.S n)
                         (f (matita_arithmetics_nat.S a))) =>
                  matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.And
                       (matita_arithmetics_nat.le (f i)
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.S n)
                          (f (matita_arithmetics_nat.S i))))
                    a
                    (matita_basics_logic.conj
                       (matita_arithmetics_nat.le (f a)
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.S n)
                          (f (matita_arithmetics_nat.S a)))
                       (matita_arithmetics_nat.le_S (f a) n len0) H))
                 (H :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.S n)
                         (f (matita_arithmetics_nat.S a))) =>
                  matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.And
                       (matita_arithmetics_nat.le (f i)
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.S n)
                          (f (matita_arithmetics_nat.S i))))
                    (matita_arithmetics_nat.S a)
                    (matita_basics_logic.conj
                       (matita_arithmetics_nat.le
                          (f (matita_arithmetics_nat.S a))
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.S n)
                          (f
                             (matita_arithmetics_nat.S
                                (matita_arithmetics_nat.S a))))
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le
                                (matita_arithmetics_nat.S n)
                                (matita_arithmetics_nat.S n)))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le
                                (f (matita_arithmetics_nat.S a))
                                (matita_arithmetics_nat.S n)))
                          (matita_arithmetics_nat.le_n
                             (matita_arithmetics_nat.S n))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S n)
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.le
                                          (matita_arithmetics_nat.S n)
                                          (matita_arithmetics_nat.S n)))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.le x
                                          (matita_arithmetics_nat.S n))))
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift (cic.succ univs.Type0) univs.Type2
                                   (cic.univ univs.Type0))
                                (cic.lift cic.prop univs.Type0
                                   (matita_arithmetics_nat.le
                                      (matita_arithmetics_nat.S n)
                                      (matita_arithmetics_nat.S n))))
                             (f (matita_arithmetics_nat.S a)) H))
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.lt
                                (f (matita_arithmetics_nat.S a))
                                (f
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S a)))))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.lt
                                (matita_arithmetics_nat.S n)
                                (f
                                   (matita_arithmetics_nat.S
                                      (matita_arithmetics_nat.S a)))))
                          (incr (matita_arithmetics_nat.S a))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S n)
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.lt x
                                          (f
                                             (matita_arithmetics_nat.S
                                                (matita_arithmetics_nat.S a)))))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.lt
                                          (matita_arithmetics_nat.S n)
                                          (f
                                             (matita_arithmetics_nat.S
                                                (matita_arithmetics_nat.S a))))))
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift (cic.succ univs.Type0) univs.Type2
                                   (cic.univ univs.Type0))
                                (cic.lift cic.prop univs.Type0
                                   (matita_arithmetics_nat.lt
                                      (matita_arithmetics_nat.S n)
                                      (f
                                         (matita_arithmetics_nat.S
                                            (matita_arithmetics_nat.S a))))))
                             (f (matita_arithmetics_nat.S a)) H))))
                 (matita_arithmetics_nat.le_to_or_lt_eq
                    (matita_arithmetics_nat.S n)
                    (f (matita_arithmetics_nat.S a)) ltnr))
              _clearme0)
           _clearme)
        m lem.

def le_inv_plus_l :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z) ->
      cic.Term cic.prop
        (matita_basics_logic.And
           (matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y))
           (matita_arithmetics_nat.le y z))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y) z) =>
      matita_basics_logic.conj
        (matita_arithmetics_nat.le x (matita_arithmetics_nat.minus z y))
        (matita_arithmetics_nat.le y z)
        (matita_arithmetics_nat.le_plus_to_minus_r x y z auto)
        (matita_arithmetics_nat.le_plus_b x y z
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y)
                    z))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.plus y x)
                    z))
              auto
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus y x)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le x0 z))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.plus y x) z)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.plus y x) z)))
                 (matita_arithmetics_nat.plus x y)
                 (matita_arithmetics_nat.commutative_plus x y)))).

def lt_inv_plus_l :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus x y) z) ->
      cic.Term cic.prop
        (matita_basics_logic.And (matita_arithmetics_nat.lt x z)
           (matita_arithmetics_nat.lt y (matita_arithmetics_nat.minus z x)))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus x y) z) =>
      matita_basics_logic.conj (matita_arithmetics_nat.lt x z)
        (matita_arithmetics_nat.lt y (matita_arithmetics_nat.minus z x))
        (matita_arithmetics_nat.lt_to_le_to_lt x
           (matita_arithmetics_nat.S (matita_arithmetics_nat.plus x y)) z
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.lt x
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.plus x
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.S y))))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.lt x
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.plus x y))))
              (matita_arithmetics_nat.lt_plus_Sn_r x matita_arithmetics_nat.O
                 y)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                       (matita_arithmetics_nat.S y)))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt x x0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt x
                              (matita_arithmetics_nat.S
                                 (matita_arithmetics_nat.plus x y)))))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus x
                       (matita_arithmetics_nat.S y))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x0 :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.lt x
                                 (matita_arithmetics_nat.plus x
                                    (matita_arithmetics_nat.plus
                                       matita_arithmetics_nat.O
                                       (matita_arithmetics_nat.S y)))))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.lt x x0)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S y)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x0 :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.lt x
                                    (matita_arithmetics_nat.plus x x0)))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.lt x
                                    (matita_arithmetics_nat.plus x
                                       (matita_arithmetics_nat.S y)))))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.lt x
                                (matita_arithmetics_nat.plus x
                                   (matita_arithmetics_nat.S y)))))
                       (matita_arithmetics_nat.plus matita_arithmetics_nat.O
                          (matita_arithmetics_nat.S y))
                       (matita_arithmetics_nat.plus_O_n
                          (matita_arithmetics_nat.S y)))
                    (matita_arithmetics_nat.S
                       (matita_arithmetics_nat.plus x y))
                    (matita_arithmetics_nat.plus_n_Sm x y))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus x matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.S y))
                 (matita_arithmetics_nat.associative_plus x
                    matita_arithmetics_nat.O (matita_arithmetics_nat.S y))))
           auto)
        (matita_arithmetics_nat.lt_plus_to_minus_r y x z
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus x y)
                    z))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus y x)
                    z))
              auto
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x y)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              (matita_arithmetics_nat.plus x y) z))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt x0 z)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.plus x y) z)))
                 (matita_arithmetics_nat.plus y x)
                 (matita_arithmetics_nat.commutative_plus y x)))).

def lt_or_ge :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.Or (matita_arithmetics_nat.lt m n)
           (matita_arithmetics_nat.le n m))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.Or_ind (matita_arithmetics_nat.lt m n)
        (matita_basics_logic.Not (matita_arithmetics_nat.lt m n))
        (_x_170 :
           cic.Term cic.prop
             (matita_basics_logic.Or (matita_arithmetics_nat.lt m n)
                (matita_basics_logic.Not (matita_arithmetics_nat.lt m n))) =>
         matita_basics_logic.Or (matita_arithmetics_nat.lt m n)
           (matita_arithmetics_nat.le n m))
        (_x_171 : cic.Term cic.prop (matita_arithmetics_nat.lt m n) =>
         matita_basics_logic.or_introl (matita_arithmetics_nat.lt m n)
           (matita_arithmetics_nat.le n m) _x_171)
        (_x_172 :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.lt m n)) =>
         matita_basics_logic.or_intror (matita_arithmetics_nat.lt m n)
           (matita_arithmetics_nat.le n m)
           (matita_arithmetics_nat.not_lt_to_le m n _x_172))
        (matita_arithmetics_nat.decidable_lt m n).

def le_or_ge :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.Or (matita_arithmetics_nat.le m n)
           (matita_arithmetics_nat.le n m))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.Or_ind (matita_arithmetics_nat.le m n)
        (matita_basics_logic.Not (matita_arithmetics_nat.le m n))
        (_x_170 :
           cic.Term cic.prop
             (matita_basics_logic.Or (matita_arithmetics_nat.le m n)
                (matita_basics_logic.Not (matita_arithmetics_nat.le m n))) =>
         matita_basics_logic.Or (matita_arithmetics_nat.le m n)
           (matita_arithmetics_nat.le n m))
        (_x_171 : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
         matita_basics_logic.or_introl (matita_arithmetics_nat.le m n)
           (matita_arithmetics_nat.le n m) _x_171)
        (_x_172 :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le m n)) =>
         matita_basics_logic.or_intror (matita_arithmetics_nat.le m n)
           (matita_arithmetics_nat.le n m)
           (matita_arithmetics_nat.lt_to_le n m
              (matita_arithmetics_nat.not_le_to_lt m n _x_172)))
        (matita_arithmetics_nat.decidable_le m n).

def le_inv_S1 :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.S x) y) ->
      cic.Term cic.prop
        (matita_basics_logic.ex2 matita_arithmetics_nat.nat
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le x z)
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
              (matita_arithmetics_nat.S z)))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.S x) y) =>
      matita_arithmetics_nat.le_ind (matita_arithmetics_nat.S x)
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S x) x_417) =>
         matita_basics_logic.ex2 matita_arithmetics_nat.nat
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le x z)
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              x_417 (matita_arithmetics_nat.S z)))
        (matita_basics_logic.ex2_intro matita_arithmetics_nat.nat
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le x z)
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S x) (matita_arithmetics_nat.S z))
           x
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le x
                    (matita_arithmetics_nat.plus matita_arithmetics_nat.O x)))
              (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.le x x))
              (matita_arithmetics_nat.le_plus_n matita_arithmetics_nat.O x)
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 x
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le x x0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le x x)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le x x)))
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O x)
                 (matita_arithmetics_nat.plus_O_n x)))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S x)))
        (y0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S x) y0) =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.ex2 matita_arithmetics_nat.nat
                (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                 matita_arithmetics_nat.le x z)
                (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                 matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   y0 (matita_arithmetics_nat.S z))) =>
         matita_basics_logic.match_ex2 matita_arithmetics_nat.nat
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le x z)
           (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              y0 (matita_arithmetics_nat.S z))
           cic.prop
           (_0 :
              cic.Term cic.prop
                (matita_basics_logic.ex2 matita_arithmetics_nat.nat
                   (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.le x z)
                   (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      y0 (matita_arithmetics_nat.S z))) =>
            matita_basics_logic.ex2 matita_arithmetics_nat.nat
              (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le x z)
              (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S y0) (matita_arithmetics_nat.S z)))
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            Hxn : cic.Term cic.prop (matita_arithmetics_nat.le x n) =>
            H0 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   y0 (matita_arithmetics_nat.S n)) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x0 (matita_arithmetics_nat.S n)) =>
               matita_basics_logic.ex2 matita_arithmetics_nat.nat
                 (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le x z)
                 (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S x0)
                    (matita_arithmetics_nat.S z)))
              (matita_basics_logic.ex2_intro matita_arithmetics_nat.nat
                 (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.le x z)
                 (z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S (matita_arithmetics_nat.S n))
                    (matita_arithmetics_nat.S z))
                 (matita_arithmetics_nat.S n)
                 (matita_arithmetics_nat.le_S x n Hxn)
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S (matita_arithmetics_nat.S n))))
              y0 H0)
           _clearme)
        y H.

def nat_ind_plus :
      R :
        cic.Term univs.Type0
          (matita_basics_relations.predicate matita_arithmetics_nat.nat) ->
      __ : cic.Term cic.prop (R matita_arithmetics_nat.O) ->
      __1 :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __1 : cic.Term cic.prop (R n) ->
         cic.Term cic.prop
           (R
              (matita_arithmetics_nat.plus n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (R n) :=
      R :
        cic.Term univs.Type0
          (matita_basics_relations.predicate matita_arithmetics_nat.nat) =>
      auto : cic.Term cic.prop (R matita_arithmetics_nat.O) =>
      auto' :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (R n) ->
         cic.Term cic.prop
           (R
              (matita_arithmetics_nat.plus n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)))) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind R auto
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 : cic.Term cic.prop (R x_366) =>
         matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (R
                 (matita_arithmetics_nat.plus x_366
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
           (cic.lift cic.prop univs.Type0
              (R (matita_arithmetics_nat.S x_366)))
           (auto' x_366 _x_368)
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S x_366)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0 (R x))
                     (cic.lift cic.prop univs.Type0
                        (R (matita_arithmetics_nat.S x_366))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (R (matita_arithmetics_nat.S x_366))))
              (matita_arithmetics_nat.plus x_366
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x_366 matita_arithmetics_nat.O)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.S x)
                        (matita_arithmetics_nat.plus x_366
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                       __))
                 (matita_arithmetics_nat.plus_n_Sm x_366
                    matita_arithmetics_nat.O)
                 x_366 (matita_arithmetics_nat.plus_n_O x_366))))
        n.

def lt_O_n_elim :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      P :
        (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      __1 :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term cic.prop (P (matita_arithmetics_nat.S m))) ->
      cic.Term cic.prop (P n) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O _x_365)
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O _x_365) =>
            cic.prod univs.Type0 cic.prop
              (cic.prod univs.Type0 (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.univ cic.prop))
              (P :
                 (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  cic.Univ cic.prop) =>
               cic.prod cic.prop cic.prop
                 (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                    (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     P (matita_arithmetics_nat.S m)))
                 (__1 :
                    (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                     cic.Term cic.prop (P (matita_arithmetics_nat.S m))) =>
                  P _x_365))))
        (abs :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O
                matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.prod univs.Type0 cic.prop
              (cic.prod univs.Type0 (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.univ cic.prop))
              (P :
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  cic.Univ cic.prop) =>
               cic.prod cic.prop cic.prop
                 (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                    (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     P (matita_arithmetics_nat.S m)))
                 (__ :
                    (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                     cic.Term cic.prop (P (matita_arithmetics_nat.S m))) =>
                  P matita_arithmetics_nat.O)))
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 matita_arithmetics_nat.O)
              abs
              (matita_arithmetics_nat.not_le_Sn_O matita_arithmetics_nat.O)))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O x_366) ->
            P :
              (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               cic.Univ cic.prop) ->
            __1 :
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               cic.Term cic.prop (P (matita_arithmetics_nat.S m))) ->
            cic.Term cic.prop (P x_366)) =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O
                (matita_arithmetics_nat.S x_366)) =>
         P :
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Univ cic.prop) =>
         auto' :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term cic.prop (P (matita_arithmetics_nat.S m))) =>
         auto' x_366)
        n.

def le_n_O_elim :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n matita_arithmetics_nat.O) ->
      P :
        (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      __1 : cic.Term cic.prop (P matita_arithmetics_nat.O) ->
      cic.Term cic.prop (P n) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_nat.le __ matita_arithmetics_nat.O)
           (__1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.le __ matita_arithmetics_nat.O) =>
            cic.prod univs.Type0 cic.prop
              (cic.prod univs.Type0 (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.univ cic.prop))
              (P :
                 (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  cic.Univ cic.prop) =>
               cic.prod cic.prop cic.prop (P matita_arithmetics_nat.O)
                 (__2 : cic.Term cic.prop (P matita_arithmetics_nat.O) =>
                  P __))))
        (auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le matita_arithmetics_nat.O
                matita_arithmetics_nat.O) =>
         P :
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Univ cic.prop) =>
         auto' : cic.Term cic.prop (P matita_arithmetics_nat.O) => auto')
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         abs :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
                matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.prod univs.Type0 cic.prop
              (cic.prod univs.Type0 (cic.type cic.z)
                 matita_arithmetics_nat.nat
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.univ cic.prop))
              (P :
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  cic.Univ cic.prop) =>
               cic.prod cic.prop cic.prop (P matita_arithmetics_nat.O)
                 (__ : cic.Term cic.prop (P matita_arithmetics_nat.O) =>
                  P (matita_arithmetics_nat.S a))))
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
                 matita_arithmetics_nat.O)
              abs (matita_arithmetics_nat.not_le_Sn_O a)))
        n.

def le_n_Sm_elim :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n (matita_arithmetics_nat.S m)) ->
      P : cic.Univ cic.prop ->
      __1 :
        (__1 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m)) ->
         cic.Term cic.prop P) ->
      __2 :
        (__2 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n (matita_arithmetics_nat.S m)) ->
         cic.Term cic.prop P) ->
      cic.Term cic.prop P :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hle :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n (matita_arithmetics_nat.S m)) =>
      P : cic.Univ cic.prop =>
      matita_arithmetics_nat.le_ind n
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le n x_417) =>
         cic.prod cic.prop cic.prop
           (cic.prod cic.prop cic.prop
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) x_417)
              (__ :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                      x_417) =>
               P))
           (__ :
              (__ :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                      x_417) ->
               cic.Term cic.prop P) =>
            cic.prod cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n x_417)
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         n x_417) =>
                  P))
              (__1 :
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         n x_417) ->
                  cic.Term cic.prop P) =>
               P)))
        (auto :
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) n) ->
            cic.Term cic.prop P) =>
         auto' :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n n) ->
            cic.Term cic.prop P) =>
         auto'
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n))
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_419 : cic.Term cic.prop (matita_arithmetics_nat.le n m0) =>
         _x_421 :
           (__ :
              (__ :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m0) ->
               cic.Term cic.prop P) ->
            __1 :
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      n m0) ->
               cic.Term cic.prop P) ->
            cic.Term cic.prop P) =>
         auto :
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                   (matita_arithmetics_nat.S m0)) ->
            cic.Term cic.prop P) =>
         auto' :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n (matita_arithmetics_nat.S m0)) ->
            cic.Term cic.prop P) =>
         auto (matita_arithmetics_nat.le_S_S n m0 _x_419))
        (matita_arithmetics_nat.S m) Hle.

def nat_elim1 :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) ->
      __ :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt p m) ->
            cic.Term cic.prop (P p)) ->
         cic.Term cic.prop (P m)) ->
      cic.Term cic.prop (P n) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      P :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Univ cic.prop) =>
      H :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt p m) ->
            cic.Term cic.prop (P p)) ->
         cic.Term cic.prop (P m)) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le q _x_365)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le q _x_365) =>
               P q)))
        (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         HleO :
           cic.Term cic.prop
             (matita_arithmetics_nat.le q matita_arithmetics_nat.O) =>
         matita_arithmetics_nat.le_n_O_elim q HleO P
           (H matita_arithmetics_nat.O
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               ltpO :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.lt p matita_arithmetics_nat.O) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False => P p)
                 (matita_basics_logic.absurd
                    (matita_arithmetics_nat.le (matita_arithmetics_nat.S p)
                       matita_arithmetics_nat.O)
                    ltpO (matita_arithmetics_nat.not_le_Sn_O p)))))
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.le q p) ->
            cic.Term cic.prop (P q)) =>
         q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         HleS :
           cic.Term cic.prop
             (matita_arithmetics_nat.le q (matita_arithmetics_nat.S p)) =>
         H q
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            lta : cic.Term cic.prop (matita_arithmetics_nat.lt a q) =>
            Hind a
              (matita_arithmetics_nat.le_S_S_to_le a p
                 (matita_arithmetics_nat.transitive_le
                    (matita_arithmetics_nat.S a) q
                    (matita_arithmetics_nat.S p) lta HleS))))
        n n (matita_arithmetics_nat.le_n n).

def f_ind_aux :
      A : cic.Univ univs.Type0 ->
      f :
        (__ : cic.Term univs.Type0 A ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      P : cic.Term univs.Type0 (matita_basics_relations.predicate A) ->
      __ :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a : cic.Term univs.Type0 A ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a) n) ->
            cic.Term cic.prop (P a)) ->
         a : cic.Term univs.Type0 A ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) n) ->
         cic.Term cic.prop (P a)) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      a : cic.Term univs.Type0 A ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a) n) ->
      cic.Term cic.prop (P a) :=
      A : cic.Univ univs.Type0 =>
      f :
        (__ : cic.Term univs.Type0 A ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      P : cic.Term univs.Type0 (matita_basics_relations.predicate A) =>
      H :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a : cic.Term univs.Type0 A ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a) n) ->
            cic.Term cic.prop (P a)) ->
         a : cic.Term univs.Type0 A ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) n) ->
         cic.Term cic.prop (P a)) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_elim1 n
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop A
           (a : cic.Term univs.Type0 A =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f a) __)
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f a) __) =>
               P a)))
        (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt p n0) ->
            a : cic.Term univs.Type0 A ->
            __1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) p) ->
            cic.Term cic.prop (P a)) =>
         a : cic.Term univs.Type0 A =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) n0) =>
         H n0
           (a0 : cic.Term univs.Type0 A =>
            auto'' :
              cic.Term cic.prop (matita_arithmetics_nat.lt (f a0) n0) =>
            auto (f a0) auto'' a0
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f a0)))
           a
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              n0
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     x n0)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n0)
              (f a) auto')).

def f_ind :
      A : cic.Univ univs.Type0 ->
      f :
        (__ : cic.Term univs.Type0 A ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      P : cic.Term univs.Type0 (matita_basics_relations.predicate A) ->
      __ :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a : cic.Term univs.Type0 A ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a) n) ->
            cic.Term cic.prop (P a)) ->
         a : cic.Term univs.Type0 A ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) n) ->
         cic.Term cic.prop (P a)) ->
      a : cic.Term univs.Type0 A -> cic.Term cic.prop (P a) :=
      A : cic.Univ univs.Type0 =>
      f :
        (__ : cic.Term univs.Type0 A ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      P : cic.Term univs.Type0 (matita_basics_relations.predicate A) =>
      H :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a : cic.Term univs.Type0 A ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a) n) ->
            cic.Term cic.prop (P a)) ->
         a : cic.Term univs.Type0 A ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) n) ->
         cic.Term cic.prop (P a)) =>
      a : cic.Term univs.Type0 A =>
      matita_arithmetics_nat.f_ind_aux A f P H (f a) a
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f a)).

def f2_ind_aux :
      A1 : cic.Univ univs.Type0 ->
      A2 : cic.Univ univs.Type0 ->
      f :
        (__ : cic.Term univs.Type0 A1 ->
         __1 : cic.Term univs.Type0 A2 ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      P : cic.Term univs.Type0 (matita_basics_relations.relation2 A1 A2) ->
      __ :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2) n) ->
            cic.Term cic.prop (P a1 a2)) ->
         a1 : cic.Term univs.Type0 A1 ->
         a2 : cic.Term univs.Type0 A2 ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2) n) ->
         cic.Term cic.prop (P a1 a2)) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      a1 : cic.Term univs.Type0 A1 ->
      a2 : cic.Term univs.Type0 A2 ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a1 a2) n) ->
      cic.Term cic.prop (P a1 a2) :=
      A1 : cic.Univ univs.Type0 =>
      A2 : cic.Univ univs.Type0 =>
      f :
        (__ : cic.Term univs.Type0 A1 ->
         __1 : cic.Term univs.Type0 A2 ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      P : cic.Term univs.Type0 (matita_basics_relations.relation2 A1 A2) =>
      H :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2) n) ->
            cic.Term cic.prop (P a1 a2)) ->
         a1 : cic.Term univs.Type0 A1 ->
         a2 : cic.Term univs.Type0 A2 ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2) n) ->
         cic.Term cic.prop (P a1 a2)) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_elim1 n
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop A1
           (a1 : cic.Term univs.Type0 A1 =>
            cic.prod univs.Type0 cic.prop A2
              (a2 : cic.Term univs.Type0 A2 =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f a1 a2) __)
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f a1 a2) __) =>
                  P a1 a2))))
        (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt p n0) ->
            a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            __1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a1 a2) p) ->
            cic.Term cic.prop (P a1 a2)) =>
         a1 : cic.Term univs.Type0 A1 =>
         a2 : cic.Term univs.Type0 A2 =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2) n0) =>
         H n0
           (a10 : cic.Term univs.Type0 A1 =>
            a20 : cic.Term univs.Type0 A2 =>
            auto'' :
              cic.Term cic.prop (matita_arithmetics_nat.lt (f a10 a20) n0) =>
            auto (f a10 a20) auto'' a10 a20
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f a10 a20)))
           a1 a2
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              n0
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     x n0)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n0)
              (f a1 a2) auto')).

def f2_ind :
      A1 : cic.Univ univs.Type0 ->
      A2 : cic.Univ univs.Type0 ->
      f :
        (__ : cic.Term univs.Type0 A1 ->
         __1 : cic.Term univs.Type0 A2 ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      P : cic.Term univs.Type0 (matita_basics_relations.relation2 A1 A2) ->
      __ :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2) n) ->
            cic.Term cic.prop (P a1 a2)) ->
         a1 : cic.Term univs.Type0 A1 ->
         a2 : cic.Term univs.Type0 A2 ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2) n) ->
         cic.Term cic.prop (P a1 a2)) ->
      a1 : cic.Term univs.Type0 A1 ->
      a2 : cic.Term univs.Type0 A2 -> cic.Term cic.prop (P a1 a2) :=
      A1 : cic.Univ univs.Type0 =>
      A2 : cic.Univ univs.Type0 =>
      f :
        (__ : cic.Term univs.Type0 A1 ->
         __1 : cic.Term univs.Type0 A2 ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      P : cic.Term univs.Type0 (matita_basics_relations.relation2 A1 A2) =>
      H :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2) n) ->
            cic.Term cic.prop (P a1 a2)) ->
         a1 : cic.Term univs.Type0 A1 ->
         a2 : cic.Term univs.Type0 A2 ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2) n) ->
         cic.Term cic.prop (P a1 a2)) =>
      a1 : cic.Term univs.Type0 A1 =>
      a2 : cic.Term univs.Type0 A2 =>
      matita_arithmetics_nat.f2_ind_aux A1 A2 f P H (f a1 a2) a1 a2
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f a1 a2)).

def f3_ind_aux :
      A1 : cic.Univ univs.Type0 ->
      A2 : cic.Univ univs.Type0 ->
      A3 : cic.Univ univs.Type0 ->
      f :
        (__ : cic.Term univs.Type0 A1 ->
         __1 : cic.Term univs.Type0 A2 ->
         __2 : cic.Term univs.Type0 A3 ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      P :
        cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3) ->
      __ :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            a3 : cic.Term univs.Type0 A3 ->
            __ :
              cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n) ->
            cic.Term cic.prop (P a1 a2 a3)) ->
         a1 : cic.Term univs.Type0 A1 ->
         a2 : cic.Term univs.Type0 A2 ->
         a3 : cic.Term univs.Type0 A3 ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2 a3) n) ->
         cic.Term cic.prop (P a1 a2 a3)) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      a1 : cic.Term univs.Type0 A1 ->
      a2 : cic.Term univs.Type0 A2 ->
      a3 : cic.Term univs.Type0 A3 ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a1 a2 a3) n) ->
      cic.Term cic.prop (P a1 a2 a3) :=
      A1 : cic.Univ univs.Type0 =>
      A2 : cic.Univ univs.Type0 =>
      A3 : cic.Univ univs.Type0 =>
      f :
        (__ : cic.Term univs.Type0 A1 ->
         __1 : cic.Term univs.Type0 A2 ->
         __2 : cic.Term univs.Type0 A3 ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      P :
        cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3) =>
      H :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            a3 : cic.Term univs.Type0 A3 ->
            __ :
              cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n) ->
            cic.Term cic.prop (P a1 a2 a3)) ->
         a1 : cic.Term univs.Type0 A1 ->
         a2 : cic.Term univs.Type0 A2 ->
         a3 : cic.Term univs.Type0 A3 ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2 a3) n) ->
         cic.Term cic.prop (P a1 a2 a3)) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_elim1 n
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop A1
           (a1 : cic.Term univs.Type0 A1 =>
            cic.prod univs.Type0 cic.prop A2
              (a2 : cic.Term univs.Type0 A2 =>
               cic.prod univs.Type0 cic.prop A3
                 (a3 : cic.Term univs.Type0 A3 =>
                  cic.prod cic.prop cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f a1 a2 a3) __)
                    (__1 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f a1 a2 a3) __) =>
                     P a1 a2 a3)))))
        (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt p n0) ->
            a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            a3 : cic.Term univs.Type0 A3 ->
            __1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a1 a2 a3) p) ->
            cic.Term cic.prop (P a1 a2 a3)) =>
         a1 : cic.Term univs.Type0 A1 =>
         a2 : cic.Term univs.Type0 A2 =>
         a3 : cic.Term univs.Type0 A3 =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2 a3) n0) =>
         H n0
           (a10 : cic.Term univs.Type0 A1 =>
            a20 : cic.Term univs.Type0 A2 =>
            a30 : cic.Term univs.Type0 A3 =>
            auto'' :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt (f a10 a20 a30) n0) =>
            auto (f a10 a20 a30) auto'' a10 a20 a30
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f a10 a20 a30)))
           a1 a2 a3
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              n0
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     x n0)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n0)
              (f a1 a2 a3) auto')).

def f3_ind :
      A1 : cic.Univ univs.Type0 ->
      A2 : cic.Univ univs.Type0 ->
      A3 : cic.Univ univs.Type0 ->
      f :
        (__ : cic.Term univs.Type0 A1 ->
         __1 : cic.Term univs.Type0 A2 ->
         __2 : cic.Term univs.Type0 A3 ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      P :
        cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3) ->
      __ :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            a3 : cic.Term univs.Type0 A3 ->
            __ :
              cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n) ->
            cic.Term cic.prop (P a1 a2 a3)) ->
         a1 : cic.Term univs.Type0 A1 ->
         a2 : cic.Term univs.Type0 A2 ->
         a3 : cic.Term univs.Type0 A3 ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2 a3) n) ->
         cic.Term cic.prop (P a1 a2 a3)) ->
      a1 : cic.Term univs.Type0 A1 ->
      a2 : cic.Term univs.Type0 A2 ->
      a3 : cic.Term univs.Type0 A3 -> cic.Term cic.prop (P a1 a2 a3) :=
      A1 : cic.Univ univs.Type0 =>
      A2 : cic.Univ univs.Type0 =>
      A3 : cic.Univ univs.Type0 =>
      f :
        (__ : cic.Term univs.Type0 A1 ->
         __1 : cic.Term univs.Type0 A2 ->
         __2 : cic.Term univs.Type0 A3 ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      P :
        cic.Term univs.Type0 (matita_basics_relations.relation3 A1 A2 A3) =>
      H :
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           (a1 : cic.Term univs.Type0 A1 ->
            a2 : cic.Term univs.Type0 A2 ->
            a3 : cic.Term univs.Type0 A3 ->
            __ :
              cic.Term cic.prop (matita_arithmetics_nat.lt (f a1 a2 a3) n) ->
            cic.Term cic.prop (P a1 a2 a3)) ->
         a1 : cic.Term univs.Type0 A1 ->
         a2 : cic.Term univs.Type0 A2 ->
         a3 : cic.Term univs.Type0 A3 ->
         __1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a1 a2 a3) n) ->
         cic.Term cic.prop (P a1 a2 a3)) =>
      a1 : cic.Term univs.Type0 A1 =>
      a2 : cic.Term univs.Type0 A2 =>
      a3 : cic.Term univs.Type0 A3 =>
      matita_arithmetics_nat.f3_ind_aux A1 A2 A3 f P H (f a1 a2 a3) a1 a2 a3
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f a1 a2 a3)).

def lt_to_not_eq :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt n m) ->
      cic.Term cic.prop
        (matita_basics_logic.Not
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
      matita_basics_logic.not_to_not
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)
        matita_basics_logic.False
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m) =>
         matita_basics_logic.absurd
           (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) n)
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) m))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) n))
              H
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S n) x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              (matita_arithmetics_nat.S n) n)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le
                          (matita_arithmetics_nat.S n) n)))
                 m auto))
           (matita_arithmetics_nat.not_le_Sn_n n))
        (matita_basics_logic.nmk matita_basics_logic.False
           (auto : cic.Term cic.prop matita_basics_logic.False => auto)).

def le_n_O_to_eq :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n matita_arithmetics_nat.O) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_nat.le __ matita_arithmetics_nat.O)
           (__1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.le __ matita_arithmetics_nat.O) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O __))
        (auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le matita_arithmetics_nat.O
                matita_arithmetics_nat.O) =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O)
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         abs :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
                matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O (matita_arithmetics_nat.S a))
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S a)
                 matita_arithmetics_nat.O)
              abs (matita_arithmetics_nat.not_le_Sn_O a)))
        n.

def le_to_le_to_eq :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)
      :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop (matita_arithmetics_nat.le __ _0)
           (__1 : cic.Term cic.prop (matita_arithmetics_nat.le __ _0) =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le _0 __)
              (__2 : cic.Term cic.prop (matita_arithmetics_nat.le _0 __) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 __ _0)))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le matita_arithmetics_nat.O n) =>
         auto' :
           cic.Term cic.prop
             (matita_arithmetics_nat.le n matita_arithmetics_nat.O) =>
         matita_basics_logic.sym_eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           matita_arithmetics_nat.O
           (matita_basics_logic.sym_eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O n
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O n))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O n))
                 (matita_arithmetics_nat.le_n_O_to_eq n auto')
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O n))))))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                matita_arithmetics_nat.O) =>
         auto' :
           cic.Term cic.prop
             (matita_arithmetics_nat.le matita_arithmetics_nat.O
                (matita_arithmetics_nat.S n)) =>
         matita_basics_logic.sym_eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O (matita_arithmetics_nat.S n)
           (matita_arithmetics_nat.le_n_O_to_eq (matita_arithmetics_nat.S n)
              auto))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
            __1 : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n m)) =>
         auto' :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m)) =>
         auto'' :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S m)
                (matita_arithmetics_nat.S n)) =>
         matita_basics_logic.eq_f
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.S n m
           (auto
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S m))))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le n m))
                 (matita_arithmetics_nat.monotonic_pred
                    (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)
                    auto')
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le x
                                 (matita_arithmetics_nat.pred
                                    (matita_arithmetics_nat.S m))))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le n m)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       m
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le n x))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le n m)))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le n m)))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S m))
                       (matita_arithmetics_nat.pred_Sn m))
                    (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                    (matita_arithmetics_nat.pred_Sn n)))
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S m))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S n))))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le m n))
                 (matita_arithmetics_nat.monotonic_pred
                    (matita_arithmetics_nat.S m) (matita_arithmetics_nat.S n)
                    auto'')
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le x
                                 (matita_arithmetics_nat.pred
                                    (matita_arithmetics_nat.S n))))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le m n)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le m x))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le m n)))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le m n)))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.pred_Sn n))
                    (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.pred_Sn m))))).

def increasing_to_injective :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.increasing f) ->
      cic.Term cic.prop
        (matita_basics_relations.{|injective|} matita_arithmetics_nat.nat
           matita_arithmetics_nat.nat f)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      incr : cic.Term cic.prop (matita_arithmetics_nat.increasing f) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or (matita_arithmetics_nat.le n m)
        (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or (matita_arithmetics_nat.le n m)
                (matita_basics_logic.Not (matita_arithmetics_nat.le n m))) =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f n) (f m))
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f n) (f m)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m))
        (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         matita_basics_logic.match_Or (matita_arithmetics_nat.lt n m)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or (matita_arithmetics_nat.lt n m)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      n m)) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f n) (f m))
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f n) (f m)) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n m))
           (lenm0 : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
            eqf :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f n) (f m)) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n m)
              (matita_basics_logic.absurd
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f n) (f m))
                 eqf
                 (matita_arithmetics_nat.lt_to_not_eq (f n) (f m)
                    (matita_arithmetics_nat.increasing_to_monotonic f incr n
                       m lenm0))))
           (auto :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m) =>
            auto' :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f n) (f m)) =>
            matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     n x)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n)
              m auto)
           (matita_arithmetics_nat.le_to_or_lt_eq n m lenm))
        (nlenm :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         eqf :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f n) (f m)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m)
           (matita_basics_logic.absurd
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f n) (f m))
              eqf
              (matita_basics_logic.sym_not_eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f m) (f n)
                 (matita_arithmetics_nat.lt_to_not_eq (f m) (f n)
                    (matita_arithmetics_nat.increasing_to_monotonic f incr m
                       n (matita_arithmetics_nat.not_le_to_lt n m nlenm))))))
        (matita_arithmetics_nat.decidable_le n m).

def minus_Sn_m :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.S n) m)
           (matita_arithmetics_nat.S (matita_arithmetics_nat.minus n m)))
      :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop (matita_arithmetics_nat.le __ _0)
           (__1 : cic.Term cic.prop (matita_arithmetics_nat.le __ _0) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.S _0) __)
              (matita_arithmetics_nat.S (matita_arithmetics_nat.minus _0 __))))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le matita_arithmetics_nat.O n) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.S n)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x
                  (matita_arithmetics_nat.S
                     (matita_arithmetics_nat.minus n matita_arithmetics_nat.O)))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.S n)
                     (matita_arithmetics_nat.S x))
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S n))
              (matita_arithmetics_nat.minus n matita_arithmetics_nat.O)
              (matita_arithmetics_nat.minus_n_O n))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.S n)
              matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus_n_O (matita_arithmetics_nat.S n)))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         abs :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.S n))
              (matita_arithmetics_nat.S
                 (matita_arithmetics_nat.minus matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S n))))
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 matita_arithmetics_nat.O)
              abs (matita_arithmetics_nat.not_le_Sn_O n)))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus (matita_arithmetics_nat.S m) n)
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.minus m n)))) =>
         c :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m)) =>
         matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus (matita_arithmetics_nat.S m) n)
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.minus m n))))
           (cic.lift cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.S (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.S
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.S m)
                       (matita_arithmetics_nat.S n)))))
           (Hind
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S n))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S m))))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le n m))
                 (matita_arithmetics_nat.monotonic_pred
                    (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)
                    c)
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le x
                                 (matita_arithmetics_nat.pred
                                    (matita_arithmetics_nat.S m))))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le n m)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       m
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le n x))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le n m)))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le n m)))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S m))
                       (matita_arithmetics_nat.pred_Sn m))
                    (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                    (matita_arithmetics_nat.pred_Sn n))))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.S m) n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.S m) n)
                           (matita_arithmetics_nat.S
                              (matita_arithmetics_nat.minus m n))))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           x
                           (matita_arithmetics_nat.S
                              (matita_arithmetics_nat.minus
                                 (matita_arithmetics_nat.S m)
                                 (matita_arithmetics_nat.S n))))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus m n)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.minus
                                 (matita_arithmetics_nat.S m) n)
                              (matita_arithmetics_nat.S
                                 (matita_arithmetics_nat.minus m n))))
                        (cic.lift cic.prop univs.Type0
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.minus
                                 (matita_arithmetics_nat.S m) n)
                              (matita_arithmetics_nat.S x))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.S m) n)
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_nat.minus m n)))))
                 (matita_arithmetics_nat.minus (matita_arithmetics_nat.S m)
                    (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.minus_S_S m n))
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.S (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.S n))
              (matita_arithmetics_nat.minus_S_S (matita_arithmetics_nat.S m)
                 n))).

def plus_minus :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) p)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n p) m))
      :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le __ _0)
              (__1 : cic.Term cic.prop (matita_arithmetics_nat.le __ _0) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus _0 __) p)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus _0 p) __))))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le matita_arithmetics_nat.O n) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.plus x p)
                  (matita_arithmetics_nat.minus
                     (matita_arithmetics_nat.plus n p)
                     matita_arithmetics_nat.O))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus n p)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.plus n p) x)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus n p))
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n p)
                 matita_arithmetics_nat.O)
              (matita_arithmetics_nat.minus_n_O
                 (matita_arithmetics_nat.plus n p)))
           (matita_arithmetics_nat.minus n matita_arithmetics_nat.O)
           (matita_arithmetics_nat.minus_n_O n))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         abs :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.minus matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S n))
                 p)
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.plus matita_arithmetics_nat.O p)
                 (matita_arithmetics_nat.S n)))
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                 matita_arithmetics_nat.O)
              abs (matita_arithmetics_nat.not_le_Sn_O n)))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus m n) p)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus m p) n))) =>
         p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto' :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                (matita_arithmetics_nat.S m)) =>
         auto p
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                    (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))))
              (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.le n m))
              (matita_arithmetics_nat.monotonic_pred
                 (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)
                 auto')
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le x
                              (matita_arithmetics_nat.pred
                                 (matita_arithmetics_nat.S m))))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le n m)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le n x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le n m)))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le n m)))
                    (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.pred_Sn m))
                 (matita_arithmetics_nat.pred (matita_arithmetics_nat.S n))
                 (matita_arithmetics_nat.pred_Sn n)))).

def minus_plus_m_m :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n m) m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus m m)
                 n)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus m n)
                 m)))
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n m)
                 m)))
        (matita_arithmetics_nat.plus_minus m m n
           (matita_arithmetics_nat.le_n m))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.plus x n)
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.plus m n) m)))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        n
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.plus n m) m))))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           x
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.plus m n) m)))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           n
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.plus n m) m))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus n m)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              n (matita_arithmetics_nat.minus x m)))
                        (cic.lift cic.prop univs.Type0
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              n
                              (matita_arithmetics_nat.minus
                                 (matita_arithmetics_nat.plus n m) m))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.plus n m) m))))
                 (matita_arithmetics_nat.plus m n)
                 (matita_arithmetics_nat.commutative_plus m n))
              (matita_arithmetics_nat.plus matita_arithmetics_nat.O n)
              (matita_arithmetics_nat.plus_O_n n))
           (matita_arithmetics_nat.minus m m)
           (matita_arithmetics_nat.minus_n_n m)).

def plus_minus_m_m :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lemn : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
      matita_basics_logic.sym_eq
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m) n
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus n m) m)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus n m) m)))
           (cic.lift cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus n m) m)
                 n))
           (matita_arithmetics_nat.plus_minus m n m lemn)
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus m
                 (matita_arithmetics_nat.minus n m))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus
                              (matita_arithmetics_nat.minus n m) m)
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.plus n m) m)))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           x n)))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.minus n m))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              x
                              (matita_arithmetics_nat.minus
                                 (matita_arithmetics_nat.plus n m) m)))
                        (cic.lift cic.prop univs.Type0
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (matita_arithmetics_nat.plus m
                                 (matita_arithmetics_nat.minus n m))
                              n)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_nat.plus m
                                    (matita_arithmetics_nat.minus n m))
                                 x))
                           (cic.lift cic.prop univs.Type0
                              (matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_nat.plus m
                                    (matita_arithmetics_nat.minus n m))
                                 n)))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus m
                                (matita_arithmetics_nat.minus n m))
                             n)))
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.plus n m) m)
                    (matita_arithmetics_nat.minus_plus_m_m n m))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus n m) m)
                 (matita_arithmetics_nat.commutative_plus
                    (matita_arithmetics_nat.minus n m) m))
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m)
                 m)
              (matita_arithmetics_nat.commutative_plus
                 (matita_arithmetics_nat.minus n m) m))).

def minus_to_plus :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus n m) p) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.plus m p))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lemn : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
      eqp :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus n m) p) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m)
                 m)))
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (matita_arithmetics_nat.plus m p)))
        (matita_arithmetics_nat.plus_minus_m_m n m lemn)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus m (matita_arithmetics_nat.minus n m))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        n x))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        n (matita_arithmetics_nat.plus m p))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) p
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           n (matita_arithmetics_nat.plus m x)))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           n (matita_arithmetics_nat.plus m p))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n (matita_arithmetics_nat.plus m p))))
              (matita_arithmetics_nat.minus n m) eqp)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m)
           (matita_arithmetics_nat.commutative_plus
              (matita_arithmetics_nat.minus n m) m)).

def plus_to_minus :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             (matita_arithmetics_nat.plus m p)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus n m) p)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      eqp :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             (matita_arithmetics_nat.plus m p)) =>
      matita_basics_logic.sym_eq
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) p
        (matita_arithmetics_nat.minus n m)
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 p
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus p m) m)))
           (cic.lift cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 p (matita_arithmetics_nat.minus n m)))
           (matita_arithmetics_nat.minus_plus_m_m p m)
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus m p)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           p (matita_arithmetics_nat.minus x m)))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           p (matita_arithmetics_nat.minus n m))))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              p (matita_arithmetics_nat.minus x m)))
                        (cic.lift cic.prop univs.Type0
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              p (matita_arithmetics_nat.minus n m))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          p (matita_arithmetics_nat.minus n m))))
                 (matita_arithmetics_nat.plus m p) eqp)
              (matita_arithmetics_nat.plus p m)
              (matita_arithmetics_nat.commutative_plus p m))).

def minus_pred_pred :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.pred n)
              (matita_arithmetics_nat.pred m))
           (matita_arithmetics_nat.minus n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      posm :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) =>
      matita_arithmetics_nat.lt_O_n_elim n posn
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.pred __)
              (matita_arithmetics_nat.pred m))
           (matita_arithmetics_nat.minus __ m))
        (matita_arithmetics_nat.lt_O_n_elim m posm
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.pred
                       (matita_arithmetics_nat.S m0))
                    (matita_arithmetics_nat.pred __))
                 (matita_arithmetics_nat.minus (matita_arithmetics_nat.S m0)
                    __)))
           (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            m00 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              m00
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.minus x
                        (matita_arithmetics_nat.pred
                           (matita_arithmetics_nat.S m0)))
                     (matita_arithmetics_nat.minus
                        (matita_arithmetics_nat.S m00)
                        (matita_arithmetics_nat.S m0)))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 m0
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus m00 x)
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.S m00)
                           (matita_arithmetics_nat.S m0)))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus m00 m0)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.minus m00 m0) x)
                          __))
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus m00 m0))
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.S m00)
                       (matita_arithmetics_nat.S m0))
                    (matita_arithmetics_nat.minus_S_S m00 m0))
                 (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m0))
                 (matita_arithmetics_nat.pred_Sn m0))
              (matita_arithmetics_nat.pred (matita_arithmetics_nat.S m00))
              (matita_arithmetics_nat.pred_Sn m00))).

def plus_minus_associative :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le z y) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x (matita_arithmetics_nat.minus y z))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x y) z))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.le z y) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus y z)
                 x)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus y x)
                 z)))
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus x
                 (matita_arithmetics_nat.minus y z))
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x y)
                 z)))
        (matita_arithmetics_nat.plus_minus z y x auto)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x (matita_arithmetics_nat.minus y z))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        x0
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.plus y x) z)))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.plus x
                           (matita_arithmetics_nat.minus y z))
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.plus x y) z))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus x y)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus x
                              (matita_arithmetics_nat.minus y z))
                           (matita_arithmetics_nat.minus x0 z)))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus x
                              (matita_arithmetics_nat.minus y z))
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.plus x y) z))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus x
                          (matita_arithmetics_nat.minus y z))
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.plus x y) z))))
              (matita_arithmetics_nat.plus y x)
              (matita_arithmetics_nat.commutative_plus y x))
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus y z) x)
           (matita_arithmetics_nat.commutative_plus
              (matita_arithmetics_nat.minus y z) x)).

def le_n_fn :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.increasing f) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop (matita_arithmetics_nat.le n (f n)) :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      incr : cic.Term cic.prop (matita_arithmetics_nat.increasing f) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le _x_365 (f _x_365))
        (matita_arithmetics_nat.le_O_n (f matita_arithmetics_nat.O))
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop (matita_arithmetics_nat.le x_366 (f x_366)) =>
         matita_arithmetics_nat.le_to_lt_to_lt x_366 (f x_366)
           (f (matita_arithmetics_nat.S x_366)) _x_368 (incr x_366))
        n.

def monotonic_le_minus_l :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le q p) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.minus q n)
           (matita_arithmetics_nat.minus p n))
      :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le _0 __)
              (__1 : cic.Term cic.prop (matita_arithmetics_nat.le _0 __) =>
               matita_arithmetics_nat.le (matita_arithmetics_nat.minus _0 n)
                 (matita_arithmetics_nat.minus __ n))))
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         lePO :
           cic.Term cic.prop
             (matita_arithmetics_nat.le p matita_arithmetics_nat.O) =>
         matita_arithmetics_nat.le_n_O_elim p lePO
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le (matita_arithmetics_nat.minus __ q)
              (matita_arithmetics_nat.minus matita_arithmetics_nat.O q))
           (matita_arithmetics_nat.le_n
              (matita_arithmetics_nat.minus matita_arithmetics_nat.O q)))
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.le matita_arithmetics_nat.O
                (matita_arithmetics_nat.S p)) =>
         matita_arithmetics_nat.le_plus_minus_m_m
           (matita_arithmetics_nat.minus matita_arithmetics_nat.O q)
           (matita_arithmetics_nat.match_nat univs.Type0
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S p)
              (q0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.minus p q0)
              q))
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (n0 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.le q p) ->
            cic.Term cic.prop
              (matita_arithmetics_nat.le (matita_arithmetics_nat.minus q n0)
                 (matita_arithmetics_nat.minus p n0))) =>
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_nat.le (matita_arithmetics_nat.S q)
                 (matita_arithmetics_nat.S p))
              (__1 :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S q)
                      (matita_arithmetics_nat.S p)) =>
               matita_arithmetics_nat.le
                 (matita_arithmetics_nat.minus (matita_arithmetics_nat.S q)
                    __)
                 (matita_arithmetics_nat.minus (matita_arithmetics_nat.S p)
                    __)))
           (auto :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S q)
                   (matita_arithmetics_nat.S p)) =>
            auto)
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            leSS :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S q)
                   (matita_arithmetics_nat.S p)) =>
            Hind a
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S q))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S p))))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le q p))
                 (matita_arithmetics_nat.monotonic_pred
                    (matita_arithmetics_nat.S q) (matita_arithmetics_nat.S p)
                    leSS)
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    q
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le x
                                 (matita_arithmetics_nat.pred
                                    (matita_arithmetics_nat.S p))))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le q p)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       p
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le q x))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le q p)))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le q p)))
                       (matita_arithmetics_nat.pred
                          (matita_arithmetics_nat.S p))
                       (matita_arithmetics_nat.pred_Sn p))
                    (matita_arithmetics_nat.pred (matita_arithmetics_nat.S q))
                    (matita_arithmetics_nat.pred_Sn q))))
           n).

def le_minus_to_plus :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n m) p) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus p m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lep :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n m) p) =>
      matita_arithmetics_nat.transitive_le n
        (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n m) m)
        (matita_arithmetics_nat.plus p m)
        (matita_arithmetics_nat.le_plus_minus_m_m n m)
        (matita_arithmetics_nat.monotonic_le_plus_l m
           (matita_arithmetics_nat.minus n m) p lep).

def le_minus_to_plus_r :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le c b) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.le a (matita_arithmetics_nat.minus b c)) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.plus a c) b)
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hlecb : cic.Term cic.prop (matita_arithmetics_nat.le c b) =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.le a (matita_arithmetics_nat.minus b c)) =>
      matita_basics_logic.eq_ind_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus b c) c)
        (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.minus b c) c)) =>
         matita_arithmetics_nat.le (matita_arithmetics_nat.plus a c) x)
        (matita_arithmetics_nat.monotonic_le_plus_l c a
           (matita_arithmetics_nat.minus b c) H)
        b (matita_arithmetics_nat.plus_minus_m_m b c Hlecb).

def le_plus_to_minus :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus p m)) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n m) p)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lep :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n (matita_arithmetics_nat.plus p m)) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n m)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus p m)
                 m)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n m) p))
        (matita_arithmetics_nat.monotonic_le_minus_l
           (matita_arithmetics_nat.plus p m) n m lep)
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) p
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le
                        (matita_arithmetics_nat.minus n m) x))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le
                        (matita_arithmetics_nat.minus n m) p)))
                 __))
           (matita_basics_logic.refl
              (cic.lift (cic.succ univs.Type0) univs.Type2
                 (cic.univ univs.Type0))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.minus n m) p)))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus p m) m)
           (matita_arithmetics_nat.minus_plus_m_m p m)).

def monotonic_le_minus_r :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le q p) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n p)
           (matita_arithmetics_nat.minus n q))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lepq : cic.Term cic.prop (matita_arithmetics_nat.le q p) =>
      matita_arithmetics_nat.le_plus_to_minus n p
        (matita_arithmetics_nat.minus n q)
        (matita_arithmetics_nat.transitive_le n
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n q) q)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus n q) p)
           (matita_arithmetics_nat.le_plus_minus_m_m n q)
           (matita_arithmetics_nat.monotonic_le_plus_r
              (matita_arithmetics_nat.minus n q) q p lepq)).

def increasing_to_le :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.increasing f) ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.ex matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le m (f i)))
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      incr : cic.Term cic.prop (matita_arithmetics_nat.increasing f) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.ex matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le _x_365 (f i)))
        (matita_basics_logic.ex_intro matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le matita_arithmetics_nat.O (f i))
           m
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le matita_arithmetics_nat.O
                    (matita_arithmetics_nat.plus (f m)
                       matita_arithmetics_nat.O)))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le matita_arithmetics_nat.O (f m)))
              (matita_arithmetics_nat.le_plus_n (f m)
                 matita_arithmetics_nat.O)
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f m)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              matita_arithmetics_nat.O x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le
                              matita_arithmetics_nat.O (f m))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le matita_arithmetics_nat.O
                          (f m))))
                 (matita_arithmetics_nat.plus (f m) matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.plus_n_O (f m)))))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.ex matita_arithmetics_nat.nat
                (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                 matita_arithmetics_nat.le n (f i))) =>
         matita_basics_logic.match_ex matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le n (f i))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.ex matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_arithmetics_nat.le n (f i))) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (f i)))
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            lenfa : cic.Term cic.prop (matita_arithmetics_nat.le n (f a)) =>
            matita_basics_logic.ex_intro matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.le (matita_arithmetics_nat.S n) (f i))
              (matita_arithmetics_nat.S a)
              (matita_arithmetics_nat.le_to_lt_to_lt n (f a)
                 (f (matita_arithmetics_nat.S a)) lenfa (incr a)))
           _clearme)
        m.

def minus_le :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.minus x y) x)
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le (matita_arithmetics_nat.minus x y)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x y)
                 y)))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_nat.le (matita_arithmetics_nat.minus x y) x))
        (matita_arithmetics_nat.monotonic_le_minus_l
           (matita_arithmetics_nat.plus x y) x y
           (matita_arithmetics_nat.le_plus_n_r y x))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le
                        (matita_arithmetics_nat.minus x y) x0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_nat.le
                        (matita_arithmetics_nat.minus x y) x)))
                 __))
           (matita_basics_logic.refl
              (cic.lift (cic.succ univs.Type0) univs.Type2
                 (cic.univ univs.Type0))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_nat.minus x y) x)))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x y) y)
           (matita_arithmetics_nat.minus_plus_m_m x y)).

def not_eq_to_le_to_lt :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m)) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt n m) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hneq :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m)) =>
      Hle : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_basics_logic.match_Or (matita_arithmetics_nat.lt n m)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or (matita_arithmetics_nat.lt n m)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m)) =>
         matita_arithmetics_nat.lt n m)
        (auto : cic.Term cic.prop (matita_arithmetics_nat.lt n m) => auto)
        (Heq :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m) =>
         matita_arithmetics_nat.not_le_to_lt m n
           (matita_basics_logic.not_to_not (matita_arithmetics_nat.le m n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n m)
              (auto : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
               matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        n x)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n)
                 m Heq)
              Hneq))
        (matita_arithmetics_nat.le_to_or_lt_eq n m Hle).

def lt_times_n_to_lt_l :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.times p n)
             (matita_arithmetics_nat.times q n)) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt p q) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hlt :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.times p n)
             (matita_arithmetics_nat.times q n)) =>
      matita_basics_logic.Or_ind (matita_arithmetics_nat.lt p q)
        (matita_basics_logic.Not (matita_arithmetics_nat.lt p q))
        (_x_170 :
           cic.Term cic.prop
             (matita_basics_logic.Or (matita_arithmetics_nat.lt p q)
                (matita_basics_logic.Not (matita_arithmetics_nat.lt p q))) =>
         matita_arithmetics_nat.lt p q)
        (_x_171 : cic.Term cic.prop (matita_arithmetics_nat.lt p q) => _x_171)
        (nltpq :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.lt p q)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_arithmetics_nat.lt p q)
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.le (matita_arithmetics_nat.times q n)
                 (matita_arithmetics_nat.times p n))
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.times n q)
                       (matita_arithmetics_nat.times n p)))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.times q n)
                       (matita_arithmetics_nat.times p n)))
                 (matita_arithmetics_nat.monotonic_le_times_r n q p
                    (matita_arithmetics_nat.not_lt_to_le p q nltpq))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times n q)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.times n q)
                                 (matita_arithmetics_nat.times n p)))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le x
                                 (matita_arithmetics_nat.times p n))))
                          __))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times n p)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.times n q)
                                    (matita_arithmetics_nat.times n p)))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.times n q) x)))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le
                                (matita_arithmetics_nat.times n q)
                                (matita_arithmetics_nat.times n p))))
                       (matita_arithmetics_nat.times p n)
                       (matita_arithmetics_nat.commutative_times p n))
                    (matita_arithmetics_nat.times q n)
                    (matita_arithmetics_nat.commutative_times q n)))
              (matita_arithmetics_nat.lt_to_not_le
                 (matita_arithmetics_nat.times p n)
                 (matita_arithmetics_nat.times q n) Hlt)))
        (matita_arithmetics_nat.decidable_lt p q).

def lt_times_n_to_lt_r :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p)
             (matita_arithmetics_nat.times n q)) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt p q) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p)
             (matita_arithmetics_nat.times n q)) =>
      matita_arithmetics_nat.lt_times_n_to_lt_l n p q
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.lt (matita_arithmetics_nat.times n p)
                 (matita_arithmetics_nat.times n q)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.lt (matita_arithmetics_nat.times p n)
                 (matita_arithmetics_nat.times q n)))
           auto
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times p n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.lt x
                           (matita_arithmetics_nat.times n q)))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.lt
                           (matita_arithmetics_nat.times p n)
                           (matita_arithmetics_nat.times q n))))
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times q n)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              (matita_arithmetics_nat.times p n) x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              (matita_arithmetics_nat.times p n)
                              (matita_arithmetics_nat.times q n))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_nat.times p n)
                          (matita_arithmetics_nat.times q n))))
                 (matita_arithmetics_nat.times n q)
                 (matita_arithmetics_nat.commutative_times n q))
              (matita_arithmetics_nat.times n p)
              (matita_arithmetics_nat.commutative_times n p))).

def lt_minus_to_plus :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.minus a b) c) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt a (matita_arithmetics_nat.plus c b))
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt (matita_arithmetics_nat.minus a b) c) =>
      matita_arithmetics_nat.not_le_to_lt (matita_arithmetics_nat.plus c b) a
        (matita_basics_logic.not_to_not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.plus c b) a)
           (matita_arithmetics_nat.le c (matita_arithmetics_nat.minus a b))
           (auto :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.plus c b)
                   a) =>
            matita_arithmetics_nat.le_plus_to_minus_r c b a auto)
           (matita_arithmetics_nat.lt_to_not_le
              (matita_arithmetics_nat.minus a b) c H)).

def lt_minus_to_plus_r :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt a (matita_arithmetics_nat.minus b c)) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt (matita_arithmetics_nat.plus a c) b)
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt a (matita_arithmetics_nat.minus b c)) =>
      matita_arithmetics_nat.not_le_to_lt b (matita_arithmetics_nat.plus a c)
        (matita_basics_logic.not_to_not
           (matita_arithmetics_nat.le b (matita_arithmetics_nat.plus a c))
           (matita_arithmetics_nat.le (matita_arithmetics_nat.minus b c) a)
           (matita_arithmetics_nat.le_plus_to_minus b c a)
           (matita_arithmetics_nat.lt_to_not_le a
              (matita_arithmetics_nat.minus b c) H)).

def lt_plus_to_minus :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt n (matita_arithmetics_nat.plus p m)) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt (matita_arithmetics_nat.minus n m) p)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt n (matita_arithmetics_nat.plus p m)) =>
      matita_basics_logic.eq_ind
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.minus (matita_arithmetics_nat.S n) m)
        (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_2 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus (matita_arithmetics_nat.S n) m)
                x_1) =>
         matita_arithmetics_nat.le x_1 p)
        (matita_arithmetics_nat.le_plus_to_minus (matita_arithmetics_nat.S n)
           m p H)
        (matita_arithmetics_nat.S (matita_arithmetics_nat.minus n m))
        (matita_arithmetics_nat.minus_Sn_m m n lenm).

def monotonic_lt_minus_l :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n q) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.lt q p) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt (matita_arithmetics_nat.minus q n)
           (matita_arithmetics_nat.minus p n))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H1 : cic.Term cic.prop (matita_arithmetics_nat.le n q) =>
      H2 : cic.Term cic.prop (matita_arithmetics_nat.lt q p) =>
      matita_arithmetics_nat.lt_plus_to_minus_r
        (matita_arithmetics_nat.minus q n) n p
        (matita_basics_logic.eq_ind
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) q
           (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   q x_1) =>
            matita_arithmetics_nat.lt x_1 p)
           H2
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus q n) n)
           (matita_arithmetics_nat.plus_minus_m_m q n H1)).

def discr_minus_x_xy :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
             (matita_arithmetics_nat.minus x y)) ->
      cic.Term cic.prop
        (matita_basics_logic.Or
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
              matita_arithmetics_nat.O)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
              matita_arithmetics_nat.O))
      :=
      _clearme : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 __ (matita_arithmetics_nat.minus __ y))
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      __ (matita_arithmetics_nat.minus __ y)) =>
               matita_basics_logic.Or
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    __ matita_arithmetics_nat.O)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    y matita_arithmetics_nat.O))))
        (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O
                (matita_arithmetics_nat.minus matita_arithmetics_nat.O y)) =>
         matita_basics_logic.or_introl
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O matita_arithmetics_nat.O)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
              matita_arithmetics_nat.O)
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O))
        (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _clearme0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S x)
                 (matita_arithmetics_nat.minus (matita_arithmetics_nat.S x)
                    __))
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S x)
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.S x) __)) =>
               matita_basics_logic.Or
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S x) matita_arithmetics_nat.O)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    __ matita_arithmetics_nat.O)))
           (auto :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S x)
                   (matita_arithmetics_nat.minus (matita_arithmetics_nat.S x)
                      matita_arithmetics_nat.O)) =>
            matita_basics_relations.RC_reflexive matita_arithmetics_nat.nat
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S x) matita_arithmetics_nat.O)
              matita_arithmetics_nat.O)
           (y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            H :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S x)
                   (matita_arithmetics_nat.minus x y)) =>
            matita_basics_logic.eq_ind
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S x)
              (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S x) x_1) =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.le x_1 x)
                 (__ : cic.Term cic.prop (matita_arithmetics_nat.le x_1 x) =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S x) matita_arithmetics_nat.O)
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S y) matita_arithmetics_nat.O)))
              (H0 :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S x) x) =>
               matita_basics_logic.Not_ind
                 (matita_arithmetics_nat.le (matita_arithmetics_nat.S x) x)
                 (_x_79 :
                    cic.Term cic.prop
                      (matita_basics_logic.Not
                         (matita_arithmetics_nat.le
                            (matita_arithmetics_nat.S x) x)) =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S x) matita_arithmetics_nat.O)
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S y) matita_arithmetics_nat.O))
                 (H00 :
                    (__ :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.le
                            (matita_arithmetics_nat.S x) x) ->
                     cic.Term cic.prop matita_basics_logic.False) =>
                  matita_basics_logic.False_ind
                    (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S x)
                          matita_arithmetics_nat.O)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S y)
                          matita_arithmetics_nat.O))
                    (H00 H0))
                 (matita_arithmetics_nat.not_le_Sn_n x))
              (matita_arithmetics_nat.minus x y) H
              (matita_arithmetics_nat.minus_le x y))
           _clearme0)
        _clearme.

def plus_le_0 :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y)
             matita_arithmetics_nat.O) ->
      cic.Term cic.prop
        (matita_basics_logic.And
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
              matita_arithmetics_nat.O)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
              matita_arithmetics_nat.O))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus x y)
             matita_arithmetics_nat.O) =>
      matita_basics_logic.And_ind
        (matita_arithmetics_nat.le x
           (matita_arithmetics_nat.minus matita_arithmetics_nat.O y))
        (matita_arithmetics_nat.le y matita_arithmetics_nat.O)
        (_x_118 :
           cic.Term cic.prop
             (matita_basics_logic.And
                (matita_arithmetics_nat.le x
                   (matita_arithmetics_nat.minus matita_arithmetics_nat.O y))
                (matita_arithmetics_nat.le y matita_arithmetics_nat.O)) =>
         matita_basics_logic.And
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
              matita_arithmetics_nat.O)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
              matita_arithmetics_nat.O))
        (H1 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le x
                (matita_arithmetics_nat.minus matita_arithmetics_nat.O y)) =>
         H2 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le y matita_arithmetics_nat.O) =>
         matita_basics_logic.conj
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
              matita_arithmetics_nat.O)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
              matita_arithmetics_nat.O)
           (matita_basics_logic.sym_eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O x
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O x))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O x))
                 (matita_arithmetics_nat.le_n_O_to_eq x H1)
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O x)))))
           (matita_basics_logic.sym_eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O y
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O y))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O y))
                 (matita_arithmetics_nat.le_n_O_to_eq y H2)
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O y))))))
        (matita_arithmetics_nat.le_inv_plus_l x y matita_arithmetics_nat.O H).

def eq_minus_O :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus n m) matita_arithmetics_nat.O)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_arithmetics_nat.le_n_O_elim (matita_arithmetics_nat.minus n m)
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n m)
                 (matita_arithmetics_nat.minus n n)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.minus n m)
                 matita_arithmetics_nat.O))
           (matita_arithmetics_nat.monotonic_le_minus_r m n n lenm)
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.minus n m) x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.minus n m)
                           matita_arithmetics_nat.O)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus n m)
                       matita_arithmetics_nat.O)))
              (matita_arithmetics_nat.minus n n)
              (matita_arithmetics_nat.minus_n_n n)))
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) __
           matita_arithmetics_nat.O)
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O).

def distributive_times_minus :
      cic.Term cic.prop
        (matita_basics_relations.distributive matita_arithmetics_nat.nat
           matita_arithmetics_nat.times matita_arithmetics_nat.minus)
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or (matita_arithmetics_nat.lt b c)
        (matita_basics_logic.Not (matita_arithmetics_nat.lt b c)) cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or (matita_arithmetics_nat.lt b c)
                (matita_basics_logic.Not (matita_arithmetics_nat.lt b c))) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times a (matita_arithmetics_nat.minus b c))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a b)
              (matita_arithmetics_nat.times a c)))
        (Hbc : cic.Term cic.prop (matita_arithmetics_nat.lt b c) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x matita_arithmetics_nat.O) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times a x)
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.times a b)
                 (matita_arithmetics_nat.times a c)))
           (matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x matita_arithmetics_nat.O) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times a matita_arithmetics_nat.O) x)
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        x matita_arithmetics_nat.O)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.times a matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.times_n_O a))
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.times a b)
                 (matita_arithmetics_nat.times a c))
              (matita_arithmetics_nat.eq_minus_O
                 (matita_arithmetics_nat.times a b)
                 (matita_arithmetics_nat.times a c)
                 (matita_arithmetics_nat.monotonic_le_times_r a b c
                    (matita_arithmetics_nat.lt_to_le b c Hbc))))
           (matita_arithmetics_nat.minus b c)
           (matita_arithmetics_nat.eq_minus_O b c
              (matita_arithmetics_nat.lt_to_le b c Hbc)))
        (Hbc :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.lt b c)) =>
         matita_basics_logic.sym_eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a b)
              (matita_arithmetics_nat.times a c))
           (matita_arithmetics_nat.times a (matita_arithmetics_nat.minus b c))
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times a b)
                       (matita_arithmetics_nat.times a c))
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.minus b c))))
              (cic.lift cic.prop univs.Type0
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times a b)
                       (matita_arithmetics_nat.times a c))
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.minus b c))))
              (matita_arithmetics_nat.plus_to_minus
                 (matita_arithmetics_nat.times a b)
                 (matita_arithmetics_nat.times a c)
                 (matita_arithmetics_nat.times a
                    (matita_arithmetics_nat.minus b c))
                 (matita_basics_logic.eq_ind
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times a
                       (matita_arithmetics_nat.plus c
                          (matita_arithmetics_nat.minus b c)))
                    (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.times a
                               (matita_arithmetics_nat.plus c
                                  (matita_arithmetics_nat.minus b c)))
                            x_1) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times a b) x_1)
                    (matita_basics_logic.eq_f
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times a) b
                       (matita_arithmetics_nat.plus c
                          (matita_arithmetics_nat.minus b c))
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop univs.Type0
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                b
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_nat.minus b c) c)))
                          (cic.lift cic.prop univs.Type0
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                b
                                (matita_arithmetics_nat.plus c
                                   (matita_arithmetics_nat.minus b c))))
                          (matita_arithmetics_nat.plus_minus_m_m b c
                             (matita_arithmetics_nat.not_lt_to_le b c Hbc))
                          (matita_basics_logic.rewrite_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus c
                                (matita_arithmetics_nat.minus b c))
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          b x))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          b
                                          (matita_arithmetics_nat.plus c
                                             (matita_arithmetics_nat.minus b
                                                c)))))
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift (cic.succ univs.Type0) univs.Type2
                                   (cic.univ univs.Type0))
                                (cic.lift cic.prop univs.Type0
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      b
                                      (matita_arithmetics_nat.plus c
                                         (matita_arithmetics_nat.minus b c)))))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.minus b c) c)
                             (matita_arithmetics_nat.commutative_plus
                                (matita_arithmetics_nat.minus b c) c))))
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times a c)
                       (matita_arithmetics_nat.times a
                          (matita_arithmetics_nat.minus b c)))
                    (matita_arithmetics_nat.distributive_times_plus a c
                       (matita_arithmetics_nat.minus b c))))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a b)
                          (matita_arithmetics_nat.times a c))
                       (matita_arithmetics_nat.times a
                          (matita_arithmetics_nat.minus b c)))))))
        (matita_arithmetics_nat.decidable_lt b c).

def minus_plus :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus n m) p)
           (matita_arithmetics_nat.minus n (matita_arithmetics_nat.plus m p)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or
        (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m p) n)
        (matita_basics_logic.Not
           (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m p) n))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m p)
                   n)
                (matita_basics_logic.Not
                   (matita_arithmetics_nat.le
                      (matita_arithmetics_nat.plus m p) n))) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus n m) p)
           (matita_arithmetics_nat.minus n (matita_arithmetics_nat.plus m p)))
        (Hlt :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m p) n) =>
         matita_arithmetics_nat.plus_to_minus
           (matita_arithmetics_nat.minus n m) p
           (matita_arithmetics_nat.minus n (matita_arithmetics_nat.plus m p))
           (matita_arithmetics_nat.plus_to_minus n m
              (matita_arithmetics_nat.plus p
                 (matita_arithmetics_nat.minus n
                    (matita_arithmetics_nat.plus m p)))
              (matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.plus m p)
                    (matita_arithmetics_nat.minus n
                       (matita_arithmetics_nat.plus m p)))
                 (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.plus m p)
                            (matita_arithmetics_nat.minus n
                               (matita_arithmetics_nat.plus m p)))
                         x_1) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n x_1)
                 (matita_arithmetics_nat.minus_to_plus n
                    (matita_arithmetics_nat.plus m p)
                    (matita_arithmetics_nat.minus n
                       (matita_arithmetics_nat.plus m p))
                    Hlt
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus n
                          (matita_arithmetics_nat.plus m p))))
                 (matita_arithmetics_nat.plus m
                    (matita_arithmetics_nat.plus p
                       (matita_arithmetics_nat.minus n
                          (matita_arithmetics_nat.plus m p))))
                 (matita_arithmetics_nat.associative_plus m p
                    (matita_arithmetics_nat.minus n
                       (matita_arithmetics_nat.plus m p))))))
        (Hlt :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m p)
                   n)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x matita_arithmetics_nat.O) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
              (matita_arithmetics_nat.minus n
                 (matita_arithmetics_nat.plus m p)))
           (matita_basics_logic.sym_eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus n
                 (matita_arithmetics_nat.plus m p))
              matita_arithmetics_nat.O
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus n
                          (matita_arithmetics_nat.plus m p))
                       matita_arithmetics_nat.O))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus n
                          (matita_arithmetics_nat.plus m p))
                       matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.eq_minus_O n
                    (matita_arithmetics_nat.plus m p)
                    (matita_arithmetics_nat.transitive_le n
                       (matita_arithmetics_nat.S n)
                       (matita_arithmetics_nat.plus m p)
                       (matita_arithmetics_nat.le_n_Sn n)
                       (matita_arithmetics_nat.not_le_to_lt
                          (matita_arithmetics_nat.plus m p) n Hlt)))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus n
                             (matita_arithmetics_nat.plus m p))
                          matita_arithmetics_nat.O)))))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus n m) p)
           (matita_arithmetics_nat.eq_minus_O
              (matita_arithmetics_nat.minus n m) p
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus n m)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.plus p m) m)))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus n m) p))
                 (matita_arithmetics_nat.monotonic_le_minus_l
                    (matita_arithmetics_nat.plus p m) n m
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le n
                             (matita_arithmetics_nat.plus m p)))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le n
                             (matita_arithmetics_nat.plus p m)))
                       (matita_arithmetics_nat.transitive_le n
                          (matita_arithmetics_nat.S n)
                          (matita_arithmetics_nat.plus m p)
                          (matita_arithmetics_nat.le_n_Sn n)
                          (matita_arithmetics_nat.not_le_to_lt
                             (matita_arithmetics_nat.plus m p) n Hlt))
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus m p)
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le n
                                       (matita_arithmetics_nat.plus m p)))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le n x)))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.le n
                                   (matita_arithmetics_nat.plus m p))))
                          (matita_arithmetics_nat.plus p m)
                          (matita_arithmetics_nat.commutative_plus p m))))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    p
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.minus n m) x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.minus n m) p)))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le
                             (matita_arithmetics_nat.minus n m) p)))
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.plus p m) m)
                    (matita_arithmetics_nat.minus_plus_m_m p m)))))
        (matita_arithmetics_nat.decidable_le
           (matita_arithmetics_nat.plus m p) n).

def minus_minus :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le p m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus p (matita_arithmetics_nat.minus n m))
           (matita_arithmetics_nat.minus n (matita_arithmetics_nat.minus m p)))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lepm : cic.Term cic.prop (matita_arithmetics_nat.le p m) =>
      lemn : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
      matita_basics_logic.sym_eq
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.minus n (matita_arithmetics_nat.minus m p))
        (matita_arithmetics_nat.plus p (matita_arithmetics_nat.minus n m))
        (matita_arithmetics_nat.plus_to_minus n
           (matita_arithmetics_nat.minus m p)
           (matita_arithmetics_nat.plus p (matita_arithmetics_nat.minus n m))
           (matita_basics_logic.eq_ind
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus m p) p)
                 (matita_arithmetics_nat.minus n m))
              (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.plus
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.minus m p) p)
                         (matita_arithmetics_nat.minus n m))
                      x_1) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n x_1)
              (matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 m
                 (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         m x_1) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (matita_arithmetics_nat.plus x_1
                       (matita_arithmetics_nat.minus n m)))
                 (matita_basics_logic.eq_ind
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.minus n m) m)
                    (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.plus
                               (matita_arithmetics_nat.minus n m) m)
                            x_1) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n x_1)
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               n x_1) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n x_1)
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.minus n m) m)
                       (matita_arithmetics_nat.plus_minus_m_m n m lemn))
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.minus n m))
                    (matita_arithmetics_nat.commutative_plus
                       (matita_arithmetics_nat.minus n m) m))
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus m p) p)
                 (matita_arithmetics_nat.plus_minus_m_m m p lepm))
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus m p)
                 (matita_arithmetics_nat.plus p
                    (matita_arithmetics_nat.minus n m)))
              (matita_arithmetics_nat.associative_plus
                 (matita_arithmetics_nat.minus m p) p
                 (matita_arithmetics_nat.minus n m)))).

def minus_minus_associative :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le z y) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le y x) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus x (matita_arithmetics_nat.minus y z))
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus x y) z))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.le z y) =>
      auto' : cic.Term cic.prop (matita_arithmetics_nat.le y x) =>
      matita_basics_logic.sym_eq
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus x y) z)
        (matita_arithmetics_nat.minus x (matita_arithmetics_nat.minus y z))
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus z
                    (matita_arithmetics_nat.minus x y))
                 (matita_arithmetics_nat.minus x
                    (matita_arithmetics_nat.minus y z))))
           (cic.lift cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus x y) z)
                 (matita_arithmetics_nat.minus x
                    (matita_arithmetics_nat.minus y z))))
           (matita_arithmetics_nat.minus_minus x y z auto auto')
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus z
                 (matita_arithmetics_nat.minus x y))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.plus z
                              (matita_arithmetics_nat.minus x y))
                           (matita_arithmetics_nat.minus x
                              (matita_arithmetics_nat.minus y z))))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           x0
                           (matita_arithmetics_nat.minus x
                              (matita_arithmetics_nat.minus y z)))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus z
                          (matita_arithmetics_nat.minus x y))
                       (matita_arithmetics_nat.minus x
                          (matita_arithmetics_nat.minus y z)))))
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus x y)
                 z)
              (matita_arithmetics_nat.commutative_plus
                 (matita_arithmetics_nat.minus x y) z))).

def minus_minus_comm :
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus a b) c)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus a c) b))
      :=
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.le_to_le_to_eq
        (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus a b) c)
        (matita_arithmetics_nat.minus (matita_arithmetics_nat.minus a c) b)
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a b) c)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.minus a c) b)
                       c)
                    c)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a b) c)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a c) b)))
           (matita_arithmetics_nat.monotonic_le_minus_l
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a c) b)
                 c)
              (matita_arithmetics_nat.minus a b) c
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus a b)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.minus a b) c)
                          c)))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus a b)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.minus a c) b)
                          c)))
                 (matita_arithmetics_nat.le_plus_minus_m_m
                    (matita_arithmetics_nat.minus a b) c)
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus a
                       (matita_arithmetics_nat.plus b c))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.minus a b)
                                 (matita_arithmetics_nat.plus x c)))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.minus a b)
                                 (matita_arithmetics_nat.plus
                                    (matita_arithmetics_nat.minus
                                       (matita_arithmetics_nat.minus a c) b)
                                    c))))
                          __))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus c
                          (matita_arithmetics_nat.minus a
                             (matita_arithmetics_nat.plus b c)))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.minus a b) x))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.minus a b)
                                    (matita_arithmetics_nat.plus
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.minus a c)
                                          b)
                                       c))))
                             __))
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus c
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.minus a c) b))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.minus a b)
                                       (matita_arithmetics_nat.plus c
                                          (matita_arithmetics_nat.minus a
                                             (matita_arithmetics_nat.plus b c)))))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.minus a b) x)))
                                __))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.minus a c) b)
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.le
                                          (matita_arithmetics_nat.minus a b)
                                          (matita_arithmetics_nat.plus c x)))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.le
                                          (matita_arithmetics_nat.minus a b)
                                          (matita_arithmetics_nat.plus c
                                             (matita_arithmetics_nat.minus
                                                (matita_arithmetics_nat.minus
                                                   a c)
                                                b)))))
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift (cic.succ univs.Type0) univs.Type2
                                   (cic.univ univs.Type0))
                                (cic.lift cic.prop univs.Type0
                                   (matita_arithmetics_nat.le
                                      (matita_arithmetics_nat.minus a b)
                                      (matita_arithmetics_nat.plus c
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.minus a c)
                                            b)))))
                             (matita_arithmetics_nat.minus a
                                (matita_arithmetics_nat.plus b c))
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus c b)
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.minus a c)
                                          b)
                                       (matita_arithmetics_nat.minus a x))
                                      __))
                                (matita_arithmetics_nat.minus_plus a c b)
                                (matita_arithmetics_nat.plus b c)
                                (matita_arithmetics_nat.commutative_plus c b)))
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.minus a c) b)
                             c)
                          (matita_arithmetics_nat.commutative_plus
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.minus a c) b)
                             c))
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.minus a
                             (matita_arithmetics_nat.plus b c))
                          c)
                       (matita_arithmetics_nat.commutative_plus
                          (matita_arithmetics_nat.minus a
                             (matita_arithmetics_nat.plus b c))
                          c))
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.minus a b) c)
                    (matita_arithmetics_nat.minus_plus a b c))))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.minus a c) b)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.minus a b) c)
                           x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.minus a b) c)
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.minus a c) b))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.minus a b) c)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.minus a c) b))))
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.minus a c) b)
                    c)
                 c)
              (matita_arithmetics_nat.minus_plus_m_m
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a c) b)
                 c)))
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a c) b)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.minus a b) c)
                       b)
                    b)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a c) b)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a b) c)))
           (matita_arithmetics_nat.monotonic_le_minus_l
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a b) c)
                 b)
              (matita_arithmetics_nat.minus a c) b
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus a c)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.minus a c) b)
                          b)))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus a c)
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.minus a b) c)
                          b)))
                 (matita_arithmetics_nat.le_plus_minus_m_m
                    (matita_arithmetics_nat.minus a c) b)
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus a
                       (matita_arithmetics_nat.plus c b))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.minus a c)
                                 (matita_arithmetics_nat.plus x b)))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le
                                 (matita_arithmetics_nat.minus a c)
                                 (matita_arithmetics_nat.plus
                                    (matita_arithmetics_nat.minus
                                       (matita_arithmetics_nat.minus a b) c)
                                    b))))
                          __))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus b
                          (matita_arithmetics_nat.minus a
                             (matita_arithmetics_nat.plus c b)))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.minus a c) x))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.le
                                    (matita_arithmetics_nat.minus a c)
                                    (matita_arithmetics_nat.plus
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.minus a b)
                                          c)
                                       b))))
                             __))
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus b
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.minus a b) c))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.minus a c)
                                       (matita_arithmetics_nat.plus b
                                          (matita_arithmetics_nat.minus a
                                             (matita_arithmetics_nat.plus c b)))))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.le
                                       (matita_arithmetics_nat.minus a c) x)))
                                __))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.minus a b) c)
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.le
                                          (matita_arithmetics_nat.minus a c)
                                          (matita_arithmetics_nat.plus b x)))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.le
                                          (matita_arithmetics_nat.minus a c)
                                          (matita_arithmetics_nat.plus b
                                             (matita_arithmetics_nat.minus
                                                (matita_arithmetics_nat.minus
                                                   a b)
                                                c)))))
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift (cic.succ univs.Type0) univs.Type2
                                   (cic.univ univs.Type0))
                                (cic.lift cic.prop univs.Type0
                                   (matita_arithmetics_nat.le
                                      (matita_arithmetics_nat.minus a c)
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.minus a b)
                                            c)))))
                             (matita_arithmetics_nat.minus a
                                (matita_arithmetics_nat.plus c b))
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.plus b c)
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.minus a b)
                                          c)
                                       (matita_arithmetics_nat.minus a x))
                                      __))
                                (matita_arithmetics_nat.minus_plus a b c)
                                (matita_arithmetics_nat.plus c b)
                                (matita_arithmetics_nat.commutative_plus b c)))
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.minus a b) c)
                             b)
                          (matita_arithmetics_nat.commutative_plus
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.minus a b) c)
                             b))
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.minus a
                             (matita_arithmetics_nat.plus c b))
                          b)
                       (matita_arithmetics_nat.commutative_plus
                          (matita_arithmetics_nat.minus a
                             (matita_arithmetics_nat.plus c b))
                          b))
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.minus a c) b)
                    (matita_arithmetics_nat.minus_plus a c b))))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.minus a b) c)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.minus a c) b)
                           x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.minus a c) b)
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.minus a b) c))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.minus a c) b)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.minus a b) c))))
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.minus a b) c)
                    b)
                 b)
              (matita_arithmetics_nat.minus_plus_m_m
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus a b) c)
                 b))).

def minus_le_minus_minus_comm :
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le c b) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus a (matita_arithmetics_nat.minus b c))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus a c) b))
      :=
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H : cic.Term cic.prop (matita_arithmetics_nat.le c b) =>
      matita_basics_logic.eq_ind_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus b c) c)
        (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x
                (matita_arithmetics_nat.plus
                   (matita_arithmetics_nat.minus b c) c)) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus a (matita_arithmetics_nat.minus b c))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus a c) x))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus c a)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.minus a
                     (matita_arithmetics_nat.minus b c))
                  (matita_arithmetics_nat.minus x
                     (matita_arithmetics_nat.plus
                        (matita_arithmetics_nat.minus b c) c)))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus c
                 (matita_arithmetics_nat.minus b c))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.minus a
                        (matita_arithmetics_nat.minus b c))
                     (matita_arithmetics_nat.minus
                        (matita_arithmetics_nat.plus c a) x))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.plus c a) c)
                    (matita_arithmetics_nat.minus b c))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus a
                           (matita_arithmetics_nat.minus b c))
                        x)
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.plus c a) c)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.minus x
                              (matita_arithmetics_nat.minus b c))
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.minus
                                 (matita_arithmetics_nat.plus c a) c)
                              (matita_arithmetics_nat.minus b c)))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.plus c a) c)
                          (matita_arithmetics_nat.minus b c)))
                    a
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.plus a c)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              a (matita_arithmetics_nat.minus x c))
                             __))
                       (matita_arithmetics_nat.minus_plus_m_m a c)
                       (matita_arithmetics_nat.plus c a)
                       (matita_arithmetics_nat.commutative_plus a c)))
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus c a)
                    (matita_arithmetics_nat.plus c
                       (matita_arithmetics_nat.minus b c)))
                 (matita_arithmetics_nat.minus_plus
                    (matita_arithmetics_nat.plus c a) c
                    (matita_arithmetics_nat.minus b c)))
              (matita_arithmetics_nat.plus (matita_arithmetics_nat.minus b c)
                 c)
              (matita_arithmetics_nat.commutative_plus
                 (matita_arithmetics_nat.minus b c) c))
           (matita_arithmetics_nat.plus a c)
           (matita_arithmetics_nat.commutative_plus a c))
        b (matita_arithmetics_nat.plus_minus_m_m b c H).

def minus_minus_m_m :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus m (matita_arithmetics_nat.minus m n))
           n)
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus m
                 (matita_arithmetics_nat.minus m n))
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus m n)
                 m)))
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus m
                 (matita_arithmetics_nat.minus m n))
              n))
        (matita_arithmetics_nat.minus_le_minus_minus_comm m n m auto)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus n m)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus m
                           (matita_arithmetics_nat.minus m n))
                        (matita_arithmetics_nat.minus x m)))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus m
                           (matita_arithmetics_nat.minus m n))
                        n)))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.minus m
                              (matita_arithmetics_nat.minus m n))
                           x))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.minus m
                              (matita_arithmetics_nat.minus m n))
                           n)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus m
                          (matita_arithmetics_nat.minus m n))
                       n)))
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus n m)
                 m)
              (matita_arithmetics_nat.minus_plus_m_m n m))
           (matita_arithmetics_nat.plus m n)
           (matita_arithmetics_nat.commutative_plus m n)).

def minus_plus_plus_l :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      h : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x h)
              (matita_arithmetics_nat.plus y h))
           (matita_arithmetics_nat.minus x y))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      h : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.minus
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x h) y)
           h)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x0 (matita_arithmetics_nat.minus x y))
              __))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus x y)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x0 (matita_arithmetics_nat.minus x y))
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus x y))
           (matita_arithmetics_nat.minus
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x h)
                 y)
              h)
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x h)
                 h)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_nat.minus
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.plus x h) y)
                        h)
                     (matita_arithmetics_nat.minus x0 y))
                    __))
              (matita_arithmetics_nat.minus_minus_comm
                 (matita_arithmetics_nat.plus x h) y h)
              x (matita_arithmetics_nat.minus_plus_m_m x h)))
        (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x h)
           (matita_arithmetics_nat.plus y h))
        (matita_arithmetics_nat.minus_plus (matita_arithmetics_nat.plus x h)
           y h).

def plus_minus_plus_plus_l :
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      h : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus
              (matita_arithmetics_nat.plus z
                 (matita_arithmetics_nat.plus x h))
              (matita_arithmetics_nat.plus y h))
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus z x) y))
      :=
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      h : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus z x) y)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x0
               (matita_arithmetics_nat.minus
                  (matita_arithmetics_nat.plus z x) y))
              __))
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus z x) y))
        (matita_arithmetics_nat.minus
           (matita_arithmetics_nat.plus z (matita_arithmetics_nat.plus x h))
           (matita_arithmetics_nat.plus y h))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus (matita_arithmetics_nat.plus z x) h)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.minus x0
                     (matita_arithmetics_nat.plus y h))
                  (matita_arithmetics_nat.minus
                     (matita_arithmetics_nat.plus z x) y))
                 __))
           (matita_arithmetics_nat.minus_plus_plus_l
              (matita_arithmetics_nat.plus z x) y h)
           (matita_arithmetics_nat.plus z (matita_arithmetics_nat.plus x h))
           (matita_arithmetics_nat.associative_plus z x h)).

def minus_plus_minus_l :
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le y z) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus z x)
              (matita_arithmetics_nat.minus z y))
           (matita_arithmetics_nat.plus x y))
      :=
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      z : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.le y z) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x z)
                 (matita_arithmetics_nat.minus z y))
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus x z) z)
                 y)))
        (cic.lift cic.prop univs.Type0
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus z x)
                 (matita_arithmetics_nat.minus z y))
              (matita_arithmetics_nat.plus x y)))
        (matita_arithmetics_nat.minus_minus_associative
           (matita_arithmetics_nat.plus x z) z y auto
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le z
                    (matita_arithmetics_nat.plus z x)))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.le z
                    (matita_arithmetics_nat.plus x z)))
              (matita_arithmetics_nat.le_plus_n_r x z)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus x z)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le z x0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.le z
                              (matita_arithmetics_nat.plus x z))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.le z
                          (matita_arithmetics_nat.plus x z))))
                 (matita_arithmetics_nat.plus z x)
                 (matita_arithmetics_nat.commutative_plus z x))))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.plus x z)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus
                           (matita_arithmetics_nat.plus x z)
                           (matita_arithmetics_nat.minus z y))
                        (matita_arithmetics_nat.plus
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.plus x z) z)
                           y)))
                  (cic.lift cic.prop univs.Type0
                     (matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.minus x0
                           (matita_arithmetics_nat.minus z y))
                        (matita_arithmetics_nat.plus x y))))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) x
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.plus x z)
                              (matita_arithmetics_nat.minus z y))
                           (matita_arithmetics_nat.plus x0 y)))
                     (cic.lift cic.prop univs.Type0
                        (matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_nat.minus
                              (matita_arithmetics_nat.plus x z)
                              (matita_arithmetics_nat.minus z y))
                           (matita_arithmetics_nat.plus x y))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.plus x z)
                          (matita_arithmetics_nat.minus z y))
                       (matita_arithmetics_nat.plus x y))))
              (matita_arithmetics_nat.minus (matita_arithmetics_nat.plus x z)
                 z)
              (matita_arithmetics_nat.minus_plus_m_m x z))
           (matita_arithmetics_nat.plus z x)
           (matita_arithmetics_nat.commutative_plus z x)).

def le_fwd_plus_plus_ge :
      m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le m2 m1) ->
      n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.plus m1 n1)
             (matita_arithmetics_nat.plus m2 n2)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le n1 n2) :=
      m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H : cic.Term cic.prop (matita_arithmetics_nat.le m2 m1) =>
      n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.eq_ind_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.plus n1 m1)
        (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                x (matita_arithmetics_nat.plus n1 m1)) =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_nat.le x (matita_arithmetics_nat.plus m2 n2))
           (__1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.le x
                   (matita_arithmetics_nat.plus m2 n2)) =>
            matita_arithmetics_nat.le n1 n2))
        (H0 :
           cic.Term cic.prop
             (matita_arithmetics_nat.le (matita_arithmetics_nat.plus n1 m1)
                (matita_arithmetics_nat.plus m2 n2)) =>
         matita_basics_logic.And_ind
           (matita_arithmetics_nat.le n1
              (matita_arithmetics_nat.minus
                 (matita_arithmetics_nat.plus m2 n2) m1))
           (matita_arithmetics_nat.le m1 (matita_arithmetics_nat.plus m2 n2))
           (_x_118 :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (matita_arithmetics_nat.le n1
                      (matita_arithmetics_nat.minus
                         (matita_arithmetics_nat.plus m2 n2) m1))
                   (matita_arithmetics_nat.le m1
                      (matita_arithmetics_nat.plus m2 n2))) =>
            matita_arithmetics_nat.le n1 n2)
           (matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.plus n2 m2)
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x (matita_arithmetics_nat.plus n2 m2)) =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.le n1
                    (matita_arithmetics_nat.minus x m1))
                 (_x_120 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le n1
                         (matita_arithmetics_nat.minus x m1)) =>
                  cic.prod cic.prop cic.prop (matita_arithmetics_nat.le m1 x)
                    (_x_119 :
                       cic.Term cic.prop (matita_arithmetics_nat.le m1 x) =>
                     matita_arithmetics_nat.le n1 n2)))
              (matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus n2
                    (matita_arithmetics_nat.minus m1 m2))
                 (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus n2
                            (matita_arithmetics_nat.minus m1 m2))
                         x_1) =>
                  cic.prod cic.prop cic.prop
                    (matita_arithmetics_nat.le n1 x_1)
                    (_x_120 :
                       cic.Term cic.prop (matita_arithmetics_nat.le n1 x_1) =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_nat.le m1
                          (matita_arithmetics_nat.plus n2 m2))
                       (_x_119 :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.le m1
                               (matita_arithmetics_nat.plus n2 m2)) =>
                        matita_arithmetics_nat.le n1 n2)))
                 (H1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le n1
                         (matita_arithmetics_nat.minus n2
                            (matita_arithmetics_nat.minus m1 m2))) =>
                  __ :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le m1
                         (matita_arithmetics_nat.plus n2 m2)) =>
                  matita_arithmetics_nat.transitive_le n1
                    (matita_arithmetics_nat.minus n2
                       (matita_arithmetics_nat.minus m1 m2))
                    n2 H1
                    (matita_arithmetics_nat.minus_le n2
                       (matita_arithmetics_nat.minus m1 m2)))
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.plus n2 m2) m1)
                 (matita_arithmetics_nat.minus_le_minus_minus_comm m1 m2 n2 H))
              (matita_arithmetics_nat.plus m2 n2)
              (matita_arithmetics_nat.commutative_plus m2 n2))
           (matita_arithmetics_nat.le_inv_plus_l n1 m1
              (matita_arithmetics_nat.plus m2 n2) H0))
        (matita_arithmetics_nat.plus m1 n1)
        (matita_arithmetics_nat.commutative_plus m1 n1).

def eqb :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_basics_bool.bool.

def eqb_body :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_basics_bool.bool.

[ __ ] eqb __ -->
  matita_arithmetics_nat.filter_nat univs.Type0
    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_basics_bool.bool))
    matita_arithmetics_nat.eqb_body __.

[ __ ] eqb_body __ -->
  m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
  matita_arithmetics_nat.match_nat univs.Type0
    (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_basics_bool.bool)
    (matita_arithmetics_nat.match_nat univs.Type0
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_basics_bool.bool)
       matita_basics_bool.true
       (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_basics_bool.false)
       m)
    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.match_nat univs.Type0
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_basics_bool.bool)
       matita_basics_bool.false
       (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_nat.eqb p q)
       m)
    __.

def eqb_elim :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
         cic.Univ cic.prop) ->
      __ :
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m) ->
         cic.Term cic.prop (P matita_basics_bool.true)) ->
      __1 :
        (__1 :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m)) ->
         cic.Term cic.prop (P matita_basics_bool.false)) ->
      cic.Term cic.prop (P (matita_arithmetics_nat.eqb n m)) :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop
           (cic.prod univs.Type0 (cic.type cic.z) matita_basics_bool.bool
              (__1 : cic.Term univs.Type0 matita_basics_bool.bool =>
               cic.univ cic.prop))
           (P :
              (__1 : cic.Term univs.Type0 matita_basics_bool.bool ->
               cic.Univ cic.prop) =>
            cic.prod cic.prop cic.prop
              (cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    __ _0)
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         __ _0) =>
                  P matita_basics_bool.true))
              (__1 :
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         __ _0) ->
                  cic.Term cic.prop (P matita_basics_bool.true)) =>
               cic.prod cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    (matita_basics_logic.Not
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          __ _0))
                    (__2 :
                       cic.Term cic.prop
                         (matita_basics_logic.Not
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               __ _0)) =>
                     P matita_basics_bool.false))
                 (__2 :
                    (__2 :
                       cic.Term cic.prop
                         (matita_basics_logic.Not
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               __ _0)) ->
                     cic.Term cic.prop (P matita_basics_bool.false)) =>
                  P (matita_arithmetics_nat.eqb __ _0)))))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop
              (cic.prod univs.Type0 (cic.type cic.z) matita_basics_bool.bool
                 (__1 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  cic.univ cic.prop))
              (P :
                 (__1 : cic.Term univs.Type0 matita_basics_bool.bool ->
                  cic.Univ cic.prop) =>
               cic.prod cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O __)
                    (__1 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O __) =>
                     P matita_basics_bool.true))
                 (__1 :
                    (__1 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O __) ->
                     cic.Term cic.prop (P matita_basics_bool.true)) =>
                  cic.prod cic.prop cic.prop
                    (cic.prod cic.prop cic.prop
                       (matita_basics_logic.Not
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O __))
                       (__2 :
                          cic.Term cic.prop
                            (matita_basics_logic.Not
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O __)) =>
                        P matita_basics_bool.false))
                    (__2 :
                       (__2 :
                          cic.Term cic.prop
                            (matita_basics_logic.Not
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O __)) ->
                        cic.Term cic.prop (P matita_basics_bool.false)) =>
                     P
                       (matita_arithmetics_nat.eqb matita_arithmetics_nat.O
                          __)))))
           (P :
              (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
               cic.Univ cic.prop) =>
            auto :
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O matita_arithmetics_nat.O) ->
               cic.Term cic.prop (P matita_basics_bool.true)) =>
            auto' :
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Not
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O matita_arithmetics_nat.O)) ->
               cic.Term cic.prop (P matita_basics_bool.false)) =>
            auto
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O))
           (auto : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            P :
              (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
               cic.Univ cic.prop) =>
            auto' :
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O
                      (matita_arithmetics_nat.S auto)) ->
               cic.Term cic.prop (P matita_basics_bool.true)) =>
            auto'' :
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Not
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O
                         (matita_arithmetics_nat.S auto))) ->
               cic.Term cic.prop (P matita_basics_bool.false)) =>
            auto'' (matita_arithmetics_nat.not_eq_O_S auto))
           n)
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         P :
           (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
            cic.Univ cic.prop) =>
         auto :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S n) matita_arithmetics_nat.O) ->
            cic.Term cic.prop (P matita_basics_bool.true)) =>
         auto' :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S n) matita_arithmetics_nat.O)) ->
            cic.Term cic.prop (P matita_basics_bool.false)) =>
         auto'
           (matita_basics_logic.sym_not_eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O (matita_arithmetics_nat.S n)
              (matita_arithmetics_nat.not_eq_O_S n)))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           (P :
              (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
               cic.Univ cic.prop) ->
            __ :
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      n m) ->
               cic.Term cic.prop (P matita_basics_bool.true)) ->
            __1 :
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.Not
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         n m)) ->
               cic.Term cic.prop (P matita_basics_bool.false)) ->
            cic.Term cic.prop (P (matita_arithmetics_nat.eqb n m))) =>
         P :
           (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
            cic.Univ cic.prop) =>
         auto' :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.S n) (matita_arithmetics_nat.S m)) ->
            cic.Term cic.prop (P matita_basics_bool.true)) =>
         auto'' :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_nat.S n)
                      (matita_arithmetics_nat.S m))) ->
            cic.Term cic.prop (P matita_basics_bool.false)) =>
         auto P
           (auto''' :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m) =>
            auto'
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_nat.S n)
                        (matita_arithmetics_nat.S x))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n))
                 m auto'''))
           (auto''' :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      n m)) =>
            auto'' (matita_arithmetics_nat.not_eq_S n m auto'''))).

def eqb_n_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n n) matita_basics_bool.true)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb _x_365 _x_365) matita_basics_bool.true)
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true)
        (x_366 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_368 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb x_366 x_366)
                matita_basics_bool.true) =>
         matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_basics_bool.bool =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                  x matita_basics_bool.true)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_arithmetics_nat.eqb x_366 x_366) _x_368)
        n.

def eqb_true_to_eq :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
             (matita_arithmetics_nat.eqb n m) matita_basics_bool.true) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n m)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.eqb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) __
              matita_basics_bool.true)
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   __ matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m))
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m) =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.true) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  n x)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n)
           m auto)
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m)) =>
         abs :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m)
           (matita_basics_logic.absurd
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true
                 (__1 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_basics_bool.bool =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_basics_bool.bool)
                        matita_basics_bool.true x)
                       __1))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false abs)
              matita_basics_bool.not_eq_true_false)).

def eqb_false_to_not_eq :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
             (matita_arithmetics_nat.eqb n m) matita_basics_bool.false) ->
      cic.Term cic.prop
        (matita_basics_logic.Not
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.eqb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) __
              matita_basics_bool.false)
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   __ matita_basics_bool.false) =>
            matita_basics_logic.Not
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n m)))
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m) =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.false) =>
         matita_basics_logic.not_to_not
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true matita_basics_bool.false)
           (auto'' :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m) =>
            matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_basics_bool.bool =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_basics_bool.bool)
                     matita_basics_bool.true x)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true)
              matita_basics_bool.false auto')
           matita_basics_bool.not_eq_true_false)
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m)) =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.false) =>
         auto).

def eq_to_eqb_true :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n m) matita_basics_bool.true)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             m) =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
               (matita_arithmetics_nat.eqb n x) matita_basics_bool.true)
              __))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_basics_bool.bool =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                  x matita_basics_bool.true)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true)
           (matita_arithmetics_nat.eqb n n)
           (matita_arithmetics_nat.eqb_n_n n))
        m auto.

def not_eq_to_eqb_false :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n m) matita_basics_bool.false)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      noteq :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m)) =>
      matita_arithmetics_nat.eqb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) __
           matita_basics_bool.false)
        (Heq :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n m) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true matita_basics_bool.false)
           (matita_basics_logic.absurd
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n m)
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        n x)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n)
                 m Heq)
              noteq))
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.Not
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m)) =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.false).

def leb :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_basics_bool.bool.

def leb_body :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_basics_bool.bool.

[ __ ] leb __ -->
  matita_arithmetics_nat.filter_nat univs.Type0
    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_basics_bool.bool))
    matita_arithmetics_nat.leb_body __.

[ __ ] leb_body __ -->
  m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
  matita_arithmetics_nat.match_nat univs.Type0
    (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_basics_bool.bool)
    matita_basics_bool.true
    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.match_nat univs.Type0
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_basics_bool.bool)
       matita_basics_bool.false
       (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_nat.leb p q)
       m)
    __.

def leb_elim :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      P :
        (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
         cic.Univ cic.prop) ->
      __ :
        (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
         cic.Term cic.prop (P matita_basics_bool.true)) ->
      __1 :
        (__1 :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) ->
         cic.Term cic.prop (P matita_basics_bool.false)) ->
      cic.Term cic.prop (P (matita_arithmetics_nat.leb n m)) :=
      matita_arithmetics_nat.nat_elim2
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop
           (cic.prod univs.Type0 (cic.type cic.z) matita_basics_bool.bool
              (__1 : cic.Term univs.Type0 matita_basics_bool.bool =>
               cic.univ cic.prop))
           (P :
              (__1 : cic.Term univs.Type0 matita_basics_bool.bool ->
               cic.Univ cic.prop) =>
            cic.prod cic.prop cic.prop
              (cic.prod cic.prop cic.prop (matita_arithmetics_nat.le __ _0)
                 (__1 :
                    cic.Term cic.prop (matita_arithmetics_nat.le __ _0) =>
                  P matita_basics_bool.true))
              (__1 :
                 (__1 :
                    cic.Term cic.prop (matita_arithmetics_nat.le __ _0) ->
                  cic.Term cic.prop (P matita_basics_bool.true)) =>
               cic.prod cic.prop cic.prop
                 (cic.prod cic.prop cic.prop
                    (matita_basics_logic.Not
                       (matita_arithmetics_nat.le __ _0))
                    (__2 :
                       cic.Term cic.prop
                         (matita_basics_logic.Not
                            (matita_arithmetics_nat.le __ _0)) =>
                     P matita_basics_bool.false))
                 (__2 :
                    (__2 :
                       cic.Term cic.prop
                         (matita_basics_logic.Not
                            (matita_arithmetics_nat.le __ _0)) ->
                     cic.Term cic.prop (P matita_basics_bool.false)) =>
                  P (matita_arithmetics_nat.leb __ _0)))))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         P :
           (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
            cic.Univ cic.prop) =>
         auto :
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le matita_arithmetics_nat.O n) ->
            cic.Term cic.prop (P matita_basics_bool.true)) =>
         auto' :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_arithmetics_nat.le matita_arithmetics_nat.O n)) ->
            cic.Term cic.prop (P matita_basics_bool.false)) =>
         auto (matita_arithmetics_nat.le_O_n n))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         P :
           (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
            cic.Univ cic.prop) =>
         auto :
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                   matita_arithmetics_nat.O) ->
            cic.Term cic.prop (P matita_basics_bool.true)) =>
         auto' :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                      matita_arithmetics_nat.O)) ->
            cic.Term cic.prop (P matita_basics_bool.false)) =>
         auto' (matita_arithmetics_nat.not_le_Sn_O n))
        (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (P :
              (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
               cic.Univ cic.prop) ->
            __ :
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
               cic.Term cic.prop (P matita_basics_bool.true)) ->
            __1 :
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) ->
               cic.Term cic.prop (P matita_basics_bool.false)) ->
            cic.Term cic.prop (P (matita_arithmetics_nat.leb n m))) =>
         P :
           (__ : cic.Term univs.Type0 matita_basics_bool.bool ->
            cic.Univ cic.prop) =>
         Pt :
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                   (matita_arithmetics_nat.S m)) ->
            cic.Term cic.prop (P matita_basics_bool.true)) =>
         Pf :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_arithmetics_nat.le (matita_arithmetics_nat.S n)
                      (matita_arithmetics_nat.S m))) ->
            cic.Term cic.prop (P matita_basics_bool.false)) =>
         Hind P
           (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
            Pt (matita_arithmetics_nat.le_S_S n m lenm))
           (nlenm :
              cic.Term cic.prop
                (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
            Pf (matita_arithmetics_nat.not_le_to_not_le_S_S n m nlenm))).

def leb_true_to_le :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
             (matita_arithmetics_nat.leb n m) matita_basics_bool.true) ->
      cic.Term cic.prop (matita_arithmetics_nat.le n m) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) __
              matita_basics_bool.true)
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   __ matita_basics_bool.true) =>
            matita_arithmetics_nat.le n m))
        (auto : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.true) =>
         auto)
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         abs :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.true) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_arithmetics_nat.le n m)
           (matita_basics_logic.absurd
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true
                 (__1 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_basics_bool.bool =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_basics_bool.bool)
                        matita_basics_bool.true x)
                       __1))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false abs)
              matita_basics_bool.not_eq_true_false)).

def leb_false_to_not_le :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
             (matita_arithmetics_nat.leb n m) matita_basics_bool.false) ->
      cic.Term cic.prop
        (matita_basics_logic.Not (matita_arithmetics_nat.le n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) __
              matita_basics_bool.false)
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   __ matita_basics_bool.false) =>
            matita_basics_logic.Not (matita_arithmetics_nat.le n m)))
        (__ : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         abs :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                matita_basics_bool.true matita_basics_bool.false) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.Not (matita_arithmetics_nat.le n m))
           (matita_basics_logic.absurd
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true matita_basics_bool.false)
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true
                 (__1 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_basics_bool.bool =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_basics_bool.bool)
                        matita_basics_bool.true x)
                       __1))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.true)
                 matita_basics_bool.false abs)
              matita_basics_bool.not_eq_true_false))
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                matita_basics_bool.false matita_basics_bool.false) =>
         auto).

def le_to_leb_true :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.leb n m) matita_basics_bool.true)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop (matita_arithmetics_nat.le n m)
           (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) __
              matita_basics_bool.true))
        (auto : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         auto' : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true)
        (H :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         H1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.false matita_basics_bool.true)
           (matita_basics_logic.absurd (matita_arithmetics_nat.le n m) H1 H)).

def not_le_to_leb_false :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.leb n m) matita_basics_bool.false)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.Not (matita_arithmetics_nat.le n m))
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) __
              matita_basics_bool.false))
        (H : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         H1 :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true matita_basics_bool.false)
           (matita_basics_logic.absurd (matita_arithmetics_nat.le n m) H H1))
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         auto' :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.false).

def lt_to_leb_false :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.lt m n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.leb n m) matita_basics_bool.false)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto : cic.Term cic.prop (matita_arithmetics_nat.lt m n) =>
      matita_arithmetics_nat.not_le_to_leb_false n m
        (matita_arithmetics_nat.lt_to_not_le m n auto).

def min :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_bool.match_bool univs.Type0
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_arithmetics_nat.nat)
        n m (matita_arithmetics_nat.leb n m).

def max :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_bool.match_bool univs.Type0
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_arithmetics_nat.nat)
        m n (matita_arithmetics_nat.leb n m).

def commutative_min :
      cic.Term cic.prop
        (matita_basics_relations.commutative matita_arithmetics_nat.nat
           matita_arithmetics_nat.min)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              n m __)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              m n (matita_arithmetics_nat.leb m n)))
        (matita_arithmetics_nat.leb_elim m n
           (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le n m)
              (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    n m matita_basics_bool.true)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    m n __)))
           (auto : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
            auto' : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
            matita_arithmetics_nat.le_to_le_to_eq n m auto' auto)
           (auto :
              cic.Term cic.prop
                (matita_basics_logic.Not (matita_arithmetics_nat.le m n)) =>
            auto' : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
            matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n))
        (notle :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 n m matita_basics_bool.false)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 m n x))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 n m matita_basics_bool.false))
           (matita_arithmetics_nat.leb m n)
           (matita_arithmetics_nat.le_to_leb_true m n
              (matita_arithmetics_nat.transitive_le m
                 (matita_arithmetics_nat.S m) n
                 (matita_arithmetics_nat.le_n_Sn m)
                 (matita_arithmetics_nat.not_le_to_lt n m notle)))).

def le_minr :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le i (matita_arithmetics_nat.min n m)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le i m) :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_nat.le i
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 n m __))
           (__1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.le i
                   (matita_basics_bool.match_bool univs.Type0
                      (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                       matita_arithmetics_nat.nat)
                      n m __)) =>
            matita_arithmetics_nat.le i m))
        (auto : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         auto' : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
         matita_arithmetics_nat.transitive_le i n m auto' auto)
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         auto' : cic.Term cic.prop (matita_arithmetics_nat.le i m) => auto').

def le_minl :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le i (matita_arithmetics_nat.min n m)) ->
      cic.Term cic.prop (matita_arithmetics_nat.le i n) :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.le i (matita_arithmetics_nat.min n m)) =>
      matita_arithmetics_nat.le_minr i m n
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le i (matita_arithmetics_nat.min n m)))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le i (matita_arithmetics_nat.min m n)))
           auto
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.min m n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le i x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le i
                           (matita_arithmetics_nat.min m n))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le i
                       (matita_arithmetics_nat.min m n))))
              (matita_arithmetics_nat.min n m)
              (matita_arithmetics_nat.commutative_min n m))).

def to_min :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le i m) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le i (matita_arithmetics_nat.min n m))
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      leim : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_arithmetics_nat.le i
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              n m __))
        lein leim (matita_arithmetics_nat.leb n m).

def commutative_max :
      cic.Term cic.prop
        (matita_basics_relations.commutative matita_arithmetics_nat.nat
           matita_arithmetics_nat.max)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              m n __)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              n m (matita_arithmetics_nat.leb m n)))
        (matita_arithmetics_nat.leb_elim m n
           (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le n m)
              (__1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    m n matita_basics_bool.true)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    n m __)))
           (auto : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
            auto' : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
            matita_arithmetics_nat.le_to_le_to_eq m n auto auto')
           (auto :
              cic.Term cic.prop
                (matita_basics_logic.Not (matita_arithmetics_nat.le m n)) =>
            auto' : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
            matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m))
        (notle :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 m n matita_basics_bool.false)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 n m x))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 m n matita_basics_bool.false))
           (matita_arithmetics_nat.leb m n)
           (matita_arithmetics_nat.le_to_leb_true m n
              (matita_arithmetics_nat.transitive_le m
                 (matita_arithmetics_nat.S m) n
                 (matita_arithmetics_nat.le_n_Sn m)
                 (matita_arithmetics_nat.not_le_to_lt n m notle)))).

def le_maxl :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i) ->
      cic.Term cic.prop (matita_arithmetics_nat.le n i) :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_nat.le
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 m n __)
              i)
           (__1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.le
                   (matita_basics_bool.match_bool univs.Type0
                      (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                       matita_arithmetics_nat.nat)
                      m n __)
                   i) =>
            matita_arithmetics_nat.le n i))
        (auto : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         auto' : cic.Term cic.prop (matita_arithmetics_nat.le m i) =>
         matita_arithmetics_nat.transitive_le n m i auto auto')
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         auto' : cic.Term cic.prop (matita_arithmetics_nat.le n i) => auto').

def le_maxr :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i) ->
      cic.Term cic.prop (matita_arithmetics_nat.le m i) :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i) =>
      matita_arithmetics_nat.le_maxl i m n
        (matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i))
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.le (matita_arithmetics_nat.max m n) i))
           auto
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.max m n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le x i))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.le
                           (matita_arithmetics_nat.max m n) i)))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_nat.max m n) i)))
              (matita_arithmetics_nat.max n m)
              (matita_arithmetics_nat.commutative_max n m))).

def to_max :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le n i) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le m i) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_nat.max n m) i)
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      leni : cic.Term cic.prop (matita_arithmetics_nat.le n i) =>
      lemi : cic.Term cic.prop (matita_arithmetics_nat.le m i) =>
      matita_basics_bool.match_bool cic.prop
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_arithmetics_nat.le
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              m n __)
           i)
        lemi leni (matita_arithmetics_nat.leb n m).


