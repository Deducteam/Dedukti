(; This file was automatically generated from Matita. ;)

#NAME matita_basics_types.

void : cic.Univ univs.Type0.

def match_void :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ return_sort) ->
      z : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term return_sort (return_type z).

def filter_void :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term return_sort (return_type z).

def void_ind :
      Q_ :
        (_x_482 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_482 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_482).

def void_ind_body :
      Q_ :
        (_x_482 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_482 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_482).

[ Q_, x_482 ] void_ind Q_ x_482 -->
  matita_basics_types.filter_void cic.prop
    (x_482 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_482)
    (matita_basics_types.void_ind_body Q_) x_482.

[ Q_, x_482 ] void_ind_body Q_ x_482 -->
  matita_basics_types.match_void cic.prop Q_ x_482.

def void_rect_Type4 :
      Q_ :
        (_x_483 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type4) ->
      x_483 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type4 (Q_ x_483).

def void_rect_Type4_body :
      Q_ :
        (_x_483 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type4) ->
      x_483 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type4 (Q_ x_483).

[ Q_, x_483 ] void_rect_Type4 Q_ x_483 -->
  matita_basics_types.filter_void univs.Type4
    (x_483 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_483)
    (matita_basics_types.void_rect_Type4_body Q_) x_483.

[ Q_, x_483 ] void_rect_Type4_body Q_ x_483 -->
  matita_basics_types.match_void univs.Type4 Q_ x_483.

def void_rect_Type5 :
      Q_ :
        (_x_484 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type5) ->
      x_484 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type5 (Q_ x_484).

def void_rect_Type5_body :
      Q_ :
        (_x_484 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type5) ->
      x_484 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type5 (Q_ x_484).

[ Q_, x_484 ] void_rect_Type5 Q_ x_484 -->
  matita_basics_types.filter_void univs.Type5
    (x_484 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_484)
    (matita_basics_types.void_rect_Type5_body Q_) x_484.

[ Q_, x_484 ] void_rect_Type5_body Q_ x_484 -->
  matita_basics_types.match_void univs.Type5 Q_ x_484.

def void_rect_Type3 :
      Q_ :
        (_x_485 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type3) ->
      x_485 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type3 (Q_ x_485).

def void_rect_Type3_body :
      Q_ :
        (_x_485 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type3) ->
      x_485 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type3 (Q_ x_485).

[ Q_, x_485 ] void_rect_Type3 Q_ x_485 -->
  matita_basics_types.filter_void univs.Type3
    (x_485 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_485)
    (matita_basics_types.void_rect_Type3_body Q_) x_485.

[ Q_, x_485 ] void_rect_Type3_body Q_ x_485 -->
  matita_basics_types.match_void univs.Type3 Q_ x_485.

def void_rect_Type2 :
      Q_ :
        (_x_486 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type2) ->
      x_486 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type2 (Q_ x_486).

def void_rect_Type2_body :
      Q_ :
        (_x_486 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type2) ->
      x_486 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type2 (Q_ x_486).

[ Q_, x_486 ] void_rect_Type2 Q_ x_486 -->
  matita_basics_types.filter_void univs.Type2
    (x_486 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_486)
    (matita_basics_types.void_rect_Type2_body Q_) x_486.

[ Q_, x_486 ] void_rect_Type2_body Q_ x_486 -->
  matita_basics_types.match_void univs.Type2 Q_ x_486.

def void_rect_Type1 :
      Q_ :
        (_x_487 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type1) ->
      x_487 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type1 (Q_ x_487).

def void_rect_Type1_body :
      Q_ :
        (_x_487 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type1) ->
      x_487 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type1 (Q_ x_487).

[ Q_, x_487 ] void_rect_Type1 Q_ x_487 -->
  matita_basics_types.filter_void univs.Type1
    (x_487 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_487)
    (matita_basics_types.void_rect_Type1_body Q_) x_487.

[ Q_, x_487 ] void_rect_Type1_body Q_ x_487 -->
  matita_basics_types.match_void univs.Type1 Q_ x_487.

def void_rect_Type0 :
      Q_ :
        (_x_488 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type0) ->
      x_488 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type0 (Q_ x_488).

def void_rect_Type0_body :
      Q_ :
        (_x_488 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ univs.Type0) ->
      x_488 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term univs.Type0 (Q_ x_488).

[ Q_, x_488 ] void_rect_Type0 Q_ x_488 -->
  matita_basics_types.filter_void univs.Type0
    (x_488 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_488)
    (matita_basics_types.void_rect_Type0_body Q_) x_488.

[ Q_, x_488 ] void_rect_Type0_body Q_ x_488 -->
  matita_basics_types.match_void univs.Type0 Q_ x_488.

def void_rect_CProp4 :
      Q_ :
        (_x_489 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_489 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_489).

def void_rect_CProp4_body :
      Q_ :
        (_x_489 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_489 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_489).

[ Q_, x_489 ] void_rect_CProp4 Q_ x_489 -->
  matita_basics_types.filter_void cic.prop
    (x_489 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_489)
    (matita_basics_types.void_rect_CProp4_body Q_) x_489.

[ Q_, x_489 ] void_rect_CProp4_body Q_ x_489 -->
  matita_basics_types.match_void cic.prop Q_ x_489.

def void_rect_CProp5 :
      Q_ :
        (_x_490 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_490 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_490).

def void_rect_CProp5_body :
      Q_ :
        (_x_490 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_490 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_490).

[ Q_, x_490 ] void_rect_CProp5 Q_ x_490 -->
  matita_basics_types.filter_void cic.prop
    (x_490 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_490)
    (matita_basics_types.void_rect_CProp5_body Q_) x_490.

[ Q_, x_490 ] void_rect_CProp5_body Q_ x_490 -->
  matita_basics_types.match_void cic.prop Q_ x_490.

def void_rect_CProp3 :
      Q_ :
        (_x_491 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_491 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_491).

def void_rect_CProp3_body :
      Q_ :
        (_x_491 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_491 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_491).

[ Q_, x_491 ] void_rect_CProp3 Q_ x_491 -->
  matita_basics_types.filter_void cic.prop
    (x_491 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_491)
    (matita_basics_types.void_rect_CProp3_body Q_) x_491.

[ Q_, x_491 ] void_rect_CProp3_body Q_ x_491 -->
  matita_basics_types.match_void cic.prop Q_ x_491.

def void_rect_CProp2 :
      Q_ :
        (_x_492 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_492 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_492).

def void_rect_CProp2_body :
      Q_ :
        (_x_492 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_492 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_492).

[ Q_, x_492 ] void_rect_CProp2 Q_ x_492 -->
  matita_basics_types.filter_void cic.prop
    (x_492 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_492)
    (matita_basics_types.void_rect_CProp2_body Q_) x_492.

[ Q_, x_492 ] void_rect_CProp2_body Q_ x_492 -->
  matita_basics_types.match_void cic.prop Q_ x_492.

def void_rect_CProp1 :
      Q_ :
        (_x_493 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_493 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_493).

def void_rect_CProp1_body :
      Q_ :
        (_x_493 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_493 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_493).

[ Q_, x_493 ] void_rect_CProp1 Q_ x_493 -->
  matita_basics_types.filter_void cic.prop
    (x_493 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_493)
    (matita_basics_types.void_rect_CProp1_body Q_) x_493.

[ Q_, x_493 ] void_rect_CProp1_body Q_ x_493 -->
  matita_basics_types.match_void cic.prop Q_ x_493.

def void_rect_CProp0 :
      Q_ :
        (_x_494 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_494 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_494).

def void_rect_CProp0_body :
      Q_ :
        (_x_494 : cic.Term univs.Type0 matita_basics_types.void ->
         cic.Univ cic.prop) ->
      x_494 : cic.Term univs.Type0 matita_basics_types.void ->
      cic.Term cic.prop (Q_ x_494).

[ Q_, x_494 ] void_rect_CProp0 Q_ x_494 -->
  matita_basics_types.filter_void cic.prop
    (x_494 : cic.Term univs.Type0 matita_basics_types.void => Q_ x_494)
    (matita_basics_types.void_rect_CProp0_body Q_) x_494.

[ Q_, x_494 ] void_rect_CProp0_body Q_ x_494 -->
  matita_basics_types.match_void cic.prop Q_ x_494.

unit : cic.Univ univs.Type0.

it : cic.Term univs.Type0 matita_basics_types.unit.

def match_unit :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ return_sort) ->
      case_it : cic.Term return_sort (return_type matita_basics_types.it) ->
      z : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term return_sort (return_type z).

[ return_sort, return_type, case_it ]
  match_unit return_sort return_type case_it matita_basics_types.it -->
  case_it.

def filter_unit :
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term return_sort (return_type z).

[ return_sort, return_type, return ]
  filter_unit return_sort return_type return matita_basics_types.it -->
  return matita_basics_types.it.

def unit_ind :
      Q_ :
        (_x_495 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_495 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_495).

def unit_ind_body :
      Q_ :
        (_x_495 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_495 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_495).

[ Q_, _H_it, x_495 ] unit_ind Q_ _H_it x_495 -->
  matita_basics_types.filter_unit cic.prop
    (x_495 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_495)
    (matita_basics_types.unit_ind_body Q_ _H_it) x_495.

[ Q_, _H_it, x_495 ] unit_ind_body Q_ _H_it x_495 -->
  matita_basics_types.match_unit cic.prop Q_ _H_it x_495.

def unit_rect_Type4 :
      Q_ :
        (_x_497 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type4) ->
      _H_it : cic.Term univs.Type4 (Q_ matita_basics_types.it) ->
      x_497 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type4 (Q_ x_497).

def unit_rect_Type4_body :
      Q_ :
        (_x_497 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type4) ->
      _H_it : cic.Term univs.Type4 (Q_ matita_basics_types.it) ->
      x_497 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type4 (Q_ x_497).

[ Q_, _H_it, x_497 ] unit_rect_Type4 Q_ _H_it x_497 -->
  matita_basics_types.filter_unit univs.Type4
    (x_497 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_497)
    (matita_basics_types.unit_rect_Type4_body Q_ _H_it) x_497.

[ Q_, _H_it, x_497 ] unit_rect_Type4_body Q_ _H_it x_497 -->
  matita_basics_types.match_unit univs.Type4 Q_ _H_it x_497.

def unit_rect_Type5 :
      Q_ :
        (_x_499 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type5) ->
      _H_it : cic.Term univs.Type5 (Q_ matita_basics_types.it) ->
      x_499 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type5 (Q_ x_499).

def unit_rect_Type5_body :
      Q_ :
        (_x_499 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type5) ->
      _H_it : cic.Term univs.Type5 (Q_ matita_basics_types.it) ->
      x_499 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type5 (Q_ x_499).

[ Q_, _H_it, x_499 ] unit_rect_Type5 Q_ _H_it x_499 -->
  matita_basics_types.filter_unit univs.Type5
    (x_499 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_499)
    (matita_basics_types.unit_rect_Type5_body Q_ _H_it) x_499.

[ Q_, _H_it, x_499 ] unit_rect_Type5_body Q_ _H_it x_499 -->
  matita_basics_types.match_unit univs.Type5 Q_ _H_it x_499.

def unit_rect_Type3 :
      Q_ :
        (_x_501 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type3) ->
      _H_it : cic.Term univs.Type3 (Q_ matita_basics_types.it) ->
      x_501 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type3 (Q_ x_501).

def unit_rect_Type3_body :
      Q_ :
        (_x_501 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type3) ->
      _H_it : cic.Term univs.Type3 (Q_ matita_basics_types.it) ->
      x_501 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type3 (Q_ x_501).

[ Q_, _H_it, x_501 ] unit_rect_Type3 Q_ _H_it x_501 -->
  matita_basics_types.filter_unit univs.Type3
    (x_501 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_501)
    (matita_basics_types.unit_rect_Type3_body Q_ _H_it) x_501.

[ Q_, _H_it, x_501 ] unit_rect_Type3_body Q_ _H_it x_501 -->
  matita_basics_types.match_unit univs.Type3 Q_ _H_it x_501.

def unit_rect_Type2 :
      Q_ :
        (_x_503 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type2) ->
      _H_it : cic.Term univs.Type2 (Q_ matita_basics_types.it) ->
      x_503 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type2 (Q_ x_503).

def unit_rect_Type2_body :
      Q_ :
        (_x_503 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type2) ->
      _H_it : cic.Term univs.Type2 (Q_ matita_basics_types.it) ->
      x_503 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type2 (Q_ x_503).

[ Q_, _H_it, x_503 ] unit_rect_Type2 Q_ _H_it x_503 -->
  matita_basics_types.filter_unit univs.Type2
    (x_503 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_503)
    (matita_basics_types.unit_rect_Type2_body Q_ _H_it) x_503.

[ Q_, _H_it, x_503 ] unit_rect_Type2_body Q_ _H_it x_503 -->
  matita_basics_types.match_unit univs.Type2 Q_ _H_it x_503.

def unit_rect_Type1 :
      Q_ :
        (_x_505 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type1) ->
      _H_it : cic.Term univs.Type1 (Q_ matita_basics_types.it) ->
      x_505 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type1 (Q_ x_505).

def unit_rect_Type1_body :
      Q_ :
        (_x_505 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type1) ->
      _H_it : cic.Term univs.Type1 (Q_ matita_basics_types.it) ->
      x_505 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type1 (Q_ x_505).

[ Q_, _H_it, x_505 ] unit_rect_Type1 Q_ _H_it x_505 -->
  matita_basics_types.filter_unit univs.Type1
    (x_505 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_505)
    (matita_basics_types.unit_rect_Type1_body Q_ _H_it) x_505.

[ Q_, _H_it, x_505 ] unit_rect_Type1_body Q_ _H_it x_505 -->
  matita_basics_types.match_unit univs.Type1 Q_ _H_it x_505.

def unit_rect_Type0 :
      Q_ :
        (_x_507 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type0) ->
      _H_it : cic.Term univs.Type0 (Q_ matita_basics_types.it) ->
      x_507 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type0 (Q_ x_507).

def unit_rect_Type0_body :
      Q_ :
        (_x_507 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type0) ->
      _H_it : cic.Term univs.Type0 (Q_ matita_basics_types.it) ->
      x_507 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term univs.Type0 (Q_ x_507).

[ Q_, _H_it, x_507 ] unit_rect_Type0 Q_ _H_it x_507 -->
  matita_basics_types.filter_unit univs.Type0
    (x_507 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_507)
    (matita_basics_types.unit_rect_Type0_body Q_ _H_it) x_507.

[ Q_, _H_it, x_507 ] unit_rect_Type0_body Q_ _H_it x_507 -->
  matita_basics_types.match_unit univs.Type0 Q_ _H_it x_507.

def unit_rect_CProp4 :
      Q_ :
        (_x_509 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_509 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_509).

def unit_rect_CProp4_body :
      Q_ :
        (_x_509 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_509 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_509).

[ Q_, _H_it, x_509 ] unit_rect_CProp4 Q_ _H_it x_509 -->
  matita_basics_types.filter_unit cic.prop
    (x_509 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_509)
    (matita_basics_types.unit_rect_CProp4_body Q_ _H_it) x_509.

[ Q_, _H_it, x_509 ] unit_rect_CProp4_body Q_ _H_it x_509 -->
  matita_basics_types.match_unit cic.prop Q_ _H_it x_509.

def unit_rect_CProp5 :
      Q_ :
        (_x_511 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_511 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_511).

def unit_rect_CProp5_body :
      Q_ :
        (_x_511 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_511 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_511).

[ Q_, _H_it, x_511 ] unit_rect_CProp5 Q_ _H_it x_511 -->
  matita_basics_types.filter_unit cic.prop
    (x_511 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_511)
    (matita_basics_types.unit_rect_CProp5_body Q_ _H_it) x_511.

[ Q_, _H_it, x_511 ] unit_rect_CProp5_body Q_ _H_it x_511 -->
  matita_basics_types.match_unit cic.prop Q_ _H_it x_511.

def unit_rect_CProp3 :
      Q_ :
        (_x_513 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_513 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_513).

def unit_rect_CProp3_body :
      Q_ :
        (_x_513 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_513 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_513).

[ Q_, _H_it, x_513 ] unit_rect_CProp3 Q_ _H_it x_513 -->
  matita_basics_types.filter_unit cic.prop
    (x_513 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_513)
    (matita_basics_types.unit_rect_CProp3_body Q_ _H_it) x_513.

[ Q_, _H_it, x_513 ] unit_rect_CProp3_body Q_ _H_it x_513 -->
  matita_basics_types.match_unit cic.prop Q_ _H_it x_513.

def unit_rect_CProp2 :
      Q_ :
        (_x_515 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_515 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_515).

def unit_rect_CProp2_body :
      Q_ :
        (_x_515 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_515 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_515).

[ Q_, _H_it, x_515 ] unit_rect_CProp2 Q_ _H_it x_515 -->
  matita_basics_types.filter_unit cic.prop
    (x_515 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_515)
    (matita_basics_types.unit_rect_CProp2_body Q_ _H_it) x_515.

[ Q_, _H_it, x_515 ] unit_rect_CProp2_body Q_ _H_it x_515 -->
  matita_basics_types.match_unit cic.prop Q_ _H_it x_515.

def unit_rect_CProp1 :
      Q_ :
        (_x_517 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_517 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_517).

def unit_rect_CProp1_body :
      Q_ :
        (_x_517 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_517 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_517).

[ Q_, _H_it, x_517 ] unit_rect_CProp1 Q_ _H_it x_517 -->
  matita_basics_types.filter_unit cic.prop
    (x_517 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_517)
    (matita_basics_types.unit_rect_CProp1_body Q_ _H_it) x_517.

[ Q_, _H_it, x_517 ] unit_rect_CProp1_body Q_ _H_it x_517 -->
  matita_basics_types.match_unit cic.prop Q_ _H_it x_517.

def unit_rect_CProp0 :
      Q_ :
        (_x_519 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_519 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_519).

def unit_rect_CProp0_body :
      Q_ :
        (_x_519 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H_it : cic.Term cic.prop (Q_ matita_basics_types.it) ->
      x_519 : cic.Term univs.Type0 matita_basics_types.unit ->
      cic.Term cic.prop (Q_ x_519).

[ Q_, _H_it, x_519 ] unit_rect_CProp0 Q_ _H_it x_519 -->
  matita_basics_types.filter_unit cic.prop
    (x_519 : cic.Term univs.Type0 matita_basics_types.unit => Q_ x_519)
    (matita_basics_types.unit_rect_CProp0_body Q_ _H_it) x_519.

[ Q_, _H_it, x_519 ] unit_rect_CProp0_body Q_ _H_it x_519 -->
  matita_basics_types.match_unit cic.prop Q_ _H_it x_519.

def unit_inv_ind :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z906 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z907 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z906 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) =>
      H1 :
        (_z907 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) =>
      (Hcut :
         (_z907 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_ind
           (_x_495 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_495)
              (_z907 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_495) =>
               P _x_495))
           H1 Hterm).

def unit_inv_rect_Type4 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z912 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type4) ->
      _H1 :
        (_z913 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type4 (P matita_basics_types.it)) ->
      cic.Term univs.Type4 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z912 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type4) =>
      H1 :
        (_z913 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type4 (P matita_basics_types.it)) =>
      (Hcut :
         (_z913 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term univs.Type4 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_Type4
           (_x_497 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop univs.Type4
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_497)
              (_z913 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_497) =>
               P _x_497))
           H1 Hterm).

def unit_inv_rect_Type3 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z918 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type3) ->
      _H1 :
        (_z919 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type3 (P matita_basics_types.it)) ->
      cic.Term univs.Type3 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z918 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type3) =>
      H1 :
        (_z919 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type3 (P matita_basics_types.it)) =>
      (Hcut :
         (_z919 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term univs.Type3 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_Type3
           (_x_501 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop univs.Type3
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_501)
              (_z919 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_501) =>
               P _x_501))
           H1 Hterm).

def unit_inv_rect_Type2 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z924 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type2) ->
      _H1 :
        (_z925 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type2 (P matita_basics_types.it)) ->
      cic.Term univs.Type2 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z924 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type2) =>
      H1 :
        (_z925 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type2 (P matita_basics_types.it)) =>
      (Hcut :
         (_z925 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term univs.Type2 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_Type2
           (_x_503 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop univs.Type2
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_503)
              (_z925 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_503) =>
               P _x_503))
           H1 Hterm).

def unit_inv_rect_Type1 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z930 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type1) ->
      _H1 :
        (_z931 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type1 (P matita_basics_types.it)) ->
      cic.Term univs.Type1 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z930 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type1) =>
      H1 :
        (_z931 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type1 (P matita_basics_types.it)) =>
      (Hcut :
         (_z931 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term univs.Type1 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_Type1
           (_x_505 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop univs.Type1
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_505)
              (_z931 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_505) =>
               P _x_505))
           H1 Hterm).

def unit_inv_rect_Type0 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z936 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type0) ->
      _H1 :
        (_z937 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type0 (P matita_basics_types.it)) ->
      cic.Term univs.Type0 (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z936 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ univs.Type0) =>
      H1 :
        (_z937 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term univs.Type0 (P matita_basics_types.it)) =>
      (Hcut :
         (_z937 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term univs.Type0 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_Type0
           (_x_507 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_507)
              (_z937 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_507) =>
               P _x_507))
           H1 Hterm).

def unit_inv_rect_CProp4 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z942 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z943 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z942 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) =>
      H1 :
        (_z943 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) =>
      (Hcut :
         (_z943 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_CProp4
           (_x_509 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_509)
              (_z943 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_509) =>
               P _x_509))
           H1 Hterm).

def unit_inv_rect_CProp3 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z948 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z949 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z948 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) =>
      H1 :
        (_z949 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) =>
      (Hcut :
         (_z949 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_CProp3
           (_x_513 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_513)
              (_z949 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_513) =>
               P _x_513))
           H1 Hterm).

def unit_inv_rect_CProp2 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z954 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z955 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z954 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) =>
      H1 :
        (_z955 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) =>
      (Hcut :
         (_z955 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_CProp2
           (_x_515 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_515)
              (_z955 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_515) =>
               P _x_515))
           H1 Hterm).

def unit_inv_rect_CProp1 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z960 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z961 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z960 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) =>
      H1 :
        (_z961 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) =>
      (Hcut :
         (_z961 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_CProp1
           (_x_517 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_517)
              (_z961 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_517) =>
               P _x_517))
           H1 Hterm).

def unit_inv_rect_CProp0 :
      Hterm : cic.Term univs.Type0 matita_basics_types.unit ->
      P :
        (_z966 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z967 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) ->
      cic.Term cic.prop (P Hterm) :=
      Hterm : cic.Term univs.Type0 matita_basics_types.unit =>
      P :
        (_z966 : cic.Term univs.Type0 matita_basics_types.unit ->
         cic.Univ cic.prop) =>
      H1 :
        (_z967 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                Hterm matita_basics_types.it) ->
         cic.Term cic.prop (P matita_basics_types.it)) =>
      (Hcut :
         (_z967 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) Hterm))
        (matita_basics_types.unit_rect_CProp0
           (_x_519 : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit)
                 Hterm _x_519)
              (_z967 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_types.unit)
                      Hterm _x_519) =>
               P _x_519))
           H1 Hterm).

def unit_discr :
      x : cic.Term univs.Type0 matita_basics_types.unit ->
      y : cic.Term univs.Type0 matita_basics_types.unit ->
      _e :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) x y) ->
      cic.Term univs.Type2
        (matita_basics_types.match_unit (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.univ univs.Type2)
           (matita_basics_types.match_unit (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 matita_basics_types.unit =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1 P
                    (_z31 : cic.Term univs.Type1 P => P)))
              y)
           x)
      :=
      x : cic.Term univs.Type0 matita_basics_types.unit =>
      y : cic.Term univs.Type0 matita_basics_types.unit =>
      Deq :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) x y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) x
        (x_13 : cic.Term univs.Type0 matita_basics_types.unit =>
         _x_14 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_types.unit) x
                x_13) =>
         matita_basics_types.match_unit (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 matita_basics_types.unit =>
            cic.univ univs.Type2)
           (matita_basics_types.match_unit (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 matita_basics_types.unit =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1 P
                    (_z31 : cic.Term univs.Type1 P => P)))
              x_13)
           x)
        (matita_basics_types.match_unit univs.Type2
           (__ : cic.Term univs.Type0 matita_basics_types.unit =>
            matita_basics_types.match_unit (cic.succ univs.Type2)
              (_0 : cic.Term univs.Type0 matita_basics_types.unit =>
               cic.univ univs.Type2)
              (matita_basics_types.match_unit (cic.succ univs.Type2)
                 (_0 : cic.Term univs.Type0 matita_basics_types.unit =>
                  cic.univ univs.Type2)
                 (cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1 P
                       (_z31 : cic.Term univs.Type1 P => P)))
                 __)
              __)
           (P : cic.Univ univs.Type1 => DH : cic.Term univs.Type1 P => DH) x)
        y Deq.

Sum :
  _A : cic.Univ univs.Type0 ->
  _B : cic.Univ univs.Type0 -> cic.Univ univs.Type0.

inl :
  A : cic.Univ univs.Type0 ->
  B : cic.Univ univs.Type0 ->
  __ : cic.Term univs.Type0 A ->
  cic.Term univs.Type0 (matita_basics_types.Sum A B).

inr :
  A : cic.Univ univs.Type0 ->
  B : cic.Univ univs.Type0 ->
  __ : cic.Term univs.Type0 B ->
  cic.Term univs.Type0 (matita_basics_types.Sum A B).

def match_Sum :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ return_sort) ->
      case_inl :
        (__ : cic.Term univs.Type0 _A ->
         cic.Term return_sort
           (return_type (matita_basics_types.inl _A _B __))) ->
      case_inr :
        (__ : cic.Term univs.Type0 _B ->
         cic.Term return_sort
           (return_type (matita_basics_types.inr _A _B __))) ->
      z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term return_sort (return_type z).

[ _A, _B, return_sort, return_type, case_inl, case_inr, __ ]
  match_Sum _A _B return_sort return_type case_inl case_inr
    (matita_basics_types.inl _A _B __) -->
  case_inl __.

[ _A, _B, return_sort, return_type, case_inl, case_inr, __ ]
  match_Sum _A _B return_sort return_type case_inl case_inr
    (matita_basics_types.inr _A _B __) -->
  case_inr __.

def filter_Sum :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term return_sort (return_type z).

[ A, B, __, return_sort, return_type, return ]
  filter_Sum (A) (B) return_sort return_type return
    (matita_basics_types.inl A B __) -->
  return (matita_basics_types.inl A B __).

[ A, B, __, return_sort, return_type, return ]
  filter_Sum (A) (B) return_sort return_type return
    (matita_basics_types.inr A B __) -->
  return (matita_basics_types.inr A B __).

def Sum_ind :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_521 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_522 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_522))) ->
      _H_inr :
        (x_523 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_523))) ->
      x_521 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_521).

def Sum_ind_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_521 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_522 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_522))) ->
      _H_inr :
        (x_523 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_523))) ->
      x_521 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_521).

[ _A, _B, Q_, _H_inl, _H_inr, x_521 ]
  Sum_ind _A _B Q_ _H_inl _H_inr x_521 -->
  matita_basics_types.filter_Sum _A _B cic.prop
    (x_521 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_521)
    (matita_basics_types.Sum_ind_body _A _B Q_ _H_inl _H_inr) x_521.

[ _A, _B, Q_, _H_inl, _H_inr, x_521 ]
  Sum_ind_body _A _B Q_ _H_inl _H_inr x_521 -->
  matita_basics_types.match_Sum _A _B cic.prop Q_
    (x_522 : cic.Term univs.Type0 _A => _H_inl x_522)
    (x_523 : cic.Term univs.Type0 _B => _H_inr x_523) x_521.

def Sum_rect_Type4 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type4) ->
      _H_inl :
        (x_527 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type4 (Q_ (matita_basics_types.inl _A _B x_527))) ->
      _H_inr :
        (x_528 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type4 (Q_ (matita_basics_types.inr _A _B x_528))) ->
      x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type4 (Q_ x_526).

def Sum_rect_Type4_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type4) ->
      _H_inl :
        (x_527 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type4 (Q_ (matita_basics_types.inl _A _B x_527))) ->
      _H_inr :
        (x_528 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type4 (Q_ (matita_basics_types.inr _A _B x_528))) ->
      x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type4 (Q_ x_526).

[ _A, _B, Q_, _H_inl, _H_inr, x_526 ]
  Sum_rect_Type4 _A _B Q_ _H_inl _H_inr x_526 -->
  matita_basics_types.filter_Sum _A _B univs.Type4
    (x_526 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_526)
    (matita_basics_types.Sum_rect_Type4_body _A _B Q_ _H_inl _H_inr) x_526.

[ _A, _B, Q_, _H_inl, _H_inr, x_526 ]
  Sum_rect_Type4_body _A _B Q_ _H_inl _H_inr x_526 -->
  matita_basics_types.match_Sum _A _B univs.Type4 Q_
    (x_527 : cic.Term univs.Type0 _A => _H_inl x_527)
    (x_528 : cic.Term univs.Type0 _B => _H_inr x_528) x_526.

def Sum_rect_Type5 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_531 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type5) ->
      _H_inl :
        (x_532 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type5 (Q_ (matita_basics_types.inl _A _B x_532))) ->
      _H_inr :
        (x_533 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type5 (Q_ (matita_basics_types.inr _A _B x_533))) ->
      x_531 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type5 (Q_ x_531).

def Sum_rect_Type5_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_531 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type5) ->
      _H_inl :
        (x_532 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type5 (Q_ (matita_basics_types.inl _A _B x_532))) ->
      _H_inr :
        (x_533 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type5 (Q_ (matita_basics_types.inr _A _B x_533))) ->
      x_531 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type5 (Q_ x_531).

[ _A, _B, Q_, _H_inl, _H_inr, x_531 ]
  Sum_rect_Type5 _A _B Q_ _H_inl _H_inr x_531 -->
  matita_basics_types.filter_Sum _A _B univs.Type5
    (x_531 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_531)
    (matita_basics_types.Sum_rect_Type5_body _A _B Q_ _H_inl _H_inr) x_531.

[ _A, _B, Q_, _H_inl, _H_inr, x_531 ]
  Sum_rect_Type5_body _A _B Q_ _H_inl _H_inr x_531 -->
  matita_basics_types.match_Sum _A _B univs.Type5 Q_
    (x_532 : cic.Term univs.Type0 _A => _H_inl x_532)
    (x_533 : cic.Term univs.Type0 _B => _H_inr x_533) x_531.

def Sum_rect_Type3 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type3) ->
      _H_inl :
        (x_537 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type3 (Q_ (matita_basics_types.inl _A _B x_537))) ->
      _H_inr :
        (x_538 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type3 (Q_ (matita_basics_types.inr _A _B x_538))) ->
      x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type3 (Q_ x_536).

def Sum_rect_Type3_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type3) ->
      _H_inl :
        (x_537 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type3 (Q_ (matita_basics_types.inl _A _B x_537))) ->
      _H_inr :
        (x_538 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type3 (Q_ (matita_basics_types.inr _A _B x_538))) ->
      x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type3 (Q_ x_536).

[ _A, _B, Q_, _H_inl, _H_inr, x_536 ]
  Sum_rect_Type3 _A _B Q_ _H_inl _H_inr x_536 -->
  matita_basics_types.filter_Sum _A _B univs.Type3
    (x_536 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_536)
    (matita_basics_types.Sum_rect_Type3_body _A _B Q_ _H_inl _H_inr) x_536.

[ _A, _B, Q_, _H_inl, _H_inr, x_536 ]
  Sum_rect_Type3_body _A _B Q_ _H_inl _H_inr x_536 -->
  matita_basics_types.match_Sum _A _B univs.Type3 Q_
    (x_537 : cic.Term univs.Type0 _A => _H_inl x_537)
    (x_538 : cic.Term univs.Type0 _B => _H_inr x_538) x_536.

def Sum_rect_Type2 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type2) ->
      _H_inl :
        (x_542 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))) ->
      _H_inr :
        (x_543 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))) ->
      x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type2 (Q_ x_541).

def Sum_rect_Type2_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type2) ->
      _H_inl :
        (x_542 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type2 (Q_ (matita_basics_types.inl _A _B x_542))) ->
      _H_inr :
        (x_543 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type2 (Q_ (matita_basics_types.inr _A _B x_543))) ->
      x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type2 (Q_ x_541).

[ _A, _B, Q_, _H_inl, _H_inr, x_541 ]
  Sum_rect_Type2 _A _B Q_ _H_inl _H_inr x_541 -->
  matita_basics_types.filter_Sum _A _B univs.Type2
    (x_541 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_541)
    (matita_basics_types.Sum_rect_Type2_body _A _B Q_ _H_inl _H_inr) x_541.

[ _A, _B, Q_, _H_inl, _H_inr, x_541 ]
  Sum_rect_Type2_body _A _B Q_ _H_inl _H_inr x_541 -->
  matita_basics_types.match_Sum _A _B univs.Type2 Q_
    (x_542 : cic.Term univs.Type0 _A => _H_inl x_542)
    (x_543 : cic.Term univs.Type0 _B => _H_inr x_543) x_541.

def Sum_rect_Type1 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type1) ->
      _H_inl :
        (x_547 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type1 (Q_ (matita_basics_types.inl _A _B x_547))) ->
      _H_inr :
        (x_548 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type1 (Q_ (matita_basics_types.inr _A _B x_548))) ->
      x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type1 (Q_ x_546).

def Sum_rect_Type1_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type1) ->
      _H_inl :
        (x_547 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type1 (Q_ (matita_basics_types.inl _A _B x_547))) ->
      _H_inr :
        (x_548 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type1 (Q_ (matita_basics_types.inr _A _B x_548))) ->
      x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type1 (Q_ x_546).

[ _A, _B, Q_, _H_inl, _H_inr, x_546 ]
  Sum_rect_Type1 _A _B Q_ _H_inl _H_inr x_546 -->
  matita_basics_types.filter_Sum _A _B univs.Type1
    (x_546 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_546)
    (matita_basics_types.Sum_rect_Type1_body _A _B Q_ _H_inl _H_inr) x_546.

[ _A, _B, Q_, _H_inl, _H_inr, x_546 ]
  Sum_rect_Type1_body _A _B Q_ _H_inl _H_inr x_546 -->
  matita_basics_types.match_Sum _A _B univs.Type1 Q_
    (x_547 : cic.Term univs.Type0 _A => _H_inl x_547)
    (x_548 : cic.Term univs.Type0 _B => _H_inr x_548) x_546.

def Sum_rect_Type0 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_551 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type0) ->
      _H_inl :
        (x_552 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type0 (Q_ (matita_basics_types.inl _A _B x_552))) ->
      _H_inr :
        (x_553 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type0 (Q_ (matita_basics_types.inr _A _B x_553))) ->
      x_551 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type0 (Q_ x_551).

def Sum_rect_Type0_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_551 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ univs.Type0) ->
      _H_inl :
        (x_552 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type0 (Q_ (matita_basics_types.inl _A _B x_552))) ->
      _H_inr :
        (x_553 : cic.Term univs.Type0 _B ->
         cic.Term univs.Type0 (Q_ (matita_basics_types.inr _A _B x_553))) ->
      x_551 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term univs.Type0 (Q_ x_551).

[ _A, _B, Q_, _H_inl, _H_inr, x_551 ]
  Sum_rect_Type0 _A _B Q_ _H_inl _H_inr x_551 -->
  matita_basics_types.filter_Sum _A _B univs.Type0
    (x_551 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_551)
    (matita_basics_types.Sum_rect_Type0_body _A _B Q_ _H_inl _H_inr) x_551.

[ _A, _B, Q_, _H_inl, _H_inr, x_551 ]
  Sum_rect_Type0_body _A _B Q_ _H_inl _H_inr x_551 -->
  matita_basics_types.match_Sum _A _B univs.Type0 Q_
    (x_552 : cic.Term univs.Type0 _A => _H_inl x_552)
    (x_553 : cic.Term univs.Type0 _B => _H_inr x_553) x_551.

def Sum_rect_CProp4 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_557 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_557))) ->
      _H_inr :
        (x_558 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_558))) ->
      x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_556).

def Sum_rect_CProp4_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_557 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_557))) ->
      _H_inr :
        (x_558 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_558))) ->
      x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_556).

[ _A, _B, Q_, _H_inl, _H_inr, x_556 ]
  Sum_rect_CProp4 _A _B Q_ _H_inl _H_inr x_556 -->
  matita_basics_types.filter_Sum _A _B cic.prop
    (x_556 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_556)
    (matita_basics_types.Sum_rect_CProp4_body _A _B Q_ _H_inl _H_inr) x_556.

[ _A, _B, Q_, _H_inl, _H_inr, x_556 ]
  Sum_rect_CProp4_body _A _B Q_ _H_inl _H_inr x_556 -->
  matita_basics_types.match_Sum _A _B cic.prop Q_
    (x_557 : cic.Term univs.Type0 _A => _H_inl x_557)
    (x_558 : cic.Term univs.Type0 _B => _H_inr x_558) x_556.

def Sum_rect_CProp5 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_562 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_562))) ->
      _H_inr :
        (x_563 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_563))) ->
      x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_561).

def Sum_rect_CProp5_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_562 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_562))) ->
      _H_inr :
        (x_563 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_563))) ->
      x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_561).

[ _A, _B, Q_, _H_inl, _H_inr, x_561 ]
  Sum_rect_CProp5 _A _B Q_ _H_inl _H_inr x_561 -->
  matita_basics_types.filter_Sum _A _B cic.prop
    (x_561 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_561)
    (matita_basics_types.Sum_rect_CProp5_body _A _B Q_ _H_inl _H_inr) x_561.

[ _A, _B, Q_, _H_inl, _H_inr, x_561 ]
  Sum_rect_CProp5_body _A _B Q_ _H_inl _H_inr x_561 -->
  matita_basics_types.match_Sum _A _B cic.prop Q_
    (x_562 : cic.Term univs.Type0 _A => _H_inl x_562)
    (x_563 : cic.Term univs.Type0 _B => _H_inr x_563) x_561.

def Sum_rect_CProp3 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_566 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_567 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_567))) ->
      _H_inr :
        (x_568 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_568))) ->
      x_566 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_566).

def Sum_rect_CProp3_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_566 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_567 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_567))) ->
      _H_inr :
        (x_568 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_568))) ->
      x_566 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_566).

[ _A, _B, Q_, _H_inl, _H_inr, x_566 ]
  Sum_rect_CProp3 _A _B Q_ _H_inl _H_inr x_566 -->
  matita_basics_types.filter_Sum _A _B cic.prop
    (x_566 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_566)
    (matita_basics_types.Sum_rect_CProp3_body _A _B Q_ _H_inl _H_inr) x_566.

[ _A, _B, Q_, _H_inl, _H_inr, x_566 ]
  Sum_rect_CProp3_body _A _B Q_ _H_inl _H_inr x_566 -->
  matita_basics_types.match_Sum _A _B cic.prop Q_
    (x_567 : cic.Term univs.Type0 _A => _H_inl x_567)
    (x_568 : cic.Term univs.Type0 _B => _H_inr x_568) x_566.

def Sum_rect_CProp2 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_572 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_572))) ->
      _H_inr :
        (x_573 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_573))) ->
      x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_571).

def Sum_rect_CProp2_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_572 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_572))) ->
      _H_inr :
        (x_573 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_573))) ->
      x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_571).

[ _A, _B, Q_, _H_inl, _H_inr, x_571 ]
  Sum_rect_CProp2 _A _B Q_ _H_inl _H_inr x_571 -->
  matita_basics_types.filter_Sum _A _B cic.prop
    (x_571 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_571)
    (matita_basics_types.Sum_rect_CProp2_body _A _B Q_ _H_inl _H_inr) x_571.

[ _A, _B, Q_, _H_inl, _H_inr, x_571 ]
  Sum_rect_CProp2_body _A _B Q_ _H_inl _H_inr x_571 -->
  matita_basics_types.match_Sum _A _B cic.prop Q_
    (x_572 : cic.Term univs.Type0 _A => _H_inl x_572)
    (x_573 : cic.Term univs.Type0 _B => _H_inr x_573) x_571.

def Sum_rect_CProp1 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_576 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_577 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_577))) ->
      _H_inr :
        (x_578 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_578))) ->
      x_576 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_576).

def Sum_rect_CProp1_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_576 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_577 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_577))) ->
      _H_inr :
        (x_578 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_578))) ->
      x_576 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_576).

[ _A, _B, Q_, _H_inl, _H_inr, x_576 ]
  Sum_rect_CProp1 _A _B Q_ _H_inl _H_inr x_576 -->
  matita_basics_types.filter_Sum _A _B cic.prop
    (x_576 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_576)
    (matita_basics_types.Sum_rect_CProp1_body _A _B Q_ _H_inl _H_inr) x_576.

[ _A, _B, Q_, _H_inl, _H_inr, x_576 ]
  Sum_rect_CProp1_body _A _B Q_ _H_inl _H_inr x_576 -->
  matita_basics_types.match_Sum _A _B cic.prop Q_
    (x_577 : cic.Term univs.Type0 _A => _H_inl x_577)
    (x_578 : cic.Term univs.Type0 _B => _H_inr x_578) x_576.

def Sum_rect_CProp0 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_581 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_582 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_582))) ->
      _H_inr :
        (x_583 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_583))) ->
      x_581 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_581).

def Sum_rect_CProp0_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_581 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
         cic.Univ cic.prop) ->
      _H_inl :
        (x_582 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.inl _A _B x_582))) ->
      _H_inr :
        (x_583 : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.inr _A _B x_583))) ->
      x_581 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) ->
      cic.Term cic.prop (Q_ x_581).

[ _A, _B, Q_, _H_inl, _H_inr, x_581 ]
  Sum_rect_CProp0 _A _B Q_ _H_inl _H_inr x_581 -->
  matita_basics_types.filter_Sum _A _B cic.prop
    (x_581 : cic.Term univs.Type0 (matita_basics_types.Sum _A _B) => Q_ x_581)
    (matita_basics_types.Sum_rect_CProp0_body _A _B Q_ _H_inl _H_inr) x_581.

[ _A, _B, Q_, _H_inl, _H_inr, x_581 ]
  Sum_rect_CProp0_body _A _B Q_ _H_inl _H_inr x_581 -->
  matita_basics_types.match_Sum _A _B cic.prop Q_
    (x_582 : cic.Term univs.Type0 _A => _H_inl x_582)
    (x_583 : cic.Term univs.Type0 _B => _H_inr x_583) x_581.

def Sum_inv_ind :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z972 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (x_522 : cic.Term univs.Type0 x1 ->
         _z973 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_522)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_522))) ->
      _H2 :
        (x_523 : cic.Term univs.Type0 x2 ->
         _z973 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_523)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_523))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z972 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (x_522 : cic.Term univs.Type0 x1 ->
         _z973 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_522)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_522))) =>
      H2 :
        (x_523 : cic.Term univs.Type0 x2 ->
         _z973 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_523)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_523))) =>
      (Hcut :
         (_z973 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_ind x1 x2
           (_x_521 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_521)
              (_z973 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_521) =>
               P _x_521))
           H1 H2 Hterm).

def Sum_inv_rect_Type4 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z978 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type4) ->
      _H1 :
        (x_527 : cic.Term univs.Type0 x1 ->
         _z979 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_527)) ->
         cic.Term univs.Type4 (P (matita_basics_types.inl x1 x2 x_527))) ->
      _H2 :
        (x_528 : cic.Term univs.Type0 x2 ->
         _z979 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_528)) ->
         cic.Term univs.Type4 (P (matita_basics_types.inr x1 x2 x_528))) ->
      cic.Term univs.Type4 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z978 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type4) =>
      H1 :
        (x_527 : cic.Term univs.Type0 x1 ->
         _z979 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_527)) ->
         cic.Term univs.Type4 (P (matita_basics_types.inl x1 x2 x_527))) =>
      H2 :
        (x_528 : cic.Term univs.Type0 x2 ->
         _z979 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_528)) ->
         cic.Term univs.Type4 (P (matita_basics_types.inr x1 x2 x_528))) =>
      (Hcut :
         (_z979 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type4 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_Type4 x1 x2
           (_x_526 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop univs.Type4
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_526)
              (_z979 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_526) =>
               P _x_526))
           H1 H2 Hterm).

def Sum_inv_rect_Type3 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z984 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type3) ->
      _H1 :
        (x_537 : cic.Term univs.Type0 x1 ->
         _z985 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_537)) ->
         cic.Term univs.Type3 (P (matita_basics_types.inl x1 x2 x_537))) ->
      _H2 :
        (x_538 : cic.Term univs.Type0 x2 ->
         _z985 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_538)) ->
         cic.Term univs.Type3 (P (matita_basics_types.inr x1 x2 x_538))) ->
      cic.Term univs.Type3 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z984 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type3) =>
      H1 :
        (x_537 : cic.Term univs.Type0 x1 ->
         _z985 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_537)) ->
         cic.Term univs.Type3 (P (matita_basics_types.inl x1 x2 x_537))) =>
      H2 :
        (x_538 : cic.Term univs.Type0 x2 ->
         _z985 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_538)) ->
         cic.Term univs.Type3 (P (matita_basics_types.inr x1 x2 x_538))) =>
      (Hcut :
         (_z985 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type3 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_Type3 x1 x2
           (_x_536 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop univs.Type3
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_536)
              (_z985 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_536) =>
               P _x_536))
           H1 H2 Hterm).

def Sum_inv_rect_Type2 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z990 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type2) ->
      _H1 :
        (x_542 : cic.Term univs.Type0 x1 ->
         _z991 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_542)) ->
         cic.Term univs.Type2 (P (matita_basics_types.inl x1 x2 x_542))) ->
      _H2 :
        (x_543 : cic.Term univs.Type0 x2 ->
         _z991 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_543)) ->
         cic.Term univs.Type2 (P (matita_basics_types.inr x1 x2 x_543))) ->
      cic.Term univs.Type2 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z990 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type2) =>
      H1 :
        (x_542 : cic.Term univs.Type0 x1 ->
         _z991 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_542)) ->
         cic.Term univs.Type2 (P (matita_basics_types.inl x1 x2 x_542))) =>
      H2 :
        (x_543 : cic.Term univs.Type0 x2 ->
         _z991 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_543)) ->
         cic.Term univs.Type2 (P (matita_basics_types.inr x1 x2 x_543))) =>
      (Hcut :
         (_z991 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type2 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_Type2 x1 x2
           (_x_541 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop univs.Type2
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_541)
              (_z991 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_541) =>
               P _x_541))
           H1 H2 Hterm).

def Sum_inv_rect_Type1 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z996 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type1) ->
      _H1 :
        (x_547 : cic.Term univs.Type0 x1 ->
         _z997 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_547)) ->
         cic.Term univs.Type1 (P (matita_basics_types.inl x1 x2 x_547))) ->
      _H2 :
        (x_548 : cic.Term univs.Type0 x2 ->
         _z997 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_548)) ->
         cic.Term univs.Type1 (P (matita_basics_types.inr x1 x2 x_548))) ->
      cic.Term univs.Type1 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z996 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type1) =>
      H1 :
        (x_547 : cic.Term univs.Type0 x1 ->
         _z997 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_547)) ->
         cic.Term univs.Type1 (P (matita_basics_types.inl x1 x2 x_547))) =>
      H2 :
        (x_548 : cic.Term univs.Type0 x2 ->
         _z997 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_548)) ->
         cic.Term univs.Type1 (P (matita_basics_types.inr x1 x2 x_548))) =>
      (Hcut :
         (_z997 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type1 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_Type1 x1 x2
           (_x_546 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop univs.Type1
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_546)
              (_z997 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_546) =>
               P _x_546))
           H1 H2 Hterm).

def Sum_inv_rect_Type0 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z1002 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type0) ->
      _H1 :
        (x_552 : cic.Term univs.Type0 x1 ->
         _z1003 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_552)) ->
         cic.Term univs.Type0 (P (matita_basics_types.inl x1 x2 x_552))) ->
      _H2 :
        (x_553 : cic.Term univs.Type0 x2 ->
         _z1003 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_553)) ->
         cic.Term univs.Type0 (P (matita_basics_types.inr x1 x2 x_553))) ->
      cic.Term univs.Type0 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z1002 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ univs.Type0) =>
      H1 :
        (x_552 : cic.Term univs.Type0 x1 ->
         _z1003 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_552)) ->
         cic.Term univs.Type0 (P (matita_basics_types.inl x1 x2 x_552))) =>
      H2 :
        (x_553 : cic.Term univs.Type0 x2 ->
         _z1003 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_553)) ->
         cic.Term univs.Type0 (P (matita_basics_types.inr x1 x2 x_553))) =>
      (Hcut :
         (_z1003 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type0 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_Type0 x1 x2
           (_x_551 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_551)
              (_z1003 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_551) =>
               P _x_551))
           H1 H2 Hterm).

def Sum_inv_rect_CProp4 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z1008 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (x_557 : cic.Term univs.Type0 x1 ->
         _z1009 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_557)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_557))) ->
      _H2 :
        (x_558 : cic.Term univs.Type0 x2 ->
         _z1009 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_558)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_558))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z1008 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (x_557 : cic.Term univs.Type0 x1 ->
         _z1009 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_557)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_557))) =>
      H2 :
        (x_558 : cic.Term univs.Type0 x2 ->
         _z1009 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_558)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_558))) =>
      (Hcut :
         (_z1009 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_CProp4 x1 x2
           (_x_556 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_556)
              (_z1009 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_556) =>
               P _x_556))
           H1 H2 Hterm).

def Sum_inv_rect_CProp3 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z1014 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (x_567 : cic.Term univs.Type0 x1 ->
         _z1015 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_567)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_567))) ->
      _H2 :
        (x_568 : cic.Term univs.Type0 x2 ->
         _z1015 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_568)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_568))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z1014 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (x_567 : cic.Term univs.Type0 x1 ->
         _z1015 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_567)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_567))) =>
      H2 :
        (x_568 : cic.Term univs.Type0 x2 ->
         _z1015 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_568)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_568))) =>
      (Hcut :
         (_z1015 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_CProp3 x1 x2
           (_x_566 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_566)
              (_z1015 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_566) =>
               P _x_566))
           H1 H2 Hterm).

def Sum_inv_rect_CProp2 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z1020 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (x_572 : cic.Term univs.Type0 x1 ->
         _z1021 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_572)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_572))) ->
      _H2 :
        (x_573 : cic.Term univs.Type0 x2 ->
         _z1021 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_573)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_573))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z1020 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (x_572 : cic.Term univs.Type0 x1 ->
         _z1021 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_572)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_572))) =>
      H2 :
        (x_573 : cic.Term univs.Type0 x2 ->
         _z1021 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_573)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_573))) =>
      (Hcut :
         (_z1021 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_CProp2 x1 x2
           (_x_571 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_571)
              (_z1021 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_571) =>
               P _x_571))
           H1 H2 Hterm).

def Sum_inv_rect_CProp1 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z1026 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (x_577 : cic.Term univs.Type0 x1 ->
         _z1027 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_577)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_577))) ->
      _H2 :
        (x_578 : cic.Term univs.Type0 x2 ->
         _z1027 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_578)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_578))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z1026 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (x_577 : cic.Term univs.Type0 x1 ->
         _z1027 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_577)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_577))) =>
      H2 :
        (x_578 : cic.Term univs.Type0 x2 ->
         _z1027 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_578)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_578))) =>
      (Hcut :
         (_z1027 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_CProp1 x1 x2
           (_x_576 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_576)
              (_z1027 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_576) =>
               P _x_576))
           H1 H2 Hterm).

def Sum_inv_rect_CProp0 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
      P :
        (_z1032 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (x_582 : cic.Term univs.Type0 x1 ->
         _z1033 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_582)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_582))) ->
      _H2 :
        (x_583 : cic.Term univs.Type0 x2 ->
         _z1033 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_583)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_583))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
      P :
        (_z1032 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (x_582 : cic.Term univs.Type0 x1 ->
         _z1033 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inl x1 x2 x_582)) ->
         cic.Term cic.prop (P (matita_basics_types.inl x1 x2 x_582))) =>
      H2 :
        (x_583 : cic.Term univs.Type0 x2 ->
         _z1033 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum x1 x2))
                Hterm (matita_basics_types.inr x1 x2 x_583)) ->
         cic.Term cic.prop (P (matita_basics_types.inr x1 x2 x_583))) =>
      (Hcut :
         (_z1033 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum x1 x2))
            Hterm))
        (matita_basics_types.Sum_rect_CProp0 x1 x2
           (_x_581 : cic.Term univs.Type0 (matita_basics_types.Sum x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sum x1 x2))
                 Hterm _x_581)
              (_z1033 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sum x1 x2))
                      Hterm _x_581) =>
               P _x_581))
           H1 H2 Hterm).

def Sum_discr :
      a1 : cic.Univ univs.Type0 ->
      a2 : cic.Univ univs.Type0 ->
      x : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) ->
      y : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) ->
      _e :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.Sum a1 a2))
             x y) ->
      cic.Term univs.Type2
        (matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
            cic.univ univs.Type2)
           (t0 : cic.Term univs.Type0 a1 =>
            matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        P))
                    (_z33 :
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              (u0 : cic.Term univs.Type0 a2 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              y)
           (t0 : cic.Term univs.Type0 a2 =>
            matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              (u0 : cic.Term univs.Type0 a2 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a2)
                          (matita_basics_logic.R0 a2 t0) u0)
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a2)
                               (matita_basics_logic.R0 a2 t0) u0) =>
                        P))
                    (_z34 :
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a2)
                               (matita_basics_logic.R0 a2 t0) u0) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              y)
           x)
      :=
      a1 : cic.Univ univs.Type0 =>
      a2 : cic.Univ univs.Type0 =>
      x : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
      y : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
      Deq :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.Sum a1 a2))
             x y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sum a1 a2)) x
        (x_13 : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
         _x_14 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sum a1 a2))
                x x_13) =>
         matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
            cic.univ univs.Type2)
           (t0 : cic.Term univs.Type0 a1 =>
            matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        P))
                    (_z33 :
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              (u0 : cic.Term univs.Type0 a2 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              x_13)
           (t0 : cic.Term univs.Type0 a2 =>
            matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              (u0 : cic.Term univs.Type0 a2 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a2)
                          (matita_basics_logic.R0 a2 t0) u0)
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a2)
                               (matita_basics_logic.R0 a2 t0) u0) =>
                        P))
                    (_z34 :
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a2)
                               (matita_basics_logic.R0 a2 t0) u0) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              x_13)
           x)
        (matita_basics_types.match_Sum a1 a2 univs.Type2
           (__ : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
            matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
              (_0 : cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
               cic.univ univs.Type2)
              (t0 : cic.Term univs.Type0 a1 =>
               matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
                 (_0 :
                    cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
                  cic.univ univs.Type2)
                 (u0 : cic.Term univs.Type0 a1 =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1
                       (cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2 a1)
                             (matita_basics_logic.R0 a1 t0) u0)
                          (_e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) =>
                           P))
                       (_z33 :
                          (_e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) ->
                           cic.Term univs.Type1 P) =>
                        P)))
                 (u0 : cic.Term univs.Type0 a2 =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
                 __)
              (t0 : cic.Term univs.Type0 a2 =>
               matita_basics_types.match_Sum a1 a2 (cic.succ univs.Type2)
                 (_0 :
                    cic.Term univs.Type0 (matita_basics_types.Sum a1 a2) =>
                  cic.univ univs.Type2)
                 (u0 : cic.Term univs.Type0 a1 =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
                 (u0 : cic.Term univs.Type0 a2 =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1
                       (cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2 a2)
                             (matita_basics_logic.R0 a2 t0) u0)
                          (_e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a2)
                                  (matita_basics_logic.R0 a2 t0) u0) =>
                           P))
                       (_z34 :
                          (_e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a2)
                                  (matita_basics_logic.R0 a2 t0) u0) ->
                           cic.Term univs.Type1 P) =>
                        P)))
                 __)
              __)
           (a0 : cic.Term univs.Type0 a1 =>
            P : cic.Univ univs.Type1 =>
            DH :
              (_e0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 a1)
                      (matita_basics_logic.R0 a1 a0) a0) ->
               cic.Term univs.Type1 P) =>
            DH
              (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 a1)
                 (matita_basics_logic.R0 a1 a0)))
           (a0 : cic.Term univs.Type0 a2 =>
            P : cic.Univ univs.Type1 =>
            DH :
              (_e0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 a2)
                      (matita_basics_logic.R0 a2 a0) a0) ->
               cic.Term univs.Type1 P) =>
            DH
              (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 a2)
                 (matita_basics_logic.R0 a2 a0)))
           x)
        y Deq.

option : _A : cic.Univ univs.Type0 -> cic.Univ univs.Type0.

None :
  A : cic.Univ univs.Type0 ->
  cic.Term univs.Type0 (matita_basics_types.option A).

Some :
  A : cic.Univ univs.Type0 ->
  __ : cic.Term univs.Type0 A ->
  cic.Term univs.Type0 (matita_basics_types.option A).

def match_option :
      _A : cic.Univ univs.Type0 ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ return_sort) ->
      case_None :
        cic.Term return_sort (return_type (matita_basics_types.None _A)) ->
      case_Some :
        (__ : cic.Term univs.Type0 _A ->
         cic.Term return_sort (return_type (matita_basics_types.Some _A __))) ->
      z : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term return_sort (return_type z).

[ _A, return_sort, return_type, case_None, case_Some ]
  match_option _A return_sort return_type case_None case_Some
    (matita_basics_types.None _A) -->
  case_None.

[ _A, return_sort, return_type, case_None, case_Some, __ ]
  match_option _A return_sort return_type case_None case_Some
    (matita_basics_types.Some _A __) -->
  case_Some __.

def filter_option :
      _A : cic.Univ univs.Type0 ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term return_sort (return_type z).

[ A, return_sort, return_type, return ]
  filter_option (A) return_sort return_type return
    (matita_basics_types.None A) -->
  return (matita_basics_types.None A).

[ A, __, return_sort, return_type, return ]
  filter_option (A) return_sort return_type return
    (matita_basics_types.Some A __) -->
  return (matita_basics_types.Some A __).

def option_ind :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_586 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_587 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_587))) ->
      x_586 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_586).

def option_ind_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_586 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_587 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_587))) ->
      x_586 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_586).

[ _A, Q_, _H_None, _H_Some, x_586 ]
  option_ind _A Q_ _H_None _H_Some x_586 -->
  matita_basics_types.filter_option _A cic.prop
    (x_586 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_586)
    (matita_basics_types.option_ind_body _A Q_ _H_None _H_Some) x_586.

[ _A, Q_, _H_None, _H_Some, x_586 ]
  option_ind_body _A Q_ _H_None _H_Some x_586 -->
  matita_basics_types.match_option _A cic.prop Q_ _H_None
    (x_587 : cic.Term univs.Type0 _A => _H_Some x_587) x_586.

def option_rect_Type4 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type4) ->
      _H_None : cic.Term univs.Type4 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_591 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type4 (Q_ (matita_basics_types.Some _A x_591))) ->
      x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type4 (Q_ x_590).

def option_rect_Type4_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type4) ->
      _H_None : cic.Term univs.Type4 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_591 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type4 (Q_ (matita_basics_types.Some _A x_591))) ->
      x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type4 (Q_ x_590).

[ _A, Q_, _H_None, _H_Some, x_590 ]
  option_rect_Type4 _A Q_ _H_None _H_Some x_590 -->
  matita_basics_types.filter_option _A univs.Type4
    (x_590 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_590)
    (matita_basics_types.option_rect_Type4_body _A Q_ _H_None _H_Some) x_590.

[ _A, Q_, _H_None, _H_Some, x_590 ]
  option_rect_Type4_body _A Q_ _H_None _H_Some x_590 -->
  matita_basics_types.match_option _A univs.Type4 Q_ _H_None
    (x_591 : cic.Term univs.Type0 _A => _H_Some x_591) x_590.

def option_rect_Type5 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_594 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type5) ->
      _H_None : cic.Term univs.Type5 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_595 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type5 (Q_ (matita_basics_types.Some _A x_595))) ->
      x_594 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type5 (Q_ x_594).

def option_rect_Type5_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_594 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type5) ->
      _H_None : cic.Term univs.Type5 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_595 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type5 (Q_ (matita_basics_types.Some _A x_595))) ->
      x_594 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type5 (Q_ x_594).

[ _A, Q_, _H_None, _H_Some, x_594 ]
  option_rect_Type5 _A Q_ _H_None _H_Some x_594 -->
  matita_basics_types.filter_option _A univs.Type5
    (x_594 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_594)
    (matita_basics_types.option_rect_Type5_body _A Q_ _H_None _H_Some) x_594.

[ _A, Q_, _H_None, _H_Some, x_594 ]
  option_rect_Type5_body _A Q_ _H_None _H_Some x_594 -->
  matita_basics_types.match_option _A univs.Type5 Q_ _H_None
    (x_595 : cic.Term univs.Type0 _A => _H_Some x_595) x_594.

def option_rect_Type3 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_598 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type3) ->
      _H_None : cic.Term univs.Type3 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_599 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type3 (Q_ (matita_basics_types.Some _A x_599))) ->
      x_598 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type3 (Q_ x_598).

def option_rect_Type3_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_598 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type3) ->
      _H_None : cic.Term univs.Type3 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_599 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type3 (Q_ (matita_basics_types.Some _A x_599))) ->
      x_598 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type3 (Q_ x_598).

[ _A, Q_, _H_None, _H_Some, x_598 ]
  option_rect_Type3 _A Q_ _H_None _H_Some x_598 -->
  matita_basics_types.filter_option _A univs.Type3
    (x_598 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_598)
    (matita_basics_types.option_rect_Type3_body _A Q_ _H_None _H_Some) x_598.

[ _A, Q_, _H_None, _H_Some, x_598 ]
  option_rect_Type3_body _A Q_ _H_None _H_Some x_598 -->
  matita_basics_types.match_option _A univs.Type3 Q_ _H_None
    (x_599 : cic.Term univs.Type0 _A => _H_Some x_599) x_598.

def option_rect_Type2 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type2) ->
      _H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_603 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))) ->
      x_602 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type2 (Q_ x_602).

def option_rect_Type2_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_602 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type2) ->
      _H_None : cic.Term univs.Type2 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_603 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type2 (Q_ (matita_basics_types.Some _A x_603))) ->
      x_602 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type2 (Q_ x_602).

[ _A, Q_, _H_None, _H_Some, x_602 ]
  option_rect_Type2 _A Q_ _H_None _H_Some x_602 -->
  matita_basics_types.filter_option _A univs.Type2
    (x_602 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_602)
    (matita_basics_types.option_rect_Type2_body _A Q_ _H_None _H_Some) x_602.

[ _A, Q_, _H_None, _H_Some, x_602 ]
  option_rect_Type2_body _A Q_ _H_None _H_Some x_602 -->
  matita_basics_types.match_option _A univs.Type2 Q_ _H_None
    (x_603 : cic.Term univs.Type0 _A => _H_Some x_603) x_602.

def option_rect_Type1 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type1) ->
      _H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_607 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) ->
      x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type1 (Q_ x_606).

def option_rect_Type1_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type1) ->
      _H_None : cic.Term univs.Type1 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_607 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type1 (Q_ (matita_basics_types.Some _A x_607))) ->
      x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type1 (Q_ x_606).

[ _A, Q_, _H_None, _H_Some, x_606 ]
  option_rect_Type1 _A Q_ _H_None _H_Some x_606 -->
  matita_basics_types.filter_option _A univs.Type1
    (x_606 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_606)
    (matita_basics_types.option_rect_Type1_body _A Q_ _H_None _H_Some) x_606.

[ _A, Q_, _H_None, _H_Some, x_606 ]
  option_rect_Type1_body _A Q_ _H_None _H_Some x_606 -->
  matita_basics_types.match_option _A univs.Type1 Q_ _H_None
    (x_607 : cic.Term univs.Type0 _A => _H_Some x_607) x_606.

def option_rect_Type0 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type0) ->
      _H_None : cic.Term univs.Type0 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_611 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type0 (Q_ (matita_basics_types.Some _A x_611))) ->
      x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type0 (Q_ x_610).

def option_rect_Type0_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ univs.Type0) ->
      _H_None : cic.Term univs.Type0 (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_611 : cic.Term univs.Type0 _A ->
         cic.Term univs.Type0 (Q_ (matita_basics_types.Some _A x_611))) ->
      x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term univs.Type0 (Q_ x_610).

[ _A, Q_, _H_None, _H_Some, x_610 ]
  option_rect_Type0 _A Q_ _H_None _H_Some x_610 -->
  matita_basics_types.filter_option _A univs.Type0
    (x_610 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_610)
    (matita_basics_types.option_rect_Type0_body _A Q_ _H_None _H_Some) x_610.

[ _A, Q_, _H_None, _H_Some, x_610 ]
  option_rect_Type0_body _A Q_ _H_None _H_Some x_610 -->
  matita_basics_types.match_option _A univs.Type0 Q_ _H_None
    (x_611 : cic.Term univs.Type0 _A => _H_Some x_611) x_610.

def option_rect_CProp4 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_614 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_615 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_615))) ->
      x_614 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_614).

def option_rect_CProp4_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_614 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_615 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_615))) ->
      x_614 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_614).

[ _A, Q_, _H_None, _H_Some, x_614 ]
  option_rect_CProp4 _A Q_ _H_None _H_Some x_614 -->
  matita_basics_types.filter_option _A cic.prop
    (x_614 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_614)
    (matita_basics_types.option_rect_CProp4_body _A Q_ _H_None _H_Some) x_614.

[ _A, Q_, _H_None, _H_Some, x_614 ]
  option_rect_CProp4_body _A Q_ _H_None _H_Some x_614 -->
  matita_basics_types.match_option _A cic.prop Q_ _H_None
    (x_615 : cic.Term univs.Type0 _A => _H_Some x_615) x_614.

def option_rect_CProp5 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_618 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_619 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_619))) ->
      x_618 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_618).

def option_rect_CProp5_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_618 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_619 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_619))) ->
      x_618 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_618).

[ _A, Q_, _H_None, _H_Some, x_618 ]
  option_rect_CProp5 _A Q_ _H_None _H_Some x_618 -->
  matita_basics_types.filter_option _A cic.prop
    (x_618 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_618)
    (matita_basics_types.option_rect_CProp5_body _A Q_ _H_None _H_Some) x_618.

[ _A, Q_, _H_None, _H_Some, x_618 ]
  option_rect_CProp5_body _A Q_ _H_None _H_Some x_618 -->
  matita_basics_types.match_option _A cic.prop Q_ _H_None
    (x_619 : cic.Term univs.Type0 _A => _H_Some x_619) x_618.

def option_rect_CProp3 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_623 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) ->
      x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_622).

def option_rect_CProp3_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_623 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_623))) ->
      x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_622).

[ _A, Q_, _H_None, _H_Some, x_622 ]
  option_rect_CProp3 _A Q_ _H_None _H_Some x_622 -->
  matita_basics_types.filter_option _A cic.prop
    (x_622 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_622)
    (matita_basics_types.option_rect_CProp3_body _A Q_ _H_None _H_Some) x_622.

[ _A, Q_, _H_None, _H_Some, x_622 ]
  option_rect_CProp3_body _A Q_ _H_None _H_Some x_622 -->
  matita_basics_types.match_option _A cic.prop Q_ _H_None
    (x_623 : cic.Term univs.Type0 _A => _H_Some x_623) x_622.

def option_rect_CProp2 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_626 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_627 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_627))) ->
      x_626 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_626).

def option_rect_CProp2_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_626 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_627 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_627))) ->
      x_626 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_626).

[ _A, Q_, _H_None, _H_Some, x_626 ]
  option_rect_CProp2 _A Q_ _H_None _H_Some x_626 -->
  matita_basics_types.filter_option _A cic.prop
    (x_626 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_626)
    (matita_basics_types.option_rect_CProp2_body _A Q_ _H_None _H_Some) x_626.

[ _A, Q_, _H_None, _H_Some, x_626 ]
  option_rect_CProp2_body _A Q_ _H_None _H_Some x_626 -->
  matita_basics_types.match_option _A cic.prop Q_ _H_None
    (x_627 : cic.Term univs.Type0 _A => _H_Some x_627) x_626.

def option_rect_CProp1 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_630 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_631 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_631))) ->
      x_630 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_630).

def option_rect_CProp1_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_630 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_631 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_631))) ->
      x_630 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_630).

[ _A, Q_, _H_None, _H_Some, x_630 ]
  option_rect_CProp1 _A Q_ _H_None _H_Some x_630 -->
  matita_basics_types.filter_option _A cic.prop
    (x_630 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_630)
    (matita_basics_types.option_rect_CProp1_body _A Q_ _H_None _H_Some) x_630.

[ _A, Q_, _H_None, _H_Some, x_630 ]
  option_rect_CProp1_body _A Q_ _H_None _H_Some x_630 -->
  matita_basics_types.match_option _A cic.prop Q_ _H_None
    (x_631 : cic.Term univs.Type0 _A => _H_Some x_631) x_630.

def option_rect_CProp0 :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_635 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_635))) ->
      x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_634).

def option_rect_CProp0_body :
      _A : cic.Univ univs.Type0 ->
      Q_ :
        (_x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
         cic.Univ cic.prop) ->
      _H_None : cic.Term cic.prop (Q_ (matita_basics_types.None _A)) ->
      _H_Some :
        (x_635 : cic.Term univs.Type0 _A ->
         cic.Term cic.prop (Q_ (matita_basics_types.Some _A x_635))) ->
      x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) ->
      cic.Term cic.prop (Q_ x_634).

[ _A, Q_, _H_None, _H_Some, x_634 ]
  option_rect_CProp0 _A Q_ _H_None _H_Some x_634 -->
  matita_basics_types.filter_option _A cic.prop
    (x_634 : cic.Term univs.Type0 (matita_basics_types.option _A) => Q_ x_634)
    (matita_basics_types.option_rect_CProp0_body _A Q_ _H_None _H_Some) x_634.

[ _A, Q_, _H_None, _H_Some, x_634 ]
  option_rect_CProp0_body _A Q_ _H_None _H_Some x_634 -->
  matita_basics_types.match_option _A cic.prop Q_ _H_None
    (x_635 : cic.Term univs.Type0 _A => _H_Some x_635) x_634.

def option_inv_ind :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1038 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z1039 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_587 : cic.Term univs.Type0 x1 ->
         _z1039 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_587)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_587))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1038 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) =>
      H1 :
        (_z1039 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) =>
      H2 :
        (x_587 : cic.Term univs.Type0 x1 ->
         _z1039 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_587)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_587))) =>
      (Hcut :
         (_z1039 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_ind x1
           (_x_586 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_586)
              (_z1039 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_586) =>
               P _x_586))
           H1 H2 Hterm).

def option_inv_rect_Type4 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1044 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type4) ->
      _H1 :
        (_z1045 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type4 (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_591 : cic.Term univs.Type0 x1 ->
         _z1045 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_591)) ->
         cic.Term univs.Type4 (P (matita_basics_types.Some x1 x_591))) ->
      cic.Term univs.Type4 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1044 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type4) =>
      H1 :
        (_z1045 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type4 (P (matita_basics_types.None x1))) =>
      H2 :
        (x_591 : cic.Term univs.Type0 x1 ->
         _z1045 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_591)) ->
         cic.Term univs.Type4 (P (matita_basics_types.Some x1 x_591))) =>
      (Hcut :
         (_z1045 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term univs.Type4 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_Type4 x1
           (_x_590 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop univs.Type4
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_590)
              (_z1045 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_590) =>
               P _x_590))
           H1 H2 Hterm).

def option_inv_rect_Type3 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1050 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type3) ->
      _H1 :
        (_z1051 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type3 (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_599 : cic.Term univs.Type0 x1 ->
         _z1051 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_599)) ->
         cic.Term univs.Type3 (P (matita_basics_types.Some x1 x_599))) ->
      cic.Term univs.Type3 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1050 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type3) =>
      H1 :
        (_z1051 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type3 (P (matita_basics_types.None x1))) =>
      H2 :
        (x_599 : cic.Term univs.Type0 x1 ->
         _z1051 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_599)) ->
         cic.Term univs.Type3 (P (matita_basics_types.Some x1 x_599))) =>
      (Hcut :
         (_z1051 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term univs.Type3 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_Type3 x1
           (_x_598 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop univs.Type3
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_598)
              (_z1051 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_598) =>
               P _x_598))
           H1 H2 Hterm).

def option_inv_rect_Type2 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1056 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type2) ->
      _H1 :
        (_z1057 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type2 (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_603 : cic.Term univs.Type0 x1 ->
         _z1057 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_603)) ->
         cic.Term univs.Type2 (P (matita_basics_types.Some x1 x_603))) ->
      cic.Term univs.Type2 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1056 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type2) =>
      H1 :
        (_z1057 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type2 (P (matita_basics_types.None x1))) =>
      H2 :
        (x_603 : cic.Term univs.Type0 x1 ->
         _z1057 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_603)) ->
         cic.Term univs.Type2 (P (matita_basics_types.Some x1 x_603))) =>
      (Hcut :
         (_z1057 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term univs.Type2 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_Type2 x1
           (_x_602 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop univs.Type2
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_602)
              (_z1057 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_602) =>
               P _x_602))
           H1 H2 Hterm).

def option_inv_rect_Type1 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1062 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type1) ->
      _H1 :
        (_z1063 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type1 (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_607 : cic.Term univs.Type0 x1 ->
         _z1063 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_607)) ->
         cic.Term univs.Type1 (P (matita_basics_types.Some x1 x_607))) ->
      cic.Term univs.Type1 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1062 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type1) =>
      H1 :
        (_z1063 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type1 (P (matita_basics_types.None x1))) =>
      H2 :
        (x_607 : cic.Term univs.Type0 x1 ->
         _z1063 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_607)) ->
         cic.Term univs.Type1 (P (matita_basics_types.Some x1 x_607))) =>
      (Hcut :
         (_z1063 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term univs.Type1 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_Type1 x1
           (_x_606 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop univs.Type1
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_606)
              (_z1063 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_606) =>
               P _x_606))
           H1 H2 Hterm).

def option_inv_rect_Type0 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1068 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type0) ->
      _H1 :
        (_z1069 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type0 (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_611 : cic.Term univs.Type0 x1 ->
         _z1069 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_611)) ->
         cic.Term univs.Type0 (P (matita_basics_types.Some x1 x_611))) ->
      cic.Term univs.Type0 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1068 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ univs.Type0) =>
      H1 :
        (_z1069 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term univs.Type0 (P (matita_basics_types.None x1))) =>
      H2 :
        (x_611 : cic.Term univs.Type0 x1 ->
         _z1069 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_611)) ->
         cic.Term univs.Type0 (P (matita_basics_types.Some x1 x_611))) =>
      (Hcut :
         (_z1069 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term univs.Type0 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_Type0 x1
           (_x_610 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_610)
              (_z1069 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_610) =>
               P _x_610))
           H1 H2 Hterm).

def option_inv_rect_CProp4 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1074 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z1075 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_615 : cic.Term univs.Type0 x1 ->
         _z1075 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_615)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_615))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1074 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) =>
      H1 :
        (_z1075 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) =>
      H2 :
        (x_615 : cic.Term univs.Type0 x1 ->
         _z1075 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_615)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_615))) =>
      (Hcut :
         (_z1075 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_CProp4 x1
           (_x_614 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_614)
              (_z1075 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_614) =>
               P _x_614))
           H1 H2 Hterm).

def option_inv_rect_CProp3 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1080 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z1081 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_623 : cic.Term univs.Type0 x1 ->
         _z1081 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_623)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_623))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1080 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) =>
      H1 :
        (_z1081 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) =>
      H2 :
        (x_623 : cic.Term univs.Type0 x1 ->
         _z1081 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_623)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_623))) =>
      (Hcut :
         (_z1081 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_CProp3 x1
           (_x_622 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_622)
              (_z1081 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_622) =>
               P _x_622))
           H1 H2 Hterm).

def option_inv_rect_CProp2 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1086 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z1087 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_627 : cic.Term univs.Type0 x1 ->
         _z1087 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_627)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_627))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1086 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) =>
      H1 :
        (_z1087 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) =>
      H2 :
        (x_627 : cic.Term univs.Type0 x1 ->
         _z1087 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_627)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_627))) =>
      (Hcut :
         (_z1087 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_CProp2 x1
           (_x_626 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_626)
              (_z1087 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_626) =>
               P _x_626))
           H1 H2 Hterm).

def option_inv_rect_CProp1 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1092 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z1093 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_631 : cic.Term univs.Type0 x1 ->
         _z1093 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_631)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_631))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1092 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) =>
      H1 :
        (_z1093 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) =>
      H2 :
        (x_631 : cic.Term univs.Type0 x1 ->
         _z1093 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_631)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_631))) =>
      (Hcut :
         (_z1093 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_CProp1 x1
           (_x_630 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_630)
              (_z1093 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_630) =>
               P _x_630))
           H1 H2 Hterm).

def option_inv_rect_CProp0 :
      x1 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) ->
      P :
        (_z1098 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_z1099 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) ->
      _H2 :
        (x_635 : cic.Term univs.Type0 x1 ->
         _z1099 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_635)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_635))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.option x1) =>
      P :
        (_z1098 : cic.Term univs.Type0 (matita_basics_types.option x1) ->
         cic.Univ cic.prop) =>
      H1 :
        (_z1099 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.None x1)) ->
         cic.Term cic.prop (P (matita_basics_types.None x1))) =>
      H2 :
        (x_635 : cic.Term univs.Type0 x1 ->
         _z1099 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option x1))
                Hterm (matita_basics_types.Some x1 x_635)) ->
         cic.Term cic.prop (P (matita_basics_types.Some x1 x_635))) =>
      (Hcut :
         (_z1099 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option x1))
            Hterm))
        (matita_basics_types.option_rect_CProp0 x1
           (_x_634 : cic.Term univs.Type0 (matita_basics_types.option x1) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option x1))
                 Hterm _x_634)
              (_z1099 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option x1))
                      Hterm _x_634) =>
               P _x_634))
           H1 H2 Hterm).

def option_discr :
      a1 : cic.Univ univs.Type0 ->
      x : cic.Term univs.Type0 (matita_basics_types.option a1) ->
      y : cic.Term univs.Type0 (matita_basics_types.option a1) ->
      _e :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.option a1))
             x y) ->
      cic.Term univs.Type2
        (matita_basics_types.match_option a1 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.option a1) =>
            cic.univ univs.Type2)
           (matita_basics_types.match_option a1 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.option a1) =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1 P
                    (_z37 : cic.Term univs.Type1 P => P)))
              (u0 : cic.Term univs.Type0 a1 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              y)
           (t0 : cic.Term univs.Type0 a1 =>
            matita_basics_types.match_option a1 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.option a1) =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              (u0 : cic.Term univs.Type0 a1 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        P))
                    (_z38 :
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              y)
           x)
      :=
      a1 : cic.Univ univs.Type0 =>
      x : cic.Term univs.Type0 (matita_basics_types.option a1) =>
      y : cic.Term univs.Type0 (matita_basics_types.option a1) =>
      Deq :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.option a1))
             x y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option a1)) x
        (x_13 : cic.Term univs.Type0 (matita_basics_types.option a1) =>
         _x_14 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option a1))
                x x_13) =>
         matita_basics_types.match_option a1 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.option a1) =>
            cic.univ univs.Type2)
           (matita_basics_types.match_option a1 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.option a1) =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1 P
                    (_z37 : cic.Term univs.Type1 P => P)))
              (u0 : cic.Term univs.Type0 a1 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              x_13)
           (t0 : cic.Term univs.Type0 a1 =>
            matita_basics_types.match_option a1 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.option a1) =>
               cic.univ univs.Type2)
              (cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
              (u0 : cic.Term univs.Type0 a1 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        P))
                    (_z38 :
                       (_e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              x_13)
           x)
        (matita_basics_types.match_option a1 univs.Type2
           (__ : cic.Term univs.Type0 (matita_basics_types.option a1) =>
            matita_basics_types.match_option a1 (cic.succ univs.Type2)
              (_0 : cic.Term univs.Type0 (matita_basics_types.option a1) =>
               cic.univ univs.Type2)
              (matita_basics_types.match_option a1 (cic.succ univs.Type2)
                 (_0 :
                    cic.Term univs.Type0 (matita_basics_types.option a1) =>
                  cic.univ univs.Type2)
                 (cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1 P
                       (_z37 : cic.Term univs.Type1 P => P)))
                 (u0 : cic.Term univs.Type0 a1 =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
                 __)
              (t0 : cic.Term univs.Type0 a1 =>
               matita_basics_types.match_option a1 (cic.succ univs.Type2)
                 (_0 :
                    cic.Term univs.Type0 (matita_basics_types.option a1) =>
                  cic.univ univs.Type2)
                 (cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1) (P : cic.Univ univs.Type1 => P))
                 (u0 : cic.Term univs.Type0 a1 =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1
                       (cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2 a1)
                             (matita_basics_logic.R0 a1 t0) u0)
                          (_e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) =>
                           P))
                       (_z38 :
                          (_e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) ->
                           cic.Term univs.Type1 P) =>
                        P)))
                 __)
              __)
           (P : cic.Univ univs.Type1 => DH : cic.Term univs.Type1 P => DH)
           (a0 : cic.Term univs.Type0 a1 =>
            P : cic.Univ univs.Type1 =>
            DH :
              (_e0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 a1)
                      (matita_basics_logic.R0 a1 a0) a0) ->
               cic.Term univs.Type1 P) =>
            DH
              (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 a1)
                 (matita_basics_logic.R0 a1 a0)))
           x)
        y Deq.

def option_map :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      __ : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) ->
      __1 : cic.Term univs.Type0 (matita_basics_types.option A) ->
      cic.Term univs.Type0 (matita_basics_types.option B) :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) =>
      o : cic.Term univs.Type0 (matita_basics_types.option A) =>
      matita_basics_types.match_option A univs.Type0
        (__ : cic.Term univs.Type0 (matita_basics_types.option A) =>
         matita_basics_types.option B)
        (matita_basics_types.None B)
        (a : cic.Term univs.Type0 A => matita_basics_types.Some B (f a)) o.

def option_map_none :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) ->
      x : cic.Term univs.Type0 (matita_basics_types.option A) ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option B))
             (matita_basics_types.option_map A B f x)
             (matita_basics_types.None B)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A))
           x (matita_basics_types.None A))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.option A) =>
      matita_basics_types.match_option A cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.option A) =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2
                 (matita_basics_types.option B))
              (matita_basics_types.option_map A B f __)
              (matita_basics_types.None B))
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.option B))
                   (matita_basics_types.option_map A B f __)
                   (matita_basics_types.None B)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2
                 (matita_basics_types.option A))
              __ (matita_basics_types.None A)))
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option B))
                (matita_basics_types.option_map A B f
                   (matita_basics_types.None A))
                (matita_basics_types.None B)) =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option A))
           (matita_basics_types.None A))
        (a : cic.Term univs.Type0 A =>
         E :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option B))
                (matita_basics_types.option_map A B f
                   (matita_basics_types.Some A a))
                (matita_basics_types.None B)) =>
         matita_basics_types.option_discr B
           (matita_basics_types.Some B (f a)) (matita_basics_types.None B) E
           (cic.lift cic.prop univs.Type1
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option A))
                 (matita_basics_types.Some A a) (matita_basics_types.None A))))
        _clearme.

def option_map_some :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) ->
      x : cic.Term univs.Type0 (matita_basics_types.option A) ->
      v : cic.Term univs.Type0 B ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.option B))
             (matita_basics_types.option_map A B f x)
             (matita_basics_types.Some B v)) ->
      cic.Term cic.prop
        (matita_basics_logic.ex A
           (y : cic.Term univs.Type0 A =>
            matita_basics_logic.And
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option A))
                 x (matita_basics_types.Some A y))
              (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
                 (f y) v)))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.option A) =>
      matita_basics_types.match_option A cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.option A) =>
         cic.prod univs.Type0 cic.prop B
           (v : cic.Term univs.Type0 B =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option B))
                 (matita_basics_types.option_map A B f __)
                 (matita_basics_types.Some B v))
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option B))
                      (matita_basics_types.option_map A B f __)
                      (matita_basics_types.Some B v)) =>
               matita_basics_logic.ex A
                 (y : cic.Term univs.Type0 A =>
                  matita_basics_logic.And
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.option A))
                       __ (matita_basics_types.Some A y))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2 B) (f y) v)))))
        (v : cic.Term univs.Type0 B =>
         E :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option B))
                (matita_basics_types.None B) (matita_basics_types.Some B v)) =>
         matita_basics_types.option_discr B (matita_basics_types.None B)
           (matita_basics_types.Some B v) E
           (cic.lift cic.prop univs.Type1
              (matita_basics_logic.ex A
                 (y : cic.Term univs.Type0 A =>
                  matita_basics_logic.And
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.option A))
                       (matita_basics_types.None A)
                       (matita_basics_types.Some A y))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2 B) (f y) v)))))
        (y : cic.Term univs.Type0 A =>
         v : cic.Term univs.Type0 B =>
         E :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option B))
                (matita_basics_types.Some B (f y))
                (matita_basics_types.Some B v)) =>
         matita_basics_logic.ex_intro A
           (y0 : cic.Term univs.Type0 A =>
            matita_basics_logic.And
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option A))
                 (matita_basics_types.Some A y)
                 (matita_basics_types.Some A y0))
              (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
                 (f y0) v))
           y
           (matita_basics_types.option_discr B
              (matita_basics_types.Some B (f y))
              (matita_basics_types.Some B v) E
              (cic.lift cic.prop univs.Type1
                 (matita_basics_logic.And
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.option A))
                       (matita_basics_types.Some A y)
                       (matita_basics_types.Some A y))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2 B) (f y) v)))
              (e0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 B)
                      (matita_basics_logic.R0 B (f y)) v) =>
               matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 B) (f y)
                 (x_1 : cic.Term univs.Type0 B =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2 B) (f y) x_1) =>
                  cic.prod cic.prop cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.option B))
                       (matita_basics_types.Some B (f y))
                       (matita_basics_types.Some B x_1))
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.option B))
                            (matita_basics_types.Some B (f y))
                            (matita_basics_types.Some B x_1)) =>
                     matita_basics_logic.And
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             (matita_basics_types.option A))
                          (matita_basics_types.Some A y)
                          (matita_basics_types.Some A y))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 B) (f y) x_1)))
                 (E0 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.option B))
                         (matita_basics_types.Some B (f y))
                         (matita_basics_types.Some B (f y))) =>
                  matita_basics_logic.streicherK
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.option B))
                    (matita_basics_types.Some B (f y))
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.option B))
                            (matita_basics_types.Some B (f y))
                            (matita_basics_types.Some B (f y))) =>
                     cic.lift cic.prop univs.Type2
                       ((__1 :
                           cic.Term cic.prop
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   (matita_basics_types.option B))
                                (matita_basics_types.Some B (f y))
                                (matita_basics_types.Some B (f y))) =>
                         matita_basics_logic.And
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 (matita_basics_types.option A))
                              (matita_basics_types.Some A y)
                              (matita_basics_types.Some A y))
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2 B) (f y)
                              (f y)))
                          __))
                    (matita_basics_logic.conj
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             (matita_basics_types.option A))
                          (matita_basics_types.Some A y)
                          (matita_basics_types.Some A y))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 B) (f y) (
                        f y))
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             (matita_basics_types.option A))
                          (matita_basics_types.Some A y))
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2 B) (f y)))
                    E0)
                 v e0 E)))
        _clearme.

def option_map_def :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      __ : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) ->
      __1 : cic.Term univs.Type0 B ->
      __2 : cic.Term univs.Type0 (matita_basics_types.option A) ->
      cic.Term univs.Type0 B :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      f : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) =>
      d : cic.Term univs.Type0 B =>
      o : cic.Term univs.Type0 (matita_basics_types.option A) =>
      matita_basics_types.match_option A univs.Type0
        (__ : cic.Term univs.Type0 (matita_basics_types.option A) => B) d
        (a : cic.Term univs.Type0 A => f a) o.

def refute_none_by_refl :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      P : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) ->
      Q : (__ : cic.Term univs.Type0 B -> cic.Univ univs.Type0) ->
      x : cic.Term univs.Type0 (matita_basics_types.option A) ->
      H :
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option A))
                x (matita_basics_types.None A)) ->
         cic.Term cic.prop matita_basics_logic.False) ->
      __ :
        (v : cic.Term univs.Type0 A ->
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.option A))
                x (matita_basics_types.Some A v)) ->
         cic.Term univs.Type0 (Q (P v))) ->
      cic.Term univs.Type0
        (Q
           (matita_basics_types.match_option A univs.Type0
              (y : cic.Term univs.Type0 (matita_basics_types.option A) =>
               cic.prod cic.prop univs.Type0
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.option A))
                    x y)
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.option A))
                         x y) =>
                  B))
              (E :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option A))
                      x (matita_basics_types.None A)) =>
               matita_basics_logic.match_False univs.Type0
                 (_0 : cic.Term cic.prop matita_basics_logic.False => B)
                 (H E))
              (v : cic.Term univs.Type0 A =>
               _0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option A))
                      x (matita_basics_types.Some A v)) =>
               P v)
              x
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option A))
                 x)))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      P : (__ : cic.Term univs.Type0 A -> cic.Term univs.Type0 B) =>
      Q : (__ : cic.Term univs.Type0 B -> cic.Univ univs.Type0) =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.option A) =>
      matita_basics_types.match_option A univs.Type0
        (__ : cic.Term univs.Type0 (matita_basics_types.option A) =>
         cic.prod cic.prop univs.Type0
           (cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option A))
                 __ (matita_basics_types.None A))
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option A))
                      __ (matita_basics_types.None A)) =>
               matita_basics_logic.False))
           (H :
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.option A))
                      __ (matita_basics_types.None A)) ->
               cic.Term cic.prop matita_basics_logic.False) =>
            cic.prod univs.Type0 univs.Type0
              (cic.prod univs.Type0 univs.Type0 A
                 (v : cic.Term univs.Type0 A =>
                  cic.prod cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.option A))
                       __ (matita_basics_types.Some A v))
                    (__1 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.option A))
                            __ (matita_basics_types.Some A v)) =>
                     Q (P v))))
              (__1 :
                 (v : cic.Term univs.Type0 A ->
                  __1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.option A))
                         __ (matita_basics_types.Some A v)) ->
                  cic.Term univs.Type0 (Q (P v))) =>
               Q
                 (matita_basics_types.match_option A univs.Type0
                    (y :
                       cic.Term univs.Type0 (matita_basics_types.option A) =>
                     cic.prod cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             (matita_basics_types.option A))
                          __ y)
                       (__2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  (matita_basics_types.option A))
                               __ y) =>
                        B))
                    (E :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.option A))
                            __ (matita_basics_types.None A)) =>
                     matita_basics_logic.match_False univs.Type0
                       (_0 : cic.Term cic.prop matita_basics_logic.False => B)
                       (H E))
                    (v : cic.Term univs.Type0 A =>
                     _0 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.option A))
                            __ (matita_basics_types.Some A v)) =>
                     P v)
                    __
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.option A))
                       __)))))
        (H :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.option A))
                   (matita_basics_types.None A) (matita_basics_types.None A)) ->
            cic.Term cic.prop matita_basics_logic.False) =>
         matita_basics_logic.match_False univs.Type0
           (__ : cic.Term cic.prop matita_basics_logic.False =>
            cic.prod univs.Type0 univs.Type0
              (cic.prod univs.Type0 univs.Type0 A
                 (v : cic.Term univs.Type0 A =>
                  cic.prod cic.prop univs.Type0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.option A))
                       (matita_basics_types.None A)
                       (matita_basics_types.Some A v))
                    (__1 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.option A))
                            (matita_basics_types.None A)
                            (matita_basics_types.Some A v)) =>
                     Q (P v))))
              (__1 :
                 (v : cic.Term univs.Type0 A ->
                  __1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.option A))
                         (matita_basics_types.None A)
                         (matita_basics_types.Some A v)) ->
                  cic.Term univs.Type0 (Q (P v))) =>
               Q
                 (matita_basics_types.match_option A univs.Type0
                    (y :
                       cic.Term univs.Type0 (matita_basics_types.option A) =>
                     cic.prod cic.prop univs.Type0
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             (matita_basics_types.option A))
                          (matita_basics_types.None A) y)
                       (__2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  (matita_basics_types.option A))
                               (matita_basics_types.None A) y) =>
                        B))
                    (E :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.option A))
                            (matita_basics_types.None A)
                            (matita_basics_types.None A)) =>
                     matita_basics_logic.match_False univs.Type0
                       (_0 : cic.Term cic.prop matita_basics_logic.False => B)
                       (H E))
                    (v : cic.Term univs.Type0 A =>
                     _0 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.option A))
                            (matita_basics_types.None A)
                            (matita_basics_types.Some A v)) =>
                     P v)
                    (matita_basics_types.None A)
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.option A))
                       (matita_basics_types.None A)))))
           (H
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.option A))
                 (matita_basics_types.None A))))
        (a : cic.Term univs.Type0 A =>
         H :
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.option A))
                   (matita_basics_types.Some A a)
                   (matita_basics_types.None A)) ->
            cic.Term cic.prop matita_basics_logic.False) =>
         p :
           (v : cic.Term univs.Type0 A ->
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.option A))
                   (matita_basics_types.Some A a)
                   (matita_basics_types.Some A v)) ->
            cic.Term univs.Type0 (Q (P v))) =>
         p a
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2
                 (matita_basics_types.option A))
              (matita_basics_types.Some A a)))
        _clearme.

DPair :
  A : cic.Univ univs.Type0 ->
  _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
  cic.Univ univs.Type0.

mk_DPair :
  A : cic.Univ univs.Type0 ->
  f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
  dpi1 : cic.Term univs.Type0 A ->
  _dpi2 : cic.Term univs.Type0 (f dpi1) ->
  cic.Term univs.Type0 (matita_basics_types.DPair A f).

def match_DPair :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ return_sort) ->
      case_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term return_sort
           (return_type (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term return_sort (return_type z).

[ A, _f, return_sort, return_type, case_mk_DPair, dpi1, _dpi2 ]
  match_DPair A _f return_sort return_type case_mk_DPair
    (matita_basics_types.mk_DPair A _f dpi1 _dpi2) -->
  case_mk_DPair dpi1 _dpi2.

def filter_DPair :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term return_sort (return_type z).

[ A, f, dpi1, _dpi2, return_sort, return_type, return ]
  filter_DPair (A) (f) return_sort return_type return
    (matita_basics_types.mk_DPair A f dpi1 _dpi2) -->
  return (matita_basics_types.mk_DPair A f dpi1 _dpi2).

def DPair_ind :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_638).

def DPair_ind_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_638).

[ A, _f, Q_, _H_mk_DPair, x_638 ] DPair_ind A _f Q_ _H_mk_DPair x_638 -->
  matita_basics_types.filter_DPair A _f cic.prop
    (x_638 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_638)
    (matita_basics_types.DPair_ind_body A _f Q_ _H_mk_DPair) x_638.

[ A, _f, Q_, _H_mk_DPair, x_638 ]
  DPair_ind_body A _f Q_ _H_mk_DPair x_638 -->
  matita_basics_types.match_DPair A _f cic.prop Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_638.

def DPair_rect_Type4 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type4) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type4
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type4 (Q_ x_640).

def DPair_rect_Type4_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type4) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type4
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type4 (Q_ x_640).

[ A, _f, Q_, _H_mk_DPair, x_640 ]
  DPair_rect_Type4 A _f Q_ _H_mk_DPair x_640 -->
  matita_basics_types.filter_DPair A _f univs.Type4
    (x_640 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_640)
    (matita_basics_types.DPair_rect_Type4_body A _f Q_ _H_mk_DPair) x_640.

[ A, _f, Q_, _H_mk_DPair, x_640 ]
  DPair_rect_Type4_body A _f Q_ _H_mk_DPair x_640 -->
  matita_basics_types.match_DPair A _f univs.Type4 Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_640.

def DPair_rect_Type5 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_642 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type5) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type5
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_642 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type5 (Q_ x_642).

def DPair_rect_Type5_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_642 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type5) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type5
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_642 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type5 (Q_ x_642).

[ A, _f, Q_, _H_mk_DPair, x_642 ]
  DPair_rect_Type5 A _f Q_ _H_mk_DPair x_642 -->
  matita_basics_types.filter_DPair A _f univs.Type5
    (x_642 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_642)
    (matita_basics_types.DPair_rect_Type5_body A _f Q_ _H_mk_DPair) x_642.

[ A, _f, Q_, _H_mk_DPair, x_642 ]
  DPair_rect_Type5_body A _f Q_ _H_mk_DPair x_642 -->
  matita_basics_types.match_DPair A _f univs.Type5 Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_642.

def DPair_rect_Type3 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type3) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type3
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type3 (Q_ x_644).

def DPair_rect_Type3_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type3) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type3
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type3 (Q_ x_644).

[ A, _f, Q_, _H_mk_DPair, x_644 ]
  DPair_rect_Type3 A _f Q_ _H_mk_DPair x_644 -->
  matita_basics_types.filter_DPair A _f univs.Type3
    (x_644 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_644)
    (matita_basics_types.DPair_rect_Type3_body A _f Q_ _H_mk_DPair) x_644.

[ A, _f, Q_, _H_mk_DPair, x_644 ]
  DPair_rect_Type3_body A _f Q_ _H_mk_DPair x_644 -->
  matita_basics_types.match_DPair A _f univs.Type3 Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_644.

def DPair_rect_Type2 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_646 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type2) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type2
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_646 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type2 (Q_ x_646).

def DPair_rect_Type2_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_646 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type2) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type2
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_646 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type2 (Q_ x_646).

[ A, _f, Q_, _H_mk_DPair, x_646 ]
  DPair_rect_Type2 A _f Q_ _H_mk_DPair x_646 -->
  matita_basics_types.filter_DPair A _f univs.Type2
    (x_646 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_646)
    (matita_basics_types.DPair_rect_Type2_body A _f Q_ _H_mk_DPair) x_646.

[ A, _f, Q_, _H_mk_DPair, x_646 ]
  DPair_rect_Type2_body A _f Q_ _H_mk_DPair x_646 -->
  matita_basics_types.match_DPair A _f univs.Type2 Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_646.

def DPair_rect_Type1 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type1) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type1
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type1 (Q_ x_648).

def DPair_rect_Type1_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type1) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type1
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type1 (Q_ x_648).

[ A, _f, Q_, _H_mk_DPair, x_648 ]
  DPair_rect_Type1 A _f Q_ _H_mk_DPair x_648 -->
  matita_basics_types.filter_DPair A _f univs.Type1
    (x_648 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_648)
    (matita_basics_types.DPair_rect_Type1_body A _f Q_ _H_mk_DPair) x_648.

[ A, _f, Q_, _H_mk_DPair, x_648 ]
  DPair_rect_Type1_body A _f Q_ _H_mk_DPair x_648 -->
  matita_basics_types.match_DPair A _f univs.Type1 Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_648.

def DPair_rect_Type0 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type0) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type0
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type0 (Q_ x_650).

def DPair_rect_Type0_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ univs.Type0) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term univs.Type0
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term univs.Type0 (Q_ x_650).

[ A, _f, Q_, _H_mk_DPair, x_650 ]
  DPair_rect_Type0 A _f Q_ _H_mk_DPair x_650 -->
  matita_basics_types.filter_DPair A _f univs.Type0
    (x_650 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_650)
    (matita_basics_types.DPair_rect_Type0_body A _f Q_ _H_mk_DPair) x_650.

[ A, _f, Q_, _H_mk_DPair, x_650 ]
  DPair_rect_Type0_body A _f Q_ _H_mk_DPair x_650 -->
  matita_basics_types.match_DPair A _f univs.Type0 Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_650.

def DPair_rect_CProp4 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_652).

def DPair_rect_CProp4_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_652).

[ A, _f, Q_, _H_mk_DPair, x_652 ]
  DPair_rect_CProp4 A _f Q_ _H_mk_DPair x_652 -->
  matita_basics_types.filter_DPair A _f cic.prop
    (x_652 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_652)
    (matita_basics_types.DPair_rect_CProp4_body A _f Q_ _H_mk_DPair) x_652.

[ A, _f, Q_, _H_mk_DPair, x_652 ]
  DPair_rect_CProp4_body A _f Q_ _H_mk_DPair x_652 -->
  matita_basics_types.match_DPair A _f cic.prop Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_652.

def DPair_rect_CProp5 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_654 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_654 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_654).

def DPair_rect_CProp5_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_654 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_654 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_654).

[ A, _f, Q_, _H_mk_DPair, x_654 ]
  DPair_rect_CProp5 A _f Q_ _H_mk_DPair x_654 -->
  matita_basics_types.filter_DPair A _f cic.prop
    (x_654 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_654)
    (matita_basics_types.DPair_rect_CProp5_body A _f Q_ _H_mk_DPair) x_654.

[ A, _f, Q_, _H_mk_DPair, x_654 ]
  DPair_rect_CProp5_body A _f Q_ _H_mk_DPair x_654 -->
  matita_basics_types.match_DPair A _f cic.prop Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_654.

def DPair_rect_CProp3 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_656).

def DPair_rect_CProp3_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_656).

[ A, _f, Q_, _H_mk_DPair, x_656 ]
  DPair_rect_CProp3 A _f Q_ _H_mk_DPair x_656 -->
  matita_basics_types.filter_DPair A _f cic.prop
    (x_656 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_656)
    (matita_basics_types.DPair_rect_CProp3_body A _f Q_ _H_mk_DPair) x_656.

[ A, _f, Q_, _H_mk_DPair, x_656 ]
  DPair_rect_CProp3_body A _f Q_ _H_mk_DPair x_656 -->
  matita_basics_types.match_DPair A _f cic.prop Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_656.

def DPair_rect_CProp2 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_658).

def DPair_rect_CProp2_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_658).

[ A, _f, Q_, _H_mk_DPair, x_658 ]
  DPair_rect_CProp2 A _f Q_ _H_mk_DPair x_658 -->
  matita_basics_types.filter_DPair A _f cic.prop
    (x_658 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_658)
    (matita_basics_types.DPair_rect_CProp2_body A _f Q_ _H_mk_DPair) x_658.

[ A, _f, Q_, _H_mk_DPair, x_658 ]
  DPair_rect_CProp2_body A _f Q_ _H_mk_DPair x_658 -->
  matita_basics_types.match_DPair A _f cic.prop Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_658.

def DPair_rect_CProp1 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_660).

def DPair_rect_CProp1_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_660).

[ A, _f, Q_, _H_mk_DPair, x_660 ]
  DPair_rect_CProp1 A _f Q_ _H_mk_DPair x_660 -->
  matita_basics_types.filter_DPair A _f cic.prop
    (x_660 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_660)
    (matita_basics_types.DPair_rect_CProp1_body A _f Q_ _H_mk_DPair) x_660.

[ A, _f, Q_, _H_mk_DPair, x_660 ]
  DPair_rect_CProp1_body A _f Q_ _H_mk_DPair x_660 -->
  matita_basics_types.match_DPair A _f cic.prop Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_660.

def DPair_rect_CProp0 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_662).

def DPair_rect_CProp0_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      Q_ :
        (_x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_DPair :
        (dpi1 : cic.Term univs.Type0 A ->
         _dpi2 : cic.Term univs.Type0 (_f dpi1) ->
         cic.Term cic.prop
           (Q_ (matita_basics_types.mk_DPair A _f dpi1 _dpi2))) ->
      x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) ->
      cic.Term cic.prop (Q_ x_662).

[ A, _f, Q_, _H_mk_DPair, x_662 ]
  DPair_rect_CProp0 A _f Q_ _H_mk_DPair x_662 -->
  matita_basics_types.filter_DPair A _f cic.prop
    (x_662 : cic.Term univs.Type0 (matita_basics_types.DPair A _f) =>
     Q_ x_662)
    (matita_basics_types.DPair_rect_CProp0_body A _f Q_ _H_mk_DPair) x_662.

[ A, _f, Q_, _H_mk_DPair, x_662 ]
  DPair_rect_CProp0_body A _f Q_ _H_mk_DPair x_662 -->
  matita_basics_types.match_DPair A _f cic.prop Q_
    (dpi1 : cic.Term univs.Type0 A =>
     _dpi2 : cic.Term univs.Type0 (_f dpi1) => _H_mk_DPair dpi1 _dpi2)
    x_662.

def dpi1 :
      A : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      _xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f) ->
      cic.Term univs.Type0 A.

def dpi1_body :
      A : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      _xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f) ->
      cic.Term univs.Type0 A.

[ A, f, _xxx ] dpi1 A f _xxx -->
  matita_basics_types.filter_DPair A f univs.Type0
    (_xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f) => A)
    (matita_basics_types.dpi1_body A f) _xxx.

[ A, f, _xxx ] dpi1_body A f _xxx -->
  matita_basics_types.match_DPair A f univs.Type0
    (xxx0 : cic.Term univs.Type0 (matita_basics_types.DPair A f) => A)
    (yyy : cic.Term univs.Type0 A => __ : cic.Term univs.Type0 (f yyy) => yyy)
    _xxx.

def dpi2 :
      A : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f) ->
      cic.Term univs.Type0 (f (matita_basics_types.dpi1 A f xxx)).

def dpi2_body :
      A : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Univ univs.Type0) ->
      xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f) ->
      cic.Term univs.Type0 (f (matita_basics_types.dpi1 A f xxx)).

[ A, f, xxx ] dpi2 A f xxx -->
  matita_basics_types.filter_DPair A f univs.Type0
    (xxx : cic.Term univs.Type0 (matita_basics_types.DPair A f) =>
     f (matita_basics_types.dpi1 A f xxx))
    (matita_basics_types.dpi2_body A f) xxx.

[ A, f, xxx ] dpi2_body A f xxx -->
  matita_basics_types.match_DPair A f univs.Type0
    (xxx0 : cic.Term univs.Type0 (matita_basics_types.DPair A f) =>
     f (matita_basics_types.dpi1 A f xxx0))
    (__ : cic.Term univs.Type0 A => yyy : cic.Term univs.Type0 (f __) => yyy)
    xxx.

def DPair_inv_ind :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1104 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1105 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1104 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1105 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1105 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_ind x1 x2
           (_x_638 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_638)
              (_z1105 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_638) =>
               P _x_638))
           H1 Hterm).

def DPair_inv_rect_Type4 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1110 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type4) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1111 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type4
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term univs.Type4 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1110 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type4) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1111 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type4
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1111 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type4 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_Type4 x1 x2
           (_x_640 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop univs.Type4
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_640)
              (_z1111 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_640) =>
               P _x_640))
           H1 Hterm).

def DPair_inv_rect_Type3 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1116 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type3) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1117 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type3
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term univs.Type3 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1116 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type3) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1117 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type3
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1117 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type3 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_Type3 x1 x2
           (_x_644 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop univs.Type3
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_644)
              (_z1117 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_644) =>
               P _x_644))
           H1 Hterm).

def DPair_inv_rect_Type2 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1122 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type2) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1123 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type2
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term univs.Type2 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1122 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type2) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1123 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type2
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1123 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type2 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_Type2 x1 x2
           (_x_646 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop univs.Type2
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_646)
              (_z1123 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_646) =>
               P _x_646))
           H1 Hterm).

def DPair_inv_rect_Type1 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1128 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type1) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1129 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type1
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term univs.Type1 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1128 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type1) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1129 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type1
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1129 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type1 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_Type1 x1 x2
           (_x_648 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop univs.Type1
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_648)
              (_z1129 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_648) =>
               P _x_648))
           H1 Hterm).

def DPair_inv_rect_Type0 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1134 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type0) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1135 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type0
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term univs.Type0 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1134 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ univs.Type0) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1135 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term univs.Type0
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1135 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type0 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_Type0 x1 x2
           (_x_650 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_650)
              (_z1135 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_650) =>
               P _x_650))
           H1 Hterm).

def DPair_inv_rect_CProp4 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1140 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1141 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1140 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1141 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1141 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_CProp4 x1 x2
           (_x_652 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_652)
              (_z1141 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_652) =>
               P _x_652))
           H1 Hterm).

def DPair_inv_rect_CProp3 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1146 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1147 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1146 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1147 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1147 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_CProp3 x1 x2
           (_x_656 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_656)
              (_z1147 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_656) =>
               P _x_656))
           H1 Hterm).

def DPair_inv_rect_CProp2 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1152 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1153 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1152 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1153 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1153 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_CProp2 x1 x2
           (_x_658 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_658)
              (_z1153 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_658) =>
               P _x_658))
           H1 Hterm).

def DPair_inv_rect_CProp1 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1158 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1159 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1158 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1159 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1159 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_CProp1 x1 x2
           (_x_660 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_660)
              (_z1159 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_660) =>
               P _x_660))
           H1 Hterm).

def DPair_inv_rect_CProp0 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
      P :
        (_z1164 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1165 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ univs.Type0) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
      P :
        (_z1164 : cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (dpi1 : cic.Term univs.Type0 x1 ->
         _dpi2 : cic.Term univs.Type0 (x2 dpi1) ->
         _z1165 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair x1 x2))
                Hterm (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_DPair x1 x2 dpi1 _dpi2))) =>
      (Hcut :
         (_z1165 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.DPair x1 x2))
            Hterm))
        (matita_basics_types.DPair_rect_CProp0 x1 x2
           (_x_662 :
              cic.Term univs.Type0 (matita_basics_types.DPair x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.DPair x1 x2))
                 Hterm _x_662)
              (_z1165 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.DPair x1 x2))
                      Hterm _x_662) =>
               P _x_662))
           H1 Hterm).

def DPair_discr :
      a1 : cic.Univ univs.Type0 ->
      a2 : (__ : cic.Term univs.Type0 a1 -> cic.Univ univs.Type0) ->
      x : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) ->
      y : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) ->
      _e :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.DPair a1 a2))
             x y) ->
      cic.Term univs.Type2
        (matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
            cic.univ univs.Type2)
           (t0 : cic.Term univs.Type0 a1 =>
            t1 : cic.Term univs.Type0 (a2 t0) =>
            matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               u1 : cic.Term univs.Type0 (a2 u0) =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                ((x0 : cic.Term univs.Type0 a1 =>
                                  p0 :
                                    cic.Term cic.prop
                                      (matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2 a1)
                                         (matita_basics_logic.R0 a1 t0) x0) =>
                                  a2 x0) u0 e0))
                             (matita_basics_logic.R1
                                (cic.lift univs.Type0 univs.Type2 a1) t0
                                (x0 : cic.Term univs.Type0 a1 =>
                                 p0 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0 x0) =>
                                 a2 x0)
                                t1 u0 e0)
                             u1)
                          (_e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2 x0) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x0 : cic.Term univs.Type0 a1 =>
                                      p0 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x0) =>
                                      a2 x0)
                                     t1 u0 e0)
                                  u1) =>
                           P)))
                    (_z41 :
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        _e1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  ((x0 : cic.Term univs.Type0 a1 =>
                                    p0 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           (matita_basics_logic.R0 a1 t0) x0) =>
                                    a2 x0) u0 e0))
                               (matita_basics_logic.R1
                                  (cic.lift univs.Type0 univs.Type2 a1) t0
                                  (x0 : cic.Term univs.Type0 a1 =>
                                   p0 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             a1)
                                          t0 x0) =>
                                   a2 x0)
                                  t1 u0 e0)
                               u1) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              y)
           x)
      :=
      a1 : cic.Univ univs.Type0 =>
      a2 : (__ : cic.Term univs.Type0 a1 -> cic.Univ univs.Type0) =>
      x : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
      y : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
      Deq :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.DPair a1 a2))
             x y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift univs.Type0 univs.Type2 (matita_basics_types.DPair a1 a2))
        x
        (x_13 : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
         _x_14 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.DPair a1 a2))
                x x_13) =>
         matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
            cic.univ univs.Type2)
           (t0 : cic.Term univs.Type0 a1 =>
            t1 : cic.Term univs.Type0 (a2 t0) =>
            matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               u1 : cic.Term univs.Type0 (a2 u0) =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                ((x0 : cic.Term univs.Type0 a1 =>
                                  p0 :
                                    cic.Term cic.prop
                                      (matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2 a1)
                                         (matita_basics_logic.R0 a1 t0) x0) =>
                                  a2 x0) u0 e0))
                             (matita_basics_logic.R1
                                (cic.lift univs.Type0 univs.Type2 a1) t0
                                (x0 : cic.Term univs.Type0 a1 =>
                                 p0 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0 x0) =>
                                 a2 x0)
                                t1 u0 e0)
                             u1)
                          (_e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2 x0) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x0 : cic.Term univs.Type0 a1 =>
                                      p0 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x0) =>
                                      a2 x0)
                                     t1 u0 e0)
                                  u1) =>
                           P)))
                    (_z41 :
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        _e1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  ((x0 : cic.Term univs.Type0 a1 =>
                                    p0 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           (matita_basics_logic.R0 a1 t0) x0) =>
                                    a2 x0) u0 e0))
                               (matita_basics_logic.R1
                                  (cic.lift univs.Type0 univs.Type2 a1) t0
                                  (x0 : cic.Term univs.Type0 a1 =>
                                   p0 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             a1)
                                          t0 x0) =>
                                   a2 x0)
                                  t1 u0 e0)
                               u1) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              x_13)
           x)
        (matita_basics_types.match_DPair a1 a2 univs.Type2
           (__ : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
            matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2)
              (_0 : cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
               cic.univ univs.Type2)
              (t0 : cic.Term univs.Type0 a1 =>
               t1 : cic.Term univs.Type0 (a2 t0) =>
               matita_basics_types.match_DPair a1 a2 (cic.succ univs.Type2)
                 (_0 :
                    cic.Term univs.Type0 (matita_basics_types.DPair a1 a2) =>
                  cic.univ univs.Type2)
                 (u0 : cic.Term univs.Type0 a1 =>
                  u1 : cic.Term univs.Type0 (a2 u0) =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1
                       (cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2 a1)
                             (matita_basics_logic.R0 a1 t0) u0)
                          (e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) =>
                           cic.prod cic.prop univs.Type1
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   ((x0 : cic.Term univs.Type0 a1 =>
                                     p0 :
                                       cic.Term cic.prop
                                         (matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               a1)
                                            (matita_basics_logic.R0 a1 t0) x0) =>
                                     a2 x0) u0 e0))
                                (matita_basics_logic.R1
                                   (cic.lift univs.Type0 univs.Type2 a1) t0
                                   (x0 : cic.Term univs.Type0 a1 =>
                                    p0 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           t0 x0) =>
                                    a2 x0)
                                   t1 u0 e0)
                                u1)
                             (_e1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        ((x0 : cic.Term univs.Type0 a1 =>
                                          p0 :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2 a1)
                                                 (matita_basics_logic.R0 a1
                                                    t0)
                                                 x0) =>
                                          a2 x0) u0 e0))
                                     (matita_basics_logic.R1
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0
                                        (x0 : cic.Term univs.Type0 a1 =>
                                         p0 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2 a1)
                                                t0 x0) =>
                                         a2 x0)
                                        t1 u0 e0)
                                     u1) =>
                              P)))
                       (_z41 :
                          (e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) ->
                           _e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2 x0) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x0 : cic.Term univs.Type0 a1 =>
                                      p0 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x0) =>
                                      a2 x0)
                                     t1 u0 e0)
                                  u1) ->
                           cic.Term univs.Type1 P) =>
                        P)))
                 __)
              __)
           (a0 : cic.Term univs.Type0 a1 =>
            a10 : cic.Term univs.Type0 (a2 a0) =>
            P : cic.Univ univs.Type1 =>
            DH :
              (e0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 a1)
                      (matita_basics_logic.R0 a1 a0) a0) ->
               _e1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 (a2 a0))
                      (matita_basics_logic.R1
                         (cic.lift univs.Type0 univs.Type2 a1) a0
                         (x0 : cic.Term univs.Type0 a1 =>
                          p0 :
                            cic.Term cic.prop
                              (matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2 a1) a0 x0) =>
                          a2 x0)
                         a10 a0 e0)
                      a10) ->
               cic.Term univs.Type1 P) =>
            DH
              (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 a1)
                 (matita_basics_logic.R0 a1 a0))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 (a2 a0))
                 (matita_basics_logic.R1
                    (cic.lift univs.Type0 univs.Type2 a1) a0
                    (x0 : cic.Term univs.Type0 a1 =>
                     p0 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2 a1) a0 x0) =>
                     a2 x0)
                    a10 a0
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2 a1)
                       (matita_basics_logic.R0 a1 a0)))))
           x)
        y Deq.

Sig :
  A : cic.Univ univs.Type0 ->
  _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
  cic.Univ univs.Type0.

mk_Sig :
  A : cic.Univ univs.Type0 ->
  f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
  pi1 : cic.Term univs.Type0 A ->
  _pi2 : cic.Term cic.prop (f pi1) ->
  cic.Term univs.Type0 (matita_basics_types.Sig A f).

def match_Sig :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ return_sort) ->
      case_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term return_sort
           (return_type (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      z : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term return_sort (return_type z).

[ A, _f, return_sort, return_type, case_mk_Sig, pi1, _pi2 ]
  match_Sig A _f return_sort return_type case_mk_Sig
    (matita_basics_types.mk_Sig A _f pi1 _pi2) -->
  case_mk_Sig pi1 _pi2.

def filter_Sig :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term return_sort (return_type z).

[ A, f, pi1, _pi2, return_sort, return_type, return ]
  filter_Sig (A) (f) return_sort return_type return
    (matita_basics_types.mk_Sig A f pi1 _pi2) -->
  return (matita_basics_types.mk_Sig A f pi1 _pi2).

def Sig_ind :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_664).

def Sig_ind_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_664).

[ A, _f, Q_, _H_mk_Sig, x_664 ] Sig_ind A _f Q_ _H_mk_Sig x_664 -->
  matita_basics_types.filter_Sig A _f cic.prop
    (x_664 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_664)
    (matita_basics_types.Sig_ind_body A _f Q_ _H_mk_Sig) x_664.

[ A, _f, Q_, _H_mk_Sig, x_664 ] Sig_ind_body A _f Q_ _H_mk_Sig x_664 -->
  matita_basics_types.match_Sig A _f cic.prop Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_664.

def Sig_rect_Type4 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type4) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type4 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type4 (Q_ x_666).

def Sig_rect_Type4_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type4) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type4 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type4 (Q_ x_666).

[ A, _f, Q_, _H_mk_Sig, x_666 ] Sig_rect_Type4 A _f Q_ _H_mk_Sig x_666 -->
  matita_basics_types.filter_Sig A _f univs.Type4
    (x_666 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_666)
    (matita_basics_types.Sig_rect_Type4_body A _f Q_ _H_mk_Sig) x_666.

[ A, _f, Q_, _H_mk_Sig, x_666 ]
  Sig_rect_Type4_body A _f Q_ _H_mk_Sig x_666 -->
  matita_basics_types.match_Sig A _f univs.Type4 Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_666.

def Sig_rect_Type5 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type5) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type5 (Q_ x_668).

def Sig_rect_Type5_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type5) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type5 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type5 (Q_ x_668).

[ A, _f, Q_, _H_mk_Sig, x_668 ] Sig_rect_Type5 A _f Q_ _H_mk_Sig x_668 -->
  matita_basics_types.filter_Sig A _f univs.Type5
    (x_668 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_668)
    (matita_basics_types.Sig_rect_Type5_body A _f Q_ _H_mk_Sig) x_668.

[ A, _f, Q_, _H_mk_Sig, x_668 ]
  Sig_rect_Type5_body A _f Q_ _H_mk_Sig x_668 -->
  matita_basics_types.match_Sig A _f univs.Type5 Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_668.

def Sig_rect_Type3 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_670 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type3) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type3 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_670 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type3 (Q_ x_670).

def Sig_rect_Type3_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_670 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type3) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type3 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_670 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type3 (Q_ x_670).

[ A, _f, Q_, _H_mk_Sig, x_670 ] Sig_rect_Type3 A _f Q_ _H_mk_Sig x_670 -->
  matita_basics_types.filter_Sig A _f univs.Type3
    (x_670 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_670)
    (matita_basics_types.Sig_rect_Type3_body A _f Q_ _H_mk_Sig) x_670.

[ A, _f, Q_, _H_mk_Sig, x_670 ]
  Sig_rect_Type3_body A _f Q_ _H_mk_Sig x_670 -->
  matita_basics_types.match_Sig A _f univs.Type3 Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_670.

def Sig_rect_Type2 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type2) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type2 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type2 (Q_ x_672).

def Sig_rect_Type2_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type2) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type2 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type2 (Q_ x_672).

[ A, _f, Q_, _H_mk_Sig, x_672 ] Sig_rect_Type2 A _f Q_ _H_mk_Sig x_672 -->
  matita_basics_types.filter_Sig A _f univs.Type2
    (x_672 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_672)
    (matita_basics_types.Sig_rect_Type2_body A _f Q_ _H_mk_Sig) x_672.

[ A, _f, Q_, _H_mk_Sig, x_672 ]
  Sig_rect_Type2_body A _f Q_ _H_mk_Sig x_672 -->
  matita_basics_types.match_Sig A _f univs.Type2 Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_672.

def Sig_rect_Type1 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type1) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type1 (Q_ x_674).

def Sig_rect_Type1_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type1) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type1 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type1 (Q_ x_674).

[ A, _f, Q_, _H_mk_Sig, x_674 ] Sig_rect_Type1 A _f Q_ _H_mk_Sig x_674 -->
  matita_basics_types.filter_Sig A _f univs.Type1
    (x_674 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_674)
    (matita_basics_types.Sig_rect_Type1_body A _f Q_ _H_mk_Sig) x_674.

[ A, _f, Q_, _H_mk_Sig, x_674 ]
  Sig_rect_Type1_body A _f Q_ _H_mk_Sig x_674 -->
  matita_basics_types.match_Sig A _f univs.Type1 Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_674.

def Sig_rect_Type0 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type0) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type0 (Q_ x_676).

def Sig_rect_Type0_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ univs.Type0) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term univs.Type0 (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term univs.Type0 (Q_ x_676).

[ A, _f, Q_, _H_mk_Sig, x_676 ] Sig_rect_Type0 A _f Q_ _H_mk_Sig x_676 -->
  matita_basics_types.filter_Sig A _f univs.Type0
    (x_676 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_676)
    (matita_basics_types.Sig_rect_Type0_body A _f Q_ _H_mk_Sig) x_676.

[ A, _f, Q_, _H_mk_Sig, x_676 ]
  Sig_rect_Type0_body A _f Q_ _H_mk_Sig x_676 -->
  matita_basics_types.match_Sig A _f univs.Type0 Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_676.

def Sig_rect_CProp4 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_678).

def Sig_rect_CProp4_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_678).

[ A, _f, Q_, _H_mk_Sig, x_678 ] Sig_rect_CProp4 A _f Q_ _H_mk_Sig x_678 -->
  matita_basics_types.filter_Sig A _f cic.prop
    (x_678 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_678)
    (matita_basics_types.Sig_rect_CProp4_body A _f Q_ _H_mk_Sig) x_678.

[ A, _f, Q_, _H_mk_Sig, x_678 ]
  Sig_rect_CProp4_body A _f Q_ _H_mk_Sig x_678 -->
  matita_basics_types.match_Sig A _f cic.prop Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_678.

def Sig_rect_CProp5 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_680).

def Sig_rect_CProp5_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_680).

[ A, _f, Q_, _H_mk_Sig, x_680 ] Sig_rect_CProp5 A _f Q_ _H_mk_Sig x_680 -->
  matita_basics_types.filter_Sig A _f cic.prop
    (x_680 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_680)
    (matita_basics_types.Sig_rect_CProp5_body A _f Q_ _H_mk_Sig) x_680.

[ A, _f, Q_, _H_mk_Sig, x_680 ]
  Sig_rect_CProp5_body A _f Q_ _H_mk_Sig x_680 -->
  matita_basics_types.match_Sig A _f cic.prop Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_680.

def Sig_rect_CProp3 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_682).

def Sig_rect_CProp3_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_682).

[ A, _f, Q_, _H_mk_Sig, x_682 ] Sig_rect_CProp3 A _f Q_ _H_mk_Sig x_682 -->
  matita_basics_types.filter_Sig A _f cic.prop
    (x_682 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_682)
    (matita_basics_types.Sig_rect_CProp3_body A _f Q_ _H_mk_Sig) x_682.

[ A, _f, Q_, _H_mk_Sig, x_682 ]
  Sig_rect_CProp3_body A _f Q_ _H_mk_Sig x_682 -->
  matita_basics_types.match_Sig A _f cic.prop Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_682.

def Sig_rect_CProp2 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_684).

def Sig_rect_CProp2_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_684).

[ A, _f, Q_, _H_mk_Sig, x_684 ] Sig_rect_CProp2 A _f Q_ _H_mk_Sig x_684 -->
  matita_basics_types.filter_Sig A _f cic.prop
    (x_684 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_684)
    (matita_basics_types.Sig_rect_CProp2_body A _f Q_ _H_mk_Sig) x_684.

[ A, _f, Q_, _H_mk_Sig, x_684 ]
  Sig_rect_CProp2_body A _f Q_ _H_mk_Sig x_684 -->
  matita_basics_types.match_Sig A _f cic.prop Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_684.

def Sig_rect_CProp1 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_686).

def Sig_rect_CProp1_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_686).

[ A, _f, Q_, _H_mk_Sig, x_686 ] Sig_rect_CProp1 A _f Q_ _H_mk_Sig x_686 -->
  matita_basics_types.filter_Sig A _f cic.prop
    (x_686 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_686)
    (matita_basics_types.Sig_rect_CProp1_body A _f Q_ _H_mk_Sig) x_686.

[ A, _f, Q_, _H_mk_Sig, x_686 ]
  Sig_rect_CProp1_body A _f Q_ _H_mk_Sig x_686 -->
  matita_basics_types.match_Sig A _f cic.prop Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_686.

def Sig_rect_CProp0 :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_688).

def Sig_rect_CProp0_body :
      A : cic.Univ univs.Type0 ->
      _f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      Q_ :
        (_x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
         cic.Univ cic.prop) ->
      _H_mk_Sig :
        (pi1 : cic.Term univs.Type0 A ->
         _pi2 : cic.Term cic.prop (_f pi1) ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Sig A _f pi1 _pi2))) ->
      x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) ->
      cic.Term cic.prop (Q_ x_688).

[ A, _f, Q_, _H_mk_Sig, x_688 ] Sig_rect_CProp0 A _f Q_ _H_mk_Sig x_688 -->
  matita_basics_types.filter_Sig A _f cic.prop
    (x_688 : cic.Term univs.Type0 (matita_basics_types.Sig A _f) => Q_ x_688)
    (matita_basics_types.Sig_rect_CProp0_body A _f Q_ _H_mk_Sig) x_688.

[ A, _f, Q_, _H_mk_Sig, x_688 ]
  Sig_rect_CProp0_body A _f Q_ _H_mk_Sig x_688 -->
  matita_basics_types.match_Sig A _f cic.prop Q_
    (pi1 : cic.Term univs.Type0 A =>
     _pi2 : cic.Term cic.prop (_f pi1) => _H_mk_Sig pi1 _pi2)
    x_688.

def pi1 :
      A : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      _xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) ->
      cic.Term univs.Type0 A.

def pi1_body :
      A : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      _xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) ->
      cic.Term univs.Type0 A.

[ A, f, _xxx ] pi1 A f _xxx -->
  matita_basics_types.filter_Sig A f univs.Type0
    (_xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) => A)
    (matita_basics_types.pi1_body A f) _xxx.

[ A, f, _xxx ] pi1_body A f _xxx -->
  matita_basics_types.match_Sig A f univs.Type0
    (xxx0 : cic.Term univs.Type0 (matita_basics_types.Sig A f) => A)
    (yyy : cic.Term univs.Type0 A => __ : cic.Term cic.prop (f yyy) => yyy)
    _xxx.

def pi2 :
      A : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) ->
      cic.Term cic.prop (f (matita_basics_types.pi1 A f xxx)).

def pi2_body :
      A : cic.Univ univs.Type0 ->
      f : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) ->
      cic.Term cic.prop (f (matita_basics_types.pi1 A f xxx)).

[ A, f, xxx ] pi2 A f xxx -->
  matita_basics_types.filter_Sig A f cic.prop
    (xxx : cic.Term univs.Type0 (matita_basics_types.Sig A f) =>
     f (matita_basics_types.pi1 A f xxx))
    (matita_basics_types.pi2_body A f) xxx.

[ A, f, xxx ] pi2_body A f xxx -->
  matita_basics_types.match_Sig A f cic.prop
    (xxx0 : cic.Term univs.Type0 (matita_basics_types.Sig A f) =>
     f (matita_basics_types.pi1 A f xxx0))
    (__ : cic.Term univs.Type0 A => yyy : cic.Term cic.prop (f __) => yyy)
    xxx.

def Sig_inv_ind :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1170 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1171 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1170 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1171 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1171 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_ind x1 x2
           (_x_664 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_664)
              (_z1171 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_664) =>
               P _x_664))
           H1 Hterm).

def Sig_inv_rect_Type4 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1176 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type4) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1177 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type4 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term univs.Type4 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1176 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type4) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1177 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type4 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1177 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type4 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_Type4 x1 x2
           (_x_666 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop univs.Type4
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_666)
              (_z1177 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_666) =>
               P _x_666))
           H1 Hterm).

def Sig_inv_rect_Type3 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1182 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type3) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1183 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type3 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term univs.Type3 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1182 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type3) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1183 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type3 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1183 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type3 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_Type3 x1 x2
           (_x_670 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop univs.Type3
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_670)
              (_z1183 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_670) =>
               P _x_670))
           H1 Hterm).

def Sig_inv_rect_Type2 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1188 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type2) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1189 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type2 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term univs.Type2 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1188 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type2) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1189 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type2 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1189 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type2 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_Type2 x1 x2
           (_x_672 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop univs.Type2
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_672)
              (_z1189 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_672) =>
               P _x_672))
           H1 Hterm).

def Sig_inv_rect_Type1 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1194 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type1) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1195 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type1 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term univs.Type1 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1194 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type1) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1195 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type1 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1195 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type1 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_Type1 x1 x2
           (_x_674 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop univs.Type1
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_674)
              (_z1195 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_674) =>
               P _x_674))
           H1 Hterm).

def Sig_inv_rect_Type0 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1200 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type0) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1201 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type0 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term univs.Type0 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1200 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ univs.Type0) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1201 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term univs.Type0 (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1201 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type0 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_Type0 x1 x2
           (_x_676 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_676)
              (_z1201 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_676) =>
               P _x_676))
           H1 Hterm).

def Sig_inv_rect_CProp4 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1206 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1207 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1206 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1207 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1207 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_CProp4 x1 x2
           (_x_678 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_678)
              (_z1207 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_678) =>
               P _x_678))
           H1 Hterm).

def Sig_inv_rect_CProp3 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1212 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1213 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1212 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1213 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1213 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_CProp3 x1 x2
           (_x_682 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_682)
              (_z1213 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_682) =>
               P _x_682))
           H1 Hterm).

def Sig_inv_rect_CProp2 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1218 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1219 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1218 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1219 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1219 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_CProp2 x1 x2
           (_x_684 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_684)
              (_z1219 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_684) =>
               P _x_684))
           H1 Hterm).

def Sig_inv_rect_CProp1 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1225 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1224 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1225 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1225 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_CProp1 x1 x2
           (_x_686 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_686)
              (_z1225 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_686) =>
               P _x_686))
           H1 Hterm).

def Sig_inv_rect_CProp0 :
      x1 : cic.Univ univs.Type0 ->
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
      P :
        (_z1230 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1231 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
      P :
        (_z1230 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (pi1 : cic.Term univs.Type0 x1 ->
         _pi2 : cic.Term cic.prop (x2 pi1) ->
         _z1231 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig x1 x2))
                Hterm (matita_basics_types.mk_Sig x1 x2 pi1 _pi2)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Sig x1 x2 pi1 _pi2))) =>
      (Hcut :
         (_z1231 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig x1 x2))
            Hterm))
        (matita_basics_types.Sig_rect_CProp0 x1 x2
           (_x_688 : cic.Term univs.Type0 (matita_basics_types.Sig x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Sig x1 x2))
                 Hterm _x_688)
              (_z1231 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Sig x1 x2))
                      Hterm _x_688) =>
               P _x_688))
           H1 Hterm).

def Sig_discr :
      a1 : cic.Univ univs.Type0 ->
      a2 : (__ : cic.Term univs.Type0 a1 -> cic.Univ cic.prop) ->
      x : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) ->
      y : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) ->
      _e :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.Sig a1 a2))
             x y) ->
      cic.Term univs.Type2
        (matita_basics_types.match_Sig a1 a2 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
            cic.univ univs.Type2)
           (t0 : cic.Term univs.Type0 a1 =>
            t1 : cic.Term cic.prop (a2 t0) =>
            matita_basics_types.match_Sig a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               u1 : cic.Term cic.prop (a2 u0) =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift cic.prop univs.Type2
                                ((x0 : cic.Term univs.Type0 a1 =>
                                  p0 :
                                    cic.Term cic.prop
                                      (matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2 a1)
                                         (matita_basics_logic.R0 a1 t0) x0) =>
                                  a2 x0) u0 e0))
                             (matita_basics_logic.R1
                                (cic.lift univs.Type0 univs.Type2 a1) t0
                                (x_19 : cic.Term univs.Type0 a1 =>
                                 _x_20 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0 x_19) =>
                                 cic.lift cic.prop univs.Type0
                                   ((x0 : cic.Term univs.Type0 a1 =>
                                     p0 :
                                       cic.Term cic.prop
                                         (matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               a1)
                                            t0 x0) =>
                                     a2 x0) x_19 _x_20))
                                t1 u0 e0)
                             u1)
                          (_e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift cic.prop univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2 x0) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x_19 : cic.Term univs.Type0 a1 =>
                                      _x_20 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x_19) =>
                                      cic.lift cic.prop univs.Type0
                                        ((x0 : cic.Term univs.Type0 a1 =>
                                          p0 :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2 a1)
                                                 t0 x0) =>
                                          a2 x0) x_19 _x_20))
                                     t1 u0 e0)
                                  u1) =>
                           P)))
                    (_z43 :
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        _e1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift cic.prop univs.Type2
                                  ((x0 : cic.Term univs.Type0 a1 =>
                                    p0 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           (matita_basics_logic.R0 a1 t0) x0) =>
                                    a2 x0) u0 e0))
                               (matita_basics_logic.R1
                                  (cic.lift univs.Type0 univs.Type2 a1) t0
                                  (x_19 : cic.Term univs.Type0 a1 =>
                                   _x_20 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             a1)
                                          t0 x_19) =>
                                   cic.lift cic.prop univs.Type0
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              t0 x0) =>
                                       a2 x0) x_19 _x_20))
                                  t1 u0 e0)
                               u1) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              y)
           x)
      :=
      a1 : cic.Univ univs.Type0 =>
      a2 : (__ : cic.Term univs.Type0 a1 -> cic.Univ cic.prop) =>
      x : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
      y : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
      Deq :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.Sig a1 a2))
             x y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig a1 a2)) x
        (x_13 : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
         _x_14 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Sig a1 a2))
                x x_13) =>
         matita_basics_types.match_Sig a1 a2 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
            cic.univ univs.Type2)
           (t0 : cic.Term univs.Type0 a1 =>
            t1 : cic.Term cic.prop (a2 t0) =>
            matita_basics_types.match_Sig a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               u1 : cic.Term cic.prop (a2 u0) =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift cic.prop univs.Type2
                                ((x0 : cic.Term univs.Type0 a1 =>
                                  p0 :
                                    cic.Term cic.prop
                                      (matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2 a1)
                                         (matita_basics_logic.R0 a1 t0) x0) =>
                                  a2 x0) u0 e0))
                             (matita_basics_logic.R1
                                (cic.lift univs.Type0 univs.Type2 a1) t0
                                (x_19 : cic.Term univs.Type0 a1 =>
                                 _x_20 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0 x_19) =>
                                 cic.lift cic.prop univs.Type0
                                   ((x0 : cic.Term univs.Type0 a1 =>
                                     p0 :
                                       cic.Term cic.prop
                                         (matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               a1)
                                            t0 x0) =>
                                     a2 x0) x_19 _x_20))
                                t1 u0 e0)
                             u1)
                          (_e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift cic.prop univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2 x0) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x_19 : cic.Term univs.Type0 a1 =>
                                      _x_20 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x_19) =>
                                      cic.lift cic.prop univs.Type0
                                        ((x0 : cic.Term univs.Type0 a1 =>
                                          p0 :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2 a1)
                                                 t0 x0) =>
                                          a2 x0) x_19 _x_20))
                                     t1 u0 e0)
                                  u1) =>
                           P)))
                    (_z43 :
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        _e1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift cic.prop univs.Type2
                                  ((x0 : cic.Term univs.Type0 a1 =>
                                    p0 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           (matita_basics_logic.R0 a1 t0) x0) =>
                                    a2 x0) u0 e0))
                               (matita_basics_logic.R1
                                  (cic.lift univs.Type0 univs.Type2 a1) t0
                                  (x_19 : cic.Term univs.Type0 a1 =>
                                   _x_20 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             a1)
                                          t0 x_19) =>
                                   cic.lift cic.prop univs.Type0
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              t0 x0) =>
                                       a2 x0) x_19 _x_20))
                                  t1 u0 e0)
                               u1) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              x_13)
           x)
        (matita_basics_types.match_Sig a1 a2 univs.Type2
           (__ : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
            matita_basics_types.match_Sig a1 a2 (cic.succ univs.Type2)
              (_0 : cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
               cic.univ univs.Type2)
              (t0 : cic.Term univs.Type0 a1 =>
               t1 : cic.Term cic.prop (a2 t0) =>
               matita_basics_types.match_Sig a1 a2 (cic.succ univs.Type2)
                 (_0 :
                    cic.Term univs.Type0 (matita_basics_types.Sig a1 a2) =>
                  cic.univ univs.Type2)
                 (u0 : cic.Term univs.Type0 a1 =>
                  u1 : cic.Term cic.prop (a2 u0) =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1
                       (cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2 a1)
                             (matita_basics_logic.R0 a1 t0) u0)
                          (e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) =>
                           cic.prod cic.prop univs.Type1
                             (matita_basics_logic.eq
                                (cic.lift cic.prop univs.Type2
                                   ((x0 : cic.Term univs.Type0 a1 =>
                                     p0 :
                                       cic.Term cic.prop
                                         (matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               a1)
                                            (matita_basics_logic.R0 a1 t0) x0) =>
                                     a2 x0) u0 e0))
                                (matita_basics_logic.R1
                                   (cic.lift univs.Type0 univs.Type2 a1) t0
                                   (x_19 : cic.Term univs.Type0 a1 =>
                                    _x_20 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           t0 x_19) =>
                                    cic.lift cic.prop univs.Type0
                                      ((x0 : cic.Term univs.Type0 a1 =>
                                        p0 :
                                          cic.Term cic.prop
                                            (matita_basics_logic.eq
                                               (cic.lift univs.Type0
                                                  univs.Type2 a1)
                                               t0 x0) =>
                                        a2 x0) x_19 _x_20))
                                   t1 u0 e0)
                                u1)
                             (_e1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift cic.prop univs.Type2
                                        ((x0 : cic.Term univs.Type0 a1 =>
                                          p0 :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2 a1)
                                                 (matita_basics_logic.R0 a1
                                                    t0)
                                                 x0) =>
                                          a2 x0) u0 e0))
                                     (matita_basics_logic.R1
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0
                                        (x_19 : cic.Term univs.Type0 a1 =>
                                         _x_20 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2 a1)
                                                t0 x_19) =>
                                         cic.lift cic.prop univs.Type0
                                           ((x0 : cic.Term univs.Type0 a1 =>
                                             p0 :
                                               cic.Term cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.lift univs.Type0
                                                       univs.Type2 a1)
                                                    t0 x0) =>
                                             a2 x0) x_19 _x_20))
                                        t1 u0 e0)
                                     u1) =>
                              P)))
                       (_z43 :
                          (e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) ->
                           _e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift cic.prop univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2 x0) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x_19 : cic.Term univs.Type0 a1 =>
                                      _x_20 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x_19) =>
                                      cic.lift cic.prop univs.Type0
                                        ((x0 : cic.Term univs.Type0 a1 =>
                                          p0 :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2 a1)
                                                 t0 x0) =>
                                          a2 x0) x_19 _x_20))
                                     t1 u0 e0)
                                  u1) ->
                           cic.Term univs.Type1 P) =>
                        P)))
                 __)
              __)
           (a0 : cic.Term univs.Type0 a1 =>
            a10 : cic.Term cic.prop (a2 a0) =>
            P : cic.Univ univs.Type1 =>
            DH :
              (e0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 a1)
                      (matita_basics_logic.R0 a1 a0) a0) ->
               _e1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift cic.prop univs.Type2 (a2 a0))
                      (matita_basics_logic.R1
                         (cic.lift univs.Type0 univs.Type2 a1) a0
                         (x_19 : cic.Term univs.Type0 a1 =>
                          _x_20 :
                            cic.Term cic.prop
                              (matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2 a1) a0
                                 x_19) =>
                          cic.lift cic.prop univs.Type0
                            ((x0 : cic.Term univs.Type0 a1 =>
                              p0 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2 a1) a0
                                     x0) =>
                              a2 x0) x_19 _x_20))
                         a10 a0 e0)
                      a10) ->
               cic.Term univs.Type1 P) =>
            DH
              (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 a1)
                 (matita_basics_logic.R0 a1 a0))
              (matita_basics_logic.refl
                 (cic.lift cic.prop univs.Type2 (a2 a0))
                 (matita_basics_logic.R1
                    (cic.lift univs.Type0 univs.Type2 a1) a0
                    (x_19 : cic.Term univs.Type0 a1 =>
                     _x_20 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2 a1) a0 x_19) =>
                     cic.lift cic.prop univs.Type0
                       ((x0 : cic.Term univs.Type0 a1 =>
                         p0 :
                           cic.Term cic.prop
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2 a1) a0 x0) =>
                         a2 x0) x_19 _x_20))
                    a10 a0
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2 a1)
                       (matita_basics_logic.R0 a1 a0)))))
           x)
        y Deq.

def sub_pi2 :
      A : cic.Univ univs.Type0 ->
      P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      P' : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      __ :
        (x : cic.Term univs.Type0 A ->
         __ : cic.Term cic.prop (P x) -> cic.Term cic.prop (P' x)) ->
      x :
        cic.Term univs.Type0
          (matita_basics_types.Sig A (x : cic.Term univs.Type0 A => P x)) ->
      cic.Term cic.prop
        (P'
           (matita_basics_types.pi1 A (x0 : cic.Term univs.Type0 A => P x0) x))
      :=
      A : cic.Univ univs.Type0 =>
      P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) =>
      P' : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) =>
      H1 :
        (x : cic.Term univs.Type0 A ->
         __ : cic.Term cic.prop (P x) -> cic.Term cic.prop (P' x)) =>
      _clearme :
        cic.Term univs.Type0
          (matita_basics_types.Sig A (x : cic.Term univs.Type0 A => P x)) =>
      matita_basics_types.match_Sig A (x : cic.Term univs.Type0 A => P x)
        cic.prop
        (__ :
           cic.Term univs.Type0
             (matita_basics_types.Sig A (x : cic.Term univs.Type0 A => P x)) =>
         P'
           (matita_basics_types.pi1 A (x0 : cic.Term univs.Type0 A => P x0)
              __))
        (x : cic.Term univs.Type0 A =>
         H2 : cic.Term cic.prop (P x) => H1 x H2)
        _clearme.

def inj_mk_Sig :
      A : cic.Univ univs.Type0 ->
      P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) ->
      x : cic.Term univs.Type0 (matita_basics_types.Sig A P) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig A P)) x
           (matita_basics_types.mk_Sig A P (matita_basics_types.pi1 A P x)
              (matita_basics_types.pi2 A P x)))
      :=
      A : cic.Univ univs.Type0 =>
      P : (__ : cic.Term univs.Type0 A -> cic.Univ cic.prop) =>
      x : cic.Term univs.Type0 (matita_basics_types.Sig A P) =>
      matita_basics_types.match_Sig A P cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Sig A P) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig A P))
           __
           (matita_basics_types.mk_Sig A P (matita_basics_types.pi1 A P __)
              (matita_basics_types.pi2 A P __)))
        (pi1 : cic.Term univs.Type0 A =>
         _pi2 : cic.Term cic.prop (P pi1) =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Sig A P))
           (matita_basics_types.mk_Sig A P pi1 _pi2))
        x.

Prod :
  _A : cic.Univ univs.Type0 ->
  _B : cic.Univ univs.Type0 -> cic.Univ univs.Type0.

mk_Prod :
  A : cic.Univ univs.Type0 ->
  B : cic.Univ univs.Type0 ->
  _fst : cic.Term univs.Type0 A ->
  _snd : cic.Term univs.Type0 B ->
  cic.Term univs.Type0 (matita_basics_types.Prod A B).

def match_Prod :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ return_sort) ->
      case_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term return_sort
           (return_type (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      z : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term return_sort (return_type z).

[ _A, _B, return_sort, return_type, case_mk_Prod, _fst, _snd ]
  match_Prod _A _B return_sort return_type case_mk_Prod
    (matita_basics_types.mk_Prod _A _B _fst _snd) -->
  case_mk_Prod _fst _snd.

def filter_Prod :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      return_sort : cic.Sort ->
      return_type :
        (z : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ return_sort) ->
      return :
        (z : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Term return_sort (return_type z)) ->
      z : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term return_sort (return_type z).

[ A, B, _fst, _snd, return_sort, return_type, return ]
  filter_Prod (A) (B) return_sort return_type return
    (matita_basics_types.mk_Prod A B _fst _snd) -->
  return (matita_basics_types.mk_Prod A B _fst _snd).

def Prod_ind :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_690).

def Prod_ind_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_690).

[ _A, _B, Q_, _H_mk_Prod, x_690 ] Prod_ind _A _B Q_ _H_mk_Prod x_690 -->
  matita_basics_types.filter_Prod _A _B cic.prop
    (x_690 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_690)
    (matita_basics_types.Prod_ind_body _A _B Q_ _H_mk_Prod) x_690.

[ _A, _B, Q_, _H_mk_Prod, x_690 ] Prod_ind_body _A _B Q_ _H_mk_Prod x_690 -->
  matita_basics_types.match_Prod _A _B cic.prop Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_690.

def Prod_rect_Type4 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_692 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type4) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type4
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_692 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type4 (Q_ x_692).

def Prod_rect_Type4_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_692 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type4) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type4
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_692 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type4 (Q_ x_692).

[ _A, _B, Q_, _H_mk_Prod, x_692 ]
  Prod_rect_Type4 _A _B Q_ _H_mk_Prod x_692 -->
  matita_basics_types.filter_Prod _A _B univs.Type4
    (x_692 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_692)
    (matita_basics_types.Prod_rect_Type4_body _A _B Q_ _H_mk_Prod) x_692.

[ _A, _B, Q_, _H_mk_Prod, x_692 ]
  Prod_rect_Type4_body _A _B Q_ _H_mk_Prod x_692 -->
  matita_basics_types.match_Prod _A _B univs.Type4 Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_692.

def Prod_rect_Type5 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type5) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type5
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type5 (Q_ x_694).

def Prod_rect_Type5_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type5) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type5
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type5 (Q_ x_694).

[ _A, _B, Q_, _H_mk_Prod, x_694 ]
  Prod_rect_Type5 _A _B Q_ _H_mk_Prod x_694 -->
  matita_basics_types.filter_Prod _A _B univs.Type5
    (x_694 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_694)
    (matita_basics_types.Prod_rect_Type5_body _A _B Q_ _H_mk_Prod) x_694.

[ _A, _B, Q_, _H_mk_Prod, x_694 ]
  Prod_rect_Type5_body _A _B Q_ _H_mk_Prod x_694 -->
  matita_basics_types.match_Prod _A _B univs.Type5 Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_694.

def Prod_rect_Type3 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type3) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type3
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type3 (Q_ x_696).

def Prod_rect_Type3_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type3) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type3
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type3 (Q_ x_696).

[ _A, _B, Q_, _H_mk_Prod, x_696 ]
  Prod_rect_Type3 _A _B Q_ _H_mk_Prod x_696 -->
  matita_basics_types.filter_Prod _A _B univs.Type3
    (x_696 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_696)
    (matita_basics_types.Prod_rect_Type3_body _A _B Q_ _H_mk_Prod) x_696.

[ _A, _B, Q_, _H_mk_Prod, x_696 ]
  Prod_rect_Type3_body _A _B Q_ _H_mk_Prod x_696 -->
  matita_basics_types.match_Prod _A _B univs.Type3 Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_696.

def Prod_rect_Type2 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_698 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type2) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type2
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_698 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type2 (Q_ x_698).

def Prod_rect_Type2_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_698 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type2) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type2
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_698 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type2 (Q_ x_698).

[ _A, _B, Q_, _H_mk_Prod, x_698 ]
  Prod_rect_Type2 _A _B Q_ _H_mk_Prod x_698 -->
  matita_basics_types.filter_Prod _A _B univs.Type2
    (x_698 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_698)
    (matita_basics_types.Prod_rect_Type2_body _A _B Q_ _H_mk_Prod) x_698.

[ _A, _B, Q_, _H_mk_Prod, x_698 ]
  Prod_rect_Type2_body _A _B Q_ _H_mk_Prod x_698 -->
  matita_basics_types.match_Prod _A _B univs.Type2 Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_698.

def Prod_rect_Type1 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type1) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type1
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type1 (Q_ x_700).

def Prod_rect_Type1_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type1) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type1
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type1 (Q_ x_700).

[ _A, _B, Q_, _H_mk_Prod, x_700 ]
  Prod_rect_Type1 _A _B Q_ _H_mk_Prod x_700 -->
  matita_basics_types.filter_Prod _A _B univs.Type1
    (x_700 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_700)
    (matita_basics_types.Prod_rect_Type1_body _A _B Q_ _H_mk_Prod) x_700.

[ _A, _B, Q_, _H_mk_Prod, x_700 ]
  Prod_rect_Type1_body _A _B Q_ _H_mk_Prod x_700 -->
  matita_basics_types.match_Prod _A _B univs.Type1 Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_700.

def Prod_rect_Type0 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type0) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type0
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type0 (Q_ x_702).

def Prod_rect_Type0_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ univs.Type0) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term univs.Type0
           (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term univs.Type0 (Q_ x_702).

[ _A, _B, Q_, _H_mk_Prod, x_702 ]
  Prod_rect_Type0 _A _B Q_ _H_mk_Prod x_702 -->
  matita_basics_types.filter_Prod _A _B univs.Type0
    (x_702 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_702)
    (matita_basics_types.Prod_rect_Type0_body _A _B Q_ _H_mk_Prod) x_702.

[ _A, _B, Q_, _H_mk_Prod, x_702 ]
  Prod_rect_Type0_body _A _B Q_ _H_mk_Prod x_702 -->
  matita_basics_types.match_Prod _A _B univs.Type0 Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_702.

def Prod_rect_CProp4 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_704).

def Prod_rect_CProp4_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_704).

[ _A, _B, Q_, _H_mk_Prod, x_704 ]
  Prod_rect_CProp4 _A _B Q_ _H_mk_Prod x_704 -->
  matita_basics_types.filter_Prod _A _B cic.prop
    (x_704 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_704)
    (matita_basics_types.Prod_rect_CProp4_body _A _B Q_ _H_mk_Prod) x_704.

[ _A, _B, Q_, _H_mk_Prod, x_704 ]
  Prod_rect_CProp4_body _A _B Q_ _H_mk_Prod x_704 -->
  matita_basics_types.match_Prod _A _B cic.prop Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_704.

def Prod_rect_CProp5 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_706).

def Prod_rect_CProp5_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_706).

[ _A, _B, Q_, _H_mk_Prod, x_706 ]
  Prod_rect_CProp5 _A _B Q_ _H_mk_Prod x_706 -->
  matita_basics_types.filter_Prod _A _B cic.prop
    (x_706 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_706)
    (matita_basics_types.Prod_rect_CProp5_body _A _B Q_ _H_mk_Prod) x_706.

[ _A, _B, Q_, _H_mk_Prod, x_706 ]
  Prod_rect_CProp5_body _A _B Q_ _H_mk_Prod x_706 -->
  matita_basics_types.match_Prod _A _B cic.prop Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_706.

def Prod_rect_CProp3 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_708).

def Prod_rect_CProp3_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_708).

[ _A, _B, Q_, _H_mk_Prod, x_708 ]
  Prod_rect_CProp3 _A _B Q_ _H_mk_Prod x_708 -->
  matita_basics_types.filter_Prod _A _B cic.prop
    (x_708 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_708)
    (matita_basics_types.Prod_rect_CProp3_body _A _B Q_ _H_mk_Prod) x_708.

[ _A, _B, Q_, _H_mk_Prod, x_708 ]
  Prod_rect_CProp3_body _A _B Q_ _H_mk_Prod x_708 -->
  matita_basics_types.match_Prod _A _B cic.prop Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_708.

def Prod_rect_CProp2 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_710).

def Prod_rect_CProp2_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_710).

[ _A, _B, Q_, _H_mk_Prod, x_710 ]
  Prod_rect_CProp2 _A _B Q_ _H_mk_Prod x_710 -->
  matita_basics_types.filter_Prod _A _B cic.prop
    (x_710 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_710)
    (matita_basics_types.Prod_rect_CProp2_body _A _B Q_ _H_mk_Prod) x_710.

[ _A, _B, Q_, _H_mk_Prod, x_710 ]
  Prod_rect_CProp2_body _A _B Q_ _H_mk_Prod x_710 -->
  matita_basics_types.match_Prod _A _B cic.prop Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_710.

def Prod_rect_CProp1 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_712).

def Prod_rect_CProp1_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_712).

[ _A, _B, Q_, _H_mk_Prod, x_712 ]
  Prod_rect_CProp1 _A _B Q_ _H_mk_Prod x_712 -->
  matita_basics_types.filter_Prod _A _B cic.prop
    (x_712 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_712)
    (matita_basics_types.Prod_rect_CProp1_body _A _B Q_ _H_mk_Prod) x_712.

[ _A, _B, Q_, _H_mk_Prod, x_712 ]
  Prod_rect_CProp1_body _A _B Q_ _H_mk_Prod x_712 -->
  matita_basics_types.match_Prod _A _B cic.prop Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_712.

def Prod_rect_CProp0 :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_714).

def Prod_rect_CProp0_body :
      _A : cic.Univ univs.Type0 ->
      _B : cic.Univ univs.Type0 ->
      Q_ :
        (_x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
         cic.Univ cic.prop) ->
      _H_mk_Prod :
        (_fst : cic.Term univs.Type0 _A ->
         _snd : cic.Term univs.Type0 _B ->
         cic.Term cic.prop (Q_ (matita_basics_types.mk_Prod _A _B _fst _snd))) ->
      x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) ->
      cic.Term cic.prop (Q_ x_714).

[ _A, _B, Q_, _H_mk_Prod, x_714 ]
  Prod_rect_CProp0 _A _B Q_ _H_mk_Prod x_714 -->
  matita_basics_types.filter_Prod _A _B cic.prop
    (x_714 : cic.Term univs.Type0 (matita_basics_types.Prod _A _B) =>
     Q_ x_714)
    (matita_basics_types.Prod_rect_CProp0_body _A _B Q_ _H_mk_Prod) x_714.

[ _A, _B, Q_, _H_mk_Prod, x_714 ]
  Prod_rect_CProp0_body _A _B Q_ _H_mk_Prod x_714 -->
  matita_basics_types.match_Prod _A _B cic.prop Q_
    (_fst : cic.Term univs.Type0 _A =>
     _snd : cic.Term univs.Type0 _B => _H_mk_Prod _fst _snd)
    x_714.

def fst :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      _xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      cic.Term univs.Type0 A.

def fst_body :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      _xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      cic.Term univs.Type0 A.

[ A, B, _xxx ] fst A B _xxx -->
  matita_basics_types.filter_Prod A B univs.Type0
    (_xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B) => A)
    (matita_basics_types.fst_body A B) _xxx.

[ A, B, _xxx ] fst_body A B _xxx -->
  matita_basics_types.match_Prod A B univs.Type0
    (xxx0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) => A)
    (yyy : cic.Term univs.Type0 A => __ : cic.Term univs.Type0 B => yyy) _xxx.

def snd :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      _xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      cic.Term univs.Type0 B.

def snd_body :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      _xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      cic.Term univs.Type0 B.

[ A, B, _xxx ] snd A B _xxx -->
  matita_basics_types.filter_Prod A B univs.Type0
    (_xxx : cic.Term univs.Type0 (matita_basics_types.Prod A B) => B)
    (matita_basics_types.snd_body A B) _xxx.

[ A, B, _xxx ] snd_body A B _xxx -->
  matita_basics_types.match_Prod A B univs.Type0
    (xxx0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) => B)
    (__ : cic.Term univs.Type0 A => yyy : cic.Term univs.Type0 B => yyy) _xxx.

def Prod_inv_ind :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1236 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1237 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1236 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1237 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1237 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_ind x1 x2
           (_x_690 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_690)
              (_z1237 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_690) =>
               P _x_690))
           H1 Hterm).

def Prod_inv_rect_Type4 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1242 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type4) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1243 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type4
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term univs.Type4 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1242 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type4) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1243 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type4
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1243 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type4 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_Type4 x1 x2
           (_x_692 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop univs.Type4
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_692)
              (_z1243 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_692) =>
               P _x_692))
           H1 Hterm).

def Prod_inv_rect_Type3 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1248 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type3) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1249 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type3
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term univs.Type3 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1248 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type3) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1249 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type3
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1249 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type3 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_Type3 x1 x2
           (_x_696 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop univs.Type3
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_696)
              (_z1249 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_696) =>
               P _x_696))
           H1 Hterm).

def Prod_inv_rect_Type2 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1254 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type2) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1255 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type2
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term univs.Type2 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1254 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type2) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1255 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type2
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1255 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type2 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_Type2 x1 x2
           (_x_698 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop univs.Type2
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_698)
              (_z1255 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_698) =>
               P _x_698))
           H1 Hterm).

def Prod_inv_rect_Type1 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1260 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type1) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1261 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type1
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term univs.Type1 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1260 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type1) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1261 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type1
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1261 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type1 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_Type1 x1 x2
           (_x_700 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop univs.Type1
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_700)
              (_z1261 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_700) =>
               P _x_700))
           H1 Hterm).

def Prod_inv_rect_Type0 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1266 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type0) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1267 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type0
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term univs.Type0 (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1266 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ univs.Type0) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1267 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term univs.Type0
           (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1267 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term univs.Type0 (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_Type0 x1 x2
           (_x_702 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop univs.Type0
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_702)
              (_z1267 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_702) =>
               P _x_702))
           H1 Hterm).

def Prod_inv_rect_CProp4 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1272 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1273 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1272 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1273 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1273 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_CProp4 x1 x2
           (_x_704 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_704)
              (_z1273 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_704) =>
               P _x_704))
           H1 Hterm).

def Prod_inv_rect_CProp3 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1278 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1279 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1278 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1279 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1279 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_CProp3 x1 x2
           (_x_708 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_708)
              (_z1279 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_708) =>
               P _x_708))
           H1 Hterm).

def Prod_inv_rect_CProp2 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1284 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1285 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1284 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1285 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1285 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_CProp2 x1 x2
           (_x_710 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_710)
              (_z1285 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_710) =>
               P _x_710))
           H1 Hterm).

def Prod_inv_rect_CProp1 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1290 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1291 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1290 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1291 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1291 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_CProp1 x1 x2
           (_x_712 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_712)
              (_z1291 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_712) =>
               P _x_712))
           H1 Hterm).

def Prod_inv_rect_CProp0 :
      x1 : cic.Univ univs.Type0 ->
      x2 : cic.Univ univs.Type0 ->
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
      P :
        (_z1296 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) ->
      _H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1297 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) ->
      cic.Term cic.prop (P Hterm) :=
      x1 : cic.Univ univs.Type0 =>
      x2 : cic.Univ univs.Type0 =>
      Hterm : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
      P :
        (_z1296 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) ->
         cic.Univ cic.prop) =>
      H1 :
        (_fst : cic.Term univs.Type0 x1 ->
         _snd : cic.Term univs.Type0 x2 ->
         _z1297 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod x1 x2))
                Hterm (matita_basics_types.mk_Prod x1 x2 _fst _snd)) ->
         cic.Term cic.prop (P (matita_basics_types.mk_Prod x1 x2 _fst _snd))) =>
      (Hcut :
         (_z1297 :
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm Hterm) ->
          cic.Term cic.prop (P Hterm)) =>
       Hcut
         (matita_basics_logic.refl
            (cic.lift univs.Type0 univs.Type2
               (matita_basics_types.Prod x1 x2))
            Hterm))
        (matita_basics_types.Prod_rect_CProp0 x1 x2
           (_x_714 : cic.Term univs.Type0 (matita_basics_types.Prod x1 x2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod x1 x2))
                 Hterm _x_714)
              (_z1297 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod x1 x2))
                      Hterm _x_714) =>
               P _x_714))
           H1 Hterm).

def Prod_discr :
      a1 : cic.Univ univs.Type0 ->
      a2 : cic.Univ univs.Type0 ->
      x : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) ->
      y : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) ->
      _e :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.Prod a1 a2))
             x y) ->
      cic.Term univs.Type2
        (matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
            cic.univ univs.Type2)
           (t0 : cic.Term univs.Type0 a1 =>
            t1 : cic.Term univs.Type0 a2 =>
            matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               u1 : cic.Term univs.Type0 a2 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                ((x0 : cic.Term univs.Type0 a1 =>
                                  p0 :
                                    cic.Term cic.prop
                                      (matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2 a1)
                                         (matita_basics_logic.R0 a1 t0) x0) =>
                                  a2) u0 e0))
                             (matita_basics_logic.R1
                                (cic.lift univs.Type0 univs.Type2 a1) t0
                                (x0 : cic.Term univs.Type0 a1 =>
                                 p0 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0 x0) =>
                                 a2)
                                t1 u0 e0)
                             u1)
                          (_e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x0 : cic.Term univs.Type0 a1 =>
                                      p0 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x0) =>
                                      a2)
                                     t1 u0 e0)
                                  u1) =>
                           P)))
                    (_z45 :
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        _e1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  ((x0 : cic.Term univs.Type0 a1 =>
                                    p0 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           (matita_basics_logic.R0 a1 t0) x0) =>
                                    a2) u0 e0))
                               (matita_basics_logic.R1
                                  (cic.lift univs.Type0 univs.Type2 a1) t0
                                  (x0 : cic.Term univs.Type0 a1 =>
                                   p0 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             a1)
                                          t0 x0) =>
                                   a2)
                                  t1 u0 e0)
                               u1) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              y)
           x)
      :=
      a1 : cic.Univ univs.Type0 =>
      a2 : cic.Univ univs.Type0 =>
      x : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
      y : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
      Deq :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2
                (matita_basics_types.Prod a1 a2))
             x y) =>
      matita_basics_logic.eq_rect_Type2
        (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod a1 a2)) x
        (x_13 : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
         _x_14 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod a1 a2))
                x x_13) =>
         matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2)
           (__ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
            cic.univ univs.Type2)
           (t0 : cic.Term univs.Type0 a1 =>
            t1 : cic.Term univs.Type0 a2 =>
            matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2)
              (__ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
               cic.univ univs.Type2)
              (u0 : cic.Term univs.Type0 a1 =>
               u1 : cic.Term univs.Type0 a2 =>
               cic.prod (cic.succ univs.Type1) univs.Type1
                 (cic.univ univs.Type1)
                 (P : cic.Univ univs.Type1 =>
                  cic.prod univs.Type1 univs.Type1
                    (cic.prod cic.prop univs.Type1
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2 a1)
                          (matita_basics_logic.R0 a1 t0) u0)
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) =>
                        cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                ((x0 : cic.Term univs.Type0 a1 =>
                                  p0 :
                                    cic.Term cic.prop
                                      (matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2 a1)
                                         (matita_basics_logic.R0 a1 t0) x0) =>
                                  a2) u0 e0))
                             (matita_basics_logic.R1
                                (cic.lift univs.Type0 univs.Type2 a1) t0
                                (x0 : cic.Term univs.Type0 a1 =>
                                 p0 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0 x0) =>
                                 a2)
                                t1 u0 e0)
                             u1)
                          (_e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x0 : cic.Term univs.Type0 a1 =>
                                      p0 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x0) =>
                                      a2)
                                     t1 u0 e0)
                                  u1) =>
                           P)))
                    (_z45 :
                       (e0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 a1)
                               (matita_basics_logic.R0 a1 t0) u0) ->
                        _e1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  ((x0 : cic.Term univs.Type0 a1 =>
                                    p0 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           (matita_basics_logic.R0 a1 t0) x0) =>
                                    a2) u0 e0))
                               (matita_basics_logic.R1
                                  (cic.lift univs.Type0 univs.Type2 a1) t0
                                  (x0 : cic.Term univs.Type0 a1 =>
                                   p0 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             a1)
                                          t0 x0) =>
                                   a2)
                                  t1 u0 e0)
                               u1) ->
                        cic.Term univs.Type1 P) =>
                     P)))
              x_13)
           x)
        (matita_basics_types.match_Prod a1 a2 univs.Type2
           (__ : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
            matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2)
              (_0 : cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
               cic.univ univs.Type2)
              (t0 : cic.Term univs.Type0 a1 =>
               t1 : cic.Term univs.Type0 a2 =>
               matita_basics_types.match_Prod a1 a2 (cic.succ univs.Type2)
                 (_0 :
                    cic.Term univs.Type0 (matita_basics_types.Prod a1 a2) =>
                  cic.univ univs.Type2)
                 (u0 : cic.Term univs.Type0 a1 =>
                  u1 : cic.Term univs.Type0 a2 =>
                  cic.prod (cic.succ univs.Type1) univs.Type1
                    (cic.univ univs.Type1)
                    (P : cic.Univ univs.Type1 =>
                     cic.prod univs.Type1 univs.Type1
                       (cic.prod cic.prop univs.Type1
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2 a1)
                             (matita_basics_logic.R0 a1 t0) u0)
                          (e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) =>
                           cic.prod cic.prop univs.Type1
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   ((x0 : cic.Term univs.Type0 a1 =>
                                     p0 :
                                       cic.Term cic.prop
                                         (matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               a1)
                                            (matita_basics_logic.R0 a1 t0) x0) =>
                                     a2) u0 e0))
                                (matita_basics_logic.R1
                                   (cic.lift univs.Type0 univs.Type2 a1) t0
                                   (x0 : cic.Term univs.Type0 a1 =>
                                    p0 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              a1)
                                           t0 x0) =>
                                    a2)
                                   t1 u0 e0)
                                u1)
                             (_e1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        ((x0 : cic.Term univs.Type0 a1 =>
                                          p0 :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2 a1)
                                                 (matita_basics_logic.R0 a1
                                                    t0)
                                                 x0) =>
                                          a2) u0 e0))
                                     (matita_basics_logic.R1
                                        (cic.lift univs.Type0 univs.Type2 a1)
                                        t0
                                        (x0 : cic.Term univs.Type0 a1 =>
                                         p0 :
                                           cic.Term cic.prop
                                             (matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2 a1)
                                                t0 x0) =>
                                         a2)
                                        t1 u0 e0)
                                     u1) =>
                              P)))
                       (_z45 :
                          (e0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2 a1)
                                  (matita_basics_logic.R0 a1 t0) u0) ->
                           _e1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     ((x0 : cic.Term univs.Type0 a1 =>
                                       p0 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2 a1)
                                              (matita_basics_logic.R0 a1 t0)
                                              x0) =>
                                       a2) u0 e0))
                                  (matita_basics_logic.R1
                                     (cic.lift univs.Type0 univs.Type2 a1) t0
                                     (x0 : cic.Term univs.Type0 a1 =>
                                      p0 :
                                        cic.Term cic.prop
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2 a1)
                                             t0 x0) =>
                                      a2)
                                     t1 u0 e0)
                                  u1) ->
                           cic.Term univs.Type1 P) =>
                        P)))
                 __)
              __)
           (a0 : cic.Term univs.Type0 a1 =>
            a10 : cic.Term univs.Type0 a2 =>
            P : cic.Univ univs.Type1 =>
            DH :
              (e0 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 a1)
                      (matita_basics_logic.R0 a1 a0) a0) ->
               _e1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 a2)
                      (matita_basics_logic.R1
                         (cic.lift univs.Type0 univs.Type2 a1) a0
                         (x0 : cic.Term univs.Type0 a1 =>
                          p0 :
                            cic.Term cic.prop
                              (matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2 a1) a0 x0) =>
                          a2)
                         a10 a0 e0)
                      a10) ->
               cic.Term univs.Type1 P) =>
            DH
              (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 a1)
                 (matita_basics_logic.R0 a1 a0))
              (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 a2)
                 (matita_basics_logic.R1
                    (cic.lift univs.Type0 univs.Type2 a1) a0
                    (x0 : cic.Term univs.Type0 a1 =>
                     p0 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2 a1) a0 x0) =>
                     a2)
                    a10 a0
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2 a1)
                       (matita_basics_logic.R0 a1 a0)))))
           x)
        y Deq.

def eq_pair_fst_snd :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      p : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
           p
           (matita_basics_types.mk_Prod A B (matita_basics_types.fst A B p)
              (matita_basics_types.snd A B p)))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      p : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
           __
           (matita_basics_types.mk_Prod A B (matita_basics_types.fst A B __)
              (matita_basics_types.snd A B __)))
        (_fst : cic.Term univs.Type0 A =>
         _snd : cic.Term univs.Type0 B =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
           (matita_basics_types.mk_Prod A B _fst _snd))
        p.

def fst_eq :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      a : cic.Term univs.Type0 A ->
      b : cic.Term univs.Type0 B ->
      cic.Term cic.prop
        (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A)
           (matita_basics_types.fst A B (matita_basics_types.mk_Prod A B a b))
           a)
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      a : cic.Term univs.Type0 A =>
      _b : cic.Term univs.Type0 B =>
      matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 A) a.

def snd_eq :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      a : cic.Term univs.Type0 A ->
      b : cic.Term univs.Type0 B ->
      cic.Term cic.prop
        (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
           (matita_basics_types.snd A B (matita_basics_types.mk_Prod A B a b))
           b)
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      _a : cic.Term univs.Type0 A =>
      b : cic.Term univs.Type0 B =>
      matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 B) b.

def contract_pair :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      e : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
           (matita_basics_types.match_Prod A B univs.Type0
              (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
               matita_basics_types.Prod A B)
              (a : cic.Term univs.Type0 A =>
               b : cic.Term univs.Type0 B =>
               matita_basics_types.mk_Prod A B a b)
              e)
           e)
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
           (matita_basics_types.match_Prod A B univs.Type0
              (_0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
               matita_basics_types.Prod A B)
              (a : cic.Term univs.Type0 A =>
               b : cic.Term univs.Type0 B =>
               matita_basics_types.mk_Prod A B a b)
              __)
           __)
        (_fst : cic.Term univs.Type0 A =>
         _snd : cic.Term univs.Type0 B =>
         matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
           (matita_basics_types.match_Prod A B univs.Type0
              (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
               matita_basics_types.Prod A B)
              (a : cic.Term univs.Type0 A =>
               b : cic.Term univs.Type0 B =>
               matita_basics_types.mk_Prod A B a b)
              (matita_basics_types.mk_Prod A B _fst _snd)))
        _clearme.

def extract_pair :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      C : cic.Univ univs.Type0 ->
      D : cic.Univ univs.Type0 ->
      u : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      Q :
        (__ : cic.Term univs.Type0 A ->
         __1 : cic.Term univs.Type0 B ->
         cic.Term univs.Type0 (matita_basics_types.Prod C D)) ->
      x : cic.Term univs.Type0 C ->
      y : cic.Term univs.Type0 D ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod C D))
             (matita_basics_types.match_Prod A B univs.Type0
                (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                 matita_basics_types.Prod C D)
                (a : cic.Term univs.Type0 A =>
                 b : cic.Term univs.Type0 B => Q a b)
                u)
             (matita_basics_types.mk_Prod C D x y)) ->
      cic.Term cic.prop
        (matita_basics_logic.ex A
           (a : cic.Term univs.Type0 A =>
            matita_basics_logic.ex B
              (b : cic.Term univs.Type0 B =>
               matita_basics_logic.And
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod A B))
                    (matita_basics_types.mk_Prod A B a b) u)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod C D))
                    (Q a b) (matita_basics_types.mk_Prod C D x y)))))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      C : cic.Univ univs.Type0 =>
      D : cic.Univ univs.Type0 =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         cic.prod univs.Type0 cic.prop
           (cic.prod univs.Type0 univs.Type0 A
              (__1 : cic.Term univs.Type0 A =>
               cic.prod univs.Type0 univs.Type0 B
                 (__2 : cic.Term univs.Type0 B =>
                  matita_basics_types.Prod C D)))
           (Q :
              (__1 : cic.Term univs.Type0 A ->
               __2 : cic.Term univs.Type0 B ->
               cic.Term univs.Type0 (matita_basics_types.Prod C D)) =>
            cic.prod univs.Type0 cic.prop C
              (x : cic.Term univs.Type0 C =>
               cic.prod univs.Type0 cic.prop D
                 (y : cic.Term univs.Type0 D =>
                  cic.prod cic.prop cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          (matita_basics_types.Prod C D))
                       (matita_basics_types.match_Prod A B univs.Type0
                          (_0 :
                             cic.Term univs.Type0
                               (matita_basics_types.Prod A B) =>
                           matita_basics_types.Prod C D)
                          (a : cic.Term univs.Type0 A =>
                           b : cic.Term univs.Type0 B => Q a b)
                          __)
                       (matita_basics_types.mk_Prod C D x y))
                    (__1 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               (matita_basics_types.Prod C D))
                            (matita_basics_types.match_Prod A B univs.Type0
                               (_0 :
                                  cic.Term univs.Type0
                                    (matita_basics_types.Prod A B) =>
                                matita_basics_types.Prod C D)
                               (a : cic.Term univs.Type0 A =>
                                b : cic.Term univs.Type0 B => Q a b)
                               __)
                            (matita_basics_types.mk_Prod C D x y)) =>
                     matita_basics_logic.ex A
                       (a : cic.Term univs.Type0 A =>
                        matita_basics_logic.ex B
                          (b : cic.Term univs.Type0 B =>
                           matita_basics_logic.And
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   (matita_basics_types.Prod A B))
                                (matita_basics_types.mk_Prod A B a b) __)
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   (matita_basics_types.Prod C D))
                                (Q a b) (matita_basics_types.mk_Prod C D x y)))))))))
        (a : cic.Term univs.Type0 A =>
         b : cic.Term univs.Type0 B =>
         Q :
           (__ : cic.Term univs.Type0 A ->
            __1 : cic.Term univs.Type0 B ->
            cic.Term univs.Type0 (matita_basics_types.Prod C D)) =>
         x : cic.Term univs.Type0 C =>
         y : cic.Term univs.Type0 D =>
         E1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod C D))
                (Q a b) (matita_basics_types.mk_Prod C D x y)) =>
         matita_basics_logic.ex_intro A
           (a0 : cic.Term univs.Type0 A =>
            matita_basics_logic.ex B
              (b0 : cic.Term univs.Type0 B =>
               matita_basics_logic.And
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod A B))
                    (matita_basics_types.mk_Prod A B a0 b0)
                    (matita_basics_types.mk_Prod A B a b))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod C D))
                    (Q a0 b0) (matita_basics_types.mk_Prod C D x y))))
           a
           (matita_basics_logic.ex_intro B
              (b0 : cic.Term univs.Type0 B =>
               matita_basics_logic.And
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod A B))
                    (matita_basics_types.mk_Prod A B a b0)
                    (matita_basics_types.mk_Prod A B a b))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod C D))
                    (Q a b0) (matita_basics_types.mk_Prod C D x y)))
              b
              (matita_basics_logic.conj
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod A B))
                    (matita_basics_types.mk_Prod A B a b)
                    (matita_basics_types.mk_Prod A B a b))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod C D))
                    (Q a b) (matita_basics_types.mk_Prod C D x y))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod A B))
                    (matita_basics_types.mk_Prod A B a b))
                 E1)))
        _clearme.

def breakup_pair :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      C : cic.Univ univs.Type0 ->
      x : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      R : (__ : cic.Term univs.Type0 C -> cic.Univ cic.prop) ->
      P :
        (__ : cic.Term univs.Type0 A ->
         __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) ->
      __ :
        cic.Term cic.prop
          (R
             (P (matita_basics_types.fst A B x)
                (matita_basics_types.snd A B x))) ->
      cic.Term cic.prop
        (R
           (matita_basics_types.match_Prod A B univs.Type0
              (_0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) => C)
              (a : cic.Term univs.Type0 A =>
               b : cic.Term univs.Type0 B => P a b)
              x))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      C : cic.Univ univs.Type0 =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         cic.prod univs.Type0 cic.prop
           (cic.prod univs.Type0 (cic.type cic.z) C
              (__1 : cic.Term univs.Type0 C => cic.univ cic.prop))
           (R : (__1 : cic.Term univs.Type0 C -> cic.Univ cic.prop) =>
            cic.prod univs.Type0 cic.prop
              (cic.prod univs.Type0 univs.Type0 A
                 (__1 : cic.Term univs.Type0 A =>
                  cic.prod univs.Type0 univs.Type0 B
                    (__2 : cic.Term univs.Type0 B => C)))
              (P :
                 (__1 : cic.Term univs.Type0 A ->
                  __2 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) =>
               cic.prod cic.prop cic.prop
                 (R
                    (P (matita_basics_types.fst A B __)
                       (matita_basics_types.snd A B __)))
                 (__1 :
                    cic.Term cic.prop
                      (R
                         (P (matita_basics_types.fst A B __)
                            (matita_basics_types.snd A B __))) =>
                  R
                    (matita_basics_types.match_Prod A B univs.Type0
                       (_0 :
                          cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                        C)
                       (a : cic.Term univs.Type0 A =>
                        b : cic.Term univs.Type0 B => P a b)
                       __)))))
        (_fst : cic.Term univs.Type0 A =>
         _snd : cic.Term univs.Type0 B =>
         R : (__ : cic.Term univs.Type0 C -> cic.Univ cic.prop) =>
         P :
           (__ : cic.Term univs.Type0 A ->
            __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) =>
         auto : cic.Term cic.prop (R (P _fst _snd)) => auto)
        _clearme.

def pair_elim :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      C : cic.Univ univs.Type0 ->
      T :
        (__ : cic.Term univs.Type0 A ->
         __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) ->
      p : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      P :
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
         __1 : cic.Term univs.Type0 C -> cic.Univ cic.prop) ->
      __ :
        (lft : cic.Term univs.Type0 A ->
         rgt : cic.Term univs.Type0 B ->
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod A B))
                p (matita_basics_types.mk_Prod A B lft rgt)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt))) ->
      cic.Term cic.prop
        (P p
           (matita_basics_types.match_Prod A B univs.Type0
              (_0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) => C)
              (lft : cic.Term univs.Type0 A =>
               rgt : cic.Term univs.Type0 B => T lft rgt)
              p))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      C : cic.Univ univs.Type0 =>
      T :
        (__ : cic.Term univs.Type0 A ->
         __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         cic.prod univs.Type0 cic.prop
           (cic.prod univs.Type0 univs.Type0 (matita_basics_types.Prod A B)
              (__1 : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
               cic.prod univs.Type0 (cic.type cic.z) C
                 (__2 : cic.Term univs.Type0 C => cic.univ cic.prop)))
           (P :
              (__1 : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
               __2 : cic.Term univs.Type0 C -> cic.Univ cic.prop) =>
            cic.prod cic.prop cic.prop
              (cic.prod univs.Type0 cic.prop A
                 (lft : cic.Term univs.Type0 A =>
                  cic.prod univs.Type0 cic.prop B
                    (rgt : cic.Term univs.Type0 B =>
                     cic.prod cic.prop cic.prop
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             (matita_basics_types.Prod A B))
                          __ (matita_basics_types.mk_Prod A B lft rgt))
                       (__1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  (matita_basics_types.Prod A B))
                               __ (matita_basics_types.mk_Prod A B lft rgt)) =>
                        P (matita_basics_types.mk_Prod A B lft rgt)
                          (T lft rgt)))))
              (__1 :
                 (lft : cic.Term univs.Type0 A ->
                  rgt : cic.Term univs.Type0 B ->
                  __1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.Prod A B))
                         __ (matita_basics_types.mk_Prod A B lft rgt)) ->
                  cic.Term cic.prop
                    (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt))) =>
               P __
                 (matita_basics_types.match_Prod A B univs.Type0
                    (_0 :
                       cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                     C)
                    (lft : cic.Term univs.Type0 A =>
                     rgt : cic.Term univs.Type0 B => T lft rgt)
                    __))))
        (_fst : cic.Term univs.Type0 A =>
         _snd : cic.Term univs.Type0 B =>
         P :
           (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
            __1 : cic.Term univs.Type0 C -> cic.Univ cic.prop) =>
         auto :
           (lft : cic.Term univs.Type0 A ->
            rgt : cic.Term univs.Type0 B ->
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.Prod A B))
                   (matita_basics_types.mk_Prod A B _fst _snd)
                   (matita_basics_types.mk_Prod A B lft rgt)) ->
            cic.Term cic.prop
              (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt))) =>
         auto _fst _snd
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2
                 (matita_basics_types.Prod A B))
              (matita_basics_types.mk_Prod A B _fst _snd)))
        _clearme.

def pair_elim2 :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      C : cic.Univ univs.Type0 ->
      C' : cic.Univ univs.Type0 ->
      T :
        (__ : cic.Term univs.Type0 A ->
         __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) ->
      T' :
        (__ : cic.Term univs.Type0 A ->
         __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C') ->
      p : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      P :
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
         __1 : cic.Term univs.Type0 C ->
         __2 : cic.Term univs.Type0 C' -> cic.Univ cic.prop) ->
      __ :
        (lft : cic.Term univs.Type0 A ->
         rgt : cic.Term univs.Type0 B ->
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod A B))
                p (matita_basics_types.mk_Prod A B lft rgt)) ->
         cic.Term cic.prop
           (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt)
              (T' lft rgt))) ->
      cic.Term cic.prop
        (P p
           (matita_basics_types.match_Prod A B univs.Type0
              (_0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) => C)
              (lft : cic.Term univs.Type0 A =>
               rgt : cic.Term univs.Type0 B => T lft rgt)
              p)
           (matita_basics_types.match_Prod A B univs.Type0
              (_0 : cic.Term univs.Type0 (matita_basics_types.Prod A B) => C')
              (lft : cic.Term univs.Type0 A =>
               rgt : cic.Term univs.Type0 B => T' lft rgt)
              p))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      C : cic.Univ univs.Type0 =>
      C' : cic.Univ univs.Type0 =>
      T :
        (__ : cic.Term univs.Type0 A ->
         __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C) =>
      T' :
        (__ : cic.Term univs.Type0 A ->
         __1 : cic.Term univs.Type0 B -> cic.Term univs.Type0 C') =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         cic.prod univs.Type0 cic.prop
           (cic.prod univs.Type0 univs.Type0 (matita_basics_types.Prod A B)
              (__1 : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
               cic.prod univs.Type0 univs.Type0 C
                 (__2 : cic.Term univs.Type0 C =>
                  cic.prod univs.Type0 (cic.type cic.z) C'
                    (__3 : cic.Term univs.Type0 C' => cic.univ cic.prop))))
           (P :
              (__1 : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
               __2 : cic.Term univs.Type0 C ->
               __3 : cic.Term univs.Type0 C' -> cic.Univ cic.prop) =>
            cic.prod cic.prop cic.prop
              (cic.prod univs.Type0 cic.prop A
                 (lft : cic.Term univs.Type0 A =>
                  cic.prod univs.Type0 cic.prop B
                    (rgt : cic.Term univs.Type0 B =>
                     cic.prod cic.prop cic.prop
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             (matita_basics_types.Prod A B))
                          __ (matita_basics_types.mk_Prod A B lft rgt))
                       (__1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  (matita_basics_types.Prod A B))
                               __ (matita_basics_types.mk_Prod A B lft rgt)) =>
                        P (matita_basics_types.mk_Prod A B lft rgt)
                          (T lft rgt) (T' lft rgt)))))
              (__1 :
                 (lft : cic.Term univs.Type0 A ->
                  rgt : cic.Term univs.Type0 B ->
                  __1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.Prod A B))
                         __ (matita_basics_types.mk_Prod A B lft rgt)) ->
                  cic.Term cic.prop
                    (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt)
                       (T' lft rgt))) =>
               P __
                 (matita_basics_types.match_Prod A B univs.Type0
                    (_0 :
                       cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                     C)
                    (lft : cic.Term univs.Type0 A =>
                     rgt : cic.Term univs.Type0 B => T lft rgt)
                    __)
                 (matita_basics_types.match_Prod A B univs.Type0
                    (_0 :
                       cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                     C')
                    (lft : cic.Term univs.Type0 A =>
                     rgt : cic.Term univs.Type0 B => T' lft rgt)
                    __))))
        (_fst : cic.Term univs.Type0 A =>
         _snd : cic.Term univs.Type0 B =>
         P :
           (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
            __1 : cic.Term univs.Type0 C ->
            __2 : cic.Term univs.Type0 C' -> cic.Univ cic.prop) =>
         auto :
           (lft : cic.Term univs.Type0 A ->
            rgt : cic.Term univs.Type0 B ->
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.Prod A B))
                   (matita_basics_types.mk_Prod A B _fst _snd)
                   (matita_basics_types.mk_Prod A B lft rgt)) ->
            cic.Term cic.prop
              (P (matita_basics_types.mk_Prod A B lft rgt) (T lft rgt)
                 (T' lft rgt))) =>
         auto _fst _snd
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2
                 (matita_basics_types.Prod A B))
              (matita_basics_types.mk_Prod A B _fst _snd)))
        _clearme.

def pair_eq1 :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      a1 : cic.Term univs.Type0 A ->
      a2 : cic.Term univs.Type0 A ->
      b1 : cic.Term univs.Type0 B ->
      b2 : cic.Term univs.Type0 B ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
             (matita_basics_types.mk_Prod A B a1 b1)
             (matita_basics_types.mk_Prod A B a2 b2)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) a1 a2)
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      a1 : cic.Term univs.Type0 A =>
      a2 : cic.Term univs.Type0 A =>
      b1 : cic.Term univs.Type0 B =>
      b2 : cic.Term univs.Type0 B =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
             (matita_basics_types.mk_Prod A B a1 b1)
             (matita_basics_types.mk_Prod A B a2 b2)) =>
      matita_basics_types.Prod_discr A B
        (matita_basics_types.mk_Prod A B a1 b1)
        (matita_basics_types.mk_Prod A B a2 b2) H
        (cic.lift cic.prop univs.Type1
           (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) a1 a2))
        (e0 :
           cic.Term cic.prop
             (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A)
                (matita_basics_logic.R0 A a1) a2) =>
         matita_basics_logic.eq_ind_r (cic.lift univs.Type0 univs.Type2 A) a2
           (x : cic.Term univs.Type0 A =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A)
                   x a2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod A B))
                 (matita_basics_types.mk_Prod A B x b1)
                 (matita_basics_types.mk_Prod A B a2 b2))
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod A B))
                      (matita_basics_types.mk_Prod A B x b1)
                      (matita_basics_types.mk_Prod A B a2 b2)) =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
                    (matita_basics_logic.R1
                       (cic.lift univs.Type0 univs.Type2 A) x
                       (x0 : cic.Term univs.Type0 A =>
                        p0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 A) x x0) =>
                        B)
                       b1 a2 __)
                    b2)
                 (_e1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2 B)
                         (matita_basics_logic.R1
                            (cic.lift univs.Type0 univs.Type2 A) x
                            (x0 : cic.Term univs.Type0 A =>
                             p0 :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2 A) x x0) =>
                             B)
                            b1 a2 __)
                         b2) =>
                  matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A)
                    x a2)))
           (H0 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.Prod A B))
                   (matita_basics_types.mk_Prod A B a2 b1)
                   (matita_basics_types.mk_Prod A B a2 b2)) =>
            e00 :
              cic.Term cic.prop
                (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
                   (matita_basics_logic.R1
                      (cic.lift univs.Type0 univs.Type2 A) a2
                      (x0 : cic.Term univs.Type0 A =>
                       p0 :
                         cic.Term cic.prop
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2 A) a2 x0) =>
                       B)
                      b1 a2
                      (matita_basics_logic.refl
                         (cic.lift univs.Type0 univs.Type2 A) a2))
                   b2) =>
            matita_basics_logic.eq_ind_r (cic.lift univs.Type0 univs.Type2 B)
              b2
              (x : cic.Term univs.Type0 B =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 B) x b2) =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod A B))
                    (matita_basics_types.mk_Prod A B a2 x)
                    (matita_basics_types.mk_Prod A B a2 b2))
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.Prod A B))
                         (matita_basics_types.mk_Prod A B a2 x)
                         (matita_basics_types.mk_Prod A B a2 b2)) =>
                  matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A)
                    a2 a2))
              (H1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod A B))
                      (matita_basics_types.mk_Prod A B a2 b2)
                      (matita_basics_types.mk_Prod A B a2 b2)) =>
               matita_basics_logic.streicherK
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod A B))
                 (matita_basics_types.mk_Prod A B a2 b2)
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.Prod A B))
                         (matita_basics_types.mk_Prod A B a2 b2)
                         (matita_basics_types.mk_Prod A B a2 b2)) =>
                  cic.lift cic.prop univs.Type2
                    ((__1 :
                        cic.Term cic.prop
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                (matita_basics_types.Prod A B))
                             (matita_basics_types.mk_Prod A B a2 b2)
                             (matita_basics_types.mk_Prod A B a2 b2)) =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2 A) a2 a2)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2 A) a2)
                 H1)
              b1 e00 H0)
           a1 e0 H).

def pair_eq2 :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      a1 : cic.Term univs.Type0 A ->
      a2 : cic.Term univs.Type0 A ->
      b1 : cic.Term univs.Type0 B ->
      b2 : cic.Term univs.Type0 B ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
             (matita_basics_types.mk_Prod A B a1 b1)
             (matita_basics_types.mk_Prod A B a2 b2)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b1 b2)
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      a1 : cic.Term univs.Type0 A =>
      a2 : cic.Term univs.Type0 A =>
      b1 : cic.Term univs.Type0 B =>
      b2 : cic.Term univs.Type0 B =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
             (matita_basics_types.mk_Prod A B a1 b1)
             (matita_basics_types.mk_Prod A B a2 b2)) =>
      matita_basics_types.Prod_discr A B
        (matita_basics_types.mk_Prod A B a1 b1)
        (matita_basics_types.mk_Prod A B a2 b2) H
        (cic.lift cic.prop univs.Type1
           (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b1 b2))
        (e0 :
           cic.Term cic.prop
             (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A)
                (matita_basics_logic.R0 A a1) a2) =>
         matita_basics_logic.eq_ind_r (cic.lift univs.Type0 univs.Type2 A) a2
           (x : cic.Term univs.Type0 A =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A)
                   x a2) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod A B))
                 (matita_basics_types.mk_Prod A B x b1)
                 (matita_basics_types.mk_Prod A B a2 b2))
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod A B))
                      (matita_basics_types.mk_Prod A B x b1)
                      (matita_basics_types.mk_Prod A B a2 b2)) =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
                    (matita_basics_logic.R1
                       (cic.lift univs.Type0 univs.Type2 A) x
                       (x0 : cic.Term univs.Type0 A =>
                        p0 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2 A) x x0) =>
                        B)
                       b1 a2 __)
                    b2)
                 (_e1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2 B)
                         (matita_basics_logic.R1
                            (cic.lift univs.Type0 univs.Type2 A) x
                            (x0 : cic.Term univs.Type0 A =>
                             p0 :
                               cic.Term cic.prop
                                 (matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2 A) x x0) =>
                             B)
                            b1 a2 __)
                         b2) =>
                  matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
                    b1 b2)))
           (H0 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.Prod A B))
                   (matita_basics_types.mk_Prod A B a2 b1)
                   (matita_basics_types.mk_Prod A B a2 b2)) =>
            e00 :
              cic.Term cic.prop
                (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
                   (matita_basics_logic.R1
                      (cic.lift univs.Type0 univs.Type2 A) a2
                      (x0 : cic.Term univs.Type0 A =>
                       p0 :
                         cic.Term cic.prop
                           (matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2 A) a2 x0) =>
                       B)
                      b1 a2
                      (matita_basics_logic.refl
                         (cic.lift univs.Type0 univs.Type2 A) a2))
                   b2) =>
            matita_basics_logic.eq_ind_r (cic.lift univs.Type0 univs.Type2 B)
              b2
              (x : cic.Term univs.Type0 B =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2 B) x b2) =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       (matita_basics_types.Prod A B))
                    (matita_basics_types.mk_Prod A B a2 x)
                    (matita_basics_types.mk_Prod A B a2 b2))
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.Prod A B))
                         (matita_basics_types.mk_Prod A B a2 x)
                         (matita_basics_types.mk_Prod A B a2 b2)) =>
                  matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B)
                    x b2))
              (H1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         (matita_basics_types.Prod A B))
                      (matita_basics_types.mk_Prod A B a2 b2)
                      (matita_basics_types.mk_Prod A B a2 b2)) =>
               matita_basics_logic.streicherK
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod A B))
                 (matita_basics_types.mk_Prod A B a2 b2)
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            (matita_basics_types.Prod A B))
                         (matita_basics_types.mk_Prod A B a2 b2)
                         (matita_basics_types.mk_Prod A B a2 b2)) =>
                  cic.lift cic.prop univs.Type2
                    ((__1 :
                        cic.Term cic.prop
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                (matita_basics_types.Prod A B))
                             (matita_basics_types.mk_Prod A B a2 b2)
                             (matita_basics_types.mk_Prod A B a2 b2)) =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2 B) b2 b2)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2 B) b2)
                 H1)
              b1 e00 H0)
           a1 e0 H).

def pair_destruct_1 :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      a : cic.Term univs.Type0 A ->
      b : cic.Term univs.Type0 B ->
      c : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
             (matita_basics_types.mk_Prod A B a b) c) ->
      cic.Term cic.prop
        (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) a
           (matita_basics_types.fst A B c))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      a : cic.Term univs.Type0 A =>
      b : cic.Term univs.Type0 B =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2
                 (matita_basics_types.Prod A B))
              (matita_basics_types.mk_Prod A B a b) __)
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.Prod A B))
                   (matita_basics_types.mk_Prod A B a b) __) =>
            matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) a
              (matita_basics_types.fst A B __)))
        (_fst : cic.Term univs.Type0 A =>
         _snd : cic.Term univs.Type0 B =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod A B))
                (matita_basics_types.mk_Prod A B a b)
                (matita_basics_types.mk_Prod A B _fst _snd)) =>
         matita_basics_logic.rewrite_r (cic.lift univs.Type0 univs.Type2 A)
           _fst
           (__ : cic.Term univs.Type0 A =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 A =>
                matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 A) x
                  _fst)
                 __))
           (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 A)
              _fst)
           a
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 A)
              (matita_basics_types.fst A B
                 (matita_basics_types.mk_Prod A B a b))
              (__ : cic.Term univs.Type0 A =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 A =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2 A) x _fst)
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod A B))
                 (matita_basics_types.mk_Prod A B _fst _snd)
                 (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                  cic.lift cic.prop univs.Type2
                    ((x :
                        cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2 A)
                        (matita_basics_types.fst A B x) _fst)
                       __))
                 (matita_basics_types.fst_eq A B _fst _snd)
                 (matita_basics_types.mk_Prod A B a b) auto)
              a (matita_basics_types.fst_eq A B a b)))
        _clearme.

def pair_destruct_2 :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      a : cic.Term univs.Type0 A ->
      b : cic.Term univs.Type0 B ->
      c : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 (matita_basics_types.Prod A B))
             (matita_basics_types.mk_Prod A B a b) c) ->
      cic.Term cic.prop
        (matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b
           (matita_basics_types.snd A B c))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      a : cic.Term univs.Type0 A =>
      b : cic.Term univs.Type0 B =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B cic.prop
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2
                 (matita_basics_types.Prod A B))
              (matita_basics_types.mk_Prod A B a b) __)
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      (matita_basics_types.Prod A B))
                   (matita_basics_types.mk_Prod A B a b) __) =>
            matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) b
              (matita_basics_types.snd A B __)))
        (_fst : cic.Term univs.Type0 A =>
         _snd : cic.Term univs.Type0 B =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2
                   (matita_basics_types.Prod A B))
                (matita_basics_types.mk_Prod A B a b)
                (matita_basics_types.mk_Prod A B _fst _snd)) =>
         matita_basics_logic.rewrite_r (cic.lift univs.Type0 univs.Type2 B)
           _snd
           (__ : cic.Term univs.Type0 B =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 B =>
                matita_basics_logic.eq (cic.lift univs.Type0 univs.Type2 B) x
                  _snd)
                 __))
           (matita_basics_logic.refl (cic.lift univs.Type0 univs.Type2 B)
              _snd)
           b
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 B)
              (matita_basics_types.snd A B
                 (matita_basics_types.mk_Prod A B a b))
              (__ : cic.Term univs.Type0 B =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 B =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2 B) x _snd)
                    __))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2
                    (matita_basics_types.Prod A B))
                 (matita_basics_types.mk_Prod A B _fst _snd)
                 (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                  cic.lift cic.prop univs.Type2
                    ((x :
                        cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2 B)
                        (matita_basics_types.snd A B x) _snd)
                       __))
                 (matita_basics_types.snd_eq A B _fst _snd)
                 (matita_basics_types.mk_Prod A B a b) auto)
              b (matita_basics_types.snd_eq A B a b)))
        _clearme.

def coerc_pair_sigma :
      A : cic.Univ univs.Type0 ->
      B : cic.Univ univs.Type0 ->
      P : (__ : cic.Term univs.Type0 B -> cic.Univ cic.prop) ->
      p : cic.Term univs.Type0 (matita_basics_types.Prod A B) ->
      __ : cic.Term cic.prop (P (matita_basics_types.snd A B p)) ->
      cic.Term univs.Type0
        (matita_basics_types.Prod A
           (matita_basics_types.Sig B (x : cic.Term univs.Type0 B => P x)))
      :=
      A : cic.Univ univs.Type0 =>
      B : cic.Univ univs.Type0 =>
      P : (__ : cic.Term univs.Type0 B -> cic.Univ cic.prop) =>
      _clearme : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
      matita_basics_types.match_Prod A B univs.Type0
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod A B) =>
         cic.prod cic.prop univs.Type0 (P (matita_basics_types.snd A B __))
           (__1 : cic.Term cic.prop (P (matita_basics_types.snd A B __)) =>
            matita_basics_types.Prod A
              (matita_basics_types.Sig B (x : cic.Term univs.Type0 B => P x))))
        (a : cic.Term univs.Type0 A =>
         b : cic.Term univs.Type0 B =>
         p : cic.Term cic.prop (P b) =>
         matita_basics_types.mk_Prod A
           (matita_basics_types.Sig B (x : cic.Term univs.Type0 B => P x)) a
           (matita_basics_types.mk_Sig B (x : cic.Term univs.Type0 B => P x)
              b p))
        _clearme.

def dpi1__o__coerc_pair_sigma :
      x0 : cic.Univ univs.Type0 ->
      x1 : cic.Univ univs.Type0 ->
      x2 :
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod x0 x1) ->
         cic.Univ univs.Type0) ->
      x3 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) ->
      x4 :
        cic.Term univs.Type0
          (matita_basics_types.DPair (matita_basics_types.Prod x0 x1) x2) ->
      x5 :
        cic.Term cic.prop
          (x3
             (matita_basics_types.snd x0 x1
                (matita_basics_types.dpi1 (matita_basics_types.Prod x0 x1) x2
                   x4))) ->
      cic.Term univs.Type0
        (matita_basics_types.Prod x0
           (matita_basics_types.Sig x1 (x : cic.Term univs.Type0 x1 => x3 x)))
      :=
      x0 : cic.Univ univs.Type0 =>
      x1 : cic.Univ univs.Type0 =>
      x2 :
        (__ : cic.Term univs.Type0 (matita_basics_types.Prod x0 x1) ->
         cic.Univ univs.Type0) =>
      x3 : (__ : cic.Term univs.Type0 x1 -> cic.Univ cic.prop) =>
      x4 :
        cic.Term univs.Type0
          (matita_basics_types.DPair (matita_basics_types.Prod x0 x1) x2) =>
      x5 :
        cic.Term cic.prop
          (x3
             (matita_basics_types.snd x0 x1
                (matita_basics_types.dpi1 (matita_basics_types.Prod x0 x1) x2
                   x4))) =>
      matita_basics_types.coerc_pair_sigma x0 x1 x3
        (matita_basics_types.dpi1 (matita_basics_types.Prod x0 x1) x2 x4) x5.


