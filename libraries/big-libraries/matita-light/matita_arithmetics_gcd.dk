(; This file was automatically generated from Matita. ;)

#NAME matita_arithmetics_gcd.

def gcd_aux :
      _p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

def gcd_aux_body :
      _p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

[ _p ] gcd_aux _p -->
  matita_arithmetics_nat.filter_nat univs.Type0
    (_p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
       (_m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
          (_n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.nat)))
    matita_arithmetics_gcd.gcd_aux_body _p.

[ _p ] gcd_aux_body _p -->
  m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
  n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
  matita_arithmetics_nat.match_nat univs.Type0
    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_arithmetics_nat.nat)
    m
    (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     matita_basics_bool.match_bool univs.Type0
       (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
        matita_arithmetics_nat.nat)
       n
       (matita_arithmetics_gcd.gcd_aux q n
          (matita_arithmetics_div_and_mod.mod m n))
       (matita_arithmetics_primes.dividesb n m))
    _p.

def gcd :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_bool.match_bool univs.Type0
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_arithmetics_nat.nat)
        (matita_arithmetics_gcd.gcd_aux n m n)
        (matita_arithmetics_gcd.gcd_aux m n m)
        (matita_arithmetics_nat.leb n m).

def commutative_gcd :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd n m) (matita_arithmetics_gcd.gcd m n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.leb_elim n m
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              (matita_arithmetics_gcd.gcd_aux n m n)
              (matita_arithmetics_gcd.gcd_aux m n m) __)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              (matita_arithmetics_gcd.gcd_aux m n m)
              (matita_arithmetics_gcd.gcd_aux n m n)
              (matita_arithmetics_nat.leb m n)))
        (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         matita_basics_logic.match_Or (matita_arithmetics_nat.lt n m)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              m)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or (matita_arithmetics_nat.lt n m)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      n m)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd_aux n m n)
                 (matita_arithmetics_gcd.gcd_aux m n m)
                 matita_basics_bool.true)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd_aux m n m)
                 (matita_arithmetics_gcd.gcd_aux n m n)
                 (matita_arithmetics_nat.leb m n)))
           (ltnm : cic.Term cic.prop (matita_arithmetics_nat.lt n m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term univs.Type0 matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_gcd.gcd_aux n m n)
                    (matita_arithmetics_gcd.gcd_aux m n m)
                    matita_basics_bool.true)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_gcd.gcd_aux m n m)
                    (matita_arithmetics_gcd.gcd_aux n m n) x))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_gcd.gcd_aux n m n)
                    (matita_arithmetics_gcd.gcd_aux m n m)
                    matita_basics_bool.true))
              (matita_arithmetics_nat.leb m n)
              (matita_arithmetics_nat.not_le_to_leb_false m n
                 (matita_arithmetics_nat.lt_to_not_le n m ltnm)))
           (eqnm :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x m) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_gcd.gcd_aux x m x)
                    (matita_arithmetics_gcd.gcd_aux m x m)
                    matita_basics_bool.true)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_gcd.gcd_aux m x m)
                    (matita_arithmetics_gcd.gcd_aux x m x)
                    (matita_arithmetics_nat.leb m x)))
              (matita_basics_bool.match_bool cic.prop
                 (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd_aux m m m)
                       (matita_arithmetics_gcd.gcd_aux m m m)
                       matita_basics_bool.true)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd_aux m m m)
                       (matita_arithmetics_gcd.gcd_aux m m m) __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd_aux m m m)
                       (matita_arithmetics_gcd.gcd_aux m m m)
                       matita_basics_bool.true))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd_aux m m m)
                       (matita_arithmetics_gcd.gcd_aux m m m)
                       matita_basics_bool.true))
                 (matita_arithmetics_nat.leb m m))
              n eqnm)
           (matita_arithmetics_nat.le_to_or_lt_eq n m lenm))
        (notlenm :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd_aux n m n)
                 (matita_arithmetics_gcd.gcd_aux m n m)
                 matita_basics_bool.false)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd_aux m n m)
                 (matita_arithmetics_gcd.gcd_aux n m n) x))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd_aux n m n)
                 (matita_arithmetics_gcd.gcd_aux m n m)
                 matita_basics_bool.false))
           (matita_arithmetics_nat.leb m n)
           (matita_arithmetics_nat.le_to_leb_true m n
              (matita_arithmetics_nat.transitive_le m
                 (matita_arithmetics_nat.S m) n
                 (matita_arithmetics_nat.le_n_Sn m)
                 (matita_arithmetics_nat.not_le_to_lt n m notlenm)))).

def gcd_O_l :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m) m)
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.refl
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m).

def divides_mod :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_primes.divides p m) ->
      __2 : cic.Term cic.prop (matita_arithmetics_primes.divides p n) ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides p
           (matita_arithmetics_div_and_mod.mod m n))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides p m) =>
      matita_arithmetics_primes.match_divides p m cic.prop
        (__ : cic.Term cic.prop (matita_arithmetics_primes.divides p m) =>
         cic.prod cic.prop cic.prop (matita_arithmetics_primes.divides p n)
           (__1 :
              cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
            matita_arithmetics_primes.divides p
              (matita_arithmetics_div_and_mod.mod m n)))
        (qm : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         eqm :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                m (matita_arithmetics_nat.times p qm)) =>
         _clearme0 :
           cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
         matita_arithmetics_primes.match_divides p n cic.prop
           (__ : cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
            matita_arithmetics_primes.divides p
              (matita_arithmetics_div_and_mod.mod m n))
           (qn : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            eqn :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n (matita_arithmetics_nat.times p qn)) =>
            matita_arithmetics_primes.quotient p
              (matita_arithmetics_div_and_mod.mod m n)
              (matita_arithmetics_nat.minus qm
                 (matita_arithmetics_nat.times qn
                    (matita_arithmetics_div_and_mod.div m n)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.minus
                    (matita_arithmetics_nat.times p qm)
                    (matita_arithmetics_nat.times p
                       (matita_arithmetics_nat.times qn
                          (matita_arithmetics_div_and_mod.div m n))))
                 (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times p qm)
                            (matita_arithmetics_nat.times p
                               (matita_arithmetics_nat.times qn
                                  (matita_arithmetics_div_and_mod.div m n))))) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_div_and_mod.mod m n) x)
                 (matita_basics_logic.eq_ind
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m
                    (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            m x_1) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_div_and_mod.mod m n)
                       (matita_arithmetics_nat.minus x_1
                          (matita_arithmetics_nat.times p
                             (matita_arithmetics_nat.times qn
                                (matita_arithmetics_div_and_mod.div m n)))))
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times p qn)
                          (matita_arithmetics_div_and_mod.div m n))
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.times p qn)
                                  (matita_arithmetics_div_and_mod.div m n))
                               x_1) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_div_and_mod.mod m n)
                          (matita_arithmetics_nat.minus m x_1))
                       (matita_basics_logic.eq_ind
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (x_1 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  n x_1) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_div_and_mod.mod m n)
                             (matita_arithmetics_nat.minus m
                                (matita_arithmetics_nat.times x_1
                                   (matita_arithmetics_div_and_mod.div m n))))
                          (matita_basics_logic.sym_eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus m
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_div_and_mod.div m n)))
                             (matita_arithmetics_div_and_mod.mod m n)
                             (matita_arithmetics_nat.plus_to_minus m
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_div_and_mod.div m n))
                                (matita_arithmetics_div_and_mod.mod m n)
                                (matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_div_and_mod.mod m n)
                                      (matita_arithmetics_nat.times n
                                         (matita_arithmetics_div_and_mod.div
                                            m n)))
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          m x)
                                         __))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      m
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             m x)
                                            __))
                                      (matita_basics_logic.refl
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         m)
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_div_and_mod.mod
                                            m n)
                                         (matita_arithmetics_nat.times n
                                            (matita_arithmetics_div_and_mod.div
                                               m n)))
                                      (matita_basics_logic.rewrite_l
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times n
                                               (matita_arithmetics_div_and_mod.div
                                                  m n))
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))
                                         (__ :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                m x)
                                               __))
                                         (matita_basics_logic.rewrite_l
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_div_and_mod.div
                                                  m n)
                                               n)
                                            (__ :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop univs.Type2
                                               ((x :
                                                   cic.Term univs.Type0
                                                     matita_arithmetics_nat.nat =>
                                                 matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   m
                                                   (matita_arithmetics_nat.plus
                                                      x
                                                      (matita_arithmetics_div_and_mod.mod
                                                         m n)))
                                                  __))
                                            (matita_arithmetics_div_and_mod.div_mod
                                               m n)
                                            (matita_arithmetics_nat.times n
                                               (matita_arithmetics_div_and_mod.div
                                                  m n))
                                            (matita_arithmetics_nat.commutative_times
                                               (matita_arithmetics_div_and_mod.div
                                                  m n)
                                               n))
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_div_and_mod.mod
                                               m n)
                                            (matita_arithmetics_nat.times n
                                               (matita_arithmetics_div_and_mod.div
                                                  m n)))
                                         (matita_arithmetics_nat.commutative_plus
                                            (matita_arithmetics_nat.times n
                                               (matita_arithmetics_div_and_mod.div
                                                  m n))
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))))
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.times n
                                         (matita_arithmetics_div_and_mod.div
                                            m n))
                                      (matita_arithmetics_div_and_mod.mod m n))
                                   (matita_arithmetics_nat.commutative_plus
                                      (matita_arithmetics_nat.times n
                                         (matita_arithmetics_div_and_mod.div
                                            m n))
                                      (matita_arithmetics_div_and_mod.mod m n)))))
                          (matita_arithmetics_nat.times p qn) eqn)
                       (matita_arithmetics_nat.times p
                          (matita_arithmetics_nat.times qn
                             (matita_arithmetics_div_and_mod.div m n)))
                       (matita_arithmetics_nat.associative_times p qn
                          (matita_arithmetics_div_and_mod.div m n)))
                    (matita_arithmetics_nat.times p qm) eqm)
                 (matita_arithmetics_nat.times p
                    (matita_arithmetics_nat.minus qm
                       (matita_arithmetics_nat.times qn
                          (matita_arithmetics_div_and_mod.div m n))))
                 (matita_arithmetics_nat.distributive_times_minus p qm
                    (matita_arithmetics_nat.times qn
                       (matita_arithmetics_div_and_mod.div m n)))))
           _clearme0)
        _clearme.

def divides_mod_to_divides :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_div_and_mod.mod m n)) ->
      __2 : cic.Term cic.prop (matita_arithmetics_primes.divides p n) ->
      cic.Term cic.prop (matita_arithmetics_primes.divides p m) :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_div_and_mod.mod m n)) =>
      matita_arithmetics_primes.match_divides p
        (matita_arithmetics_div_and_mod.mod m n) cic.prop
        (__ :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides p
                (matita_arithmetics_div_and_mod.mod m n)) =>
         cic.prod cic.prop cic.prop (matita_arithmetics_primes.divides p n)
           (__1 :
              cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
            matita_arithmetics_primes.divides p m))
        (q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         eq1 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_div_and_mod.mod m n)
                (matita_arithmetics_nat.times p q1)) =>
         _clearme0 :
           cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
         matita_arithmetics_primes.match_divides p n cic.prop
           (__ : cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
            matita_arithmetics_primes.divides p m)
           (q2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            eq2 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n (matita_arithmetics_nat.times p q2)) =>
            matita_arithmetics_primes.quotient p m
              (matita_arithmetics_nat.plus
                 (matita_arithmetics_nat.times q2
                    (matita_arithmetics_div_and_mod.div m n))
                 q1)
              (matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_nat.times p
                       (matita_arithmetics_nat.times q2
                          (matita_arithmetics_div_and_mod.div m n)))
                    (matita_arithmetics_nat.times p q1))
                 (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.plus
                            (matita_arithmetics_nat.times p
                               (matita_arithmetics_nat.times q2
                                  (matita_arithmetics_div_and_mod.div m n)))
                            (matita_arithmetics_nat.times p q1))) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m x)
                 (matita_basics_logic.eq_ind
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_div_and_mod.mod m n)
                    (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_div_and_mod.mod m n) x_1) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       m
                       (matita_arithmetics_nat.plus
                          (matita_arithmetics_nat.times p
                             (matita_arithmetics_nat.times q2
                                (matita_arithmetics_div_and_mod.div m n)))
                          x_1))
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.times p q2)
                          (matita_arithmetics_div_and_mod.div m n))
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times
                                  (matita_arithmetics_nat.times p q2)
                                  (matita_arithmetics_div_and_mod.div m n))
                               x_1) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          m
                          (matita_arithmetics_nat.plus x_1
                             (matita_arithmetics_div_and_mod.mod m n)))
                       (matita_basics_logic.eq_ind
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (x_1 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  n x_1) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             m
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.times x_1
                                   (matita_arithmetics_div_and_mod.div m n))
                                (matita_arithmetics_div_and_mod.mod m n)))
                          (matita_basics_logic.rewrite_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_div_and_mod.mod m n)
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_div_and_mod.div m n)))
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2
                                       matita_arithmetics_nat.nat)
                                    m x)
                                   __))
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                m
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       m x)
                                      __))
                                (matita_basics_logic.refl
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   m)
                                (matita_arithmetics_nat.plus
                                   (matita_arithmetics_div_and_mod.mod m n)
                                   (matita_arithmetics_nat.times n
                                      (matita_arithmetics_div_and_mod.div m n)))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_nat.times n
                                         (matita_arithmetics_div_and_mod.div
                                            m n))
                                      (matita_arithmetics_div_and_mod.mod m n))
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          m x)
                                         __))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_div_and_mod.div
                                            m n)
                                         n)
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             m
                                             (matita_arithmetics_nat.plus x
                                                (matita_arithmetics_div_and_mod.mod
                                                   m n)))
                                            __))
                                      (matita_arithmetics_div_and_mod.div_mod
                                         m n)
                                      (matita_arithmetics_nat.times n
                                         (matita_arithmetics_div_and_mod.div
                                            m n))
                                      (matita_arithmetics_nat.commutative_times
                                         (matita_arithmetics_div_and_mod.div
                                            m n)
                                         n))
                                   (matita_arithmetics_nat.plus
                                      (matita_arithmetics_div_and_mod.mod m n)
                                      (matita_arithmetics_nat.times n
                                         (matita_arithmetics_div_and_mod.div
                                            m n)))
                                   (matita_arithmetics_nat.commutative_plus
                                      (matita_arithmetics_nat.times n
                                         (matita_arithmetics_div_and_mod.div
                                            m n))
                                      (matita_arithmetics_div_and_mod.mod m n))))
                             (matita_arithmetics_nat.plus
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_div_and_mod.div m n))
                                (matita_arithmetics_div_and_mod.mod m n))
                             (matita_arithmetics_nat.commutative_plus
                                (matita_arithmetics_nat.times n
                                   (matita_arithmetics_div_and_mod.div m n))
                                (matita_arithmetics_div_and_mod.mod m n)))
                          (matita_arithmetics_nat.times p q2) eq2)
                       (matita_arithmetics_nat.times p
                          (matita_arithmetics_nat.times q2
                             (matita_arithmetics_div_and_mod.div m n)))
                       (matita_arithmetics_nat.associative_times p q2
                          (matita_arithmetics_div_and_mod.div m n)))
                    (matita_arithmetics_nat.times p q1) eq1)
                 (matita_arithmetics_nat.times p
                    (matita_arithmetics_nat.plus
                       (matita_arithmetics_nat.times q2
                          (matita_arithmetics_div_and_mod.div m n))
                       q1))
                 (matita_arithmetics_nat.distributive_times_plus p
                    (matita_arithmetics_nat.times q2
                       (matita_arithmetics_div_and_mod.div m n))
                    q1)))
           _clearme0)
        _clearme.

def divides_to_gcd_aux :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __2 : cic.Term cic.prop (matita_arithmetics_primes.divides n m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd_aux p m n) n)
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posp :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) =>
      matita_arithmetics_nat.lt_O_n_elim p posp
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
           (__1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides n m)
              (__2 :
                 cic.Term cic.prop (matita_arithmetics_primes.divides n m) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd_aux __ m n) n)))
        (l : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         divnm : cic.Term cic.prop (matita_arithmetics_primes.divides n m) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 n
                 (matita_arithmetics_gcd.gcd_aux l n
                    (matita_arithmetics_div_and_mod.mod m n))
                 x)
              n)
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n)
           (matita_arithmetics_primes.dividesb n m)
           (matita_arithmetics_primes.divides_to_dividesb_true n m posn divnm)).

def divides_to_gcd :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_primes.divides n m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd n m) n)
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop (matita_arithmetics_primes.divides n __)
           (__1 :
              cic.Term cic.prop (matita_arithmetics_primes.divides n __) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_gcd.gcd n __) n))
        (matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O n)
           (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O n)) =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides n matita_arithmetics_nat.O)
              (__1 :
                 cic.Term cic.prop
                   (matita_arithmetics_primes.divides n
                      matita_arithmetics_nat.O) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 x n))
           (auto :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides n matita_arithmetics_nat.O) =>
            matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     x n)
                    __))
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n)
              (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O n)
              (matita_arithmetics_gcd.gcd_O_l n))
           (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
           (matita_arithmetics_gcd.commutative_gcd n matita_arithmetics_nat.O))
        (l : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         divn :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides n
                (matita_arithmetics_nat.S l)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd_aux n
                    (matita_arithmetics_nat.S l) n)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S l)
                    (matita_arithmetics_gcd.gcd_aux l
                       (matita_arithmetics_nat.S l)
                       (matita_arithmetics_div_and_mod.mod_aux n n l))
                    (matita_arithmetics_nat.eqb
                       (matita_arithmetics_div_and_mod.mod_aux n n l)
                       matita_arithmetics_nat.O))
                 x)
              n)
           (matita_arithmetics_gcd.divides_to_gcd_aux n
              (matita_arithmetics_nat.S l) n posn posn divn)
           (matita_arithmetics_nat.leb n (matita_arithmetics_nat.S l))
           (matita_arithmetics_nat.le_to_leb_true n
              (matita_arithmetics_nat.S l)
              (matita_arithmetics_primes.divides_to_le n
                 (matita_arithmetics_nat.S l)
                 (matita_arithmetics_nat.lt_O_S l) divn)))
        m.

def not_divides_to_gcd_aux :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S p) m n)
           (matita_arithmetics_gcd.gcd_aux p n
              (matita_arithmetics_div_and_mod.mod m n)))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lenm :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      divnm :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) =>
      matita_basics_logic.eq_ind_r
        (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
        matita_basics_bool.false
        (x : cic.Term univs.Type0 matita_basics_bool.bool =>
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) x
                matita_basics_bool.false) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              n
              (matita_arithmetics_gcd.gcd_aux p n
                 (matita_arithmetics_div_and_mod.mod m n))
              x)
           (matita_arithmetics_gcd.gcd_aux p n
              (matita_arithmetics_div_and_mod.mod m n)))
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd_aux p n
              (matita_arithmetics_nat.match_nat univs.Type0
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_arithmetics_nat.nat)
                 m
                 (p0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_arithmetics_div_and_mod.mod_aux m m p0)
                 n)))
        (matita_arithmetics_primes.dividesb n m)
        (matita_arithmetics_primes.not_divides_to_dividesb_false n m lenm
           divnm).

def divides_gcd_aux_mn :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      __2 : cic.Term cic.prop (matita_arithmetics_nat.le n p) ->
      cic.Term cic.prop
        (matita_basics_logic.And
           (matita_arithmetics_primes.divides
              (matita_arithmetics_gcd.gcd_aux p m n) m)
           (matita_arithmetics_primes.divides
              (matita_arithmetics_gcd.gcd_aux p m n) n))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                 (__ :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop (matita_arithmetics_nat.le n m)
                    (__1 :
                       cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_nat.le n _x_365)
                       (__2 :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.le n _x_365) =>
                        matita_basics_logic.And
                          (matita_arithmetics_primes.divides
                             (matita_arithmetics_gcd.gcd_aux _x_365 m n) m)
                          (matita_arithmetics_primes.divides
                             (matita_arithmetics_gcd.gcd_aux _x_365 m n) n)))))))
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         lenO :
           cic.Term cic.prop
             (matita_arithmetics_nat.le n matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.And
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd_aux matita_arithmetics_nat.O m n)
                 m)
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd_aux matita_arithmetics_nat.O m n)
                 n))
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) posn
              (matita_arithmetics_nat.le_to_not_lt n matita_arithmetics_nat.O
                 lenO)))
        (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
            __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
            __2 : cic.Term cic.prop (matita_arithmetics_nat.le n q) ->
            cic.Term cic.prop
              (matita_basics_logic.And
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd_aux q m n) m)
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd_aux q m n) n))) =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         lenS :
           cic.Term cic.prop
             (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q)) =>
         matita_basics_logic.match_Or (matita_arithmetics_primes.divides n m)
           (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_arithmetics_primes.divides n m)
                   (matita_basics_logic.Not
                      (matita_arithmetics_primes.divides n m))) =>
            matita_basics_logic.And
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q)
                    m n)
                 m)
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q)
                    m n)
                 n))
           (divnm :
              cic.Term cic.prop (matita_arithmetics_primes.divides n m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x n) =>
               matita_basics_logic.And
                 (matita_arithmetics_primes.divides x m)
                 (matita_arithmetics_primes.divides x n))
              (matita_basics_logic.conj
                 (matita_arithmetics_primes.divides n m)
                 (matita_arithmetics_primes.divides n n) divnm
                 (matita_arithmetics_primes.divides_n_n n))
              (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m
                 n)
              (matita_arithmetics_gcd.divides_to_gcd_aux
                 (matita_arithmetics_nat.S q) m n
                 (matita_arithmetics_nat.lt_O_S q) posn divnm))
           (ndivnm :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_arithmetics_primes.divides n m)) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_gcd.gcd_aux q n
                 (matita_arithmetics_div_and_mod.mod m n))
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_gcd.gcd_aux q n
                         (matita_arithmetics_div_and_mod.mod m n))) =>
               matita_basics_logic.And
                 (matita_arithmetics_primes.divides x m)
                 (matita_arithmetics_primes.divides x n))
              (matita_basics_logic.match_And
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd_aux q n
                       (matita_arithmetics_div_and_mod.mod m n))
                    n)
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd_aux q n
                       (matita_arithmetics_div_and_mod.mod m n))
                    (matita_arithmetics_div_and_mod.mod m n))
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.And
                         (matita_arithmetics_primes.divides
                            (matita_arithmetics_gcd.gcd_aux q n
                               (matita_arithmetics_div_and_mod.mod m n))
                            n)
                         (matita_arithmetics_primes.divides
                            (matita_arithmetics_gcd.gcd_aux q n
                               (matita_arithmetics_div_and_mod.mod m n))
                            (matita_arithmetics_div_and_mod.mod m n))) =>
                  matita_basics_logic.And
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd_aux q n
                          (matita_arithmetics_div_and_mod.mod m n))
                       m)
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd_aux q n
                          (matita_arithmetics_div_and_mod.mod m n))
                       n))
                 (H :
                    cic.Term cic.prop
                      (matita_arithmetics_primes.divides
                         (matita_arithmetics_gcd.gcd_aux q n
                            (matita_arithmetics_div_and_mod.mod m n))
                         n) =>
                  H1 :
                    cic.Term cic.prop
                      (matita_arithmetics_primes.divides
                         (matita_arithmetics_gcd.gcd_aux q n
                            (matita_arithmetics_div_and_mod.mod m n))
                         (matita_arithmetics_div_and_mod.mod m n)) =>
                  matita_basics_logic.conj
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd_aux q n
                          (matita_arithmetics_div_and_mod.mod m n))
                       m)
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd_aux q n
                          (matita_arithmetics_div_and_mod.mod m n))
                       n)
                    (matita_arithmetics_gcd.divides_mod_to_divides
                       (matita_arithmetics_gcd.gcd_aux q n
                          (matita_arithmetics_div_and_mod.mod m n))
                       m n posn H1 H)
                    H)
                 (Hind n (matita_arithmetics_div_and_mod.mod m n)
                    (matita_basics_logic.match_Or
                       (matita_arithmetics_nat.lt matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n))
                       cic.prop
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_logic.Or
                               (matita_arithmetics_nat.lt
                                  matita_arithmetics_nat.O
                                  (matita_arithmetics_div_and_mod.mod m n))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  (matita_arithmetics_div_and_mod.mod m n))) =>
                        matita_arithmetics_nat.lt matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n))
                       (auto :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.lt
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n)) =>
                        auto)
                       (modO :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n)) =>
                        matita_basics_logic.False_ind
                          (_x_66 :
                             cic.Term cic.prop matita_basics_logic.False =>
                           matita_arithmetics_nat.lt matita_arithmetics_nat.O
                             (matita_arithmetics_div_and_mod.mod m n))
                          (matita_basics_logic.absurd
                             (matita_arithmetics_primes.divides n m)
                             (matita_arithmetics_primes.mod_O_to_divides n m
                                posn
                                (matita_basics_logic.rewrite_l
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          x matita_arithmetics_nat.O)
                                         __))
                                   (matita_basics_logic.refl
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_div_and_mod.mod m n)
                                   modO))
                             ndivnm))
                       (matita_arithmetics_nat.le_to_or_lt_eq
                          matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n)
                          (matita_arithmetics_nat.le_O_n
                             (matita_arithmetics_div_and_mod.mod m n))))
                    (matita_arithmetics_nat.lt_to_le
                       (matita_arithmetics_div_and_mod.mod m n) n
                       (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn))
                    (matita_arithmetics_nat.le_S_S_to_le
                       (matita_arithmetics_div_and_mod.mod m n) q
                       (matita_arithmetics_nat.transitive_le
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.mod m n))
                          n (matita_arithmetics_nat.S q)
                          (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn)
                          lenS))))
              (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m
                 n)
              (matita_arithmetics_gcd.not_divides_to_gcd_aux q m n posn
                 ndivnm))
           (matita_arithmetics_primes.decidable_divides n m))
        p.

def divides_gcd_nm :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.And
           (matita_arithmetics_primes.divides
              (matita_arithmetics_gcd.gcd n m) m)
           (matita_arithmetics_primes.divides
              (matita_arithmetics_gcd.gcd n m) n))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         matita_basics_logic.And
           (matita_arithmetics_primes.divides
              (matita_arithmetics_gcd.gcd n m) m)
           (matita_arithmetics_primes.divides
              (matita_arithmetics_gcd.gcd n m) n))
        (posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         matita_basics_logic.match_Or
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O m)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O m)) =>
            matita_basics_logic.And
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd n m) m)
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd n m) n))
           (posm :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) =>
            matita_arithmetics_nat.leb_elim n m
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_basics_logic.And
                 (matita_arithmetics_primes.divides
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd_aux n m n)
                       (matita_arithmetics_gcd.gcd_aux m n m) __)
                    m)
                 (matita_arithmetics_primes.divides
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd_aux n m n)
                       (matita_arithmetics_gcd.gcd_aux m n m) __)
                    n))
              (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
               matita_arithmetics_gcd.divides_gcd_aux_mn n m n posn lenm
                 (matita_arithmetics_nat.le_n n))
              (notlt :
                 cic.Term cic.prop
                   (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
               (A : cic.Univ cic.prop =>
                B : cic.Univ cic.prop =>
                _clearme : cic.Term cic.prop (matita_basics_logic.And A B) =>
                matita_basics_logic.match_And A B cic.prop
                  (__ : cic.Term cic.prop (matita_basics_logic.And A B) =>
                   matita_basics_logic.And B A)
                  (auto : cic.Term cic.prop A =>
                   auto' : cic.Term cic.prop B =>
                   matita_basics_logic.conj B A auto' auto)
                  _clearme)
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd_aux m n m) n)
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd_aux m n m) m)
                 (matita_arithmetics_gcd.divides_gcd_aux_mn m n m posm
                    (matita_arithmetics_nat.transitive_le m
                       (matita_arithmetics_nat.S m) n
                       (matita_arithmetics_nat.le_n_Sn m)
                       (matita_arithmetics_nat.not_le_to_lt n m notlt))
                    (matita_arithmetics_nat.le_n m))))
           (eqmO :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O m) =>
            matita_basics_logic.eq_ind
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O x_1) =>
               matita_basics_logic.And
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd n x_1) x_1)
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd n x_1) n))
              (matita_basics_logic.conj
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                    matita_arithmetics_nat.O)
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O) n)
                 (matita_arithmetics_primes.divides_n_O
                    (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O))
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_gcd.gcd n
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_gcd.gcd n
                             matita_arithmetics_nat.O)))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_gcd.gcd n
                             matita_arithmetics_nat.O)
                          n))
                    (matita_arithmetics_primes.divides_n_n
                       (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides
                                    (matita_arithmetics_gcd.gcd n
                                       matita_arithmetics_nat.O)
                                    x))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides
                                    (matita_arithmetics_gcd.gcd n
                                       matita_arithmetics_nat.O)
                                    n)))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_primes.divides
                                (matita_arithmetics_gcd.gcd n
                                   matita_arithmetics_nat.O)
                                n)))
                       (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_gcd.gcd
                             matita_arithmetics_nat.O n)
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_gcd.gcd n
                                    matita_arithmetics_nat.O)
                                 x)
                                __))
                          (matita_arithmetics_gcd.commutative_gcd n
                             matita_arithmetics_nat.O)
                          n (matita_arithmetics_gcd.gcd_O_l n)))))
              m eqmO)
           (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O m
              (matita_arithmetics_nat.le_O_n m)))
        (eqnO :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_basics_logic.eq_ind
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O x_1) =>
            matita_basics_logic.And
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd x_1 m) m)
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd x_1 m) x_1))
           (matita_basics_logic.conj
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m) m)
              (matita_arithmetics_primes.divides
                 (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m)
                 matita_arithmetics_nat.O)
              (matita_arithmetics_primes.divides_n_n
                 (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m))
              (matita_arithmetics_primes.divides_n_O
                 (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O m)))
           n eqnO)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def divides_gcd_l :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.proj2
        (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m)
        (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n)
        (matita_arithmetics_gcd.divides_gcd_nm n m).

def divides_gcd_r :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.proj1
        (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) m)
        (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd n m) n)
        (matita_arithmetics_gcd.divides_gcd_nm n m).

def divides_times_gcd_aux :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      d : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __2 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      __3 : cic.Term cic.prop (matita_arithmetics_nat.le n p) ->
      __4 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides d
             (matita_arithmetics_nat.times c m)) ->
      __5 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides d
             (matita_arithmetics_nat.times c n)) ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides d
           (matita_arithmetics_nat.times c
              (matita_arithmetics_gcd.gcd_aux p m n)))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                 (d : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                    (c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_nat.lt matita_arithmetics_nat.O c)
                       (__ :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.lt
                               matita_arithmetics_nat.O c) =>
                        cic.prod cic.prop cic.prop
                          (matita_arithmetics_nat.lt matita_arithmetics_nat.O
                             n)
                          (__1 :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.lt
                                  matita_arithmetics_nat.O n) =>
                           cic.prod cic.prop cic.prop
                             (matita_arithmetics_nat.le n m)
                             (__2 :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le n m) =>
                              cic.prod cic.prop cic.prop
                                (matita_arithmetics_nat.le n _x_365)
                                (__3 :
                                   cic.Term cic.prop
                                     (matita_arithmetics_nat.le n _x_365) =>
                                 cic.prod cic.prop cic.prop
                                   (matita_arithmetics_primes.divides d
                                      (matita_arithmetics_nat.times c m))
                                   (__4 :
                                      cic.Term cic.prop
                                        (matita_arithmetics_primes.divides d
                                           (matita_arithmetics_nat.times c m)) =>
                                    cic.prod cic.prop cic.prop
                                      (matita_arithmetics_primes.divides d
                                         (matita_arithmetics_nat.times c n))
                                      (__5 :
                                         cic.Term cic.prop
                                           (matita_arithmetics_primes.divides
                                              d
                                              (matita_arithmetics_nat.times c
                                                 n)) =>
                                       matita_arithmetics_primes.divides d
                                         (matita_arithmetics_nat.times c
                                            (matita_arithmetics_gcd.gcd_aux
                                               _x_365 m n)))))))))))))
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         d : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         __ :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) =>
         posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         _0 : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         lenO :
           cic.Term cic.prop
             (matita_arithmetics_nat.le n matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides d
                 (matita_arithmetics_nat.times c m))
              (__1 :
                 cic.Term cic.prop
                   (matita_arithmetics_primes.divides d
                      (matita_arithmetics_nat.times c m)) =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_primes.divides d
                    (matita_arithmetics_nat.times c n))
                 (__2 :
                    cic.Term cic.prop
                      (matita_arithmetics_primes.divides d
                         (matita_arithmetics_nat.times c n)) =>
                  matita_arithmetics_primes.divides d
                    (matita_arithmetics_nat.times c
                       (matita_arithmetics_gcd.gcd_aux
                          matita_arithmetics_nat.O m n)))))
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.le n matita_arithmetics_nat.O) lenO
              (matita_arithmetics_nat.lt_to_not_le matita_arithmetics_nat.O n
                 posn)))
        (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            d : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) ->
            __1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
            __2 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
            __3 : cic.Term cic.prop (matita_arithmetics_nat.le n q) ->
            __4 :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides d
                   (matita_arithmetics_nat.times c m)) ->
            __5 :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides d
                   (matita_arithmetics_nat.times c n)) ->
            cic.Term cic.prop
              (matita_arithmetics_primes.divides d
                 (matita_arithmetics_nat.times c
                    (matita_arithmetics_gcd.gcd_aux q m n)))) =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         d : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         posc :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) =>
         posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         lenS :
           cic.Term cic.prop
             (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q)) =>
         dcm :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides d
                (matita_arithmetics_nat.times c m)) =>
         dcn :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides d
                (matita_arithmetics_nat.times c n)) =>
         matita_basics_logic.match_Or (matita_arithmetics_primes.divides n m)
           (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_arithmetics_primes.divides n m)
                   (matita_basics_logic.Not
                      (matita_arithmetics_primes.divides n m))) =>
            matita_arithmetics_primes.divides d
              (matita_arithmetics_nat.times c
                 (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q)
                    m n)))
           (divnm :
              cic.Term cic.prop (matita_arithmetics_primes.divides n m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x n) =>
               matita_arithmetics_primes.divides d
                 (matita_arithmetics_nat.times c x))
              dcn
              (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m
                 n)
              (matita_arithmetics_gcd.divides_to_gcd_aux
                 (matita_arithmetics_nat.S q) m n
                 (matita_arithmetics_nat.lt_O_S q) posn divnm))
           (ndivnm :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_arithmetics_primes.divides n m)) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_gcd.gcd_aux q n
                 (matita_arithmetics_div_and_mod.mod m n))
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_gcd.gcd_aux q n
                         (matita_arithmetics_div_and_mod.mod m n))) =>
               matita_arithmetics_primes.divides d
                 (matita_arithmetics_nat.times c x))
              (Hind n (matita_arithmetics_div_and_mod.mod m n) d c posc
                 (matita_basics_logic.match_Or
                    (matita_arithmetics_nat.lt matita_arithmetics_nat.O
                       (matita_arithmetics_div_and_mod.mod m n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (matita_arithmetics_div_and_mod.mod m n))
                    cic.prop
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_logic.Or
                            (matita_arithmetics_nat.lt
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n))
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n))) =>
                     matita_arithmetics_nat.lt matita_arithmetics_nat.O
                       (matita_arithmetics_div_and_mod.mod m n))
                    (auto :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.lt matita_arithmetics_nat.O
                            (matita_arithmetics_div_and_mod.mod m n)) =>
                     auto)
                    (modO :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O
                            (matita_arithmetics_div_and_mod.mod m n)) =>
                     matita_basics_logic.False_ind
                       (_x_66 :
                          cic.Term cic.prop matita_basics_logic.False =>
                        matita_arithmetics_nat.lt matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n))
                       (matita_basics_logic.absurd
                          (matita_arithmetics_primes.divides n m)
                          (matita_arithmetics_primes.mod_O_to_divides n m
                             posn
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       x matita_arithmetics_nat.O)
                                      __))
                                (matita_basics_logic.refl
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_div_and_mod.mod m n) modO))
                          ndivnm))
                    (matita_arithmetics_nat.le_to_or_lt_eq
                       matita_arithmetics_nat.O
                       (matita_arithmetics_div_and_mod.mod m n)
                       (matita_arithmetics_nat.le_O_n
                          (matita_arithmetics_div_and_mod.mod m n))))
                 (matita_arithmetics_nat.lt_to_le
                    (matita_arithmetics_div_and_mod.mod m n) n
                    (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn))
                 (matita_arithmetics_nat.le_S_S_to_le
                    (matita_arithmetics_div_and_mod.mod m n) q
                    (matita_arithmetics_nat.transitive_le
                       (matita_arithmetics_nat.S
                          (matita_arithmetics_div_and_mod.mod m n))
                       n (matita_arithmetics_nat.S q)
                       (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn)
                       lenS))
                 dcn
                 (matita_basics_logic.eq_ind
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_div_and_mod.mod
                       (matita_arithmetics_nat.times m c)
                       (matita_arithmetics_nat.times n c))
                    (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_div_and_mod.mod
                               (matita_arithmetics_nat.times m c)
                               (matita_arithmetics_nat.times n c))
                            x_1) =>
                     matita_arithmetics_primes.divides d x_1)
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times c m)
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.times c m) x_1) =>
                        matita_arithmetics_primes.divides d
                          (matita_arithmetics_div_and_mod.mod x_1
                             (matita_arithmetics_nat.times n c)))
                       (matita_basics_logic.eq_ind
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times c n)
                          (x_1 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times c n) x_1) =>
                           matita_arithmetics_primes.divides d
                             (matita_arithmetics_div_and_mod.mod
                                (matita_arithmetics_nat.times c m) x_1))
                          (matita_arithmetics_gcd.divides_mod d
                             (matita_arithmetics_nat.times c m)
                             (matita_arithmetics_nat.times c n)
                             (matita_basics_logic.eq_ind_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times
                                   matita_arithmetics_nat.O
                                   matita_arithmetics_nat.O)
                                (x :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 __ :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        x
                                        (matita_arithmetics_nat.times
                                           matita_arithmetics_nat.O
                                           matita_arithmetics_nat.O)) =>
                                 matita_arithmetics_nat.lt x
                                   (matita_arithmetics_nat.times c n))
                                (matita_arithmetics_nat.lt_times
                                   matita_arithmetics_nat.O c
                                   matita_arithmetics_nat.O n posc posn)
                                matita_arithmetics_nat.O
                                (matita_arithmetics_nat.times_n_O
                                   matita_arithmetics_nat.O))
                             dcm dcn)
                          (matita_arithmetics_nat.times n c)
                          (matita_arithmetics_nat.commutative_times c n))
                       (matita_arithmetics_nat.times m c)
                       (matita_arithmetics_nat.commutative_times c m))
                    (matita_arithmetics_nat.times c
                       (matita_arithmetics_div_and_mod.mod m n))
                    (matita_arithmetics_div_and_mod.times_mod m n c posc posn)))
              (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m
                 n)
              (matita_arithmetics_gcd.not_divides_to_gcd_aux q m n posn
                 ndivnm))
           (matita_arithmetics_primes.decidable_divides n m))
        p.

def divides_gcd_aux :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      d : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      __2 : cic.Term cic.prop (matita_arithmetics_nat.le n p) ->
      __3 : cic.Term cic.prop (matita_arithmetics_primes.divides d m) ->
      __4 : cic.Term cic.prop (matita_arithmetics_primes.divides d n) ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides d
           (matita_arithmetics_gcd.gcd_aux p m n))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      d : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      auto' : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      auto'' : cic.Term cic.prop (matita_arithmetics_nat.le n p) =>
      auto''' : cic.Term cic.prop (matita_arithmetics_primes.divides d m) =>
      auto'''' : cic.Term cic.prop (matita_arithmetics_primes.divides d n) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_primes.divides d
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_gcd.gcd_aux p m n))))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_primes.divides d
              (matita_arithmetics_gcd.gcd_aux p m n)))
        (matita_arithmetics_gcd.divides_times_gcd_aux p m n d
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_nat.lt_O_S matita_arithmetics_nat.O) auto
           auto' auto''
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides d m))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides d
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)))
              auto'''
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d m))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d x)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.times m
                          matita_arithmetics_nat.O))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d m))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d x)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d m))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d
                                    (matita_arithmetics_nat.plus m x))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          m
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d m))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d x)))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_primes.divides d m)))
                          (matita_arithmetics_nat.plus m
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.plus_n_O m))
                       (matita_arithmetics_nat.times m
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.times_n_O m))
                    (matita_arithmetics_nat.times m
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.times_n_Sm m
                       matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                 (matita_arithmetics_nat.commutative_times
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)))
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides d n))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides d
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)))
              auto''''
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d n))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d x)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus n
                       (matita_arithmetics_nat.times n
                          matita_arithmetics_nat.O))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d n))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d x)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d n))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d
                                    (matita_arithmetics_nat.plus n x))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d n))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d x)))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_primes.divides d n)))
                          (matita_arithmetics_nat.plus n
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.plus_n_O n))
                       (matita_arithmetics_nat.times n
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.times_n_O n))
                    (matita_arithmetics_nat.times n
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.times_n_Sm n
                       matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                 (matita_arithmetics_nat.commutative_times
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times
              (matita_arithmetics_gcd.gcd_aux p m n)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_primes.divides d x))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_primes.divides d
                        (matita_arithmetics_gcd.gcd_aux p m n))))
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_gcd.gcd_aux p m n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_primes.divides d x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_primes.divides d
                           (matita_arithmetics_gcd.gcd_aux p m n))))
                    __))
              (matita_basics_logic.refl
                 (cic.lift (cic.succ univs.Type0) univs.Type2
                    (cic.univ univs.Type0))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_primes.divides d
                       (matita_arithmetics_gcd.gcd_aux p m n))))
              (matita_arithmetics_nat.times
                 (matita_arithmetics_gcd.gcd_aux p m n)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_arithmetics_nat.times_n_1
                 (matita_arithmetics_gcd.gcd_aux p m n)))
           (matita_arithmetics_nat.times
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_gcd.gcd_aux p m n))
           (matita_arithmetics_nat.commutative_times
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_gcd.gcd_aux p m n))).

def divides_d_times_gcd :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      d : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides d
             (matita_arithmetics_nat.times c m)) ->
      __2 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides d
             (matita_arithmetics_nat.times c n)) ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides d
           (matita_arithmetics_nat.times c (matita_arithmetics_gcd.gcd n m)))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      d : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posc :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O c) =>
      dcm :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides d
             (matita_arithmetics_nat.times c m)) =>
      dcn :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides d
             (matita_arithmetics_nat.times c n)) =>
      matita_basics_logic.match_Or
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         matita_arithmetics_primes.divides d
           (matita_arithmetics_nat.times c (matita_arithmetics_gcd.gcd n m)))
        (posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         matita_basics_logic.match_Or
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O m)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O m)) =>
            matita_arithmetics_primes.divides d
              (matita_arithmetics_nat.times c
                 (matita_arithmetics_gcd.gcd n m)))
           (posm :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) =>
            matita_arithmetics_nat.leb_elim n m
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_primes.divides d
                 (matita_arithmetics_nat.times c
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd_aux n m n)
                       (matita_arithmetics_gcd.gcd_aux m n m) __)))
              (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
               matita_arithmetics_gcd.divides_times_gcd_aux n m n d c posc
                 posn lenm (matita_arithmetics_nat.le_n n) dcm dcn)
              (nlenm :
                 cic.Term cic.prop
                   (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
               matita_arithmetics_gcd.divides_times_gcd_aux m n m d c posc
                 posm
                 (matita_arithmetics_nat.transitive_le m
                    (matita_arithmetics_nat.S m) n
                    (matita_arithmetics_nat.le_n_Sn m)
                    (matita_arithmetics_nat.not_le_to_lt n m nlenm))
                 (matita_arithmetics_nat.le_n m) dcn dcm))
           (eqmO :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O m) =>
            matita_basics_logic.eq_ind
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O
              (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _x_2 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O x_1) =>
               matita_arithmetics_primes.divides d
                 (matita_arithmetics_nat.times c
                    (matita_arithmetics_gcd.gcd n x_1)))
              (matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O n)
                 (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O
                            n)
                         x_1) =>
                  matita_arithmetics_primes.divides d
                    (matita_arithmetics_nat.times c x_1))
                 dcn (matita_arithmetics_gcd.gcd n matita_arithmetics_nat.O)
                 (matita_arithmetics_gcd.commutative_gcd
                    matita_arithmetics_nat.O n))
              m eqmO)
           (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O m
              (matita_arithmetics_nat.le_O_n m)))
        (eqnO :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_basics_logic.eq_ind
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O x_1) =>
            matita_arithmetics_primes.divides d
              (matita_arithmetics_nat.times c
                 (matita_arithmetics_gcd.gcd x_1 m)))
           dcm n eqnO)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def divides_d_gcd :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      d : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_primes.divides d m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_primes.divides d n) ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides d (matita_arithmetics_gcd.gcd n m))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      d : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      divdn : cic.Term cic.prop (matita_arithmetics_primes.divides d m) =>
      divdn0 : cic.Term cic.prop (matita_arithmetics_primes.divides d n) =>
      matita_basics_logic.eq_coerc
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_primes.divides d
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_gcd.gcd n m))))
        (cic.lift cic.prop univs.Type0
           (matita_arithmetics_primes.divides d
              (matita_arithmetics_gcd.gcd n m)))
        (matita_arithmetics_gcd.divides_d_times_gcd m n d
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_nat.lt_O_S matita_arithmetics_nat.O)
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides d m))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides d
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)))
              divdn
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times m
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d m))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d x)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus m
                       (matita_arithmetics_nat.times m
                          matita_arithmetics_nat.O))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d m))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d x)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d m))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d
                                    (matita_arithmetics_nat.plus m x))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          m
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d m))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d x)))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_primes.divides d m)))
                          (matita_arithmetics_nat.plus m
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.plus_n_O m))
                       (matita_arithmetics_nat.times m
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.times_n_O m))
                    (matita_arithmetics_nat.times m
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.times_n_Sm m
                       matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)
                 (matita_arithmetics_nat.commutative_times
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m)))
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides d n))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides d
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)))
              divdn0
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times n
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d n))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d x)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.plus n
                       (matita_arithmetics_nat.times n
                          matita_arithmetics_nat.O))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d n))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d x)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d n))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d
                                    (matita_arithmetics_nat.plus n x))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d n))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d x)))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_primes.divides d n)))
                          (matita_arithmetics_nat.plus n
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.plus_n_O n))
                       (matita_arithmetics_nat.times n
                          matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.times_n_O n))
                    (matita_arithmetics_nat.times n
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.times_n_Sm n
                       matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                 (matita_arithmetics_nat.commutative_times
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))))
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd m n)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift (cic.succ univs.Type0) univs.Type2
                     (cic.univ univs.Type0))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_primes.divides d
                        (matita_arithmetics_nat.times
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                           x)))
                  (cic.lift cic.prop univs.Type0
                     (matita_arithmetics_primes.divides d
                        (matita_arithmetics_gcd.gcd n m))))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times (matita_arithmetics_gcd.gcd m n)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_primes.divides d x))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_primes.divides d
                           (matita_arithmetics_gcd.gcd n m))))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.plus
                    (matita_arithmetics_gcd.gcd m n)
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_gcd.gcd m n)
                       matita_arithmetics_nat.O))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides d
                              (matita_arithmetics_gcd.gcd n m))))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times matita_arithmetics_nat.O
                       (matita_arithmetics_gcd.gcd m n))
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d
                                 (matita_arithmetics_nat.plus
                                    (matita_arithmetics_gcd.gcd m n) x)))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides d
                                 (matita_arithmetics_gcd.gcd n m))))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d
                                    (matita_arithmetics_nat.plus
                                       (matita_arithmetics_gcd.gcd m n) x)))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides d
                                    (matita_arithmetics_gcd.gcd n m))))
                             __))
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.plus
                             matita_arithmetics_nat.O
                             (matita_arithmetics_gcd.gcd m n))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d x))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides d
                                       (matita_arithmetics_gcd.gcd n m))))
                                __))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_gcd.gcd m n)
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_primes.divides d x))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_primes.divides d
                                          (matita_arithmetics_gcd.gcd n m))))
                                   __))
                             (matita_basics_logic.rewrite_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_gcd.gcd m n)
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift (cic.succ univs.Type0)
                                          univs.Type2 (cic.univ univs.Type0))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_arithmetics_primes.divides
                                             d
                                             (matita_arithmetics_gcd.gcd m n)))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_arithmetics_primes.divides
                                             d x)))
                                      __))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.succ univs.Type0)
                                      univs.Type2 (cic.univ univs.Type0))
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_primes.divides d
                                         (matita_arithmetics_gcd.gcd m n))))
                                (matita_arithmetics_gcd.gcd n m)
                                (matita_arithmetics_gcd.commutative_gcd n m))
                             (matita_arithmetics_nat.plus
                                matita_arithmetics_nat.O
                                (matita_arithmetics_gcd.gcd m n))
                             (matita_arithmetics_nat.plus_O_n
                                (matita_arithmetics_gcd.gcd m n)))
                          (matita_arithmetics_nat.plus
                             (matita_arithmetics_gcd.gcd m n)
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.commutative_plus
                             (matita_arithmetics_gcd.gcd m n)
                             matita_arithmetics_nat.O))
                       (matita_arithmetics_nat.times matita_arithmetics_nat.O
                          (matita_arithmetics_gcd.gcd m n))
                       (matita_arithmetics_nat.times_O_n
                          (matita_arithmetics_gcd.gcd m n)))
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_gcd.gcd m n)
                       matita_arithmetics_nat.O)
                    (matita_arithmetics_nat.commutative_times
                       (matita_arithmetics_gcd.gcd m n)
                       matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.times
                    (matita_arithmetics_gcd.gcd m n)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (matita_arithmetics_nat.times_n_Sm
                    (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O))
              (matita_arithmetics_nat.times
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_gcd.gcd m n))
              (matita_arithmetics_nat.commutative_times
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_gcd.gcd m n)))
           (matita_arithmetics_gcd.gcd n m)
           (matita_arithmetics_gcd.commutative_gcd n m)).

def let_clause_1544 :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      Hind :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
         __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
         __2 : cic.Term cic.prop (matita_arithmetics_nat.le n q) ->
         cic.Term cic.prop
           (matita_basics_logic.ex matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd_aux q m n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd_aux q m n)))))) ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      lenS :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q)) ->
      ndivnm :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_div_and_mod.mod m n))
                      (matita_arithmetics_nat.times b n))
                   (matita_arithmetics_gcd.gcd_aux q n
                      (matita_arithmetics_div_and_mod.mod m n)))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b n)
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (matita_arithmetics_gcd.gcd_aux q n
                      (matita_arithmetics_div_and_mod.mod m n))))) ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a
                      (matita_arithmetics_div_and_mod.mod m n))
                   (matita_arithmetics_nat.times b n))
                (matita_arithmetics_gcd.gcd_aux q n
                   (matita_arithmetics_div_and_mod.mod m n)))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b n)
                   (matita_arithmetics_nat.times a
                      (matita_arithmetics_div_and_mod.mod m n)))
                (matita_arithmetics_gcd.gcd_aux q n
                   (matita_arithmetics_div_and_mod.mod m n)))) ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus
                (matita_arithmetics_nat.times a
                   (matita_arithmetics_div_and_mod.mod m n))
                (matita_arithmetics_nat.times b n))
             (matita_arithmetics_gcd.gcd_aux q n
                (matita_arithmetics_div_and_mod.mod m n))) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus
              (matita_arithmetics_nat.times a
                 (matita_arithmetics_div_and_mod.mod m n))
              (matita_arithmetics_nat.times n b))
           (matita_arithmetics_gcd.gcd_aux q n
              (matita_arithmetics_div_and_mod.mod m n)))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hind :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
         __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
         __2 : cic.Term cic.prop (matita_arithmetics_nat.le n q) ->
         cic.Term cic.prop
           (matita_basics_logic.ex matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd_aux q m n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd_aux q m n)))))) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      lenS :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q)) =>
      ndivnm :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_div_and_mod.mod m n))
                      (matita_arithmetics_nat.times b n))
                   (matita_arithmetics_gcd.gcd_aux q n
                      (matita_arithmetics_div_and_mod.mod m n)))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b n)
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (matita_arithmetics_gcd.gcd_aux q n
                      (matita_arithmetics_div_and_mod.mod m n))))) =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a
                      (matita_arithmetics_div_and_mod.mod m n))
                   (matita_arithmetics_nat.times b n))
                (matita_arithmetics_gcd.gcd_aux q n
                   (matita_arithmetics_div_and_mod.mod m n)))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b n)
                   (matita_arithmetics_nat.times a
                      (matita_arithmetics_div_and_mod.mod m n)))
                (matita_arithmetics_gcd.gcd_aux q n
                   (matita_arithmetics_div_and_mod.mod m n)))) =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus
                (matita_arithmetics_nat.times a
                   (matita_arithmetics_div_and_mod.mod m n))
                (matita_arithmetics_nat.times b n))
             (matita_arithmetics_gcd.gcd_aux q n
                (matita_arithmetics_div_and_mod.mod m n))) =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times b n)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_nat.minus
                  (matita_arithmetics_nat.times a
                     (matita_arithmetics_div_and_mod.mod m n))
                  x)
               (matita_arithmetics_gcd.gcd_aux q n
                  (matita_arithmetics_div_and_mod.mod m n)))
              __))
        H (matita_arithmetics_nat.times n b)
        (matita_arithmetics_nat.commutative_times b n).

def let_clause_15441 :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      Hind :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
         __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
         __2 : cic.Term cic.prop (matita_arithmetics_nat.le n q) ->
         cic.Term cic.prop
           (matita_basics_logic.ex matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd_aux q m n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd_aux q m n)))))) ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      lenS :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q)) ->
      ndivnm :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_div_and_mod.mod m n))
                      (matita_arithmetics_nat.times b n))
                   (matita_arithmetics_gcd.gcd_aux q n
                      (matita_arithmetics_div_and_mod.mod m n)))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b n)
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (matita_arithmetics_gcd.gcd_aux q n
                      (matita_arithmetics_div_and_mod.mod m n))))) ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a
                      (matita_arithmetics_div_and_mod.mod m n))
                   (matita_arithmetics_nat.times b n))
                (matita_arithmetics_gcd.gcd_aux q n
                   (matita_arithmetics_div_and_mod.mod m n)))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b n)
                   (matita_arithmetics_nat.times a
                      (matita_arithmetics_div_and_mod.mod m n)))
                (matita_arithmetics_gcd.gcd_aux q n
                   (matita_arithmetics_div_and_mod.mod m n)))) ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n)
                (matita_arithmetics_nat.times a
                   (matita_arithmetics_div_and_mod.mod m n)))
             (matita_arithmetics_gcd.gcd_aux q n
                (matita_arithmetics_div_and_mod.mod m n))) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.times n b)
              (matita_arithmetics_nat.times a
                 (matita_arithmetics_div_and_mod.mod m n)))
           (matita_arithmetics_gcd.gcd_aux q n
              (matita_arithmetics_div_and_mod.mod m n)))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hind :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
         __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
         __2 : cic.Term cic.prop (matita_arithmetics_nat.le n q) ->
         cic.Term cic.prop
           (matita_basics_logic.ex matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd_aux q m n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd_aux q m n)))))) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
      lenS :
        cic.Term cic.prop
          (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q)) =>
      ndivnm :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_div_and_mod.mod m n))
                      (matita_arithmetics_nat.times b n))
                   (matita_arithmetics_gcd.gcd_aux q n
                      (matita_arithmetics_div_and_mod.mod m n)))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b n)
                      (matita_arithmetics_nat.times a
                         (matita_arithmetics_div_and_mod.mod m n)))
                   (matita_arithmetics_gcd.gcd_aux q n
                      (matita_arithmetics_div_and_mod.mod m n))))) =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a
                      (matita_arithmetics_div_and_mod.mod m n))
                   (matita_arithmetics_nat.times b n))
                (matita_arithmetics_gcd.gcd_aux q n
                   (matita_arithmetics_div_and_mod.mod m n)))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b n)
                   (matita_arithmetics_nat.times a
                      (matita_arithmetics_div_and_mod.mod m n)))
                (matita_arithmetics_gcd.gcd_aux q n
                   (matita_arithmetics_div_and_mod.mod m n)))) =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b n)
                (matita_arithmetics_nat.times a
                   (matita_arithmetics_div_and_mod.mod m n)))
             (matita_arithmetics_gcd.gcd_aux q n
                (matita_arithmetics_div_and_mod.mod m n))) =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times b n)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_nat.minus x
                  (matita_arithmetics_nat.times a
                     (matita_arithmetics_div_and_mod.mod m n)))
               (matita_arithmetics_gcd.gcd_aux q n
                  (matita_arithmetics_div_and_mod.mod m n)))
              __))
        H (matita_arithmetics_nat.times n b)
        (matita_arithmetics_nat.commutative_times b n).

def eq_minus_gcd_aux :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
      __2 : cic.Term cic.prop (matita_arithmetics_nat.le n p) ->
      cic.Term cic.prop
        (matita_basics_logic.ex matita_arithmetics_nat.nat
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.Or
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times a n)
                       (matita_arithmetics_nat.times b m))
                    (matita_arithmetics_gcd.gcd_aux p m n))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times b m)
                       (matita_arithmetics_nat.times a n))
                    (matita_arithmetics_gcd.gcd_aux p m n)))))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                 (__ :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
                  cic.prod cic.prop cic.prop (matita_arithmetics_nat.le n m)
                    (__1 :
                       cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_nat.le n _x_365)
                       (__2 :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.le n _x_365) =>
                        matita_basics_logic.ex matita_arithmetics_nat.nat
                          (a :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.ex matita_arithmetics_nat.nat
                             (b :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.Or
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a n)
                                      (matita_arithmetics_nat.times b m))
                                   (matita_arithmetics_gcd.gcd_aux _x_365 m n))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b m)
                                      (matita_arithmetics_nat.times a n))
                                   (matita_arithmetics_gcd.gcd_aux _x_365 m n))))))))))
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         lenO :
           cic.Term cic.prop
             (matita_arithmetics_nat.le n matita_arithmetics_nat.O) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd_aux
                          matita_arithmetics_nat.O m n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd_aux
                          matita_arithmetics_nat.O m n)))))
           (matita_basics_logic.absurd
              (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) posn
              (matita_arithmetics_nat.le_to_not_lt n matita_arithmetics_nat.O
                 lenO)))
        (q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
            __1 : cic.Term cic.prop (matita_arithmetics_nat.le n m) ->
            __2 : cic.Term cic.prop (matita_arithmetics_nat.le n q) ->
            cic.Term cic.prop
              (matita_basics_logic.ex matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b m))
                          (matita_arithmetics_gcd.gcd_aux q m n))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a n))
                          (matita_arithmetics_gcd.gcd_aux q m n)))))) =>
         m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
         lenS :
           cic.Term cic.prop
             (matita_arithmetics_nat.le n (matita_arithmetics_nat.S q)) =>
         matita_basics_logic.match_Or (matita_arithmetics_primes.divides n m)
           (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_arithmetics_primes.divides n m)
                   (matita_basics_logic.Not
                      (matita_arithmetics_primes.divides n m))) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd_aux
                          (matita_arithmetics_nat.S q) m n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd_aux
                          (matita_arithmetics_nat.S q) m n)))))
           (divnm :
              cic.Term cic.prop (matita_arithmetics_primes.divides n m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x n) =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b m))
                          x)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a n))
                          x))))
              (matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b m))
                          n)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a n))
                          n)))
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                n)
                             (matita_arithmetics_nat.times b m))
                          n)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                n))
                          n))
                    matita_arithmetics_nat.O
                    (matita_basics_logic.or_introl
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                n)
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O m))
                          n)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O m)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                n))
                          n)
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 (matita_arithmetics_nat.minus x
                                    (matita_arithmetics_nat.times
                                       matita_arithmetics_nat.O m))
                                 n)
                                __))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.plus n
                                (matita_arithmetics_nat.times n
                                   matita_arithmetics_nat.O))
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2
                                       matita_arithmetics_nat.nat)
                                    (matita_arithmetics_nat.minus x
                                       (matita_arithmetics_nat.times
                                          matita_arithmetics_nat.O m))
                                    n)
                                   __))
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                matita_arithmetics_nat.O
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.plus n x)
                                          (matita_arithmetics_nat.times
                                             matita_arithmetics_nat.O m))
                                       n)
                                      __))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   n
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.minus x
                                             (matita_arithmetics_nat.times
                                                matita_arithmetics_nat.O m))
                                          n)
                                         __))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times m
                                         matita_arithmetics_nat.O)
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             (matita_arithmetics_nat.minus n
                                                x)
                                             n)
                                            __))
                                      (matita_basics_logic.rewrite_l
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         matita_arithmetics_nat.O
                                         (__ :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                (matita_arithmetics_nat.minus
                                                   n x)
                                                n)
                                               __))
                                         (matita_basics_logic.rewrite_l
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            n
                                            (__ :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop univs.Type2
                                               ((x :
                                                   cic.Term univs.Type0
                                                     matita_arithmetics_nat.nat =>
                                                 matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   x n)
                                                  __))
                                            (matita_basics_logic.refl
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               n)
                                            (matita_arithmetics_nat.minus n
                                               matita_arithmetics_nat.O)
                                            (matita_arithmetics_nat.minus_n_O
                                               n))
                                         (matita_arithmetics_nat.times m
                                            matita_arithmetics_nat.O)
                                         (matita_arithmetics_nat.times_n_O m))
                                      (matita_arithmetics_nat.times
                                         matita_arithmetics_nat.O m)
                                      (matita_arithmetics_nat.commutative_times
                                         matita_arithmetics_nat.O m))
                                   (matita_arithmetics_nat.plus n
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_nat.plus_n_O n))
                                (matita_arithmetics_nat.times n
                                   matita_arithmetics_nat.O)
                                (matita_arithmetics_nat.times_n_O n))
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))
                             (matita_arithmetics_nat.times_n_Sm n
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             n)
                          (matita_arithmetics_nat.commutative_times
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             n)))))
              (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m
                 n)
              (matita_arithmetics_gcd.divides_to_gcd_aux
                 (matita_arithmetics_nat.S q) m n
                 (matita_arithmetics_nat.lt_O_S q) posn divnm))
           (ndivnm :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_arithmetics_primes.divides n m)) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_gcd.gcd_aux q n
                 (matita_arithmetics_div_and_mod.mod m n))
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_gcd.gcd_aux q n
                         (matita_arithmetics_div_and_mod.mod m n))) =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b m))
                          x)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a n))
                          x))))
              (matita_basics_logic.match_ex matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_div_and_mod.mod m n))
                             (matita_arithmetics_nat.times b n))
                          (matita_arithmetics_gcd.gcd_aux q n
                             (matita_arithmetics_div_and_mod.mod m n)))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b n)
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_div_and_mod.mod m n)))
                          (matita_arithmetics_gcd.gcd_aux q n
                             (matita_arithmetics_div_and_mod.mod m n)))))
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.ex matita_arithmetics_nat.nat
                         (a :
                            cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                          matita_basics_logic.ex matita_arithmetics_nat.nat
                            (b :
                               cic.Term univs.Type0
                                 matita_arithmetics_nat.nat =>
                             matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a
                                        (matita_arithmetics_div_and_mod.mod m
                                           n))
                                     (matita_arithmetics_nat.times b n))
                                  (matita_arithmetics_gcd.gcd_aux q n
                                     (matita_arithmetics_div_and_mod.mod m n)))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a
                                        (matita_arithmetics_div_and_mod.mod m
                                           n)))
                                  (matita_arithmetics_gcd.gcd_aux q n
                                     (matita_arithmetics_div_and_mod.mod m n)))))) =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.ex matita_arithmetics_nat.nat
                       (b :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        matita_basics_logic.Or
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times a n)
                                (matita_arithmetics_nat.times b m))
                             (matita_arithmetics_gcd.gcd_aux q n
                                (matita_arithmetics_div_and_mod.mod m n)))
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times b m)
                                (matita_arithmetics_nat.times a n))
                             (matita_arithmetics_gcd.gcd_aux q n
                                (matita_arithmetics_div_and_mod.mod m n))))))
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _clearme :
                    cic.Term cic.prop
                      (matita_basics_logic.ex matita_arithmetics_nat.nat
                         (b :
                            cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                          matita_basics_logic.Or
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a
                                     (matita_arithmetics_div_and_mod.mod m n))
                                  (matita_arithmetics_nat.times b n))
                               (matita_arithmetics_gcd.gcd_aux q n
                                  (matita_arithmetics_div_and_mod.mod m n)))
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.times a
                                     (matita_arithmetics_div_and_mod.mod m n)))
                               (matita_arithmetics_gcd.gcd_aux q n
                                  (matita_arithmetics_div_and_mod.mod m n))))) =>
                  matita_basics_logic.match_ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_div_and_mod.mod m n))
                             (matita_arithmetics_nat.times b n))
                          (matita_arithmetics_gcd.gcd_aux q n
                             (matita_arithmetics_div_and_mod.mod m n)))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b n)
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_div_and_mod.mod m n)))
                          (matita_arithmetics_gcd.gcd_aux q n
                             (matita_arithmetics_div_and_mod.mod m n))))
                    cic.prop
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_logic.ex matita_arithmetics_nat.nat
                            (b :
                               cic.Term univs.Type0
                                 matita_arithmetics_nat.nat =>
                             matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a
                                        (matita_arithmetics_div_and_mod.mod m
                                           n))
                                     (matita_arithmetics_nat.times b n))
                                  (matita_arithmetics_gcd.gcd_aux q n
                                     (matita_arithmetics_div_and_mod.mod m n)))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a
                                        (matita_arithmetics_div_and_mod.mod m
                                           n)))
                                  (matita_arithmetics_gcd.gcd_aux q n
                                     (matita_arithmetics_div_and_mod.mod m n))))) =>
                     matita_basics_logic.ex matita_arithmetics_nat.nat
                       (a0 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        matita_basics_logic.ex matita_arithmetics_nat.nat
                          (b :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.Or
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times a0 n)
                                   (matita_arithmetics_nat.times b m))
                                (matita_arithmetics_gcd.gcd_aux q n
                                   (matita_arithmetics_div_and_mod.mod m n)))
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times b m)
                                   (matita_arithmetics_nat.times a0 n))
                                (matita_arithmetics_gcd.gcd_aux q n
                                   (matita_arithmetics_div_and_mod.mod m n))))))
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _clearme0 :
                       cic.Term cic.prop
                         (matita_basics_logic.Or
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a
                                     (matita_arithmetics_div_and_mod.mod m n))
                                  (matita_arithmetics_nat.times b n))
                               (matita_arithmetics_gcd.gcd_aux q n
                                  (matita_arithmetics_div_and_mod.mod m n)))
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.times a
                                     (matita_arithmetics_div_and_mod.mod m n)))
                               (matita_arithmetics_gcd.gcd_aux q n
                                  (matita_arithmetics_div_and_mod.mod m n)))) =>
                     matita_basics_logic.match_Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_div_and_mod.mod m n))
                             (matita_arithmetics_nat.times b n))
                          (matita_arithmetics_gcd.gcd_aux q n
                             (matita_arithmetics_div_and_mod.mod m n)))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b n)
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_div_and_mod.mod m n)))
                          (matita_arithmetics_gcd.gcd_aux q n
                             (matita_arithmetics_div_and_mod.mod m n)))
                       cic.prop
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a
                                        (matita_arithmetics_div_and_mod.mod m
                                           n))
                                     (matita_arithmetics_nat.times b n))
                                  (matita_arithmetics_gcd.gcd_aux q n
                                     (matita_arithmetics_div_and_mod.mod m n)))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a
                                        (matita_arithmetics_div_and_mod.mod m
                                           n)))
                                  (matita_arithmetics_gcd.gcd_aux q n
                                     (matita_arithmetics_div_and_mod.mod m n)))) =>
                        matita_basics_logic.ex matita_arithmetics_nat.nat
                          (a0 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.ex matita_arithmetics_nat.nat
                             (b0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.Or
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a0 n)
                                      (matita_arithmetics_nat.times b0 m))
                                   (matita_arithmetics_gcd.gcd_aux q n
                                      (matita_arithmetics_div_and_mod.mod m n)))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b0 m)
                                      (matita_arithmetics_nat.times a0 n))
                                   (matita_arithmetics_gcd.gcd_aux q n
                                      (matita_arithmetics_div_and_mod.mod m n))))))
                       (H :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a
                                     (matita_arithmetics_div_and_mod.mod m n))
                                  (matita_arithmetics_nat.times b n))
                               (matita_arithmetics_gcd.gcd_aux q n
                                  (matita_arithmetics_div_and_mod.mod m n))) =>
                        matita_basics_logic.eq_ind
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_div_and_mod.mod m n))
                             (matita_arithmetics_nat.times b n))
                          (x_1 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a
                                        (matita_arithmetics_div_and_mod.mod m
                                           n))
                                     (matita_arithmetics_nat.times b n))
                                  x_1) =>
                           matita_basics_logic.ex matita_arithmetics_nat.nat
                             (a0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.ex
                                matita_arithmetics_nat.nat
                                (b0 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_logic.Or
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a0 n)
                                         (matita_arithmetics_nat.times b0 m))
                                      x_1)
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b0 m)
                                         (matita_arithmetics_nat.times a0 n))
                                      x_1))))
                          (matita_basics_logic.ex_intro
                             matita_arithmetics_nat.nat
                             (a0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.ex
                                matita_arithmetics_nat.nat
                                (b0 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_logic.Or
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a0 n)
                                         (matita_arithmetics_nat.times b0 m))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))
                                         (matita_arithmetics_nat.times b n)))
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b0 m)
                                         (matita_arithmetics_nat.times a0 n))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))
                                         (matita_arithmetics_nat.times b n)))))
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.times a
                                   (matita_arithmetics_div_and_mod.div m n)))
                             (matita_basics_logic.ex_intro
                                matita_arithmetics_nat.nat
                                (b0 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_logic.Or
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)))
                                            n)
                                         (matita_arithmetics_nat.times b0 m))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))
                                         (matita_arithmetics_nat.times b n)))
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b0 m)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)))
                                            n))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))
                                         (matita_arithmetics_nat.times b n))))
                                a
                                (matita_basics_logic.or_intror
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)))
                                            n)
                                         (matita_arithmetics_nat.times a m))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))
                                         (matita_arithmetics_nat.times b n)))
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a m)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)))
                                            n))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))
                                         (matita_arithmetics_nat.times b n)))
                                   (matita_basics_logic.eq_ind
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.div
                                               m n))
                                         b)
                                      (x_1 :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       _x_2 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_div_and_mod.div
                                                       m n))
                                                 b)
                                              x_1) =>
                                       matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times a m)
                                            (matita_arithmetics_nat.times x_1
                                               n))
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times a
                                               (matita_arithmetics_div_and_mod.mod
                                                  m n))
                                            (matita_arithmetics_nat.times b n)))
                                      (matita_basics_logic.eq_ind_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n))
                                               n)
                                            (matita_arithmetics_nat.times b n))
                                         (x :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.div
                                                             m n))
                                                       n)
                                                    (matita_arithmetics_nat.times
                                                       b n))) =>
                                          matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  a m)
                                               x)
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.mod
                                                     m n))
                                               (matita_arithmetics_nat.times
                                                  b n)))
                                         (matita_basics_logic.eq_ind_r
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)
                                                  n)
                                               (matita_arithmetics_div_and_mod.mod
                                                  m n))
                                            (x :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             __ :
                                               cic.Term cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.lift univs.Type0
                                                       univs.Type2
                                                       matita_arithmetics_nat.nat)
                                                    x
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_div_and_mod.div
                                                             m n)
                                                          n)
                                                       (matita_arithmetics_div_and_mod.mod
                                                          m n))) =>
                                             matita_basics_logic.eq
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.minus
                                                  (matita_arithmetics_nat.times
                                                     a x)
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.div
                                                              m n))
                                                        n)
                                                     (matita_arithmetics_nat.times
                                                        b n)))
                                               (matita_arithmetics_nat.minus
                                                  (matita_arithmetics_nat.times
                                                     a
                                                     (matita_arithmetics_div_and_mod.mod
                                                        m n))
                                                  (matita_arithmetics_nat.times
                                                     b n)))
                                            (matita_basics_logic.eq_ind_r
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_div_and_mod.div
                                                        m n)
                                                     n))
                                               (x :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                __ :
                                                  cic.Term cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.lift univs.Type0
                                                          univs.Type2
                                                          matita_arithmetics_nat.nat)
                                                       x
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m n)
                                                             n))) =>
                                                matita_basics_logic.eq
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n)
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m n)))
                                                     (matita_arithmetics_nat.plus
                                                        x
                                                        (matita_arithmetics_nat.times
                                                           b n)))
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_div_and_mod.mod
                                                           m n))
                                                     (matita_arithmetics_nat.times
                                                        b n)))
                                               (matita_basics_logic.eq_ind
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_div_and_mod.mod
                                                        m n)
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_div_and_mod.div
                                                           m n)
                                                        n))
                                                  (x_1 :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   _x_2 :
                                                     cic.Term cic.prop
                                                       (matita_basics_logic.eq
                                                          (cic.lift
                                                             univs.Type0
                                                             univs.Type2
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.plus
                                                             (matita_arithmetics_div_and_mod.mod
                                                                m n)
                                                             (matita_arithmetics_nat.times
                                                                (matita_arithmetics_div_and_mod.div
                                                                   m n)
                                                                n))
                                                          x_1) =>
                                                   matita_basics_logic.eq
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.minus
                                                        (matita_arithmetics_nat.times
                                                           a x_1)
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_nat.times
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m n)
                                                                 n))
                                                           (matita_arithmetics_nat.times
                                                              b n)))
                                                     (matita_arithmetics_nat.minus
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m n))
                                                        (matita_arithmetics_nat.times
                                                           b n)))
                                                  (matita_basics_logic.eq_ind_r
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m n))
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n)))
                                                     (x :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      __ :
                                                        cic.Term cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.lift
                                                                univs.Type0
                                                                univs.Type2
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n)))) =>
                                                      matita_basics_logic.eq
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.minus
                                                           x
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                              (matita_arithmetics_nat.times
                                                                 b n)))
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_div_and_mod.mod
                                                                 m n))
                                                           (matita_arithmetics_nat.times
                                                              b n)))
                                                     (matita_basics_logic.eq_ind
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.minus
                                                              (matita_arithmetics_nat.plus
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                           (matita_arithmetics_nat.times
                                                              b n))
                                                        (x_1 :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         _x_2 :
                                                           cic.Term cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.lift
                                                                   univs.Type0
                                                                   univs.Type2
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.minus
                                                                   (matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.plus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                   (matita_arithmetics_nat.times
                                                                    b n))
                                                                x_1) =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           x_1
                                                           (matita_arithmetics_nat.minus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                              (matita_arithmetics_nat.times
                                                                 b n)))
                                                        (matita_basics_logic.eq_ind
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                           (x_1 :
                                                              cic.Term
                                                                univs.Type0
                                                                matita_arithmetics_nat.nat =>
                                                            _x_2 :
                                                              cic.Term
                                                                cic.prop
                                                                (matita_basics_logic.eq
                                                                   (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                   (matita_arithmetics_nat.plus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                   x_1) =>
                                                            matita_basics_logic.eq
                                                              (cic.lift
                                                                 univs.Type0
                                                                 univs.Type2
                                                                 matita_arithmetics_nat.nat)
                                                              (matita_arithmetics_nat.minus
                                                                 (matita_arithmetics_nat.minus
                                                                    x_1
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                 (matita_arithmetics_nat.times
                                                                    b n))
                                                              (matita_arithmetics_nat.minus
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                 (matita_arithmetics_nat.times
                                                                    b n)))
                                                           (matita_basics_logic.eq_ind
                                                              (cic.lift
                                                                 univs.Type0
                                                                 univs.Type2
                                                                 matita_arithmetics_nat.nat)
                                                              (matita_arithmetics_nat.plus
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                              (x_1 :
                                                                 cic.Term
                                                                   univs.Type0
                                                                   matita_arithmetics_nat.nat =>
                                                               _x_2 :
                                                                 cic.Term
                                                                   cic.prop
                                                                   (matita_basics_logic.eq
                                                                    (
                                                                    cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                    matita_arithmetics_nat.plus
                                                                    (
                                                                    matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    x_1) =>
                                                               matita_basics_logic.eq
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.minus
                                                                    x_1
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    b n))
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    b n)))
                                                              (matita_basics_logic.rewrite_r
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n))
                                                                 (__ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a x)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    (
                                                                   matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))) __))
                                                                 (matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    (
                                                                   matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))) __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a x))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))) __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.div
                                                                    m n))) x)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))) __))
                                                                    (
                                                                  matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    matita_arithmetics_nat.O
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))) __))
                                                                    (
                                                                  matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))) __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)) x)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))) __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))) __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)) x))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)) x)
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.refl
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b))
                                                                    (
                                                                  matita_arithmetics_gcd.let_clause_1544
                                                                    p q Hind
                                                                    m n posn
                                                                    lenm lenS
                                                                    ndivnm a
                                                                    _clearme
                                                                    b
                                                                    _clearme0
                                                                    H))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    b n))
                                                                    (
                                                                  matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b))
                                                                    (
                                                                  matita_arithmetics_gcd.let_clause_1544
                                                                    p q Hind
                                                                    m n posn
                                                                    lenm lenS
                                                                    ndivnm a
                                                                    _clearme
                                                                    b
                                                                    _clearme0
                                                                    H))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    b n))
                                                                    (
                                                                  matita_arithmetics_nat.plus
                                                                    matita_arithmetics_nat.O
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.plus_O_n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    (
                                                                  matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n))))
                                                                    (
                                                                  matita_arithmetics_nat.minus_n_n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.times_times
                                                                    a n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.times_times
                                                                    a n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)
                                                                 (matita_arithmetics_nat.commutative_times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                              (matita_arithmetics_nat.minus
                                                                 (matita_arithmetics_nat.plus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                              (matita_arithmetics_nat.plus_minus
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                 (matita_arithmetics_nat.le_n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))))
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                           (matita_arithmetics_nat.commutative_plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                              (matita_arithmetics_nat.times
                                                                 b n)))
                                                        (matita_arithmetics_nat.minus_plus
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_nat.times
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m n)
                                                                 n))
                                                           (matita_arithmetics_nat.times
                                                              b n)))
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m n)
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n)))
                                                     (matita_arithmetics_nat.distributive_times_plus
                                                        a
                                                        (matita_arithmetics_div_and_mod.mod
                                                           m n)
                                                        (matita_arithmetics_nat.times
                                                           (matita_arithmetics_div_and_mod.div
                                                              m n)
                                                           n)))
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_div_and_mod.div
                                                           m n)
                                                        n)
                                                     (matita_arithmetics_div_and_mod.mod
                                                        m n))
                                                  (matita_arithmetics_nat.commutative_plus
                                                     (matita_arithmetics_div_and_mod.mod
                                                        m n)
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_div_and_mod.div
                                                           m n)
                                                        n)))
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_nat.times
                                                     a
                                                     (matita_arithmetics_div_and_mod.div
                                                        m n))
                                                  n)
                                               (matita_arithmetics_nat.associative_times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)
                                                  n))
                                            m
                                            (matita_arithmetics_div_and_mod.div_mod
                                               m n))
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n))
                                               b)
                                            n)
                                         (matita_arithmetics_nat.distributive_times_plus_r
                                            n
                                            (matita_arithmetics_nat.times a
                                               (matita_arithmetics_div_and_mod.div
                                                  m n))
                                            b))
                                      (matita_arithmetics_nat.plus b
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.div
                                               m n)))
                                      (matita_arithmetics_nat.commutative_plus
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.div
                                               m n))
                                         b)))))
                          (matita_arithmetics_gcd.gcd_aux q n
                             (matita_arithmetics_div_and_mod.mod m n))
                          H)
                       (H :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.times a
                                     (matita_arithmetics_div_and_mod.mod m n)))
                               (matita_arithmetics_gcd.gcd_aux q n
                                  (matita_arithmetics_div_and_mod.mod m n))) =>
                        matita_basics_logic.eq_ind
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b n)
                             (matita_arithmetics_nat.times a
                                (matita_arithmetics_div_and_mod.mod m n)))
                          (x_1 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a
                                        (matita_arithmetics_div_and_mod.mod m
                                           n)))
                                  x_1) =>
                           matita_basics_logic.ex matita_arithmetics_nat.nat
                             (a0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.ex
                                matita_arithmetics_nat.nat
                                (b0 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_logic.Or
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a0 n)
                                         (matita_arithmetics_nat.times b0 m))
                                      x_1)
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b0 m)
                                         (matita_arithmetics_nat.times a0 n))
                                      x_1))))
                          (matita_basics_logic.ex_intro
                             matita_arithmetics_nat.nat
                             (a0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.ex
                                matita_arithmetics_nat.nat
                                (b0 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_logic.Or
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a0 n)
                                         (matita_arithmetics_nat.times b0 m))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))))
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b0 m)
                                         (matita_arithmetics_nat.times a0 n))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))))))
                             (matita_arithmetics_nat.plus b
                                (matita_arithmetics_nat.times a
                                   (matita_arithmetics_div_and_mod.div m n)))
                             (matita_basics_logic.ex_intro
                                matita_arithmetics_nat.nat
                                (b0 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 matita_basics_logic.Or
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)))
                                            n)
                                         (matita_arithmetics_nat.times b0 m))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))))
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b0 m)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)))
                                            n))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n)))))
                                a
                                (matita_basics_logic.or_introl
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)))
                                            n)
                                         (matita_arithmetics_nat.times a m))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))))
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times a m)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.plus b
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)))
                                            n))
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))))
                                   (matita_basics_logic.eq_ind_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.plus
                                         (matita_arithmetics_nat.times b n)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times a
                                               (matita_arithmetics_div_and_mod.div
                                                  m n))
                                            n))
                                      (x :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       __ :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2
                                                 matita_arithmetics_nat.nat)
                                              x
                                              (matita_arithmetics_nat.plus
                                                 (matita_arithmetics_nat.times
                                                    b n)
                                                 (matita_arithmetics_nat.times
                                                    (matita_arithmetics_nat.times
                                                       a
                                                       (matita_arithmetics_div_and_mod.div
                                                          m n))
                                                    n))) =>
                                       matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.minus x
                                            (matita_arithmetics_nat.times a m))
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times b n)
                                            (matita_arithmetics_nat.times a
                                               (matita_arithmetics_div_and_mod.mod
                                                  m n))))
                                      (matita_basics_logic.eq_ind_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_div_and_mod.div
                                                  m n)
                                               n)
                                            (matita_arithmetics_div_and_mod.mod
                                               m n))
                                         (x :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.plus
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_div_and_mod.div
                                                          m n)
                                                       n)
                                                    (matita_arithmetics_div_and_mod.mod
                                                       m n))) =>
                                          matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.times
                                                     b n)
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_div_and_mod.div
                                                           m n))
                                                     n))
                                               (matita_arithmetics_nat.times
                                                  a x))
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  b n)
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.mod
                                                     m n))))
                                         (matita_basics_logic.eq_ind_r
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.plus
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_div_and_mod.div
                                                        m n)
                                                     n))
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_div_and_mod.mod
                                                     m n)))
                                            (x :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             __ :
                                               cic.Term cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.lift univs.Type0
                                                       univs.Type2
                                                       matita_arithmetics_nat.nat)
                                                    x
                                                    (matita_arithmetics_nat.plus
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m n)
                                                             n))
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_div_and_mod.mod
                                                             m n)))) =>
                                             matita_basics_logic.eq
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.minus
                                                  (matita_arithmetics_nat.plus
                                                     (matita_arithmetics_nat.times
                                                        b n)
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.div
                                                              m n))
                                                        n))
                                                  x)
                                               (matita_arithmetics_nat.minus
                                                  (matita_arithmetics_nat.times
                                                     b n)
                                                  (matita_arithmetics_nat.times
                                                     a
                                                     (matita_arithmetics_div_and_mod.mod
                                                        m n))))
                                            (matita_basics_logic.eq_ind_r
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_div_and_mod.div
                                                        m n)
                                                     n))
                                               (x :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                __ :
                                                  cic.Term cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.lift univs.Type0
                                                          univs.Type2
                                                          matita_arithmetics_nat.nat)
                                                       x
                                                       (matita_arithmetics_nat.times
                                                          a
                                                          (matita_arithmetics_nat.times
                                                             (matita_arithmetics_div_and_mod.div
                                                                m n)
                                                             n))) =>
                                                matita_basics_logic.eq
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           b n)
                                                        x)
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n))
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m n))))
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        b n)
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_div_and_mod.mod
                                                           m n))))
                                               (matita_basics_logic.eq_ind
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.minus
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_nat.times
                                                              b n)
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_nat.times
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m n)
                                                                 n)))
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n)))
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_div_and_mod.mod
                                                           m n)))
                                                  (x_1 :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   _x_2 :
                                                     cic.Term cic.prop
                                                       (matita_basics_logic.eq
                                                          (cic.lift
                                                             univs.Type0
                                                             univs.Type2
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.minus
                                                                (matita_arithmetics_nat.plus
                                                                   (matita_arithmetics_nat.times
                                                                    b n)
                                                                   (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                             (matita_arithmetics_nat.times
                                                                a
                                                                (matita_arithmetics_div_and_mod.mod
                                                                   m n)))
                                                          x_1) =>
                                                   matita_basics_logic.eq
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     x_1
                                                     (matita_arithmetics_nat.minus
                                                        (matita_arithmetics_nat.times
                                                           b n)
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m n))))
                                                  (matita_basics_logic.eq_ind
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n))
                                                        (matita_arithmetics_nat.times
                                                           b n))
                                                     (x_1 :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      _x_2 :
                                                        cic.Term cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.lift
                                                                univs.Type0
                                                                univs.Type2
                                                                matita_arithmetics_nat.nat)
                                                             (matita_arithmetics_nat.plus
                                                                (matita_arithmetics_nat.times
                                                                   a
                                                                   (matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                (matita_arithmetics_nat.times
                                                                   b n))
                                                             x_1) =>
                                                      matita_basics_logic.eq
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.minus
                                                              x_1
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_div_and_mod.mod
                                                                 m n)))
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.times
                                                              b n)
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_div_and_mod.mod
                                                                 m n))))
                                                     (matita_basics_logic.eq_ind
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.plus
                                                           (matita_arithmetics_nat.minus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                           (matita_arithmetics_nat.times
                                                              b n))
                                                        (x_1 :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         _x_2 :
                                                           cic.Term cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.lift
                                                                   univs.Type0
                                                                   univs.Type2
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.plus
                                                                   (matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    (
                                                                    matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                   (matita_arithmetics_nat.times
                                                                    b n))
                                                                x_1) =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           (matita_arithmetics_nat.minus
                                                              x_1
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                           (matita_arithmetics_nat.minus
                                                              (matita_arithmetics_nat.times
                                                                 b n)
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                        (matita_basics_logic.rewrite_r
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           (matita_arithmetics_nat.times
                                                              n
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n))
                                                           (__ :
                                                              cic.Term
                                                                univs.Type0
                                                                matita_arithmetics_nat.nat =>
                                                            cic.lift cic.prop
                                                              univs.Type2
                                                              ((x :
                                                                  cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  (matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a x)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    (
                                                                   matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                  (matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                 __))
                                                           (matita_basics_logic.rewrite_r
                                                              (cic.lift
                                                                 univs.Type0
                                                                 univs.Type2
                                                                 matita_arithmetics_nat.nat)
                                                              (matita_arithmetics_nat.times
                                                                 n
                                                                 (matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                              (__ :
                                                                 cic.Term
                                                                   univs.Type0
                                                                   matita_arithmetics_nat.nat =>
                                                               cic.lift
                                                                 cic.prop
                                                                 univs.Type2
                                                                 ((x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    (
                                                                   matita_arithmetics_div_and_mod.div
                                                                    m n) n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    __))
                                                              (matita_basics_logic.rewrite_r
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n))
                                                                 (__ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a x))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    __))
                                                                 (matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.div
                                                                    m n))) x)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    matita_arithmetics_nat.O
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n))
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.plus
                                                                    matita_arithmetics_nat.O
                                                                    x)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n))))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n))
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                   matita_arithmetics_div_and_mod.mod
                                                                    m n)) x)
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.refl
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_gcd.gcd_aux
                                                                    q n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_gcd.let_clause_15441
                                                                    p q Hind
                                                                    m n posn
                                                                    lenm lenS
                                                                    ndivnm a
                                                                    _clearme
                                                                    b
                                                                    _clearme0
                                                                    H))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    b n))
                                                                    (
                                                                  matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.mod
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_gcd.let_clause_15441
                                                                    p q Hind
                                                                    m n posn
                                                                    lenm lenS
                                                                    ndivnm a
                                                                    _clearme
                                                                    b
                                                                    _clearme0
                                                                    H))
                                                                    (
                                                                  matita_arithmetics_nat.plus
                                                                    matita_arithmetics_nat.O
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b))
                                                                    (
                                                                  matita_arithmetics_nat.plus_O_n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n b)))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    b n)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    b n))
                                                                    (
                                                                  matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n))))
                                                                    (
                                                                  matita_arithmetics_nat.minus_n_n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                    (
                                                                  matita_arithmetics_nat.times_times
                                                                    a n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)
                                                                 (matita_arithmetics_nat.commutative_times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    n
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                              (matita_arithmetics_nat.times_times
                                                                 a n
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m n)))
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n)
                                                           (matita_arithmetics_nat.commutative_times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n))
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.plus
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n))
                                                              (matita_arithmetics_nat.times
                                                                 b n))
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_nat.times
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m n)
                                                                 n)))
                                                        (matita_arithmetics_nat.plus_minus
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_nat.times
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m n)
                                                                 n))
                                                           (matita_arithmetics_nat.times
                                                              a
                                                              (matita_arithmetics_nat.times
                                                                 (matita_arithmetics_div_and_mod.div
                                                                    m n)
                                                                 n))
                                                           (matita_arithmetics_nat.times
                                                              b n)
                                                           (matita_arithmetics_nat.le_n
                                                              (matita_arithmetics_nat.times
                                                                 a
                                                                 (matita_arithmetics_nat.times
                                                                    (
                                                                  matita_arithmetics_div_and_mod.div
                                                                    m n) n)))))
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           b n)
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n)))
                                                     (matita_arithmetics_nat.commutative_plus
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n))
                                                        (matita_arithmetics_nat.times
                                                           b n)))
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           b n)
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n)))
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n))
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_div_and_mod.mod
                                                              m n))))
                                                  (matita_arithmetics_nat.minus_plus
                                                     (matita_arithmetics_nat.plus
                                                        (matita_arithmetics_nat.times
                                                           b n)
                                                        (matita_arithmetics_nat.times
                                                           a
                                                           (matita_arithmetics_nat.times
                                                              (matita_arithmetics_div_and_mod.div
                                                                 m n)
                                                              n)))
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_nat.times
                                                           (matita_arithmetics_div_and_mod.div
                                                              m n)
                                                           n))
                                                     (matita_arithmetics_nat.times
                                                        a
                                                        (matita_arithmetics_div_and_mod.mod
                                                           m n))))
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_nat.times
                                                     a
                                                     (matita_arithmetics_div_and_mod.div
                                                        m n))
                                                  n)
                                               (matita_arithmetics_nat.associative_times
                                                  a
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)
                                                  n))
                                            (matita_arithmetics_nat.times a
                                               (matita_arithmetics_nat.plus
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_div_and_mod.div
                                                        m n)
                                                     n)
                                                  (matita_arithmetics_div_and_mod.mod
                                                     m n)))
                                            (matita_arithmetics_nat.distributive_times_plus
                                               a
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_div_and_mod.div
                                                     m n)
                                                  n)
                                               (matita_arithmetics_div_and_mod.mod
                                                  m n)))
                                         m
                                         (matita_arithmetics_div_and_mod.div_mod
                                            m n))
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.plus b
                                            (matita_arithmetics_nat.times a
                                               (matita_arithmetics_div_and_mod.div
                                                  m n)))
                                         n)
                                      (matita_arithmetics_nat.distributive_times_plus_r
                                         n b
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_div_and_mod.div
                                               m n)))))))
                          (matita_arithmetics_gcd.gcd_aux q n
                             (matita_arithmetics_div_and_mod.mod m n))
                          H)
                       _clearme0)
                    _clearme)
                 (Hind n (matita_arithmetics_div_and_mod.mod m n)
                    (matita_basics_logic.match_Or
                       (matita_arithmetics_nat.lt matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n))
                       cic.prop
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_logic.Or
                               (matita_arithmetics_nat.lt
                                  matita_arithmetics_nat.O
                                  (matita_arithmetics_div_and_mod.mod m n))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  matita_arithmetics_nat.O
                                  (matita_arithmetics_div_and_mod.mod m n))) =>
                        matita_arithmetics_nat.lt matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n))
                       (auto :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.lt
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n)) =>
                        auto)
                       (modO :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               matita_arithmetics_nat.O
                               (matita_arithmetics_div_and_mod.mod m n)) =>
                        matita_basics_logic.False_ind
                          (_x_66 :
                             cic.Term cic.prop matita_basics_logic.False =>
                           matita_arithmetics_nat.lt matita_arithmetics_nat.O
                             (matita_arithmetics_div_and_mod.mod m n))
                          (matita_basics_logic.absurd
                             (matita_arithmetics_primes.divides n m)
                             (matita_arithmetics_primes.mod_O_to_divides n m
                                posn
                                (matita_basics_logic.rewrite_l
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   matita_arithmetics_nat.O
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          x matita_arithmetics_nat.O)
                                         __))
                                   (matita_basics_logic.refl
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      matita_arithmetics_nat.O)
                                   (matita_arithmetics_div_and_mod.mod m n)
                                   modO))
                             ndivnm))
                       (matita_arithmetics_nat.le_to_or_lt_eq
                          matita_arithmetics_nat.O
                          (matita_arithmetics_div_and_mod.mod m n)
                          (matita_arithmetics_nat.le_O_n
                             (matita_arithmetics_div_and_mod.mod m n))))
                    (matita_arithmetics_nat.lt_to_le
                       (matita_arithmetics_div_and_mod.mod m n) n
                       (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn))
                    (matita_arithmetics_nat.le_S_S_to_le
                       (matita_arithmetics_div_and_mod.mod m n) q
                       (matita_arithmetics_nat.transitive_le
                          (matita_arithmetics_nat.S
                             (matita_arithmetics_div_and_mod.mod m n))
                          n (matita_arithmetics_nat.S q)
                          (matita_arithmetics_div_and_mod.lt_mod_m_m m n posn)
                          lenS))))
              (matita_arithmetics_gcd.gcd_aux (matita_arithmetics_nat.S q) m
                 n)
              (matita_arithmetics_gcd.not_divides_to_gcd_aux q m n posn
                 ndivnm))
           (matita_arithmetics_primes.decidable_divides n m))
        p.

def let_clause_1549 :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      eqm0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O m) ->
      x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           x1106 (matita_arithmetics_nat.minus x1106 m))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      eqm0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O m) =>
      x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x1106 (matita_arithmetics_nat.minus x1106 x))
              __))
        (matita_arithmetics_nat.minus_n_O x1106) m eqm0.

def let_clause_15491 :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      eqn0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) ->
      x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           x1106 (matita_arithmetics_nat.minus x1106 n))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      eqn0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) =>
      x1106 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x1106 (matita_arithmetics_nat.minus x1106 x))
              __))
        (matita_arithmetics_nat.minus_n_O x1106) n eqn0.

def let_clause_1551 :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      eqn0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) ->
      x347 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (matita_arithmetics_nat.times x347 n))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      eqn0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             matita_arithmetics_nat.O n) =>
      x347 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               n (matita_arithmetics_nat.times x347 x))
              __))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x
                  (matita_arithmetics_nat.times x347 matita_arithmetics_nat.O))
                 __))
           (matita_arithmetics_nat.times_n_O x347) n eqn0)
        n eqn0.

def eq_minus_gcd :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.ex matita_arithmetics_nat.nat
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.Or
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times a n)
                       (matita_arithmetics_nat.times b m))
                    (matita_arithmetics_gcd.gcd n m))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times b m)
                       (matita_arithmetics_nat.times a n))
                    (matita_arithmetics_gcd.gcd n m)))))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O n)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O n)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O n)) =>
         matita_basics_logic.ex matita_arithmetics_nat.nat
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.Or
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times a n)
                       (matita_arithmetics_nat.times b m))
                    (matita_arithmetics_gcd.gcd n m))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times b m)
                       (matita_arithmetics_nat.times a n))
                    (matita_arithmetics_gcd.gcd n m)))))
        (posn :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
         matita_basics_logic.match_Or
           (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O m)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_arithmetics_nat.lt matita_arithmetics_nat.O m)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      matita_arithmetics_nat.O m)) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd n m))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd n m)))))
           (posm :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) =>
            matita_arithmetics_nat.leb_elim n m
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b m))
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             (matita_arithmetics_gcd.gcd_aux n m n)
                             (matita_arithmetics_gcd.gcd_aux m n m) __))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a n))
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             (matita_arithmetics_gcd.gcd_aux n m n)
                             (matita_arithmetics_gcd.gcd_aux m n m) __)))))
              (lenm : cic.Term cic.prop (matita_arithmetics_nat.le n m) =>
               matita_arithmetics_gcd.eq_minus_gcd_aux n m n posn lenm
                 (matita_arithmetics_nat.le_n n))
              (nlenm :
                 cic.Term cic.prop
                   (matita_basics_logic.Not (matita_arithmetics_nat.le n m)) =>
               matita_basics_logic.match_ex matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a m)
                             (matita_arithmetics_nat.times b n))
                          (matita_arithmetics_gcd.gcd_aux m n m))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b n)
                             (matita_arithmetics_nat.times a m))
                          (matita_arithmetics_gcd.gcd_aux m n m))))
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.ex matita_arithmetics_nat.nat
                         (a :
                            cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                          matita_basics_logic.ex matita_arithmetics_nat.nat
                            (b :
                               cic.Term univs.Type0
                                 matita_arithmetics_nat.nat =>
                             matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a m)
                                     (matita_arithmetics_nat.times b n))
                                  (matita_arithmetics_gcd.gcd_aux m n m))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a m))
                                  (matita_arithmetics_gcd.gcd_aux m n m))))) =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.ex matita_arithmetics_nat.nat
                       (b :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        matita_basics_logic.Or
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times a n)
                                (matita_arithmetics_nat.times b m))
                             (matita_arithmetics_gcd.gcd_aux m n m))
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times b m)
                                (matita_arithmetics_nat.times a n))
                             (matita_arithmetics_gcd.gcd_aux m n m)))))
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _clearme :
                    cic.Term cic.prop
                      (matita_basics_logic.ex matita_arithmetics_nat.nat
                         (b :
                            cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                          matita_basics_logic.Or
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a m)
                                  (matita_arithmetics_nat.times b n))
                               (matita_arithmetics_gcd.gcd_aux m n m))
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.times a m))
                               (matita_arithmetics_gcd.gcd_aux m n m)))) =>
                  matita_basics_logic.match_ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a m)
                             (matita_arithmetics_nat.times b n))
                          (matita_arithmetics_gcd.gcd_aux m n m))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b n)
                             (matita_arithmetics_nat.times a m))
                          (matita_arithmetics_gcd.gcd_aux m n m)))
                    cic.prop
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_logic.ex matita_arithmetics_nat.nat
                            (b :
                               cic.Term univs.Type0
                                 matita_arithmetics_nat.nat =>
                             matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a m)
                                     (matita_arithmetics_nat.times b n))
                                  (matita_arithmetics_gcd.gcd_aux m n m))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a m))
                                  (matita_arithmetics_gcd.gcd_aux m n m)))) =>
                     matita_basics_logic.ex matita_arithmetics_nat.nat
                       (a0 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        matita_basics_logic.ex matita_arithmetics_nat.nat
                          (b :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.Or
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times a0 n)
                                   (matita_arithmetics_nat.times b m))
                                (matita_arithmetics_gcd.gcd_aux m n m))
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times b m)
                                   (matita_arithmetics_nat.times a0 n))
                                (matita_arithmetics_gcd.gcd_aux m n m)))))
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _clearme0 :
                       cic.Term cic.prop
                         (matita_basics_logic.Or
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a m)
                                  (matita_arithmetics_nat.times b n))
                               (matita_arithmetics_gcd.gcd_aux m n m))
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.times a m))
                               (matita_arithmetics_gcd.gcd_aux m n m))) =>
                     matita_basics_logic.match_Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a m)
                             (matita_arithmetics_nat.times b n))
                          (matita_arithmetics_gcd.gcd_aux m n m))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b n)
                             (matita_arithmetics_nat.times a m))
                          (matita_arithmetics_gcd.gcd_aux m n m))
                       cic.prop
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a m)
                                     (matita_arithmetics_nat.times b n))
                                  (matita_arithmetics_gcd.gcd_aux m n m))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b n)
                                     (matita_arithmetics_nat.times a m))
                                  (matita_arithmetics_gcd.gcd_aux m n m))) =>
                        matita_basics_logic.ex matita_arithmetics_nat.nat
                          (a0 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.ex matita_arithmetics_nat.nat
                             (b0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.Or
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a0 n)
                                      (matita_arithmetics_nat.times b0 m))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b0 m)
                                      (matita_arithmetics_nat.times a0 n))
                                   (matita_arithmetics_gcd.gcd_aux m n m)))))
                       (H :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a m)
                                  (matita_arithmetics_nat.times b n))
                               (matita_arithmetics_gcd.gcd_aux m n m)) =>
                        matita_basics_logic.ex_intro
                          matita_arithmetics_nat.nat
                          (a0 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.ex matita_arithmetics_nat.nat
                             (b0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.Or
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a0 n)
                                      (matita_arithmetics_nat.times b0 m))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b0 m)
                                      (matita_arithmetics_nat.times a0 n))
                                   (matita_arithmetics_gcd.gcd_aux m n m))))
                          b
                          (matita_basics_logic.ex_intro
                             matita_arithmetics_nat.nat
                             (b0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.Or
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b n)
                                      (matita_arithmetics_nat.times b0 m))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b0 m)
                                      (matita_arithmetics_nat.times b n))
                                   (matita_arithmetics_gcd.gcd_aux m n m)))
                             a
                             (matita_basics_logic.or_intror
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b n)
                                      (matita_arithmetics_nat.times a m))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a m)
                                      (matita_arithmetics_nat.times b n))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times m a)
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.minus x
                                             (matita_arithmetics_nat.times b
                                                n))
                                          (matita_arithmetics_gcd.gcd_aux m n
                                             m))
                                         __))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times n b)
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             (matita_arithmetics_nat.minus
                                                (matita_arithmetics_nat.times
                                                   m a)
                                                x)
                                             (matita_arithmetics_gcd.gcd_aux
                                                m n m))
                                            __))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_gcd.gcd_aux m n
                                            m)
                                         (__ :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                x
                                                (matita_arithmetics_gcd.gcd_aux
                                                   m n m))
                                               __))
                                         (matita_basics_logic.refl
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_gcd.gcd_aux m
                                               n m))
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times m a)
                                            (matita_arithmetics_nat.times n b))
                                         (matita_basics_logic.rewrite_l
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times b n)
                                            (__ :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop univs.Type2
                                               ((x :
                                                   cic.Term univs.Type0
                                                     matita_arithmetics_nat.nat =>
                                                 matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   (matita_arithmetics_nat.minus
                                                      (matita_arithmetics_nat.times
                                                         m a)
                                                      x)
                                                   (matita_arithmetics_gcd.gcd_aux
                                                      m n m))
                                                  __))
                                            (matita_basics_logic.rewrite_l
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  a m)
                                               (__ :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                cic.lift cic.prop univs.Type2
                                                  ((x :
                                                      cic.Term univs.Type0
                                                        matita_arithmetics_nat.nat =>
                                                    matita_basics_logic.eq
                                                      (cic.lift univs.Type0
                                                         univs.Type2
                                                         matita_arithmetics_nat.nat)
                                                      (matita_arithmetics_nat.minus
                                                         x
                                                         (matita_arithmetics_nat.times
                                                            b n))
                                                      (matita_arithmetics_gcd.gcd_aux
                                                         m n m))
                                                     __))
                                               H
                                               (matita_arithmetics_nat.times
                                                  m a)
                                               (matita_arithmetics_nat.commutative_times
                                                  a m))
                                            (matita_arithmetics_nat.times n b)
                                            (matita_arithmetics_nat.commutative_times
                                               b n)))
                                      (matita_arithmetics_nat.times b n)
                                      (matita_arithmetics_nat.commutative_times
                                         b n))
                                   (matita_arithmetics_nat.times a m)
                                   (matita_arithmetics_nat.commutative_times
                                      a m)))))
                       (H :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b n)
                                  (matita_arithmetics_nat.times a m))
                               (matita_arithmetics_gcd.gcd_aux m n m)) =>
                        matita_basics_logic.ex_intro
                          matita_arithmetics_nat.nat
                          (a0 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.ex matita_arithmetics_nat.nat
                             (b0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.Or
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a0 n)
                                      (matita_arithmetics_nat.times b0 m))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b0 m)
                                      (matita_arithmetics_nat.times a0 n))
                                   (matita_arithmetics_gcd.gcd_aux m n m))))
                          b
                          (matita_basics_logic.ex_intro
                             matita_arithmetics_nat.nat
                             (b0 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.Or
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b n)
                                      (matita_arithmetics_nat.times b0 m))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b0 m)
                                      (matita_arithmetics_nat.times b n))
                                   (matita_arithmetics_gcd.gcd_aux m n m)))
                             a
                             (matita_basics_logic.or_introl
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b n)
                                      (matita_arithmetics_nat.times a m))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a m)
                                      (matita_arithmetics_nat.times b n))
                                   (matita_arithmetics_gcd.gcd_aux m n m))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times n b)
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.minus x
                                             (matita_arithmetics_nat.times a
                                                m))
                                          (matita_arithmetics_gcd.gcd_aux m n
                                             m))
                                         __))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times m a)
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             (matita_arithmetics_nat.minus
                                                (matita_arithmetics_nat.times
                                                   n b)
                                                x)
                                             (matita_arithmetics_gcd.gcd_aux
                                                m n m))
                                            __))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_gcd.gcd_aux m n
                                            m)
                                         (__ :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                x
                                                (matita_arithmetics_gcd.gcd_aux
                                                   m n m))
                                               __))
                                         (matita_basics_logic.refl
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_gcd.gcd_aux m
                                               n m))
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times n b)
                                            (matita_arithmetics_nat.times m a))
                                         (matita_basics_logic.rewrite_l
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times a m)
                                            (__ :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop univs.Type2
                                               ((x :
                                                   cic.Term univs.Type0
                                                     matita_arithmetics_nat.nat =>
                                                 matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   (matita_arithmetics_nat.minus
                                                      (matita_arithmetics_nat.times
                                                         n b)
                                                      x)
                                                   (matita_arithmetics_gcd.gcd_aux
                                                      m n m))
                                                  __))
                                            (matita_basics_logic.rewrite_l
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  b n)
                                               (__ :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                cic.lift cic.prop univs.Type2
                                                  ((x :
                                                      cic.Term univs.Type0
                                                        matita_arithmetics_nat.nat =>
                                                    matita_basics_logic.eq
                                                      (cic.lift univs.Type0
                                                         univs.Type2
                                                         matita_arithmetics_nat.nat)
                                                      (matita_arithmetics_nat.minus
                                                         x
                                                         (matita_arithmetics_nat.times
                                                            a m))
                                                      (matita_arithmetics_gcd.gcd_aux
                                                         m n m))
                                                     __))
                                               H
                                               (matita_arithmetics_nat.times
                                                  n b)
                                               (matita_arithmetics_nat.commutative_times
                                                  b n))
                                            (matita_arithmetics_nat.times m a)
                                            (matita_arithmetics_nat.commutative_times
                                               a m)))
                                      (matita_arithmetics_nat.times a m)
                                      (matita_arithmetics_nat.commutative_times
                                         a m))
                                   (matita_arithmetics_nat.times b n)
                                   (matita_arithmetics_nat.commutative_times
                                      b n)))))
                       _clearme0)
                    _clearme)
                 (matita_arithmetics_gcd.eq_minus_gcd_aux m n m posm
                    (matita_arithmetics_nat.transitive_le m
                       (matita_arithmetics_nat.S m) n
                       (matita_arithmetics_nat.le_n_Sn m)
                       (matita_arithmetics_nat.not_le_to_lt n m nlenm))
                    (matita_arithmetics_nat.le_n m))))
           (eqm0 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x m) =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b m))
                          (matita_arithmetics_gcd.gcd n m))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a n))
                          (matita_arithmetics_gcd.gcd n m)))))
              (matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b m))
                          (matita_arithmetics_gcd.gcd n m))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a n))
                          (matita_arithmetics_gcd.gcd n m))))
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                n)
                             (matita_arithmetics_nat.times b m))
                          (matita_arithmetics_gcd.gcd n m))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                n))
                          (matita_arithmetics_gcd.gcd n m)))
                    matita_arithmetics_nat.O
                    (matita_basics_logic.or_introl
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                n)
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O m))
                          (matita_arithmetics_gcd.gcd n m))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times
                                matita_arithmetics_nat.O m)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                n))
                          (matita_arithmetics_gcd.gcd n m))
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop univs.Type0
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                n
                                (matita_arithmetics_nat.minus n
                                   matita_arithmetics_nat.O)))
                          (cic.lift cic.prop univs.Type0
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      n)
                                   (matita_arithmetics_nat.times
                                      matita_arithmetics_nat.O m))
                                (matita_arithmetics_gcd.gcd n m)))
                          (matita_arithmetics_nat.minus_n_O n)
                          (matita_basics_logic.rewrite_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             m
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          n
                                          (matita_arithmetics_nat.minus n x)))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.minus
                                             (matita_arithmetics_nat.times
                                                (matita_arithmetics_nat.S
                                                   matita_arithmetics_nat.O)
                                                n)
                                             (matita_arithmetics_nat.times
                                                matita_arithmetics_nat.O m))
                                          (matita_arithmetics_gcd.gcd n m))))
                                   __))
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                n
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift (cic.succ univs.Type0)
                                          univs.Type2 (cic.univ univs.Type0))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             n x))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             (matita_arithmetics_nat.minus
                                                (matita_arithmetics_nat.times
                                                   (matita_arithmetics_nat.S
                                                      matita_arithmetics_nat.O)
                                                   n)
                                                (matita_arithmetics_nat.times
                                                   matita_arithmetics_nat.O m))
                                             (matita_arithmetics_gcd.gcd n m))))
                                      __))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   m
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.succ univs.Type0)
                                             univs.Type2
                                             (cic.univ univs.Type0))
                                          (cic.lift cic.prop univs.Type0
                                             (matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                n n))
                                          (cic.lift cic.prop univs.Type0
                                             (matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                (matita_arithmetics_nat.minus
                                                   (matita_arithmetics_nat.times
                                                      (matita_arithmetics_nat.S
                                                         x)
                                                      n)
                                                   (matita_arithmetics_nat.times
                                                      matita_arithmetics_nat.O
                                                      m))
                                                (matita_arithmetics_gcd.gcd n
                                                   m))))
                                         __))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times n
                                         (matita_arithmetics_nat.S m))
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.succ univs.Type0)
                                                univs.Type2
                                                (cic.univ univs.Type0))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   n n))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   (matita_arithmetics_nat.minus
                                                      x
                                                      (matita_arithmetics_nat.times
                                                         matita_arithmetics_nat.O
                                                         m))
                                                   (matita_arithmetics_gcd.gcd
                                                      n m))))
                                            __))
                                      (matita_basics_logic.rewrite_l
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus n
                                            (matita_arithmetics_nat.times n m))
                                         (__ :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.succ univs.Type0)
                                                   univs.Type2
                                                   (cic.univ univs.Type0))
                                                (cic.lift cic.prop
                                                   univs.Type0
                                                   (matita_basics_logic.eq
                                                      (cic.lift univs.Type0
                                                         univs.Type2
                                                         matita_arithmetics_nat.nat)
                                                      n n))
                                                (cic.lift cic.prop
                                                   univs.Type0
                                                   (matita_basics_logic.eq
                                                      (cic.lift univs.Type0
                                                         univs.Type2
                                                         matita_arithmetics_nat.nat)
                                                      (matita_arithmetics_nat.minus
                                                         x
                                                         (matita_arithmetics_nat.times
                                                            matita_arithmetics_nat.O
                                                            m))
                                                      (matita_arithmetics_gcd.gcd
                                                         n m))))
                                               __))
                                         (matita_basics_logic.rewrite_r
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times m n)
                                            (__ :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop univs.Type2
                                               ((x :
                                                   cic.Term univs.Type0
                                                     matita_arithmetics_nat.nat =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.succ univs.Type0)
                                                      univs.Type2
                                                      (cic.univ univs.Type0))
                                                   (cic.lift cic.prop
                                                      univs.Type0
                                                      (matita_basics_logic.eq
                                                         (cic.lift
                                                            univs.Type0
                                                            univs.Type2
                                                            matita_arithmetics_nat.nat)
                                                         n n))
                                                   (cic.lift cic.prop
                                                      univs.Type0
                                                      (matita_basics_logic.eq
                                                         (cic.lift
                                                            univs.Type0
                                                            univs.Type2
                                                            matita_arithmetics_nat.nat)
                                                         (matita_arithmetics_nat.minus
                                                            (matita_arithmetics_nat.plus
                                                               n x)
                                                            (matita_arithmetics_nat.times
                                                               matita_arithmetics_nat.O
                                                               m))
                                                         (matita_arithmetics_gcd.gcd
                                                            n m))))
                                                  __))
                                            (matita_basics_logic.rewrite_l
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               m
                                               (__ :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                cic.lift cic.prop univs.Type2
                                                  ((x :
                                                      cic.Term univs.Type0
                                                        matita_arithmetics_nat.nat =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.succ
                                                            univs.Type0)
                                                         univs.Type2
                                                         (cic.univ
                                                            univs.Type0))
                                                      (cic.lift cic.prop
                                                         univs.Type0
                                                         (matita_basics_logic.eq
                                                            (cic.lift
                                                               univs.Type0
                                                               univs.Type2
                                                               matita_arithmetics_nat.nat)
                                                            n n))
                                                      (cic.lift cic.prop
                                                         univs.Type0
                                                         (matita_basics_logic.eq
                                                            (cic.lift
                                                               univs.Type0
                                                               univs.Type2
                                                               matita_arithmetics_nat.nat)
                                                            (matita_arithmetics_nat.minus
                                                               (matita_arithmetics_nat.plus
                                                                  n x)
                                                               (matita_arithmetics_nat.times
                                                                  matita_arithmetics_nat.O
                                                                  m))
                                                            (matita_arithmetics_gcd.gcd
                                                               n m))))
                                                     __))
                                               (matita_basics_logic.rewrite_r
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.plus
                                                     m n)
                                                  (__ :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   cic.lift cic.prop
                                                     univs.Type2
                                                     ((x :
                                                         cic.Term univs.Type0
                                                           matita_arithmetics_nat.nat =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.succ
                                                               univs.Type0)
                                                            univs.Type2
                                                            (cic.univ
                                                               univs.Type0))
                                                         (cic.lift cic.prop
                                                            univs.Type0
                                                            (matita_basics_logic.eq
                                                               (cic.lift
                                                                  univs.Type0
                                                                  univs.Type2
                                                                  matita_arithmetics_nat.nat)
                                                               n n))
                                                         (cic.lift cic.prop
                                                            univs.Type0
                                                            (matita_basics_logic.eq
                                                               (cic.lift
                                                                  univs.Type0
                                                                  univs.Type2
                                                                  matita_arithmetics_nat.nat)
                                                               (matita_arithmetics_nat.minus
                                                                  x
                                                                  (matita_arithmetics_nat.times
                                                                    matita_arithmetics_nat.O
                                                                    m))
                                                               (matita_arithmetics_gcd.gcd
                                                                  n m))))
                                                        __))
                                                  (matita_basics_logic.rewrite_l
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     n
                                                     (__ :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      cic.lift cic.prop
                                                        univs.Type2
                                                        ((x :
                                                            cic.Term
                                                              univs.Type0
                                                              matita_arithmetics_nat.nat =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.succ
                                                                  univs.Type0)
                                                               univs.Type2
                                                               (cic.univ
                                                                  univs.Type0))
                                                            (cic.lift
                                                               cic.prop
                                                               univs.Type0
                                                               (matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  n n))
                                                            (cic.lift
                                                               cic.prop
                                                               univs.Type0
                                                               (matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  (matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    matita_arithmetics_nat.O
                                                                    m))
                                                                  (matita_arithmetics_gcd.gcd
                                                                    n m))))
                                                           __))
                                                     (matita_basics_logic.rewrite_r
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        m
                                                        (__ :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         cic.lift cic.prop
                                                           univs.Type2
                                                           ((x :
                                                               cic.Term
                                                                 univs.Type0
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_basics_logic.eq
                                                               (cic.lift
                                                                  (cic.succ
                                                                    univs.Type0)
                                                                  univs.Type2
                                                                  (cic.univ
                                                                    univs.Type0))
                                                               (cic.lift
                                                                  cic.prop
                                                                  univs.Type0
                                                                  (matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n n))
                                                               (cic.lift
                                                                  cic.prop
                                                                  univs.Type0
                                                                  (matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    n
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    x m))
                                                                    (
                                                                   matita_arithmetics_gcd.gcd
                                                                    n m))))
                                                              __))
                                                        (matita_basics_logic.rewrite_l
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           m
                                                           (__ :
                                                              cic.Term
                                                                univs.Type0
                                                                matita_arithmetics_nat.nat =>
                                                            cic.lift cic.prop
                                                              univs.Type2
                                                              ((x :
                                                                  cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_basics_logic.eq
                                                                  (cic.lift
                                                                    (
                                                                   cic.succ
                                                                    univs.Type0)
                                                                    univs.Type2
                                                                    (
                                                                   cic.univ
                                                                    univs.Type0))
                                                                  (cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n n))
                                                                  (cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    n x)
                                                                    (
                                                                   matita_arithmetics_gcd.gcd
                                                                    n m))))
                                                                 __))
                                                           (matita_basics_logic.rewrite_l
                                                              (cic.lift
                                                                 univs.Type0
                                                                 univs.Type2
                                                                 matita_arithmetics_nat.nat)
                                                              n
                                                              (__ :
                                                                 cic.Term
                                                                   univs.Type0
                                                                   matita_arithmetics_nat.nat =>
                                                               cic.lift
                                                                 cic.prop
                                                                 univs.Type2
                                                                 ((x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    (
                                                                   cic.succ
                                                                    univs.Type0)
                                                                    univs.Type2
                                                                    (
                                                                   cic.univ
                                                                    univs.Type0))
                                                                    (
                                                                   cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n n))
                                                                    (
                                                                   cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                   matita_arithmetics_gcd.gcd
                                                                    n m))))
                                                                    __))
                                                              (matita_basics_logic.rewrite_r
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_gcd.gcd
                                                                    m n)
                                                                 (__ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    (
                                                                   cic.succ
                                                                    univs.Type0)
                                                                    univs.Type2
                                                                    (
                                                                   cic.univ
                                                                    univs.Type0))
                                                                    (
                                                                   cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n n))
                                                                    (
                                                                   cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n x))) __))
                                                                 (matita_basics_logic.rewrite_r
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    (
                                                                   cic.succ
                                                                    univs.Type0)
                                                                    univs.Type2
                                                                    (
                                                                   cic.univ
                                                                    univs.Type0))
                                                                    (
                                                                   cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n n))
                                                                    (
                                                                   cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n x))) __))
                                                                    (
                                                                  matita_basics_logic.refl
                                                                    (
                                                                  cic.lift
                                                                    (
                                                                  cic.succ
                                                                    univs.Type0)
                                                                    univs.Type2
                                                                    (
                                                                  cic.univ
                                                                    univs.Type0))
                                                                    (
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type0
                                                                    (
                                                                  matita_basics_logic.eq
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    n n)))
                                                                    (
                                                                  matita_arithmetics_gcd.gcd
                                                                    m n)
                                                                    (
                                                                  matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    matita_arithmetics_nat.O
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_gcd.gcd
                                                                    x n) n)
                                                                    __))
                                                                    (
                                                                  matita_arithmetics_gcd.gcd_O_l
                                                                    n) m eqm0))
                                                                 (matita_arithmetics_gcd.gcd
                                                                    n m)
                                                                 (matita_arithmetics_gcd.commutative_gcd
                                                                    n m))
                                                              (matita_arithmetics_nat.minus
                                                                 n m)
                                                              (matita_arithmetics_gcd.let_clause_1549
                                                                 m n posn
                                                                 eqm0 n))
                                                           (matita_arithmetics_nat.times
                                                              m m)
                                                           (matita_basics_logic.rewrite_l
                                                              (cic.lift
                                                                 univs.Type0
                                                                 univs.Type2
                                                                 matita_arithmetics_nat.nat)
                                                              matita_arithmetics_nat.O
                                                              (__ :
                                                                 cic.Term
                                                                   univs.Type0
                                                                   matita_arithmetics_nat.nat =>
                                                               cic.lift
                                                                 cic.prop
                                                                 univs.Type2
                                                                 ((x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    m
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    m x)) __))
                                                              (matita_basics_logic.rewrite_l
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 matita_arithmetics_nat.O
                                                                 (__ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    m
                                                                    matita_arithmetics_nat.O))
                                                                    __))
                                                                 (matita_arithmetics_nat.times_n_O
                                                                    m)
                                                                 m eqm0)
                                                              m eqm0))
                                                        matita_arithmetics_nat.O
                                                        eqm0)
                                                     (matita_arithmetics_nat.plus
                                                        m n)
                                                     (matita_basics_logic.rewrite_l
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        matita_arithmetics_nat.O
                                                        (__ :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         cic.lift cic.prop
                                                           univs.Type2
                                                           ((x :
                                                               cic.Term
                                                                 univs.Type0
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_basics_logic.eq
                                                               (cic.lift
                                                                  univs.Type0
                                                                  univs.Type2
                                                                  matita_arithmetics_nat.nat)
                                                               n
                                                               (matita_arithmetics_nat.plus
                                                                  x n))
                                                              __))
                                                        (matita_arithmetics_nat.plus_O_n
                                                           n)
                                                        m eqm0))
                                                  (matita_arithmetics_nat.plus
                                                     n m)
                                                  (matita_arithmetics_nat.commutative_plus
                                                     n m))
                                               (matita_arithmetics_nat.times
                                                  m n)
                                               (matita_basics_logic.rewrite_l
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  matita_arithmetics_nat.O
                                                  (__ :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   cic.lift cic.prop
                                                     univs.Type2
                                                     ((x :
                                                         cic.Term univs.Type0
                                                           matita_arithmetics_nat.nat =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            univs.Type0
                                                            univs.Type2
                                                            matita_arithmetics_nat.nat)
                                                         m
                                                         (matita_arithmetics_nat.times
                                                            x n))
                                                        __))
                                                  (matita_basics_logic.rewrite_l
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     matita_arithmetics_nat.O
                                                     (__ :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      cic.lift cic.prop
                                                        univs.Type2
                                                        ((x :
                                                            cic.Term
                                                              univs.Type0
                                                              matita_arithmetics_nat.nat =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               univs.Type0
                                                               univs.Type2
                                                               matita_arithmetics_nat.nat)
                                                            x
                                                            (matita_arithmetics_nat.times
                                                               matita_arithmetics_nat.O
                                                               n))
                                                           __))
                                                     (matita_arithmetics_nat.times_O_n
                                                        n)
                                                     m eqm0)
                                                  m eqm0))
                                            (matita_arithmetics_nat.times n m)
                                            (matita_arithmetics_nat.commutative_times
                                               n m))
                                         (matita_arithmetics_nat.times n
                                            (matita_arithmetics_nat.S m))
                                         (matita_arithmetics_nat.times_n_Sm n
                                            m))
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.S m) n)
                                      (matita_arithmetics_nat.commutative_times
                                         (matita_arithmetics_nat.S m) n))
                                   matita_arithmetics_nat.O eqm0)
                                (matita_arithmetics_nat.minus n m)
                                (matita_arithmetics_gcd.let_clause_1549 m n
                                   posn eqm0 n))
                             matita_arithmetics_nat.O eqm0)))))
              matita_arithmetics_nat.O eqm0)
           (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O m
              (matita_arithmetics_nat.le_O_n m)))
        (eqn0 :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O n) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x n) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd n m))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd n m)))))
           (matita_basics_logic.ex_intro matita_arithmetics_nat.nat
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd n m))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times a n))
                       (matita_arithmetics_gcd.gcd n m))))
              matita_arithmetics_nat.O
              (matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                 (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.Or
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times
                             matita_arithmetics_nat.O n)
                          (matita_arithmetics_nat.times b m))
                       (matita_arithmetics_gcd.gcd n m))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times b m)
                          (matita_arithmetics_nat.times
                             matita_arithmetics_nat.O n))
                       (matita_arithmetics_gcd.gcd n m)))
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_basics_logic.or_intror
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times
                             matita_arithmetics_nat.O n)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             m))
                       (matita_arithmetics_gcd.gcd n m))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O)
                             m)
                          (matita_arithmetics_nat.times
                             matita_arithmetics_nat.O n))
                       (matita_arithmetics_gcd.gcd n m))
                    (matita_basics_logic.eq_coerc
                       (cic.lift cic.prop univs.Type0
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             m
                             (matita_arithmetics_nat.minus m
                                matita_arithmetics_nat.O)))
                       (cic.lift cic.prop univs.Type0
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   m)
                                (matita_arithmetics_nat.times
                                   matita_arithmetics_nat.O n))
                             (matita_arithmetics_gcd.gcd n m)))
                       (matita_arithmetics_nat.minus_n_O m)
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          m
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       m
                                       (matita_arithmetics_nat.minus m
                                          matita_arithmetics_nat.O)))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       (matita_arithmetics_nat.minus
                                          (matita_arithmetics_nat.times
                                             (matita_arithmetics_nat.S
                                                matita_arithmetics_nat.O)
                                             m)
                                          (matita_arithmetics_nat.times
                                             matita_arithmetics_nat.O n))
                                       x)))
                                __))
                          (matita_basics_logic.rewrite_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             n
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          m
                                          (matita_arithmetics_nat.minus m x)))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          (matita_arithmetics_nat.minus
                                             (matita_arithmetics_nat.times
                                                (matita_arithmetics_nat.S
                                                   matita_arithmetics_nat.O)
                                                m)
                                             (matita_arithmetics_nat.times
                                                matita_arithmetics_nat.O n))
                                          m)))
                                   __))
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                m
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift (cic.succ univs.Type0)
                                          univs.Type2 (cic.univ univs.Type0))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             m x))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             (matita_arithmetics_nat.minus
                                                (matita_arithmetics_nat.times
                                                   (matita_arithmetics_nat.S
                                                      matita_arithmetics_nat.O)
                                                   m)
                                                (matita_arithmetics_nat.times
                                                   matita_arithmetics_nat.O n))
                                             m)))
                                      __))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   n
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.succ univs.Type0)
                                             univs.Type2
                                             (cic.univ univs.Type0))
                                          (cic.lift cic.prop univs.Type0
                                             (matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                m m))
                                          (cic.lift cic.prop univs.Type0
                                             (matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                (matita_arithmetics_nat.minus
                                                   (matita_arithmetics_nat.times
                                                      (matita_arithmetics_nat.S
                                                         x)
                                                      m)
                                                   (matita_arithmetics_nat.times
                                                      matita_arithmetics_nat.O
                                                      n))
                                                m)))
                                         __))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times m
                                         (matita_arithmetics_nat.S n))
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.succ univs.Type0)
                                                univs.Type2
                                                (cic.univ univs.Type0))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   m m))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   (matita_arithmetics_nat.minus
                                                      x
                                                      (matita_arithmetics_nat.times
                                                         matita_arithmetics_nat.O
                                                         n))
                                                   m)))
                                            __))
                                      (matita_basics_logic.rewrite_l
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.plus m
                                            (matita_arithmetics_nat.times m n))
                                         (__ :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift
                                                   (cic.succ univs.Type0)
                                                   univs.Type2
                                                   (cic.univ univs.Type0))
                                                (cic.lift cic.prop
                                                   univs.Type0
                                                   (matita_basics_logic.eq
                                                      (cic.lift univs.Type0
                                                         univs.Type2
                                                         matita_arithmetics_nat.nat)
                                                      m m))
                                                (cic.lift cic.prop
                                                   univs.Type0
                                                   (matita_basics_logic.eq
                                                      (cic.lift univs.Type0
                                                         univs.Type2
                                                         matita_arithmetics_nat.nat)
                                                      (matita_arithmetics_nat.minus
                                                         x
                                                         (matita_arithmetics_nat.times
                                                            matita_arithmetics_nat.O
                                                            n))
                                                      m)))
                                               __))
                                         (matita_basics_logic.rewrite_l
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            n
                                            (__ :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop univs.Type2
                                               ((x :
                                                   cic.Term univs.Type0
                                                     matita_arithmetics_nat.nat =>
                                                 matita_basics_logic.eq
                                                   (cic.lift
                                                      (cic.succ univs.Type0)
                                                      univs.Type2
                                                      (cic.univ univs.Type0))
                                                   (cic.lift cic.prop
                                                      univs.Type0
                                                      (matita_basics_logic.eq
                                                         (cic.lift
                                                            univs.Type0
                                                            univs.Type2
                                                            matita_arithmetics_nat.nat)
                                                         m m))
                                                   (cic.lift cic.prop
                                                      univs.Type0
                                                      (matita_basics_logic.eq
                                                         (cic.lift
                                                            univs.Type0
                                                            univs.Type2
                                                            matita_arithmetics_nat.nat)
                                                         (matita_arithmetics_nat.minus
                                                            (matita_arithmetics_nat.plus
                                                               m x)
                                                            (matita_arithmetics_nat.times
                                                               matita_arithmetics_nat.O
                                                               n))
                                                         m)))
                                                  __))
                                            (matita_basics_logic.rewrite_l
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               m
                                               (__ :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                cic.lift cic.prop univs.Type2
                                                  ((x :
                                                      cic.Term univs.Type0
                                                        matita_arithmetics_nat.nat =>
                                                    matita_basics_logic.eq
                                                      (cic.lift
                                                         (cic.succ
                                                            univs.Type0)
                                                         univs.Type2
                                                         (cic.univ
                                                            univs.Type0))
                                                      (cic.lift cic.prop
                                                         univs.Type0
                                                         (matita_basics_logic.eq
                                                            (cic.lift
                                                               univs.Type0
                                                               univs.Type2
                                                               matita_arithmetics_nat.nat)
                                                            m m))
                                                      (cic.lift cic.prop
                                                         univs.Type0
                                                         (matita_basics_logic.eq
                                                            (cic.lift
                                                               univs.Type0
                                                               univs.Type2
                                                               matita_arithmetics_nat.nat)
                                                            (matita_arithmetics_nat.minus
                                                               x
                                                               (matita_arithmetics_nat.times
                                                                  matita_arithmetics_nat.O
                                                                  n))
                                                            m)))
                                                     __))
                                               (matita_basics_logic.rewrite_r
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  n
                                                  (__ :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   cic.lift cic.prop
                                                     univs.Type2
                                                     ((x :
                                                         cic.Term univs.Type0
                                                           matita_arithmetics_nat.nat =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            (cic.succ
                                                               univs.Type0)
                                                            univs.Type2
                                                            (cic.univ
                                                               univs.Type0))
                                                         (cic.lift cic.prop
                                                            univs.Type0
                                                            (matita_basics_logic.eq
                                                               (cic.lift
                                                                  univs.Type0
                                                                  univs.Type2
                                                                  matita_arithmetics_nat.nat)
                                                               m m))
                                                         (cic.lift cic.prop
                                                            univs.Type0
                                                            (matita_basics_logic.eq
                                                               (cic.lift
                                                                  univs.Type0
                                                                  univs.Type2
                                                                  matita_arithmetics_nat.nat)
                                                               (matita_arithmetics_nat.minus
                                                                  m
                                                                  (matita_arithmetics_nat.times
                                                                    x n))
                                                               m)))
                                                        __))
                                                  (matita_basics_logic.rewrite_l
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     n
                                                     (__ :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      cic.lift cic.prop
                                                        univs.Type2
                                                        ((x :
                                                            cic.Term
                                                              univs.Type0
                                                              matita_arithmetics_nat.nat =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               (cic.succ
                                                                  univs.Type0)
                                                               univs.Type2
                                                               (cic.univ
                                                                  univs.Type0))
                                                            (cic.lift
                                                               cic.prop
                                                               univs.Type0
                                                               (matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  m m))
                                                            (cic.lift
                                                               cic.prop
                                                               univs.Type0
                                                               (matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  (matita_arithmetics_nat.minus
                                                                    m x)
                                                                  m)))
                                                           __))
                                                     (matita_basics_logic.rewrite_l
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        m
                                                        (__ :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         cic.lift cic.prop
                                                           univs.Type2
                                                           ((x :
                                                               cic.Term
                                                                 univs.Type0
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_basics_logic.eq
                                                               (cic.lift
                                                                  (cic.succ
                                                                    univs.Type0)
                                                                  univs.Type2
                                                                  (cic.univ
                                                                    univs.Type0))
                                                               (cic.lift
                                                                  cic.prop
                                                                  univs.Type0
                                                                  (matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    m m))
                                                               (cic.lift
                                                                  cic.prop
                                                                  univs.Type0
                                                                  (matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    x m)))
                                                              __))
                                                        (matita_basics_logic.refl
                                                           (cic.lift
                                                              (cic.succ
                                                                 univs.Type0)
                                                              univs.Type2
                                                              (cic.univ
                                                                 univs.Type0))
                                                           (cic.lift cic.prop
                                                              univs.Type0
                                                              (matita_basics_logic.eq
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 m m)))
                                                        (matita_arithmetics_nat.minus
                                                           m n)
                                                        (matita_arithmetics_gcd.let_clause_15491
                                                           m n eqn0 m))
                                                     (matita_arithmetics_nat.times
                                                        n n)
                                                     (matita_arithmetics_gcd.let_clause_1551
                                                        m n eqn0 n))
                                                  matita_arithmetics_nat.O
                                                  eqn0)
                                               (matita_arithmetics_nat.plus m
                                                  n)
                                               (matita_basics_logic.rewrite_l
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  matita_arithmetics_nat.O
                                                  (__ :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   cic.lift cic.prop
                                                     univs.Type2
                                                     ((x :
                                                         cic.Term univs.Type0
                                                           matita_arithmetics_nat.nat =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            univs.Type0
                                                            univs.Type2
                                                            matita_arithmetics_nat.nat)
                                                         m
                                                         (matita_arithmetics_nat.plus
                                                            m x))
                                                        __))
                                                  (matita_arithmetics_nat.plus_n_O
                                                     m)
                                                  n eqn0))
                                            (matita_arithmetics_nat.times m n)
                                            (matita_arithmetics_gcd.let_clause_1551
                                               m n eqn0 m))
                                         (matita_arithmetics_nat.times m
                                            (matita_arithmetics_nat.S n))
                                         (matita_arithmetics_nat.times_n_Sm m
                                            n))
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.S n) m)
                                      (matita_arithmetics_nat.commutative_times
                                         (matita_arithmetics_nat.S n) m))
                                   matita_arithmetics_nat.O eqn0)
                                (matita_arithmetics_nat.minus m n)
                                (matita_arithmetics_gcd.let_clause_15491 m n
                                   eqn0 m))
                             matita_arithmetics_nat.O eqn0)
                          (matita_arithmetics_gcd.gcd n m)
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2
                                       matita_arithmetics_nat.nat)
                                    (matita_arithmetics_gcd.gcd x m) m)
                                   __))
                             (matita_arithmetics_gcd.gcd_O_l m) n eqn0))))))
           matita_arithmetics_nat.O eqn0)
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O n
           (matita_arithmetics_nat.le_O_n n)).

def let_clause_1545 :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) ->
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides matita_arithmetics_nat.O n) ->
      q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      H1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             (matita_arithmetics_nat.times matita_arithmetics_nat.O q1)) ->
      _clearme0 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides matita_arithmetics_nat.O m) ->
      q2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      H2 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
             (matita_arithmetics_nat.times matita_arithmetics_nat.O q2)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
           matita_arithmetics_nat.O)
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides matita_arithmetics_nat.O n) =>
      q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             (matita_arithmetics_nat.times matita_arithmetics_nat.O q1)) =>
      _clearme0 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides matita_arithmetics_nat.O m) =>
      q2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H2 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
             (matita_arithmetics_nat.times matita_arithmetics_nat.O q2)) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times q2 matita_arithmetics_nat.O)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               m x)
              __))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times matita_arithmetics_nat.O q2)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  m x)
                 __))
           H2 (matita_arithmetics_nat.times q2 matita_arithmetics_nat.O)
           (matita_arithmetics_nat.commutative_times matita_arithmetics_nat.O
              q2))
        matita_arithmetics_nat.O (matita_arithmetics_nat.times_n_O q2).

def gcd_O_to_eq_O :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) ->
      cic.Term cic.prop
        (matita_basics_logic.And
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
              matita_arithmetics_nat.O)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              matita_arithmetics_nat.O))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) =>
      matita_basics_logic.match_And
        (matita_arithmetics_primes.divides matita_arithmetics_nat.O n)
        (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (matita_arithmetics_primes.divides matita_arithmetics_nat.O n)
                (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)) =>
         matita_basics_logic.And
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
              matita_arithmetics_nat.O)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              matita_arithmetics_nat.O))
        (_clearme :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides matita_arithmetics_nat.O n) =>
         matita_arithmetics_primes.match_divides matita_arithmetics_nat.O n
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides matita_arithmetics_nat.O n) =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides matita_arithmetics_nat.O m)
              (__1 :
                 cic.Term cic.prop
                   (matita_arithmetics_primes.divides
                      matita_arithmetics_nat.O m) =>
               matita_basics_logic.And
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m matita_arithmetics_nat.O)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n matita_arithmetics_nat.O)))
           (q1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            H1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n
                   (matita_arithmetics_nat.times matita_arithmetics_nat.O q1)) =>
            _clearme0 :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides matita_arithmetics_nat.O m) =>
            matita_arithmetics_primes.match_divides matita_arithmetics_nat.O
              m cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_arithmetics_primes.divides
                      matita_arithmetics_nat.O m) =>
               matita_basics_logic.And
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m matita_arithmetics_nat.O)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n matita_arithmetics_nat.O))
              (q2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               H2 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      m
                      (matita_arithmetics_nat.times matita_arithmetics_nat.O
                         q2)) =>
               matita_basics_logic.conj
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m matita_arithmetics_nat.O)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n matita_arithmetics_nat.O)
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           m x)
                          __))
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       m)
                    matita_arithmetics_nat.O
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times q2
                          matita_arithmetics_nat.O)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              m x)
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             matita_arithmetics_nat.O q2)
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 m x)
                                __))
                          H2
                          (matita_arithmetics_nat.times q2
                             matita_arithmetics_nat.O)
                          (matita_arithmetics_nat.commutative_times
                             matita_arithmetics_nat.O q2))
                       matita_arithmetics_nat.O
                       (matita_arithmetics_nat.times_n_O q2)))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           x matita_arithmetics_nat.O)
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       m
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              m x)
                             __))
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          m)
                       matita_arithmetics_nat.O
                       (matita_arithmetics_gcd.let_clause_1545 m n H _clearme
                          q1 H1 _clearme0 q2 H2))
                    n
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times m q1)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              n x)
                             __))
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 n (matita_arithmetics_nat.times x q1))
                                __))
                          H1 m
                          (matita_arithmetics_gcd.let_clause_1545 m n H
                             _clearme q1 H1 _clearme0 q2 H2))
                       m
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          matita_arithmetics_nat.O
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 m (matita_arithmetics_nat.times x q1))
                                __))
                          (matita_basics_logic.rewrite_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             matita_arithmetics_nat.O
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2
                                       matita_arithmetics_nat.nat)
                                    x
                                    (matita_arithmetics_nat.times
                                       matita_arithmetics_nat.O q1))
                                   __))
                             (matita_arithmetics_nat.times_O_n q1) m
                             (matita_arithmetics_gcd.let_clause_1545 m n H
                                _clearme q1 H1 _clearme0 q2 H2))
                          m
                          (matita_arithmetics_gcd.let_clause_1545 m n H
                             _clearme q1 H1 _clearme0 q2 H2)))))
              _clearme0)
           _clearme)
        (matita_basics_logic.eq_ind
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd m n)
           (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd m n) x_1) =>
            matita_basics_logic.And (matita_arithmetics_primes.divides x_1 n)
              (matita_arithmetics_primes.divides x_1 m))
           (matita_arithmetics_gcd.divides_gcd_nm m n)
           matita_arithmetics_nat.O H).

def let_clause_1571 :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) ->
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
             matita_arithmetics_nat.O) ->
      auto' :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             matita_arithmetics_nat.O) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m n)
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
             matita_arithmetics_nat.O) =>
      auto' :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             matita_arithmetics_nat.O) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        matita_arithmetics_nat.O
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               m x)
              __))
        auto n auto'.

def let_clause_1572 :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) ->
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
             matita_arithmetics_nat.O) ->
      auto' :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             matita_arithmetics_nat.O) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
           matita_arithmetics_nat.O)
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
             matita_arithmetics_nat.O) =>
      auto' :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
             matita_arithmetics_nat.O) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x matita_arithmetics_nat.O)
              __))
        auto' m
        (matita_arithmetics_gcd.let_clause_1571 m n posn H auto auto').

def lt_O_gcd :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O
           (matita_arithmetics_gcd.gcd m n))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      matita_arithmetics_nat.nat_case (matita_arithmetics_gcd.gcd m n)
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O)
        (H :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd m n) matita_arithmetics_nat.O) =>
         matita_basics_logic.match_And
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) m
              matita_arithmetics_nat.O)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              matita_arithmetics_nat.O)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      m matita_arithmetics_nat.O)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      n matita_arithmetics_nat.O)) =>
            matita_arithmetics_nat.lt matita_arithmetics_nat.O
              matita_arithmetics_nat.O)
           (auto :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   m matita_arithmetics_nat.O) =>
            auto' :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   n matita_arithmetics_nat.O) =>
            matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.lt matita_arithmetics_nat.O n))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.lt matita_arithmetics_nat.O
                    matita_arithmetics_nat.O))
              posn
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 m
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt x n))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              matita_arithmetics_nat.O
                              matita_arithmetics_nat.O)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.lt m x))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.lt
                                 matita_arithmetics_nat.O
                                 matita_arithmetics_nat.O)))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       m
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.lt m m))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_nat.lt x
                                    matita_arithmetics_nat.O)))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          m
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.lt m m))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_nat.lt m x)))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.lt m m)))
                          matita_arithmetics_nat.O
                          (matita_arithmetics_gcd.let_clause_1572 m n posn H
                             auto auto'))
                       matita_arithmetics_nat.O
                       (matita_arithmetics_gcd.let_clause_1572 m n posn H
                          auto auto'))
                    n
                    (matita_arithmetics_gcd.let_clause_1571 m n posn H auto
                       auto'))
                 matita_arithmetics_nat.O
                 (matita_arithmetics_gcd.let_clause_1572 m n posn H auto
                    auto')))
           (matita_arithmetics_gcd.gcd_O_to_eq_O m n H))
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_gcd.gcd m n)
                (matita_arithmetics_nat.S m0)) =>
         matita_arithmetics_nat.lt_O_S m0).

def gcd_n_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd n n) n)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.match_nat cic.prop
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd __ __) __)
        (matita_basics_logic.rewrite_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x matita_arithmetics_nat.O)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              matita_arithmetics_nat.O)
           (matita_arithmetics_gcd.gcd matita_arithmetics_nat.O
              matita_arithmetics_nat.O)
           (matita_arithmetics_gcd.gcd_O_l matita_arithmetics_nat.O))
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le_to_le_to_eq
           (matita_arithmetics_gcd.gcd (matita_arithmetics_nat.S m)
              (matita_arithmetics_nat.S m))
           (matita_arithmetics_nat.S m)
           (matita_arithmetics_primes.divides_to_le
              (matita_arithmetics_gcd.gcd (matita_arithmetics_nat.S m)
                 (matita_arithmetics_nat.S m))
              (matita_arithmetics_nat.S m) (matita_arithmetics_nat.lt_O_S m)
              (matita_arithmetics_gcd.divides_gcd_r
                 (matita_arithmetics_nat.S m) (matita_arithmetics_nat.S m)))
           (matita_arithmetics_primes.divides_to_le
              (matita_arithmetics_nat.S m)
              (matita_arithmetics_gcd.gcd (matita_arithmetics_nat.S m)
                 (matita_arithmetics_nat.S m))
              (matita_arithmetics_gcd.lt_O_gcd (matita_arithmetics_nat.S m)
                 (matita_arithmetics_nat.S m)
                 (matita_arithmetics_nat.lt_O_S m))
              (matita_arithmetics_gcd.divides_d_gcd
                 (matita_arithmetics_nat.S m) (matita_arithmetics_nat.S m)
                 (matita_arithmetics_nat.S m)
                 (matita_arithmetics_primes.divides_n_n
                    (matita_arithmetics_nat.S m))
                 (matita_arithmetics_primes.divides_n_n
                    (matita_arithmetics_nat.S m)))))
        n.

def gcd_1_to_lt_O :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd i n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O i)
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lt1n :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd i n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.match_Or
        (matita_arithmetics_nat.lt matita_arithmetics_nat.O i)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O i)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_arithmetics_nat.lt matita_arithmetics_nat.O i)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   matita_arithmetics_nat.O i)) =>
         matita_arithmetics_nat.lt matita_arithmetics_nat.O i)
        (auto :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt matita_arithmetics_nat.O i) =>
         auto)
        (iO :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                matita_arithmetics_nat.O i) =>
         matita_basics_logic.False_ind
           (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
            matita_arithmetics_nat.lt matita_arithmetics_nat.O i)
           (matita_basics_logic.absurd
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd i n)
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              gcd1
              (matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 matita_arithmetics_nat.O
                 (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         matita_arithmetics_nat.O x_1) =>
                  matita_basics_logic.Not
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd x_1 n)
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                 (matita_basics_logic.sym_not_eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n
                    (matita_arithmetics_nat.lt_to_not_eq
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) n
                       lt1n))
                 i iO)))
        (matita_arithmetics_nat.le_to_or_lt_eq matita_arithmetics_nat.O i
           (matita_arithmetics_nat.le_O_n i)).

def gcd_1_to_lt_n :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      __2 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd i n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop (matita_arithmetics_nat.lt i n) :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lt1n :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd i n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.match_Or (matita_arithmetics_nat.lt i n)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i n)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or (matita_arithmetics_nat.lt i n)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   i n)) =>
         matita_arithmetics_nat.lt i n)
        (auto : cic.Term cic.prop (matita_arithmetics_nat.lt i n) => auto)
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                i n) =>
         matita_basics_logic.eq_coerc
           (cic.lift cic.prop univs.Type0
              (matita_arithmetics_nat.lt
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))
           (cic.lift cic.prop univs.Type0 (matita_arithmetics_nat.lt i n))
           lt1n
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift (cic.succ univs.Type0) univs.Type2
                        (cic.univ univs.Type0))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.lt x n))
                     (cic.lift cic.prop univs.Type0
                        (matita_arithmetics_nat.lt i n)))
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 i
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt i x))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt i n)))
                       __))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    i
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.lt i i))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.lt i x)))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.lt i i)))
                    n auto)
                 n auto)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd i i)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        x (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (matita_arithmetics_gcd.gcd i x)
                           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                          __))
                    gcd1 i auto)
                 i (matita_arithmetics_gcd.gcd_n_n i))))
        (matita_arithmetics_nat.le_to_or_lt_eq i n lein).

def gcd_n_times_nm :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd n (matita_arithmetics_nat.times n m))
           n)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posm :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) =>
      matita_arithmetics_nat.nat_case n
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd __ (matita_arithmetics_nat.times __ m))
           __)
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n matita_arithmetics_nat.O) =>
         matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_gcd.gcd x
                     (matita_arithmetics_nat.times matita_arithmetics_nat.O m))
                  matita_arithmetics_nat.O)
                 __))
           (matita_basics_logic.rewrite_l
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) n
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_gcd.gcd n
                        (matita_arithmetics_nat.times x m))
                     matita_arithmetics_nat.O)
                    __))
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 n
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (matita_arithmetics_gcd.gcd n x)
                        matita_arithmetics_nat.O)
                       __))
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           x matita_arithmetics_nat.O)
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              n x)
                             __))
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n)
                       matita_arithmetics_nat.O auto)
                    (matita_arithmetics_gcd.gcd n n)
                    (matita_arithmetics_gcd.gcd_n_n n))
                 (matita_arithmetics_nat.times n m)
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           n (matita_arithmetics_nat.times x m))
                          __))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              x
                              (matita_arithmetics_nat.times
                                 matita_arithmetics_nat.O m))
                             __))
                       (matita_arithmetics_nat.times_O_n m) n auto)
                    n auto))
              matita_arithmetics_nat.O auto)
           matita_arithmetics_nat.O auto)
        (l : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         eqn :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n (matita_arithmetics_nat.S l)) =>
         matita_arithmetics_nat.le_to_le_to_eq
           (matita_arithmetics_gcd.gcd (matita_arithmetics_nat.S l)
              (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) m))
           (matita_arithmetics_nat.S l)
           (matita_arithmetics_primes.divides_to_le
              (matita_arithmetics_gcd.gcd (matita_arithmetics_nat.S l)
                 (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) m))
              (matita_arithmetics_nat.S l) (matita_arithmetics_nat.lt_O_S l)
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S l) m)
                          (matita_arithmetics_nat.S l))
                       (matita_arithmetics_nat.S l)))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd
                          (matita_arithmetics_nat.S l)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S l) m))
                       (matita_arithmetics_nat.S l)))
                 (matita_arithmetics_gcd.divides_gcd_r
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S l) m)
                    (matita_arithmetics_nat.S l))
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides
                                 (matita_arithmetics_gcd.gcd
                                    (matita_arithmetics_nat.times
                                       (matita_arithmetics_nat.S l) m)
                                    (matita_arithmetics_nat.S l))
                                 (matita_arithmetics_nat.S l)))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides
                                 (matita_arithmetics_gcd.gcd x
                                    (matita_arithmetics_nat.times
                                       (matita_arithmetics_nat.S l) m))
                                 (matita_arithmetics_nat.S l))))
                          __))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides
                                    (matita_arithmetics_gcd.gcd
                                       (matita_arithmetics_nat.times
                                          (matita_arithmetics_nat.S l) m)
                                       (matita_arithmetics_nat.S l))
                                    (matita_arithmetics_nat.S l)))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides
                                    (matita_arithmetics_gcd.gcd n
                                       (matita_arithmetics_nat.times x m))
                                    (matita_arithmetics_nat.S l))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides
                                       (matita_arithmetics_gcd.gcd
                                          (matita_arithmetics_nat.times x m)
                                          x)
                                       x))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides
                                       (matita_arithmetics_gcd.gcd n
                                          (matita_arithmetics_nat.times n m))
                                       x)))
                                __))
                          (matita_basics_logic.rewrite_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_gcd.gcd n
                                (matita_arithmetics_nat.times n m))
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_primes.divides x n))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_primes.divides
                                          (matita_arithmetics_gcd.gcd n
                                             (matita_arithmetics_nat.times n
                                                m))
                                          n)))
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift (cic.succ univs.Type0) univs.Type2
                                   (cic.univ univs.Type0))
                                (cic.lift cic.prop univs.Type0
                                   (matita_arithmetics_primes.divides
                                      (matita_arithmetics_gcd.gcd n
                                         (matita_arithmetics_nat.times n m))
                                      n)))
                             (matita_arithmetics_gcd.gcd
                                (matita_arithmetics_nat.times n m) n)
                             (matita_arithmetics_gcd.commutative_gcd
                                (matita_arithmetics_nat.times n m) n))
                          (matita_arithmetics_nat.S l) eqn)
                       (matita_arithmetics_nat.S l) eqn)
                    (matita_arithmetics_nat.S l) eqn)))
           (matita_arithmetics_primes.divides_to_le
              (matita_arithmetics_nat.S l)
              (matita_arithmetics_gcd.gcd (matita_arithmetics_nat.S l)
                 (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) m))
              (matita_arithmetics_gcd.lt_O_gcd (matita_arithmetics_nat.S l)
                 (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) m)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.times matita_arithmetics_nat.O
                       matita_arithmetics_nat.O)
                    (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.times
                               matita_arithmetics_nat.O
                               matita_arithmetics_nat.O)) =>
                     matita_arithmetics_nat.lt x
                       (matita_arithmetics_nat.times
                          (matita_arithmetics_nat.S l) m))
                    (matita_arithmetics_nat.lt_times matita_arithmetics_nat.O
                       (matita_arithmetics_nat.S l) matita_arithmetics_nat.O
                       m (matita_arithmetics_nat.lt_O_S l) posm)
                    matita_arithmetics_nat.O
                    (matita_arithmetics_nat.times_n_O
                       matita_arithmetics_nat.O)))
              (matita_arithmetics_gcd.divides_d_gcd
                 (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) m)
                 (matita_arithmetics_nat.S l) (matita_arithmetics_nat.S l)
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.times n m)))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_nat.S l)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S l) m)))
                    (matita_arithmetics_primes.divides_times n
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) n
                       m (matita_arithmetics_primes.divides_n_n n)
                       (matita_arithmetics_primes.divides_SO_n m))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides
                                    (matita_arithmetics_nat.times n
                                       (matita_arithmetics_nat.S
                                          matita_arithmetics_nat.O))
                                    (matita_arithmetics_nat.times n m)))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides x
                                    (matita_arithmetics_nat.times
                                       (matita_arithmetics_nat.S l) m))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides
                                       (matita_arithmetics_nat.times n
                                          (matita_arithmetics_nat.S
                                             matita_arithmetics_nat.O))
                                       (matita_arithmetics_nat.times n m)))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides n
                                       (matita_arithmetics_nat.times x m))))
                                __))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             n
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_primes.divides x
                                          (matita_arithmetics_nat.times n m)))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_primes.divides n
                                          (matita_arithmetics_nat.times n m))))
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift (cic.succ univs.Type0) univs.Type2
                                   (cic.univ univs.Type0))
                                (cic.lift cic.prop univs.Type0
                                   (matita_arithmetics_primes.divides n
                                      (matita_arithmetics_nat.times n m))))
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))
                             (matita_arithmetics_nat.times_n_1 n))
                          (matita_arithmetics_nat.S l) eqn)
                       (matita_arithmetics_nat.S l) eqn))
                 (matita_arithmetics_primes.divides_n_n
                    (matita_arithmetics_nat.S l))))).

def le_gcd_times :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) ->
      cic.Term cic.prop
        (matita_arithmetics_nat.le (matita_arithmetics_gcd.gcd m n)
           (matita_arithmetics_gcd.gcd m (matita_arithmetics_nat.times n p)))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posp :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) =>
      matita_arithmetics_nat.nat_case n
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_arithmetics_nat.le (matita_arithmetics_gcd.gcd m __)
           (matita_arithmetics_gcd.gcd m (matita_arithmetics_nat.times __ p)))
        (auto :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n matita_arithmetics_nat.O) =>
         matita_arithmetics_nat.le_n
           (matita_arithmetics_gcd.gcd m matita_arithmetics_nat.O))
        (l : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         eqn :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n (matita_arithmetics_nat.S l)) =>
         matita_arithmetics_primes.divides_to_le
           (matita_arithmetics_gcd.gcd m (matita_arithmetics_nat.S l))
           (matita_arithmetics_gcd.gcd m
              (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) p))
           (matita_arithmetics_gcd.lt_O_gcd m
              (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) p)
              (matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.times matita_arithmetics_nat.O
                    matita_arithmetics_nat.O)
                 (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         x
                         (matita_arithmetics_nat.times
                            matita_arithmetics_nat.O matita_arithmetics_nat.O)) =>
                  matita_arithmetics_nat.lt x
                    (matita_arithmetics_nat.times
                       (matita_arithmetics_nat.S l) p))
                 (matita_arithmetics_nat.lt_times matita_arithmetics_nat.O
                    (matita_arithmetics_nat.S l) matita_arithmetics_nat.O p
                    (matita_arithmetics_nat.lt_O_S l) posp)
                 matita_arithmetics_nat.O
                 (matita_arithmetics_nat.times_n_O matita_arithmetics_nat.O)))
           (matita_arithmetics_gcd.divides_d_gcd
              (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) p) m
              (matita_arithmetics_gcd.gcd m (matita_arithmetics_nat.S l))
              (matita_arithmetics_primes.transitive_divides
                 (matita_arithmetics_gcd.gcd m (matita_arithmetics_nat.S l))
                 (matita_arithmetics_nat.S l)
                 (matita_arithmetics_nat.times (matita_arithmetics_nat.S l) p)
                 (matita_arithmetics_gcd.divides_gcd_r m
                    (matita_arithmetics_nat.S l))
                 (matita_basics_logic.eq_coerc
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_nat.times n
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.times n p)))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_nat.S l)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.S l) p)))
                    (matita_arithmetics_primes.divides_times n
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) n
                       p (matita_arithmetics_primes.divides_n_n n)
                       (matita_arithmetics_primes.divides_SO_n p))
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides
                                    (matita_arithmetics_nat.times n
                                       (matita_arithmetics_nat.S
                                          matita_arithmetics_nat.O))
                                    (matita_arithmetics_nat.times n p)))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides x
                                    (matita_arithmetics_nat.times
                                       (matita_arithmetics_nat.S l) p))))
                             __))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides
                                       (matita_arithmetics_nat.times n
                                          (matita_arithmetics_nat.S
                                             matita_arithmetics_nat.O))
                                       (matita_arithmetics_nat.times n p)))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides n
                                       (matita_arithmetics_nat.times x p))))
                                __))
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             n
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_primes.divides x
                                          (matita_arithmetics_nat.times n p)))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_primes.divides n
                                          (matita_arithmetics_nat.times n p))))
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift (cic.succ univs.Type0) univs.Type2
                                   (cic.univ univs.Type0))
                                (cic.lift cic.prop univs.Type0
                                   (matita_arithmetics_primes.divides n
                                      (matita_arithmetics_nat.times n p))))
                             (matita_arithmetics_nat.times n
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O))
                             (matita_arithmetics_nat.times_n_1 n))
                          (matita_arithmetics_nat.S l) eqn)
                       (matita_arithmetics_nat.S l) eqn)))
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd
                          (matita_arithmetics_nat.S l) m)
                       m))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_primes.divides
                       (matita_arithmetics_gcd.gcd m
                          (matita_arithmetics_nat.S l))
                       m))
                 (matita_arithmetics_gcd.divides_gcd_r
                    (matita_arithmetics_nat.S l) m)
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides
                                 (matita_arithmetics_gcd.gcd x m) m))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_primes.divides
                                 (matita_arithmetics_gcd.gcd m x) m)))
                          __))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd m n)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift (cic.succ univs.Type0) univs.Type2
                                 (cic.univ univs.Type0))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides x m))
                              (cic.lift cic.prop univs.Type0
                                 (matita_arithmetics_primes.divides
                                    (matita_arithmetics_gcd.gcd m n) m)))
                             __))
                       (matita_basics_logic.refl
                          (cic.lift (cic.succ univs.Type0) univs.Type2
                             (cic.univ univs.Type0))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_primes.divides
                                (matita_arithmetics_gcd.gcd m n) m)))
                       (matita_arithmetics_gcd.gcd n m)
                       (matita_arithmetics_gcd.commutative_gcd n m))
                    (matita_arithmetics_nat.S l) eqn)))).

def gcd_times_SO_to_gcd_SO :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) ->
      __2 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m (matita_arithmetics_nat.times n p))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd m n)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      posp :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd m (matita_arithmetics_nat.times n p))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_arithmetics_nat.le_to_le_to_eq (matita_arithmetics_gcd.gcd m n)
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (matita_basics_logic.eq_ind
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd m (matita_arithmetics_nat.times n p))
           (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _x_2 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_gcd.gcd m
                      (matita_arithmetics_nat.times n p))
                   x_1) =>
            matita_arithmetics_nat.le (matita_arithmetics_gcd.gcd m n) x_1)
           (matita_arithmetics_gcd.le_gcd_times m n p posp)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) gcd1)
        (matita_arithmetics_gcd.lt_O_gcd m n posn).

def eq_gcd_SO_to_not_divides :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd n m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop
        (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lt1n :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt
             (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd n m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.not_to_not (matita_arithmetics_primes.divides n m)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd n m) n)
        (divnm : cic.Term cic.prop (matita_arithmetics_primes.divides n m) =>
         matita_arithmetics_gcd.divides_to_gcd m n
           (matita_arithmetics_nat.lt_S_to_lt matita_arithmetics_nat.O n lt1n)
           divnm)
        (matita_arithmetics_nat.lt_to_not_eq (matita_arithmetics_gcd.gcd n m)
           n
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_nat.lt (matita_arithmetics_gcd.gcd n m)
                    n))
              lt1n
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd n m)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt x n))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_nat.lt
                              (matita_arithmetics_gcd.gcd n m) n)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_nat.lt
                          (matita_arithmetics_gcd.gcd n m) n)))
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O) gcd1))).

def gcd_SO_n :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.le_to_le_to_eq
        (matita_arithmetics_gcd.gcd
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (matita_arithmetics_primes.divides_to_le
           (matita_arithmetics_gcd.gcd
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_nat.lt_O_S matita_arithmetics_nat.O)
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd n
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
              (matita_arithmetics_gcd.divides_gcd_r n
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd n
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides
                              (matita_arithmetics_gcd.gcd n
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O))
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O)))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides x
                              (matita_arithmetics_nat.S
                                 matita_arithmetics_nat.O))))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_gcd.gcd n
                             (matita_arithmetics_nat.S
                                matita_arithmetics_nat.O))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
                 (matita_arithmetics_gcd.gcd
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                 (matita_arithmetics_gcd.commutative_gcd
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) n))))
        (matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd n
              (matita_arithmetics_nat.S matita_arithmetics_nat.O))
           (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x
                   (matita_arithmetics_gcd.gcd n
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O))) =>
            matita_arithmetics_nat.le
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) x)
           (matita_arithmetics_gcd.lt_O_gcd n
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_nat.lt_O_S matita_arithmetics_nat.O))
           (matita_arithmetics_gcd.gcd
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
           (matita_arithmetics_gcd.commutative_gcd
              (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)).

def divides_gcd_mod :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides (matita_arithmetics_gcd.gcd m n)
           (matita_arithmetics_gcd.gcd n
              (matita_arithmetics_div_and_mod.mod m n)))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      matita_arithmetics_gcd.divides_d_gcd
        (matita_arithmetics_div_and_mod.mod m n) n
        (matita_arithmetics_gcd.gcd m n)
        (matita_arithmetics_gcd.divides_mod (matita_arithmetics_gcd.gcd m n)
           m n posn
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd n m) m))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd m n) m))
              (matita_arithmetics_gcd.divides_gcd_r n m)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd m n)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides x m))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides
                              (matita_arithmetics_gcd.gcd m n) m)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_gcd.gcd m n) m)))
                 (matita_arithmetics_gcd.gcd n m)
                 (matita_arithmetics_gcd.commutative_gcd n m)))
           (matita_arithmetics_gcd.divides_gcd_r m n))
        (matita_arithmetics_gcd.divides_gcd_r m n).

def divides_mod_gcd :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides
           (matita_arithmetics_gcd.gcd n
              (matita_arithmetics_div_and_mod.mod m n))
           (matita_arithmetics_gcd.gcd m n))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      matita_arithmetics_gcd.divides_d_gcd n m
        (matita_arithmetics_gcd.gcd n
           (matita_arithmetics_div_and_mod.mod m n))
        (matita_arithmetics_gcd.divides_gcd_l n
           (matita_arithmetics_div_and_mod.mod m n))
        (matita_arithmetics_gcd.divides_mod_to_divides
           (matita_arithmetics_gcd.gcd n
              (matita_arithmetics_div_and_mod.mod m n))
           m n posn
           (matita_arithmetics_gcd.divides_gcd_r n
              (matita_arithmetics_div_and_mod.mod m n))
           (matita_basics_logic.eq_coerc
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd
                       (matita_arithmetics_div_and_mod.mod m n) n)
                    n))
              (cic.lift cic.prop univs.Type0
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_gcd.gcd n
                       (matita_arithmetics_div_and_mod.mod m n))
                    n))
              (matita_arithmetics_gcd.divides_gcd_r
                 (matita_arithmetics_div_and_mod.mod m n) n)
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_gcd.gcd n
                    (matita_arithmetics_div_and_mod.mod m n))
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift (cic.succ univs.Type0) univs.Type2
                           (cic.univ univs.Type0))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides x n))
                        (cic.lift cic.prop univs.Type0
                           (matita_arithmetics_primes.divides
                              (matita_arithmetics_gcd.gcd n
                                 (matita_arithmetics_div_and_mod.mod m n))
                              n)))
                       __))
                 (matita_basics_logic.refl
                    (cic.lift (cic.succ univs.Type0) univs.Type2
                       (cic.univ univs.Type0))
                    (cic.lift cic.prop univs.Type0
                       (matita_arithmetics_primes.divides
                          (matita_arithmetics_gcd.gcd n
                             (matita_arithmetics_div_and_mod.mod m n))
                          n)))
                 (matita_arithmetics_gcd.gcd
                    (matita_arithmetics_div_and_mod.mod m n) n)
                 (matita_arithmetics_gcd.commutative_gcd
                    (matita_arithmetics_div_and_mod.mod m n) n)))).

def gcd_mod :
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd n
              (matita_arithmetics_div_and_mod.mod m n))
           (matita_arithmetics_gcd.gcd m n))
      :=
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      matita_arithmetics_primes.antisymmetric_divides
        (matita_arithmetics_gcd.gcd n
           (matita_arithmetics_div_and_mod.mod m n))
        (matita_arithmetics_gcd.gcd m n)
        (matita_arithmetics_gcd.divides_mod_gcd m n posn)
        (matita_arithmetics_gcd.divides_gcd_mod m n posn).

def prime_to_gcd_1 :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_primes.prime n) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd n m)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme : cic.Term cic.prop (matita_arithmetics_primes.prime n) =>
      matita_basics_logic.match_And
        (matita_arithmetics_nat.lt
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides m1 n)
              (__ :
                 cic.Term cic.prop (matita_arithmetics_primes.divides m1 n) =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m1)
                 (__1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m1) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m1 n))))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (matita_arithmetics_nat.lt
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) n)
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_primes.divides m0 n)
                      (__ :
                         cic.Term cic.prop
                           (matita_arithmetics_primes.divides m0 n) =>
                       cic.prod cic.prop cic.prop
                         (matita_arithmetics_nat.lt
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m0)
                         (__1 :
                            cic.Term cic.prop
                              (matita_arithmetics_nat.lt
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)
                                 m0) =>
                          matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            m0 n))))) =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.Not (matita_arithmetics_primes.divides n m))
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_arithmetics_primes.divides n m)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_gcd.gcd n m)
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
        (lt1n :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) n) =>
         primen :
           (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop (matita_arithmetics_primes.divides m0 n) ->
            __1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) m0) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 m0 n)) =>
         ndivnm :
           cic.Term cic.prop
             (matita_basics_logic.Not (matita_arithmetics_primes.divides n m)) =>
         matita_arithmetics_nat.le_to_le_to_eq
           (matita_arithmetics_gcd.gcd n m)
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_nat.not_lt_to_le
              (matita_arithmetics_nat.S matita_arithmetics_nat.O)
              (matita_arithmetics_gcd.gcd n m)
              (matita_basics_logic.not_to_not
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_arithmetics_gcd.gcd n m))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_gcd.gcd n m) n)
                 (primen (matita_arithmetics_gcd.gcd n m)
                    (matita_arithmetics_gcd.divides_gcd_l n m))
                 (matita_basics_logic.not_to_not
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd n m) n)
                    (matita_arithmetics_primes.divides n m)
                    (auto :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_gcd.gcd n m) n) =>
                     matita_basics_logic.eq_coerc
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_primes.divides
                             (matita_arithmetics_gcd.gcd n m) m))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_primes.divides n m))
                       (matita_arithmetics_gcd.divides_gcd_r n m)
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides x m))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides n m)))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_primes.divides n m)))
                          (matita_arithmetics_gcd.gcd n m) auto))
                    ndivnm)))
           (matita_arithmetics_gcd.lt_O_gcd n m
              (matita_arithmetics_nat.not_eq_to_le_to_lt
                 matita_arithmetics_nat.O m
                 (matita_basics_logic.not_to_not
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O m)
                    (matita_arithmetics_primes.divides n m)
                    (auto :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            matita_arithmetics_nat.O m) =>
                     matita_basics_logic.eq_coerc
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_primes.divides n
                             matita_arithmetics_nat.O))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_primes.divides n m))
                       (matita_arithmetics_primes.divides_n_O n)
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          m
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift (cic.succ univs.Type0) univs.Type2
                                    (cic.univ univs.Type0))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides n x))
                                 (cic.lift cic.prop univs.Type0
                                    (matita_arithmetics_primes.divides n m)))
                                __))
                          (matita_basics_logic.refl
                             (cic.lift (cic.succ univs.Type0) univs.Type2
                                (cic.univ univs.Type0))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_primes.divides n m)))
                          matita_arithmetics_nat.O auto))
                    ndivnm)
                 (matita_arithmetics_nat.le_O_n m))))
        _clearme.

def divides_times_to_divides :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times n m)) ->
      cic.Term cic.prop
        (matita_basics_logic.Or (matita_arithmetics_primes.divides p n)
           (matita_arithmetics_primes.divides p m))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      primp : cic.Term cic.prop (matita_arithmetics_primes.prime p) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times n m)) =>
      matita_arithmetics_primes.match_divides p
        (matita_arithmetics_nat.times n m) cic.prop
        (__ :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides p
                (matita_arithmetics_nat.times n m)) =>
         matita_basics_logic.Or (matita_arithmetics_primes.divides p n)
           (matita_arithmetics_primes.divides p m))
        (c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         nm :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times n m)
                (matita_arithmetics_nat.times p c)) =>
         matita_basics_logic.match_Or (matita_arithmetics_primes.divides p n)
           (matita_basics_logic.Not (matita_arithmetics_primes.divides p n))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_arithmetics_primes.divides p n)
                   (matita_basics_logic.Not
                      (matita_arithmetics_primes.divides p n))) =>
            matita_basics_logic.Or (matita_arithmetics_primes.divides p n)
              (matita_arithmetics_primes.divides p m))
           (auto :
              cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
            matita_basics_logic.or_introl
              (matita_arithmetics_primes.divides p n)
              (matita_arithmetics_primes.divides p m) auto)
           (ndivpn :
              cic.Term cic.prop
                (matita_basics_logic.Not
                   (matita_arithmetics_primes.divides p n)) =>
            matita_basics_logic.or_intror
              (matita_arithmetics_primes.divides p n)
              (matita_arithmetics_primes.divides p m)
              (matita_basics_logic.match_ex matita_arithmetics_nat.nat
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b p))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b p)
                             (matita_arithmetics_nat.times a n))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))))
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.ex matita_arithmetics_nat.nat
                         (a :
                            cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                          matita_basics_logic.ex matita_arithmetics_nat.nat
                            (b :
                               cic.Term univs.Type0
                                 matita_arithmetics_nat.nat =>
                             matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b p))
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b p)
                                     (matita_arithmetics_nat.times a n))
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O))))) =>
                  matita_arithmetics_primes.divides p m)
                 (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _clearme0 :
                    cic.Term cic.prop
                      (matita_basics_logic.ex matita_arithmetics_nat.nat
                         (b :
                            cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                          matita_basics_logic.Or
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b p))
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O))
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b p)
                                  (matita_arithmetics_nat.times a n))
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)))) =>
                  matita_basics_logic.match_ex matita_arithmetics_nat.nat
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b p))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b p)
                             (matita_arithmetics_nat.times a n))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O)))
                    cic.prop
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_logic.ex matita_arithmetics_nat.nat
                            (b :
                               cic.Term univs.Type0
                                 matita_arithmetics_nat.nat =>
                             matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b p))
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b p)
                                     (matita_arithmetics_nat.times a n))
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O)))) =>
                     matita_arithmetics_primes.divides p m)
                    (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _clearme1 :
                       cic.Term cic.prop
                         (matita_basics_logic.Or
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b p))
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O))
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b p)
                                  (matita_arithmetics_nat.times a n))
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O))) =>
                     matita_basics_logic.match_Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times b p))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b p)
                             (matita_arithmetics_nat.times a n))
                          (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                       cic.prop
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times a n)
                                     (matita_arithmetics_nat.times b p))
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times b p)
                                     (matita_arithmetics_nat.times a n))
                                  (matita_arithmetics_nat.S
                                     matita_arithmetics_nat.O))) =>
                        matita_arithmetics_primes.divides p m)
                       (H :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a n)
                                  (matita_arithmetics_nat.times b p))
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)) =>
                        matita_arithmetics_primes.quotient p m
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a c)
                             (matita_arithmetics_nat.times b m))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times p
                                   (matita_arithmetics_nat.times a c))
                                (matita_arithmetics_nat.times p
                                   (matita_arithmetics_nat.times b m)))
                             (x :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times p
                                           (matita_arithmetics_nat.times a c))
                                        (matita_arithmetics_nat.times p
                                           (matita_arithmetics_nat.times b m)))) =>
                              matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                m x)
                             (matita_basics_logic.eq_ind
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.times p a) c)
                                (x_1 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 _x_2 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p a)
                                           c)
                                        x_1) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   m
                                   (matita_arithmetics_nat.minus x_1
                                      (matita_arithmetics_nat.times p
                                         (matita_arithmetics_nat.times b m))))
                                (matita_basics_logic.eq_ind_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times a p)
                                   (x :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    __ :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              matita_arithmetics_nat.nat)
                                           x
                                           (matita_arithmetics_nat.times a p)) =>
                                    matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      m
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times x c)
                                         (matita_arithmetics_nat.times p
                                            (matita_arithmetics_nat.times b m))))
                                   (matita_basics_logic.eq_ind_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times a
                                         (matita_arithmetics_nat.times p c))
                                      (x :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       __ :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2
                                                 matita_arithmetics_nat.nat)
                                              x
                                              (matita_arithmetics_nat.times a
                                                 (matita_arithmetics_nat.times
                                                    p c))) =>
                                       matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         m
                                         (matita_arithmetics_nat.minus x
                                            (matita_arithmetics_nat.times p
                                               (matita_arithmetics_nat.times
                                                  b m))))
                                      (matita_basics_logic.eq_ind
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times n m)
                                         (x_1 :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          _x_2 :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    n m)
                                                 x_1) =>
                                          matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            m
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  a x_1)
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times
                                                     b m))))
                                         (matita_basics_logic.eq_ind
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_nat.times
                                                  a n)
                                               m)
                                            (x_1 :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             _x_2 :
                                               cic.Term cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.lift univs.Type0
                                                       univs.Type2
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       (matita_arithmetics_nat.times
                                                          a n)
                                                       m)
                                                    x_1) =>
                                             matita_basics_logic.eq
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               m
                                               (matita_arithmetics_nat.minus
                                                  x_1
                                                  (matita_arithmetics_nat.times
                                                     p
                                                     (matita_arithmetics_nat.times
                                                        b m))))
                                            (matita_basics_logic.eq_ind
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_nat.times
                                                     p b)
                                                  m)
                                               (x_1 :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                _x_2 :
                                                  cic.Term cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.lift univs.Type0
                                                          univs.Type2
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             p b)
                                                          m)
                                                       x_1) =>
                                                matita_basics_logic.eq
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  m
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_nat.times
                                                           a n)
                                                        m)
                                                     x_1))
                                               (matita_basics_logic.eq_ind
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.times
                                                     m
                                                     (matita_arithmetics_nat.times
                                                        a n))
                                                  (x_1 :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   _x_2 :
                                                     cic.Term cic.prop
                                                       (matita_basics_logic.eq
                                                          (cic.lift
                                                             univs.Type0
                                                             univs.Type2
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                a n))
                                                          x_1) =>
                                                   matita_basics_logic.eq
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     m
                                                     (matita_arithmetics_nat.minus
                                                        x_1
                                                        (matita_arithmetics_nat.times
                                                           (matita_arithmetics_nat.times
                                                              p b)
                                                           m)))
                                                  (matita_basics_logic.eq_ind_r
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.times
                                                        m
                                                        (matita_arithmetics_nat.times
                                                           p b))
                                                     (x :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      __ :
                                                        cic.Term cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.lift
                                                                univs.Type0
                                                                univs.Type2
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   p b))) =>
                                                      matita_basics_logic.eq
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        m
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.times
                                                              m
                                                              (matita_arithmetics_nat.times
                                                                 a n))
                                                           x))
                                                     (matita_basics_logic.eq_ind
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.times
                                                           m
                                                           (matita_arithmetics_nat.minus
                                                              (matita_arithmetics_nat.times
                                                                 a n)
                                                              (matita_arithmetics_nat.times
                                                                 p b)))
                                                        (x_1 :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         _x_2 :
                                                           cic.Term cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.lift
                                                                   univs.Type0
                                                                   univs.Type2
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   m
                                                                   (matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a n)
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    p b)))
                                                                x_1) =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           m x_1)
                                                        (matita_basics_logic.rewrite_r
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           (matita_arithmetics_nat.times
                                                              n a)
                                                           (__ :
                                                              cic.Term
                                                                univs.Type0
                                                                matita_arithmetics_nat.nat =>
                                                            cic.lift cic.prop
                                                              univs.Type2
                                                              ((x :
                                                                  cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  m
                                                                  (matita_arithmetics_nat.times
                                                                    m
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    p b))))
                                                                 __))
                                                           (matita_basics_logic.rewrite_l
                                                              (cic.lift
                                                                 univs.Type0
                                                                 univs.Type2
                                                                 matita_arithmetics_nat.nat)
                                                              m
                                                              (__ :
                                                                 cic.Term
                                                                   univs.Type0
                                                                   matita_arithmetics_nat.nat =>
                                                               cic.lift
                                                                 cic.prop
                                                                 univs.Type2
                                                                 ((x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    m x) __))
                                                              (matita_basics_logic.refl
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 m)
                                                              (matita_arithmetics_nat.times
                                                                 m
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n a)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    p b)))
                                                              (matita_basics_logic.rewrite_r
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O)
                                                                 (__ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    m
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    m x)) __))
                                                                 (matita_arithmetics_nat.times_n_1
                                                                    m)
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n a)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    p b))
                                                                 (matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    b p)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    n a) x)
                                                                    (
                                                                   matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a n)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    b p))
                                                                    (
                                                                   matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O))
                                                                    __)) H
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n a)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    a n))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    p b)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    b p))))
                                                           (matita_arithmetics_nat.times
                                                              a n)
                                                           (matita_arithmetics_nat.commutative_times
                                                              a n))
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.times
                                                              m
                                                              (matita_arithmetics_nat.times
                                                                 a n))
                                                           (matita_arithmetics_nat.times
                                                              m
                                                              (matita_arithmetics_nat.times
                                                                 p b)))
                                                        (matita_arithmetics_nat.distributive_times_minus
                                                           m
                                                           (matita_arithmetics_nat.times
                                                              a n)
                                                           (matita_arithmetics_nat.times
                                                              p b)))
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_nat.times
                                                           p b)
                                                        m)
                                                     (matita_arithmetics_nat.commutative_times
                                                        (matita_arithmetics_nat.times
                                                           p b)
                                                        m))
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_nat.times
                                                        a n)
                                                     m)
                                                  (matita_arithmetics_nat.commutative_times
                                                     m
                                                     (matita_arithmetics_nat.times
                                                        a n)))
                                               (matita_arithmetics_nat.times
                                                  p
                                                  (matita_arithmetics_nat.times
                                                     b m))
                                               (matita_arithmetics_nat.associative_times
                                                  p b m))
                                            (matita_arithmetics_nat.times a
                                               (matita_arithmetics_nat.times
                                                  n m))
                                            (matita_arithmetics_nat.associative_times
                                               a n m))
                                         (matita_arithmetics_nat.times p c)
                                         nm)
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.times a p) c)
                                      (matita_arithmetics_nat.associative_times
                                         a p c))
                                   (matita_arithmetics_nat.times p a)
                                   (matita_arithmetics_nat.commutative_times
                                      p a))
                                (matita_arithmetics_nat.times p
                                   (matita_arithmetics_nat.times a c))
                                (matita_arithmetics_nat.associative_times p a
                                   c))
                             (matita_arithmetics_nat.times p
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times a c)
                                   (matita_arithmetics_nat.times b m)))
                             (matita_arithmetics_nat.distributive_times_minus
                                p (matita_arithmetics_nat.times a c)
                                (matita_arithmetics_nat.times b m))))
                       (H :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b p)
                                  (matita_arithmetics_nat.times a n))
                               (matita_arithmetics_nat.S
                                  matita_arithmetics_nat.O)) =>
                        matita_arithmetics_primes.quotient p m
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a c))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times p
                                   (matita_arithmetics_nat.times b m))
                                (matita_arithmetics_nat.times p
                                   (matita_arithmetics_nat.times a c)))
                             (x :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              __ :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     x
                                     (matita_arithmetics_nat.minus
                                        (matita_arithmetics_nat.times p
                                           (matita_arithmetics_nat.times b m))
                                        (matita_arithmetics_nat.times p
                                           (matita_arithmetics_nat.times a c)))) =>
                              matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                m x)
                             (matita_basics_logic.eq_ind
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.times p b) m)
                                (x_1 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 _x_2 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p b)
                                           m)
                                        x_1) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   m
                                   (matita_arithmetics_nat.minus x_1
                                      (matita_arithmetics_nat.times p
                                         (matita_arithmetics_nat.times a c))))
                                (matita_basics_logic.eq_ind
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times
                                      (matita_arithmetics_nat.times p a) c)
                                   (x_1 :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    _x_2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times
                                              (matita_arithmetics_nat.times p
                                                 a)
                                              c)
                                           x_1) =>
                                    matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      m
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times p b)
                                            m)
                                         x_1))
                                   (matita_basics_logic.eq_ind
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times a p)
                                      (x_1 :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       _x_2 :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2
                                                 matita_arithmetics_nat.nat)
                                              (matita_arithmetics_nat.times a
                                                 p)
                                              x_1) =>
                                       matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         m
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_nat.times
                                                  p b)
                                               m)
                                            (matita_arithmetics_nat.times x_1
                                               c)))
                                      (matita_basics_logic.eq_ind_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times a
                                            (matita_arithmetics_nat.times p c))
                                         (x :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    a
                                                    (matita_arithmetics_nat.times
                                                       p c))) =>
                                          matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            m
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_nat.times
                                                     p b)
                                                  m)
                                               x))
                                         (matita_basics_logic.eq_ind
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times n m)
                                            (x_1 :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             _x_2 :
                                               cic.Term cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.lift univs.Type0
                                                       univs.Type2
                                                       matita_arithmetics_nat.nat)
                                                    (matita_arithmetics_nat.times
                                                       n m)
                                                    x_1) =>
                                             matita_basics_logic.eq
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               m
                                               (matita_arithmetics_nat.minus
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_nat.times
                                                        p b)
                                                     m)
                                                  (matita_arithmetics_nat.times
                                                     a x_1)))
                                            (matita_basics_logic.eq_ind
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_nat.times
                                                     a n)
                                                  m)
                                               (x_1 :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                _x_2 :
                                                  cic.Term cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.lift univs.Type0
                                                          univs.Type2
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          (matita_arithmetics_nat.times
                                                             a n)
                                                          m)
                                                       x_1) =>
                                                matita_basics_logic.eq
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  m
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_nat.times
                                                           p b)
                                                        m)
                                                     x_1))
                                               (matita_basics_logic.eq_ind
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.times
                                                     m
                                                     (matita_arithmetics_nat.times
                                                        p b))
                                                  (x_1 :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   _x_2 :
                                                     cic.Term cic.prop
                                                       (matita_basics_logic.eq
                                                          (cic.lift
                                                             univs.Type0
                                                             univs.Type2
                                                             matita_arithmetics_nat.nat)
                                                          (matita_arithmetics_nat.times
                                                             m
                                                             (matita_arithmetics_nat.times
                                                                p b))
                                                          x_1) =>
                                                   matita_basics_logic.eq
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     m
                                                     (matita_arithmetics_nat.minus
                                                        x_1
                                                        (matita_arithmetics_nat.times
                                                           (matita_arithmetics_nat.times
                                                              a n)
                                                           m)))
                                                  (matita_basics_logic.eq_ind_r
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     (matita_arithmetics_nat.times
                                                        m
                                                        (matita_arithmetics_nat.times
                                                           a n))
                                                     (x :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      __ :
                                                        cic.Term cic.prop
                                                          (matita_basics_logic.eq
                                                             (cic.lift
                                                                univs.Type0
                                                                univs.Type2
                                                                matita_arithmetics_nat.nat)
                                                             x
                                                             (matita_arithmetics_nat.times
                                                                m
                                                                (matita_arithmetics_nat.times
                                                                   a n))) =>
                                                      matita_basics_logic.eq
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        m
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.times
                                                              m
                                                              (matita_arithmetics_nat.times
                                                                 p b))
                                                           x))
                                                     (matita_basics_logic.eq_ind
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.times
                                                           m
                                                           (matita_arithmetics_nat.minus
                                                              (matita_arithmetics_nat.times
                                                                 p b)
                                                              (matita_arithmetics_nat.times
                                                                 a n)))
                                                        (x_1 :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         _x_2 :
                                                           cic.Term cic.prop
                                                             (matita_basics_logic.eq
                                                                (cic.lift
                                                                   univs.Type0
                                                                   univs.Type2
                                                                   matita_arithmetics_nat.nat)
                                                                (matita_arithmetics_nat.times
                                                                   m
                                                                   (matita_arithmetics_nat.minus
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    p b)
                                                                    (
                                                                    matita_arithmetics_nat.times
                                                                    a n)))
                                                                x_1) =>
                                                         matita_basics_logic.eq
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           m x_1)
                                                        (matita_basics_logic.rewrite_r
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           (matita_arithmetics_nat.times
                                                              n a)
                                                           (__ :
                                                              cic.Term
                                                                univs.Type0
                                                                matita_arithmetics_nat.nat =>
                                                            cic.lift cic.prop
                                                              univs.Type2
                                                              ((x :
                                                                  cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  m
                                                                  (matita_arithmetics_nat.times
                                                                    m
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    p b) x)))
                                                                 __))
                                                           (matita_basics_logic.rewrite_l
                                                              (cic.lift
                                                                 univs.Type0
                                                                 univs.Type2
                                                                 matita_arithmetics_nat.nat)
                                                              m
                                                              (__ :
                                                                 cic.Term
                                                                   univs.Type0
                                                                   matita_arithmetics_nat.nat =>
                                                               cic.lift
                                                                 cic.prop
                                                                 univs.Type2
                                                                 ((x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    m x) __))
                                                              (matita_basics_logic.refl
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 m)
                                                              (matita_arithmetics_nat.times
                                                                 m
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    p b)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n a)))
                                                              (matita_basics_logic.rewrite_r
                                                                 (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                 (matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O)
                                                                 (__ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    m
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    m x)) __))
                                                                 (matita_arithmetics_nat.times_n_1
                                                                    m)
                                                                 (matita_arithmetics_nat.minus
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    p b)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n a))
                                                                 (matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    a n)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    p b) x)
                                                                    (
                                                                   matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O))
                                                                    __))
                                                                    (
                                                                  matita_basics_logic.rewrite_l
                                                                    (
                                                                  cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    b p)
                                                                    (
                                                                  __ :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                  cic.lift
                                                                    cic.prop
                                                                    univs.Type2
                                                                    (
                                                                  (x :
                                                                    cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                   matita_basics_logic.eq
                                                                    (
                                                                   cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                    (
                                                                   matita_arithmetics_nat.minus
                                                                    x
                                                                    (
                                                                   matita_arithmetics_nat.times
                                                                    a n))
                                                                    (
                                                                   matita_arithmetics_nat.S
                                                                    matita_arithmetics_nat.O))
                                                                    __)) H
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    p b)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    b p))
                                                                    (
                                                                  matita_arithmetics_nat.times
                                                                    n a)
                                                                    (
                                                                  matita_arithmetics_nat.commutative_times
                                                                    a n))))
                                                           (matita_arithmetics_nat.times
                                                              a n)
                                                           (matita_arithmetics_nat.commutative_times
                                                              a n))
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.times
                                                              m
                                                              (matita_arithmetics_nat.times
                                                                 p b))
                                                           (matita_arithmetics_nat.times
                                                              m
                                                              (matita_arithmetics_nat.times
                                                                 a n)))
                                                        (matita_arithmetics_nat.distributive_times_minus
                                                           m
                                                           (matita_arithmetics_nat.times
                                                              p b)
                                                           (matita_arithmetics_nat.times
                                                              a n)))
                                                     (matita_arithmetics_nat.times
                                                        (matita_arithmetics_nat.times
                                                           a n)
                                                        m)
                                                     (matita_arithmetics_nat.commutative_times
                                                        (matita_arithmetics_nat.times
                                                           a n)
                                                        m))
                                                  (matita_arithmetics_nat.times
                                                     (matita_arithmetics_nat.times
                                                        p b)
                                                     m)
                                                  (matita_arithmetics_nat.commutative_times
                                                     m
                                                     (matita_arithmetics_nat.times
                                                        p b)))
                                               (matita_arithmetics_nat.times
                                                  a
                                                  (matita_arithmetics_nat.times
                                                     n m))
                                               (matita_arithmetics_nat.associative_times
                                                  a n m))
                                            (matita_arithmetics_nat.times p c)
                                            nm)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times a p)
                                            c)
                                         (matita_arithmetics_nat.associative_times
                                            a p c))
                                      (matita_arithmetics_nat.times p a)
                                      (matita_arithmetics_nat.commutative_times
                                         a p))
                                   (matita_arithmetics_nat.times p
                                      (matita_arithmetics_nat.times a c))
                                   (matita_arithmetics_nat.associative_times
                                      p a c))
                                (matita_arithmetics_nat.times p
                                   (matita_arithmetics_nat.times b m))
                                (matita_arithmetics_nat.associative_times p b
                                   m))
                             (matita_arithmetics_nat.times p
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times b m)
                                   (matita_arithmetics_nat.times a c)))
                             (matita_arithmetics_nat.distributive_times_minus
                                p (matita_arithmetics_nat.times b m)
                                (matita_arithmetics_nat.times a c))))
                       _clearme1)
                    _clearme0)
                 (matita_basics_logic.eq_ind
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_gcd.gcd p n)
                    (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_gcd.gcd p n) x_1) =>
                     matita_basics_logic.ex matita_arithmetics_nat.nat
                       (a :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        matita_basics_logic.ex matita_arithmetics_nat.nat
                          (b :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.Or
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times a n)
                                   (matita_arithmetics_nat.times b p))
                                x_1)
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.minus
                                   (matita_arithmetics_nat.times b p)
                                   (matita_arithmetics_nat.times a n))
                                x_1))))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd n p)
                       (x :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               x (matita_arithmetics_gcd.gcd n p)) =>
                        matita_basics_logic.ex matita_arithmetics_nat.nat
                          (a :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           matita_basics_logic.ex matita_arithmetics_nat.nat
                             (b :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              matita_basics_logic.Or
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times a n)
                                      (matita_arithmetics_nat.times b p))
                                   x)
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times b p)
                                      (matita_arithmetics_nat.times a n))
                                   x))))
                       (matita_arithmetics_gcd.eq_minus_gcd p n)
                       (matita_arithmetics_gcd.gcd p n)
                       (matita_arithmetics_gcd.commutative_gcd p n))
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (matita_arithmetics_gcd.prime_to_gcd_1 p n primp ndivpn))))
           (matita_arithmetics_primes.decidable_divides p n))
        _clearme.

def divides_exp_to_divides :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_exp.exp n m)) ->
      cic.Term cic.prop (matita_arithmetics_primes.divides p n) :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      primep : cic.Term cic.prop (matita_arithmetics_primes.prime p) =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_primes.divides p
              (matita_arithmetics_exp.exp n _x_365))
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides p
                   (matita_arithmetics_exp.exp n _x_365)) =>
            matita_arithmetics_primes.divides p n))
        (auto :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides p
                (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
         matita_arithmetics_primes.transitive_divides p
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) n auto
           (matita_arithmetics_primes.divides_SO_n n))
        (l : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (__ :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides p
                   (matita_arithmetics_exp.exp n l)) ->
            cic.Term cic.prop (matita_arithmetics_primes.divides p n)) =>
         H :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides p
                (matita_arithmetics_nat.times
                   (matita_arithmetics_exp.exp n l) n)) =>
         matita_basics_logic.match_Or
           (matita_arithmetics_primes.divides p
              (matita_arithmetics_exp.exp n l))
           (matita_arithmetics_primes.divides p n) cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_arithmetics_primes.divides p
                      (matita_arithmetics_exp.exp n l))
                   (matita_arithmetics_primes.divides p n)) =>
            matita_arithmetics_primes.divides p n)
           (auto :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides p
                   (matita_arithmetics_exp.exp n l)) =>
            Hind auto)
           (auto :
              cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
            auto)
           (matita_arithmetics_gcd.divides_times_to_divides p
              (matita_arithmetics_exp.exp n l) n primep H))
        m.

def divides_exp_to_eq :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) ->
      __1 : cic.Term cic.prop (matita_arithmetics_primes.prime q) ->
      __2 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_exp.exp q m)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) p q)
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H : cic.Term cic.prop (matita_arithmetics_primes.prime p) =>
      _clearme : cic.Term cic.prop (matita_arithmetics_primes.prime q) =>
      matita_basics_logic.match_And
        (matita_arithmetics_nat.lt
           (matita_arithmetics_nat.S matita_arithmetics_nat.O) q)
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (m1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides m1 q)
              (__ :
                 cic.Term cic.prop (matita_arithmetics_primes.divides m1 q) =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.lt
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O) m1)
                 (__1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt
                         (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                         m1) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    m1 q))))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (matita_arithmetics_nat.lt
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) q)
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_primes.divides m0 q)
                      (__ :
                         cic.Term cic.prop
                           (matita_arithmetics_primes.divides m0 q) =>
                       cic.prod cic.prop cic.prop
                         (matita_arithmetics_nat.lt
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)
                            m0)
                         (__1 :
                            cic.Term cic.prop
                              (matita_arithmetics_nat.lt
                                 (matita_arithmetics_nat.S
                                    matita_arithmetics_nat.O)
                                 m0) =>
                          matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            m0 q))))) =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_primes.divides p
              (matita_arithmetics_exp.exp q m))
           (__1 :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides p
                   (matita_arithmetics_exp.exp q m)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) p
              q))
        (lt1q :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt
                (matita_arithmetics_nat.S matita_arithmetics_nat.O) q) =>
         primeq :
           (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop (matita_arithmetics_primes.divides m0 q) ->
            __1 :
              cic.Term cic.prop
                (matita_arithmetics_nat.lt
                   (matita_arithmetics_nat.S matita_arithmetics_nat.O) m0) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 m0 q)) =>
         H0 :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides p
                (matita_arithmetics_exp.exp q m)) =>
         primeq p (matita_arithmetics_gcd.divides_exp_to_divides p q m H H0)
           (matita_arithmetics_primes.prime_to_lt_SO p H))
        _clearme.

def let_clause_1595 :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      posm :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) ->
      primepn :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      primepm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      lt1gcd :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)
             (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))) ->
      H :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides
             (matita_arithmetics_primes.smallest_factor
                (matita_arithmetics_gcd.gcd p
                   (matita_arithmetics_nat.times n m)))
             m) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd p n) (matita_arithmetics_gcd.gcd p m))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      posm :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) =>
      primepn :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      primepm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      lt1gcd :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)
             (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))) =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides
             (matita_arithmetics_primes.smallest_factor
                (matita_arithmetics_gcd.gcd p
                   (matita_arithmetics_nat.times n m)))
             m) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_gcd.gcd p n) x)
              __))
        primepn (matita_arithmetics_gcd.gcd p m) primepm.

def eq_gcd_times_1 :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) ->
      __1 :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) ->
      __2 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      __3 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O n) =>
      posm :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O m) =>
      primepn :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      primepm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_arithmetics_nat.le_to_le_to_eq
        (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (matita_arithmetics_nat.not_lt_to_le
           (matita_arithmetics_nat.S matita_arithmetics_nat.O)
           (matita_arithmetics_gcd.gcd p (matita_arithmetics_nat.times n m))
           (matita_basics_logic.nmk
              (matita_arithmetics_nat.lt
                 (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                 (matita_arithmetics_gcd.gcd p
                    (matita_arithmetics_nat.times n m)))
              (lt1gcd :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.lt
                      (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                      (matita_arithmetics_gcd.gcd p
                         (matita_arithmetics_nat.times n m))) =>
               matita_basics_logic.match_Or
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_gcd.gcd p
                          (matita_arithmetics_nat.times n m)))
                    n)
                 (matita_arithmetics_primes.divides
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_gcd.gcd p
                          (matita_arithmetics_nat.times n m)))
                    m)
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.Or
                         (matita_arithmetics_primes.divides
                            (matita_arithmetics_primes.smallest_factor
                               (matita_arithmetics_gcd.gcd p
                                  (matita_arithmetics_nat.times n m)))
                            n)
                         (matita_arithmetics_primes.divides
                            (matita_arithmetics_primes.smallest_factor
                               (matita_arithmetics_gcd.gcd p
                                  (matita_arithmetics_nat.times n m)))
                            m)) =>
                  matita_basics_logic.False)
                 (H :
                    cic.Term cic.prop
                      (matita_arithmetics_primes.divides
                         (matita_arithmetics_primes.smallest_factor
                            (matita_arithmetics_gcd.gcd p
                               (matita_arithmetics_nat.times n m)))
                         n) =>
                  matita_basics_logic.absurd
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_primes.smallest_factor
                          (matita_arithmetics_gcd.gcd p
                             (matita_arithmetics_nat.times n m)))
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd p n)
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_gcd.gcd p n) x_1) =>
                        matita_arithmetics_nat.le
                          (matita_arithmetics_primes.smallest_factor
                             (matita_arithmetics_gcd.gcd p
                                (matita_arithmetics_nat.times n m)))
                          x_1)
                       (matita_arithmetics_primes.divides_to_le
                          (matita_arithmetics_primes.smallest_factor
                             (matita_arithmetics_gcd.gcd p
                                (matita_arithmetics_nat.times n m)))
                          (matita_arithmetics_gcd.gcd p n)
                          (matita_basics_logic.eq_coerc
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.lt
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.lt
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_gcd.gcd p n)))
                             (matita_arithmetics_nat.lt_O_S
                                matita_arithmetics_nat.O)
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_gcd.gcd p n)
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift (cic.succ univs.Type0)
                                          univs.Type2 (cic.univ univs.Type0))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_arithmetics_nat.lt
                                             matita_arithmetics_nat.O x))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_arithmetics_nat.lt
                                             matita_arithmetics_nat.O
                                             (matita_arithmetics_gcd.gcd p n))))
                                      __))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.succ univs.Type0)
                                      univs.Type2 (cic.univ univs.Type0))
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_nat.lt
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_gcd.gcd p n))))
                                (matita_arithmetics_nat.S
                                   matita_arithmetics_nat.O)
                                (matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_gcd.gcd p m)
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          x
                                          (matita_arithmetics_nat.S
                                             matita_arithmetics_nat.O))
                                         __))
                                   primepm (matita_arithmetics_gcd.gcd p n)
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.S
                                         matita_arithmetics_nat.O)
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             (matita_arithmetics_gcd.gcd p n)
                                             x)
                                            __))
                                      primepn
                                      (matita_arithmetics_gcd.gcd p m)
                                      primepm))))
                          (matita_arithmetics_gcd.divides_d_gcd n p
                             (matita_arithmetics_primes.smallest_factor
                                (matita_arithmetics_gcd.gcd p
                                   (matita_arithmetics_nat.times n m)))
                             H
                             (matita_arithmetics_primes.transitive_divides
                                (matita_arithmetics_primes.smallest_factor
                                   (matita_arithmetics_gcd.gcd p
                                      (matita_arithmetics_nat.times n m)))
                                (matita_arithmetics_gcd.gcd p
                                   (matita_arithmetics_nat.times n m))
                                p
                                (matita_arithmetics_primes.divides_smallest_factor_n
                                   (matita_arithmetics_gcd.gcd p
                                      (matita_arithmetics_nat.times n m))
                                   (matita_arithmetics_gcd.lt_O_gcd p
                                      (matita_arithmetics_nat.times n m)
                                      (matita_basics_logic.eq_ind_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times
                                            matita_arithmetics_nat.O
                                            matita_arithmetics_nat.O)
                                         (x :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    matita_arithmetics_nat.O
                                                    matita_arithmetics_nat.O)) =>
                                          matita_arithmetics_nat.lt x
                                            (matita_arithmetics_nat.times n m))
                                         (matita_arithmetics_nat.lt_times
                                            matita_arithmetics_nat.O n
                                            matita_arithmetics_nat.O m posn
                                            posm)
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_nat.times_n_O
                                            matita_arithmetics_nat.O))))
                                (matita_basics_logic.eq_coerc
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_primes.divides
                                         (matita_arithmetics_gcd.gcd
                                            (matita_arithmetics_nat.times n m)
                                            p)
                                         p))
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_primes.divides
                                         (matita_arithmetics_gcd.gcd p
                                            (matita_arithmetics_nat.times n m))
                                         p))
                                   (matita_arithmetics_gcd.divides_gcd_r
                                      (matita_arithmetics_nat.times n m) p)
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_gcd.gcd p
                                         (matita_arithmetics_nat.times n m))
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.succ univs.Type0)
                                                univs.Type2
                                                (cic.univ univs.Type0))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_arithmetics_primes.divides
                                                   x p))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_arithmetics_primes.divides
                                                   (matita_arithmetics_gcd.gcd
                                                      p
                                                      (matita_arithmetics_nat.times
                                                         n m))
                                                   p)))
                                            __))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.succ univs.Type0)
                                            univs.Type2
                                            (cic.univ univs.Type0))
                                         (cic.lift cic.prop univs.Type0
                                            (matita_arithmetics_primes.divides
                                               (matita_arithmetics_gcd.gcd p
                                                  (matita_arithmetics_nat.times
                                                     n m))
                                               p)))
                                      (matita_arithmetics_gcd.gcd
                                         (matita_arithmetics_nat.times n m) p)
                                      (matita_arithmetics_gcd.commutative_gcd
                                         (matita_arithmetics_nat.times n m) p))))))
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       primepn)
                    (matita_arithmetics_nat.lt_to_not_le
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       (matita_arithmetics_primes.smallest_factor
                          (matita_arithmetics_gcd.gcd p
                             (matita_arithmetics_nat.times n m)))
                       (matita_arithmetics_primes.lt_SO_smallest_factor
                          (matita_arithmetics_gcd.gcd p
                             (matita_arithmetics_nat.times n m))
                          lt1gcd)))
                 (H :
                    cic.Term cic.prop
                      (matita_arithmetics_primes.divides
                         (matita_arithmetics_primes.smallest_factor
                            (matita_arithmetics_gcd.gcd p
                               (matita_arithmetics_nat.times n m)))
                         m) =>
                  matita_basics_logic.absurd
                    (matita_arithmetics_nat.le
                       (matita_arithmetics_primes.smallest_factor
                          (matita_arithmetics_gcd.gcd p
                             (matita_arithmetics_nat.times n m)))
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_gcd.gcd p m)
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_gcd.gcd p m) x_1) =>
                        matita_arithmetics_nat.le
                          (matita_arithmetics_primes.smallest_factor
                             (matita_arithmetics_gcd.gcd p
                                (matita_arithmetics_nat.times n m)))
                          x_1)
                       (matita_arithmetics_primes.divides_to_le
                          (matita_arithmetics_primes.smallest_factor
                             (matita_arithmetics_gcd.gcd p
                                (matita_arithmetics_nat.times n m)))
                          (matita_arithmetics_gcd.gcd p m)
                          (matita_basics_logic.eq_coerc
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.lt
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)))
                             (cic.lift cic.prop univs.Type0
                                (matita_arithmetics_nat.lt
                                   matita_arithmetics_nat.O
                                   (matita_arithmetics_gcd.gcd p m)))
                             (matita_arithmetics_nat.lt_O_S
                                matita_arithmetics_nat.O)
                             (matita_basics_logic.rewrite_l
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_gcd.gcd p n)
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift (cic.succ univs.Type0)
                                          univs.Type2 (cic.univ univs.Type0))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_arithmetics_nat.lt
                                             matita_arithmetics_nat.O
                                             (matita_arithmetics_nat.S
                                                matita_arithmetics_nat.O)))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_arithmetics_nat.lt
                                             matita_arithmetics_nat.O x)))
                                      __))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_gcd.gcd p n)
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift (cic.succ univs.Type0)
                                             univs.Type2
                                             (cic.univ univs.Type0))
                                          (cic.lift cic.prop univs.Type0
                                             (matita_arithmetics_nat.lt
                                                matita_arithmetics_nat.O x))
                                          (cic.lift cic.prop univs.Type0
                                             (matita_arithmetics_nat.lt
                                                matita_arithmetics_nat.O
                                                (matita_arithmetics_gcd.gcd p
                                                   n))))
                                         __))
                                   (matita_basics_logic.refl
                                      (cic.lift (cic.succ univs.Type0)
                                         univs.Type2 (cic.univ univs.Type0))
                                      (cic.lift cic.prop univs.Type0
                                         (matita_arithmetics_nat.lt
                                            matita_arithmetics_nat.O
                                            (matita_arithmetics_gcd.gcd p n))))
                                   (matita_arithmetics_nat.S
                                      matita_arithmetics_nat.O)
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_gcd.gcd p m)
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             x
                                             (matita_arithmetics_nat.S
                                                matita_arithmetics_nat.O))
                                            __))
                                      primepm
                                      (matita_arithmetics_gcd.gcd p n)
                                      (matita_arithmetics_gcd.let_clause_1595
                                         p n m posn posm primepn primepm
                                         lt1gcd H)))
                                (matita_arithmetics_gcd.gcd p m)
                                (matita_arithmetics_gcd.let_clause_1595 p n m
                                   posn posm primepn primepm lt1gcd H)))
                          (matita_arithmetics_gcd.divides_d_gcd m p
                             (matita_arithmetics_primes.smallest_factor
                                (matita_arithmetics_gcd.gcd p
                                   (matita_arithmetics_nat.times n m)))
                             H
                             (matita_arithmetics_primes.transitive_divides
                                (matita_arithmetics_primes.smallest_factor
                                   (matita_arithmetics_gcd.gcd p
                                      (matita_arithmetics_nat.times n m)))
                                (matita_arithmetics_gcd.gcd p
                                   (matita_arithmetics_nat.times n m))
                                p
                                (matita_arithmetics_primes.divides_smallest_factor_n
                                   (matita_arithmetics_gcd.gcd p
                                      (matita_arithmetics_nat.times n m))
                                   (matita_arithmetics_gcd.lt_O_gcd p
                                      (matita_arithmetics_nat.times n m)
                                      (matita_basics_logic.eq_ind_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times
                                            matita_arithmetics_nat.O
                                            matita_arithmetics_nat.O)
                                         (x :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    matita_arithmetics_nat.O
                                                    matita_arithmetics_nat.O)) =>
                                          matita_arithmetics_nat.lt x
                                            (matita_arithmetics_nat.times n m))
                                         (matita_arithmetics_nat.lt_times
                                            matita_arithmetics_nat.O n
                                            matita_arithmetics_nat.O m posn
                                            posm)
                                         matita_arithmetics_nat.O
                                         (matita_arithmetics_nat.times_n_O
                                            matita_arithmetics_nat.O))))
                                (matita_basics_logic.eq_coerc
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_primes.divides
                                         (matita_arithmetics_gcd.gcd
                                            (matita_arithmetics_nat.times n m)
                                            p)
                                         p))
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_primes.divides
                                         (matita_arithmetics_gcd.gcd p
                                            (matita_arithmetics_nat.times n m))
                                         p))
                                   (matita_arithmetics_gcd.divides_gcd_r
                                      (matita_arithmetics_nat.times n m) p)
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_gcd.gcd p
                                         (matita_arithmetics_nat.times n m))
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.succ univs.Type0)
                                                univs.Type2
                                                (cic.univ univs.Type0))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_arithmetics_primes.divides
                                                   x p))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_arithmetics_primes.divides
                                                   (matita_arithmetics_gcd.gcd
                                                      p
                                                      (matita_arithmetics_nat.times
                                                         n m))
                                                   p)))
                                            __))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.succ univs.Type0)
                                            univs.Type2
                                            (cic.univ univs.Type0))
                                         (cic.lift cic.prop univs.Type0
                                            (matita_arithmetics_primes.divides
                                               (matita_arithmetics_gcd.gcd p
                                                  (matita_arithmetics_nat.times
                                                     n m))
                                               p)))
                                      (matita_arithmetics_gcd.gcd
                                         (matita_arithmetics_nat.times n m) p)
                                      (matita_arithmetics_gcd.commutative_gcd
                                         (matita_arithmetics_nat.times n m) p))))))
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       primepm)
                    (matita_arithmetics_nat.lt_to_not_le
                       (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                       (matita_arithmetics_primes.smallest_factor
                          (matita_arithmetics_gcd.gcd p
                             (matita_arithmetics_nat.times n m)))
                       (matita_arithmetics_primes.lt_SO_smallest_factor
                          (matita_arithmetics_gcd.gcd p
                             (matita_arithmetics_nat.times n m))
                          lt1gcd)))
                 (matita_arithmetics_gcd.divides_times_to_divides
                    (matita_arithmetics_primes.smallest_factor
                       (matita_arithmetics_gcd.gcd p
                          (matita_arithmetics_nat.times n m)))
                    n m
                    (matita_arithmetics_primes.prime_smallest_factor_n
                       (matita_arithmetics_gcd.gcd p
                          (matita_arithmetics_nat.times n m))
                       lt1gcd)
                    (matita_arithmetics_primes.transitive_divides
                       (matita_arithmetics_primes.smallest_factor
                          (matita_arithmetics_gcd.gcd p
                             (matita_arithmetics_nat.times n m)))
                       (matita_arithmetics_gcd.gcd p
                          (matita_arithmetics_nat.times n m))
                       (matita_arithmetics_nat.times n m)
                       (matita_arithmetics_primes.divides_smallest_factor_n
                          (matita_arithmetics_gcd.gcd p
                             (matita_arithmetics_nat.times n m))
                          (matita_arithmetics_nat.lt_S_to_lt
                             matita_arithmetics_nat.O
                             (matita_arithmetics_gcd.gcd p
                                (matita_arithmetics_nat.times n m))
                             lt1gcd))
                       (matita_arithmetics_gcd.divides_gcd_r p
                          (matita_arithmetics_nat.times n m)))))))
        (matita_arithmetics_gcd.lt_O_gcd p (matita_arithmetics_nat.times n m)
           (matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.times matita_arithmetics_nat.O
                 matita_arithmetics_nat.O)
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x
                      (matita_arithmetics_nat.times matita_arithmetics_nat.O
                         matita_arithmetics_nat.O)) =>
               matita_arithmetics_nat.lt x (matita_arithmetics_nat.times n m))
              (matita_arithmetics_nat.lt_times matita_arithmetics_nat.O n
                 matita_arithmetics_nat.O m posn posm)
              matita_arithmetics_nat.O
              (matita_arithmetics_nat.times_n_O matita_arithmetics_nat.O))).

def let_clause_1561 :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) ->
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      nm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times m n)
             (matita_arithmetics_nat.times p c)) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a p)
                      (matita_arithmetics_nat.times b m))
                   (matita_arithmetics_gcd.gcd p m))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b m)
                      (matita_arithmetics_nat.times a p))
                   (matita_arithmetics_gcd.gcd p m)))) ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme1 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a p)
                   (matita_arithmetics_nat.times b m))
                (matita_arithmetics_gcd.gcd p m))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b m)
                   (matita_arithmetics_nat.times a p))
                (matita_arithmetics_gcd.gcd p m))) ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)
                (matita_arithmetics_nat.times b m))
             (matita_arithmetics_gcd.gcd p m)) ->
      H0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)
                (matita_arithmetics_nat.times b m))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a)
              (matita_arithmetics_nat.times m b))
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      nm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times m n)
             (matita_arithmetics_nat.times p c)) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a p)
                      (matita_arithmetics_nat.times b m))
                   (matita_arithmetics_gcd.gcd p m))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b m)
                      (matita_arithmetics_nat.times a p))
                   (matita_arithmetics_gcd.gcd p m)))) =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme1 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a p)
                   (matita_arithmetics_nat.times b m))
                (matita_arithmetics_gcd.gcd p m))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b m)
                   (matita_arithmetics_nat.times a p))
                (matita_arithmetics_gcd.gcd p m))) =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)
                (matita_arithmetics_nat.times b m))
             (matita_arithmetics_gcd.gcd p m)) =>
      H0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)
                (matita_arithmetics_nat.times b m))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times b m)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_nat.minus
                  (matita_arithmetics_nat.times p a) x)
               (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              __))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times a p)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.minus x
                     (matita_arithmetics_nat.times b m))
                  (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 __))
           H0 (matita_arithmetics_nat.times p a)
           (matita_arithmetics_nat.commutative_times a p))
        (matita_arithmetics_nat.times m b)
        (matita_arithmetics_nat.commutative_times b m).

def let_clause_1617 :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) ->
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      nm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times m n)
             (matita_arithmetics_nat.times p c)) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a p)
                      (matita_arithmetics_nat.times b m))
                   (matita_arithmetics_gcd.gcd p m))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b m)
                      (matita_arithmetics_nat.times a p))
                   (matita_arithmetics_gcd.gcd p m)))) ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme1 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a p)
                   (matita_arithmetics_nat.times b m))
                (matita_arithmetics_gcd.gcd p m))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b m)
                   (matita_arithmetics_nat.times a p))
                (matita_arithmetics_gcd.gcd p m))) ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)
                (matita_arithmetics_nat.times b m))
             (matita_arithmetics_gcd.gcd p m)) ->
      H0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)
                (matita_arithmetics_nat.times b m))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd p m)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a)
              (matita_arithmetics_nat.times m b)))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      nm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times m n)
             (matita_arithmetics_nat.times p c)) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a p)
                      (matita_arithmetics_nat.times b m))
                   (matita_arithmetics_gcd.gcd p m))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b m)
                      (matita_arithmetics_nat.times a p))
                   (matita_arithmetics_gcd.gcd p m)))) =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme1 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a p)
                   (matita_arithmetics_nat.times b m))
                (matita_arithmetics_gcd.gcd p m))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b m)
                   (matita_arithmetics_nat.times a p))
                (matita_arithmetics_gcd.gcd p m))) =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)
                (matita_arithmetics_nat.times b m))
             (matita_arithmetics_gcd.gcd p m)) =>
      H0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times a p)
                (matita_arithmetics_nat.times b m))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_gcd.gcd p m) x)
              __))
        gcd1
        (matita_arithmetics_nat.minus (matita_arithmetics_nat.times p a)
           (matita_arithmetics_nat.times m b))
        (matita_arithmetics_gcd.let_clause_1561 p m n posn gcd1 _clearme c nm
           a _clearme0 b _clearme1 H H0).

def let_clause_15611 :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) ->
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      nm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times m n)
             (matita_arithmetics_nat.times p c)) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a p)
                      (matita_arithmetics_nat.times b m))
                   (matita_arithmetics_gcd.gcd p m))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b m)
                      (matita_arithmetics_nat.times a p))
                   (matita_arithmetics_gcd.gcd p m)))) ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme1 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a p)
                   (matita_arithmetics_nat.times b m))
                (matita_arithmetics_gcd.gcd p m))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b m)
                   (matita_arithmetics_nat.times a p))
                (matita_arithmetics_gcd.gcd p m))) ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m)
                (matita_arithmetics_nat.times a p))
             (matita_arithmetics_gcd.gcd p m)) ->
      H0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m)
                (matita_arithmetics_nat.times a p))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m b)
              (matita_arithmetics_nat.times p a))
           (matita_arithmetics_nat.S matita_arithmetics_nat.O))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      nm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times m n)
             (matita_arithmetics_nat.times p c)) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a p)
                      (matita_arithmetics_nat.times b m))
                   (matita_arithmetics_gcd.gcd p m))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b m)
                      (matita_arithmetics_nat.times a p))
                   (matita_arithmetics_gcd.gcd p m)))) =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme1 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a p)
                   (matita_arithmetics_nat.times b m))
                (matita_arithmetics_gcd.gcd p m))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b m)
                   (matita_arithmetics_nat.times a p))
                (matita_arithmetics_gcd.gcd p m))) =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m)
                (matita_arithmetics_nat.times a p))
             (matita_arithmetics_gcd.gcd p m)) =>
      H0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m)
                (matita_arithmetics_nat.times a p))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.times a p)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_nat.minus
                  (matita_arithmetics_nat.times m b) x)
               (matita_arithmetics_nat.S matita_arithmetics_nat.O))
              __))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times b m)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (matita_arithmetics_nat.minus x
                     (matita_arithmetics_nat.times a p))
                  (matita_arithmetics_nat.S matita_arithmetics_nat.O))
                 __))
           H0 (matita_arithmetics_nat.times m b)
           (matita_arithmetics_nat.commutative_times b m))
        (matita_arithmetics_nat.times p a)
        (matita_arithmetics_nat.commutative_times a p).

def let_clause_16171 :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) ->
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) ->
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      nm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times m n)
             (matita_arithmetics_nat.times p c)) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a p)
                      (matita_arithmetics_nat.times b m))
                   (matita_arithmetics_gcd.gcd p m))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b m)
                      (matita_arithmetics_nat.times a p))
                   (matita_arithmetics_gcd.gcd p m)))) ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme1 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a p)
                   (matita_arithmetics_nat.times b m))
                (matita_arithmetics_gcd.gcd p m))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b m)
                   (matita_arithmetics_nat.times a p))
                (matita_arithmetics_gcd.gcd p m))) ->
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m)
                (matita_arithmetics_nat.times a p))
             (matita_arithmetics_gcd.gcd p m)) ->
      H0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m)
                (matita_arithmetics_nat.times a p))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_gcd.gcd p m)
           (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m b)
              (matita_arithmetics_nat.times p a)))
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) =>
      c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      nm :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.times m n)
             (matita_arithmetics_nat.times p c)) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.ex matita_arithmetics_nat.nat
             (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
              matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times a p)
                      (matita_arithmetics_nat.times b m))
                   (matita_arithmetics_gcd.gcd p m))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_nat.minus
                      (matita_arithmetics_nat.times b m)
                      (matita_arithmetics_nat.times a p))
                   (matita_arithmetics_gcd.gcd p m)))) =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme1 :
        cic.Term cic.prop
          (matita_basics_logic.Or
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times a p)
                   (matita_arithmetics_nat.times b m))
                (matita_arithmetics_gcd.gcd p m))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.minus
                   (matita_arithmetics_nat.times b m)
                   (matita_arithmetics_nat.times a p))
                (matita_arithmetics_gcd.gcd p m))) =>
      H :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m)
                (matita_arithmetics_nat.times a p))
             (matita_arithmetics_gcd.gcd p m)) =>
      H0 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_nat.minus (matita_arithmetics_nat.times b m)
                (matita_arithmetics_nat.times a p))
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S matita_arithmetics_nat.O)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (matita_arithmetics_gcd.gcd p m) x)
              __))
        gcd1
        (matita_arithmetics_nat.minus (matita_arithmetics_nat.times m b)
           (matita_arithmetics_nat.times p a))
        (matita_arithmetics_gcd.let_clause_15611 p m n posn gcd1 _clearme c
           nm a _clearme0 b _clearme1 H H0).

def gcd_1_to_divides_times_to_divides :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p n)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) ->
      __2 :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times n m)) ->
      cic.Term cic.prop (matita_arithmetics_primes.divides p m) :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      posn :
        cic.Term cic.prop
          (matita_arithmetics_nat.lt matita_arithmetics_nat.O p) =>
      gcd1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_gcd.gcd p m)
             (matita_arithmetics_nat.S matita_arithmetics_nat.O)) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_primes.divides p
             (matita_arithmetics_nat.times m n)) =>
      matita_arithmetics_primes.match_divides p
        (matita_arithmetics_nat.times m n) cic.prop
        (__ :
           cic.Term cic.prop
             (matita_arithmetics_primes.divides p
                (matita_arithmetics_nat.times m n)) =>
         matita_arithmetics_primes.divides p n)
        (c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         nm :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (matita_arithmetics_nat.times m n)
                (matita_arithmetics_nat.times p c)) =>
         matita_basics_logic.match_ex matita_arithmetics_nat.nat
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.Or
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times a p)
                       (matita_arithmetics_nat.times b m))
                    (matita_arithmetics_gcd.gcd p m))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times b m)
                       (matita_arithmetics_nat.times a p))
                    (matita_arithmetics_gcd.gcd p m))))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.ex matita_arithmetics_nat.nat
                   (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_basics_logic.ex matita_arithmetics_nat.nat
                      (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       matita_basics_logic.Or
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a p)
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_gcd.gcd p m))
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times a p))
                            (matita_arithmetics_gcd.gcd p m))))) =>
            matita_arithmetics_primes.divides p n)
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _clearme0 :
              cic.Term cic.prop
                (matita_basics_logic.ex matita_arithmetics_nat.nat
                   (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_basics_logic.Or
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times a p)
                            (matita_arithmetics_nat.times b m))
                         (matita_arithmetics_gcd.gcd p m))
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times b m)
                            (matita_arithmetics_nat.times a p))
                         (matita_arithmetics_gcd.gcd p m)))) =>
            matita_basics_logic.match_ex matita_arithmetics_nat.nat
              (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.Or
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times a p)
                       (matita_arithmetics_nat.times b m))
                    (matita_arithmetics_gcd.gcd p m))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times b m)
                       (matita_arithmetics_nat.times a p))
                    (matita_arithmetics_gcd.gcd p m)))
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.ex matita_arithmetics_nat.nat
                      (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       matita_basics_logic.Or
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a p)
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_gcd.gcd p m))
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times a p))
                            (matita_arithmetics_gcd.gcd p m)))) =>
               matita_arithmetics_primes.divides p n)
              (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _clearme1 :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times a p)
                            (matita_arithmetics_nat.times b m))
                         (matita_arithmetics_gcd.gcd p m))
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times b m)
                            (matita_arithmetics_nat.times a p))
                         (matita_arithmetics_gcd.gcd p m))) =>
               matita_basics_logic.match_Or
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times a p)
                       (matita_arithmetics_nat.times b m))
                    (matita_arithmetics_gcd.gcd p m))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.minus
                       (matita_arithmetics_nat.times b m)
                       (matita_arithmetics_nat.times a p))
                    (matita_arithmetics_gcd.gcd p m))
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.Or
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a p)
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_gcd.gcd p m))
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times a p))
                            (matita_arithmetics_gcd.gcd p m))) =>
                  matita_arithmetics_primes.divides p n)
                 (H :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times a p)
                            (matita_arithmetics_nat.times b m))
                         (matita_arithmetics_gcd.gcd p m)) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)) =>
                     cic.prod cic.prop cic.prop
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times a p)
                             (matita_arithmetics_nat.times b m))
                          x)
                       (__1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times a p)
                                  (matita_arithmetics_nat.times b m))
                               x) =>
                        matita_arithmetics_primes.divides p n))
                    (H0 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times a p)
                               (matita_arithmetics_nat.times b m))
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)) =>
                     matita_arithmetics_primes.quotient p n
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times a n)
                          (matita_arithmetics_nat.times c b))
                       (matita_basics_logic.eq_ind_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times p
                                (matita_arithmetics_nat.times a n))
                             (matita_arithmetics_nat.times p
                                (matita_arithmetics_nat.times c b)))
                          (x :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times p
                                        (matita_arithmetics_nat.times a n))
                                     (matita_arithmetics_nat.times p
                                        (matita_arithmetics_nat.times c b)))) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             n x)
                          (matita_basics_logic.eq_ind
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times p a) n)
                             (x_1 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              _x_2 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.times
                                        (matita_arithmetics_nat.times p a) n)
                                     x_1) =>
                              matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                n
                                (matita_arithmetics_nat.minus x_1
                                   (matita_arithmetics_nat.times p
                                      (matita_arithmetics_nat.times c b))))
                             (matita_basics_logic.eq_ind
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.times p c) b)
                                (x_1 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 _x_2 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p c)
                                           b)
                                        x_1) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   n
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.times p a) n)
                                      x_1))
                                (matita_basics_logic.eq_ind
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times m n)
                                   (x_1 :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    _x_2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times m n)
                                           x_1) =>
                                    matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      n
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times p a)
                                            n)
                                         (matita_arithmetics_nat.times x_1 b)))
                                   (matita_basics_logic.eq_ind_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times n m)
                                      (x :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       __ :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2
                                                 matita_arithmetics_nat.nat)
                                              x
                                              (matita_arithmetics_nat.times n
                                                 m)) =>
                                       matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         n
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_nat.times
                                                  p a)
                                               n)
                                            (matita_arithmetics_nat.times x b)))
                                      (matita_basics_logic.eq_ind_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times n
                                            (matita_arithmetics_nat.times p a))
                                         (x :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          __ :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2
                                                    matita_arithmetics_nat.nat)
                                                 x
                                                 (matita_arithmetics_nat.times
                                                    n
                                                    (matita_arithmetics_nat.times
                                                       p a))) =>
                                          matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            n
                                            (matita_arithmetics_nat.minus x
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_nat.times
                                                     n m)
                                                  b)))
                                         (matita_basics_logic.eq_ind_r
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times n
                                               (matita_arithmetics_nat.times
                                                  m b))
                                            (x :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             __ :
                                               cic.Term cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.lift univs.Type0
                                                       univs.Type2
                                                       matita_arithmetics_nat.nat)
                                                    x
                                                    (matita_arithmetics_nat.times
                                                       n
                                                       (matita_arithmetics_nat.times
                                                          m b))) =>
                                             matita_basics_logic.eq
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               n
                                               (matita_arithmetics_nat.minus
                                                  (matita_arithmetics_nat.times
                                                     n
                                                     (matita_arithmetics_nat.times
                                                        p a))
                                                  x))
                                            (matita_basics_logic.eq_ind
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  n
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        p a)
                                                     (matita_arithmetics_nat.times
                                                        m b)))
                                               (x_1 :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                _x_2 :
                                                  cic.Term cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.lift univs.Type0
                                                          univs.Type2
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          n
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.times
                                                                p a)
                                                             (matita_arithmetics_nat.times
                                                                m b)))
                                                       x_1) =>
                                                matita_basics_logic.eq
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  n x_1)
                                               (matita_basics_logic.rewrite_l
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_gcd.gcd
                                                     p m)
                                                  (__ :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   cic.lift cic.prop
                                                     univs.Type2
                                                     ((x :
                                                         cic.Term univs.Type0
                                                           matita_arithmetics_nat.nat =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            univs.Type0
                                                            univs.Type2
                                                            matita_arithmetics_nat.nat)
                                                         n
                                                         (matita_arithmetics_nat.times
                                                            n x))
                                                        __))
                                                  (matita_basics_logic.rewrite_l
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     n
                                                     (__ :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      cic.lift cic.prop
                                                        univs.Type2
                                                        ((x :
                                                            cic.Term
                                                              univs.Type0
                                                              matita_arithmetics_nat.nat =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               univs.Type0
                                                               univs.Type2
                                                               matita_arithmetics_nat.nat)
                                                            n x)
                                                           __))
                                                     (matita_basics_logic.refl
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        n)
                                                     (matita_arithmetics_nat.times
                                                        n
                                                        (matita_arithmetics_gcd.gcd
                                                           p m))
                                                     (matita_basics_logic.rewrite_r
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.times
                                                              p a)
                                                           (matita_arithmetics_nat.times
                                                              m b))
                                                        (__ :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         cic.lift cic.prop
                                                           univs.Type2
                                                           ((x :
                                                               cic.Term
                                                                 univs.Type0
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_basics_logic.eq
                                                               (cic.lift
                                                                  univs.Type0
                                                                  univs.Type2
                                                                  matita_arithmetics_nat.nat)
                                                               n
                                                               (matita_arithmetics_nat.times
                                                                  n x))
                                                              __))
                                                        (matita_basics_logic.rewrite_r
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           (matita_arithmetics_nat.S
                                                              matita_arithmetics_nat.O)
                                                           (__ :
                                                              cic.Term
                                                                univs.Type0
                                                                matita_arithmetics_nat.nat =>
                                                            cic.lift cic.prop
                                                              univs.Type2
                                                              ((x :
                                                                  cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  n
                                                                  (matita_arithmetics_nat.times
                                                                    n x))
                                                                 __))
                                                           (matita_arithmetics_nat.times_n_1
                                                              n)
                                                           (matita_arithmetics_nat.minus
                                                              (matita_arithmetics_nat.times
                                                                 p a)
                                                              (matita_arithmetics_nat.times
                                                                 m b))
                                                           (matita_arithmetics_gcd.let_clause_1561
                                                              p m n posn gcd1
                                                              _clearme c nm a
                                                              _clearme0 b
                                                              _clearme1 H H0))
                                                        (matita_arithmetics_gcd.gcd
                                                           p m)
                                                        (matita_arithmetics_gcd.let_clause_1617
                                                           p m n posn gcd1
                                                           _clearme c nm a
                                                           _clearme0 b
                                                           _clearme1 H H0)))
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        p a)
                                                     (matita_arithmetics_nat.times
                                                        m b))
                                                  (matita_arithmetics_gcd.let_clause_1617
                                                     p m n posn gcd1 _clearme
                                                     c nm a _clearme0 b
                                                     _clearme1 H H0))
                                               (matita_arithmetics_nat.minus
                                                  (matita_arithmetics_nat.times
                                                     n
                                                     (matita_arithmetics_nat.times
                                                        p a))
                                                  (matita_arithmetics_nat.times
                                                     n
                                                     (matita_arithmetics_nat.times
                                                        m b)))
                                               (matita_arithmetics_nat.distributive_times_minus
                                                  n
                                                  (matita_arithmetics_nat.times
                                                     p a)
                                                  (matita_arithmetics_nat.times
                                                     m b)))
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_nat.times
                                                  n m)
                                               b)
                                            (matita_arithmetics_nat.associative_times
                                               n m b))
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times p a)
                                            n)
                                         (matita_arithmetics_nat.commutative_times
                                            (matita_arithmetics_nat.times p a)
                                            n))
                                      (matita_arithmetics_nat.times m n)
                                      (matita_arithmetics_nat.commutative_times
                                         m n))
                                   (matita_arithmetics_nat.times p c) nm)
                                (matita_arithmetics_nat.times p
                                   (matita_arithmetics_nat.times c b))
                                (matita_arithmetics_nat.associative_times p c
                                   b))
                             (matita_arithmetics_nat.times p
                                (matita_arithmetics_nat.times a n))
                             (matita_arithmetics_nat.associative_times p a n))
                          (matita_arithmetics_nat.times p
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times a n)
                                (matita_arithmetics_nat.times c b)))
                          (matita_arithmetics_nat.distributive_times_minus p
                             (matita_arithmetics_nat.times a n)
                             (matita_arithmetics_nat.times c b))))
                    (matita_arithmetics_gcd.gcd p m) gcd1 H)
                 (H :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_nat.minus
                            (matita_arithmetics_nat.times b m)
                            (matita_arithmetics_nat.times a p))
                         (matita_arithmetics_gcd.gcd p m)) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S matita_arithmetics_nat.O)
                    (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            x
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)) =>
                     cic.prod cic.prop cic.prop
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times b m)
                             (matita_arithmetics_nat.times a p))
                          x)
                       (__1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_nat.minus
                                  (matita_arithmetics_nat.times b m)
                                  (matita_arithmetics_nat.times a p))
                               x) =>
                        matita_arithmetics_primes.divides p n))
                    (H0 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_nat.minus
                               (matita_arithmetics_nat.times b m)
                               (matita_arithmetics_nat.times a p))
                            (matita_arithmetics_nat.S
                               matita_arithmetics_nat.O)) =>
                     matita_arithmetics_primes.quotient p n
                       (matita_arithmetics_nat.minus
                          (matita_arithmetics_nat.times c b)
                          (matita_arithmetics_nat.times a n))
                       (matita_basics_logic.eq_ind_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.minus
                             (matita_arithmetics_nat.times p
                                (matita_arithmetics_nat.times c b))
                             (matita_arithmetics_nat.times p
                                (matita_arithmetics_nat.times a n)))
                          (x :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           __ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  x
                                  (matita_arithmetics_nat.minus
                                     (matita_arithmetics_nat.times p
                                        (matita_arithmetics_nat.times c b))
                                     (matita_arithmetics_nat.times p
                                        (matita_arithmetics_nat.times a n)))) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             n x)
                          (matita_basics_logic.eq_ind
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times p c) b)
                             (x_1 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              _x_2 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.times
                                        (matita_arithmetics_nat.times p c) b)
                                     x_1) =>
                              matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                n
                                (matita_arithmetics_nat.minus x_1
                                   (matita_arithmetics_nat.times p
                                      (matita_arithmetics_nat.times a n))))
                             (matita_basics_logic.eq_ind
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.times p a) n)
                                (x_1 :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 _x_2 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        (matita_arithmetics_nat.times
                                           (matita_arithmetics_nat.times p a)
                                           n)
                                        x_1) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   n
                                   (matita_arithmetics_nat.minus
                                      (matita_arithmetics_nat.times
                                         (matita_arithmetics_nat.times p c) b)
                                      x_1))
                                (matita_basics_logic.eq_ind
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times m n)
                                   (x_1 :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    _x_2 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              matita_arithmetics_nat.nat)
                                           (matita_arithmetics_nat.times m n)
                                           x_1) =>
                                    matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      n
                                      (matita_arithmetics_nat.minus
                                         (matita_arithmetics_nat.times x_1 b)
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times p a)
                                            n)))
                                   (matita_basics_logic.eq_ind_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times n m)
                                      (x :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       __ :
                                         cic.Term cic.prop
                                           (matita_basics_logic.eq
                                              (cic.lift univs.Type0
                                                 univs.Type2
                                                 matita_arithmetics_nat.nat)
                                              x
                                              (matita_arithmetics_nat.times n
                                                 m)) =>
                                       matita_basics_logic.eq
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         n
                                         (matita_arithmetics_nat.minus
                                            (matita_arithmetics_nat.times x b)
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_nat.times
                                                  p a)
                                               n)))
                                      (matita_basics_logic.eq_ind
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times n
                                            (matita_arithmetics_nat.times p a))
                                         (x_1 :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          _x_2 :
                                            cic.Term cic.prop
                                              (matita_basics_logic.eq
                                                 (cic.lift univs.Type0
                                                    univs.Type2
                                                    matita_arithmetics_nat.nat)
                                                 (matita_arithmetics_nat.times
                                                    n
                                                    (matita_arithmetics_nat.times
                                                       p a))
                                                 x_1) =>
                                          matita_basics_logic.eq
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            n
                                            (matita_arithmetics_nat.minus
                                               (matita_arithmetics_nat.times
                                                  (matita_arithmetics_nat.times
                                                     n m)
                                                  b)
                                               x_1))
                                         (matita_basics_logic.eq_ind_r
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times n
                                               (matita_arithmetics_nat.times
                                                  m b))
                                            (x :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             __ :
                                               cic.Term cic.prop
                                                 (matita_basics_logic.eq
                                                    (cic.lift univs.Type0
                                                       univs.Type2
                                                       matita_arithmetics_nat.nat)
                                                    x
                                                    (matita_arithmetics_nat.times
                                                       n
                                                       (matita_arithmetics_nat.times
                                                          m b))) =>
                                             matita_basics_logic.eq
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               n
                                               (matita_arithmetics_nat.minus
                                                  x
                                                  (matita_arithmetics_nat.times
                                                     n
                                                     (matita_arithmetics_nat.times
                                                        p a))))
                                            (matita_basics_logic.eq_ind
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  n
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        m b)
                                                     (matita_arithmetics_nat.times
                                                        p a)))
                                               (x_1 :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                _x_2 :
                                                  cic.Term cic.prop
                                                    (matita_basics_logic.eq
                                                       (cic.lift univs.Type0
                                                          univs.Type2
                                                          matita_arithmetics_nat.nat)
                                                       (matita_arithmetics_nat.times
                                                          n
                                                          (matita_arithmetics_nat.minus
                                                             (matita_arithmetics_nat.times
                                                                m b)
                                                             (matita_arithmetics_nat.times
                                                                p a)))
                                                       x_1) =>
                                                matita_basics_logic.eq
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  n x_1)
                                               (matita_basics_logic.rewrite_l
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_gcd.gcd
                                                     p m)
                                                  (__ :
                                                     cic.Term univs.Type0
                                                       matita_arithmetics_nat.nat =>
                                                   cic.lift cic.prop
                                                     univs.Type2
                                                     ((x :
                                                         cic.Term univs.Type0
                                                           matita_arithmetics_nat.nat =>
                                                       matita_basics_logic.eq
                                                         (cic.lift
                                                            univs.Type0
                                                            univs.Type2
                                                            matita_arithmetics_nat.nat)
                                                         n
                                                         (matita_arithmetics_nat.times
                                                            n x))
                                                        __))
                                                  (matita_basics_logic.rewrite_l
                                                     (cic.lift univs.Type0
                                                        univs.Type2
                                                        matita_arithmetics_nat.nat)
                                                     n
                                                     (__ :
                                                        cic.Term univs.Type0
                                                          matita_arithmetics_nat.nat =>
                                                      cic.lift cic.prop
                                                        univs.Type2
                                                        ((x :
                                                            cic.Term
                                                              univs.Type0
                                                              matita_arithmetics_nat.nat =>
                                                          matita_basics_logic.eq
                                                            (cic.lift
                                                               univs.Type0
                                                               univs.Type2
                                                               matita_arithmetics_nat.nat)
                                                            n x)
                                                           __))
                                                     (matita_basics_logic.refl
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        n)
                                                     (matita_arithmetics_nat.times
                                                        n
                                                        (matita_arithmetics_gcd.gcd
                                                           p m))
                                                     (matita_basics_logic.rewrite_r
                                                        (cic.lift univs.Type0
                                                           univs.Type2
                                                           matita_arithmetics_nat.nat)
                                                        (matita_arithmetics_nat.minus
                                                           (matita_arithmetics_nat.times
                                                              m b)
                                                           (matita_arithmetics_nat.times
                                                              p a))
                                                        (__ :
                                                           cic.Term
                                                             univs.Type0
                                                             matita_arithmetics_nat.nat =>
                                                         cic.lift cic.prop
                                                           univs.Type2
                                                           ((x :
                                                               cic.Term
                                                                 univs.Type0
                                                                 matita_arithmetics_nat.nat =>
                                                             matita_basics_logic.eq
                                                               (cic.lift
                                                                  univs.Type0
                                                                  univs.Type2
                                                                  matita_arithmetics_nat.nat)
                                                               n
                                                               (matita_arithmetics_nat.times
                                                                  n x))
                                                              __))
                                                        (matita_basics_logic.rewrite_r
                                                           (cic.lift
                                                              univs.Type0
                                                              univs.Type2
                                                              matita_arithmetics_nat.nat)
                                                           (matita_arithmetics_nat.S
                                                              matita_arithmetics_nat.O)
                                                           (__ :
                                                              cic.Term
                                                                univs.Type0
                                                                matita_arithmetics_nat.nat =>
                                                            cic.lift cic.prop
                                                              univs.Type2
                                                              ((x :
                                                                  cic.Term
                                                                    univs.Type0
                                                                    matita_arithmetics_nat.nat =>
                                                                matita_basics_logic.eq
                                                                  (cic.lift
                                                                    univs.Type0
                                                                    univs.Type2
                                                                    matita_arithmetics_nat.nat)
                                                                  n
                                                                  (matita_arithmetics_nat.times
                                                                    n x))
                                                                 __))
                                                           (matita_arithmetics_nat.times_n_1
                                                              n)
                                                           (matita_arithmetics_nat.minus
                                                              (matita_arithmetics_nat.times
                                                                 m b)
                                                              (matita_arithmetics_nat.times
                                                                 p a))
                                                           (matita_arithmetics_gcd.let_clause_15611
                                                              p m n posn gcd1
                                                              _clearme c nm a
                                                              _clearme0 b
                                                              _clearme1 H H0))
                                                        (matita_arithmetics_gcd.gcd
                                                           p m)
                                                        (matita_arithmetics_gcd.let_clause_16171
                                                           p m n posn gcd1
                                                           _clearme c nm a
                                                           _clearme0 b
                                                           _clearme1 H H0)))
                                                  (matita_arithmetics_nat.minus
                                                     (matita_arithmetics_nat.times
                                                        m b)
                                                     (matita_arithmetics_nat.times
                                                        p a))
                                                  (matita_arithmetics_gcd.let_clause_16171
                                                     p m n posn gcd1 _clearme
                                                     c nm a _clearme0 b
                                                     _clearme1 H H0))
                                               (matita_arithmetics_nat.minus
                                                  (matita_arithmetics_nat.times
                                                     n
                                                     (matita_arithmetics_nat.times
                                                        m b))
                                                  (matita_arithmetics_nat.times
                                                     n
                                                     (matita_arithmetics_nat.times
                                                        p a)))
                                               (matita_arithmetics_nat.distributive_times_minus
                                                  n
                                                  (matita_arithmetics_nat.times
                                                     m b)
                                                  (matita_arithmetics_nat.times
                                                     p a)))
                                            (matita_arithmetics_nat.times
                                               (matita_arithmetics_nat.times
                                                  n m)
                                               b)
                                            (matita_arithmetics_nat.associative_times
                                               n m b))
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times p a)
                                            n)
                                         (matita_arithmetics_nat.commutative_times
                                            n
                                            (matita_arithmetics_nat.times p a)))
                                      (matita_arithmetics_nat.times m n)
                                      (matita_arithmetics_nat.commutative_times
                                         m n))
                                   (matita_arithmetics_nat.times p c) nm)
                                (matita_arithmetics_nat.times p
                                   (matita_arithmetics_nat.times a n))
                                (matita_arithmetics_nat.associative_times p a
                                   n))
                             (matita_arithmetics_nat.times p
                                (matita_arithmetics_nat.times c b))
                             (matita_arithmetics_nat.associative_times p c b))
                          (matita_arithmetics_nat.times p
                             (matita_arithmetics_nat.minus
                                (matita_arithmetics_nat.times c b)
                                (matita_arithmetics_nat.times a n)))
                          (matita_arithmetics_nat.distributive_times_minus p
                             (matita_arithmetics_nat.times c b)
                             (matita_arithmetics_nat.times a n))))
                    (matita_arithmetics_gcd.gcd p m) gcd1 H)
                 _clearme1)
              _clearme0)
           (matita_arithmetics_gcd.eq_minus_gcd m p))
        _clearme.

def divides_to_divides_times :
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_primes.prime p) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides p q)) ->
      __2 : cic.Term cic.prop (matita_arithmetics_primes.divides p n) ->
      __3 : cic.Term cic.prop (matita_arithmetics_primes.divides q n) ->
      cic.Term cic.prop
        (matita_arithmetics_primes.divides (matita_arithmetics_nat.times p q)
           n)
      :=
      p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      q : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      primep : cic.Term cic.prop (matita_arithmetics_primes.prime p) =>
      notdivpq :
        cic.Term cic.prop
          (matita_basics_logic.Not (matita_arithmetics_primes.divides p q)) =>
      divpn : cic.Term cic.prop (matita_arithmetics_primes.divides p n) =>
      _clearme : cic.Term cic.prop (matita_arithmetics_primes.divides q n) =>
      matita_arithmetics_primes.match_divides q n cic.prop
        (__ : cic.Term cic.prop (matita_arithmetics_primes.divides q n) =>
         matita_arithmetics_primes.divides (matita_arithmetics_nat.times p q)
           n)
        (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         eqn :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                n (matita_arithmetics_nat.times q b)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_nat.times q b)
           (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   x (matita_arithmetics_nat.times q b)) =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_primes.divides p x)
              (__1 :
                 cic.Term cic.prop (matita_arithmetics_primes.divides p x) =>
               matita_arithmetics_primes.divides
                 (matita_arithmetics_nat.times p q) x))
           (divpn0 :
              cic.Term cic.prop
                (matita_arithmetics_primes.divides p
                   (matita_arithmetics_nat.times q b)) =>
            matita_basics_logic.match_Or
              (matita_arithmetics_primes.divides p q)
              (matita_arithmetics_primes.divides p b) cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_arithmetics_primes.divides p q)
                      (matita_arithmetics_primes.divides p b)) =>
               matita_arithmetics_primes.divides
                 (matita_arithmetics_nat.times p q)
                 (matita_arithmetics_nat.times q b))
              (H :
                 cic.Term cic.prop (matita_arithmetics_primes.divides p q) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  matita_arithmetics_primes.divides
                    (matita_arithmetics_nat.times p q)
                    (matita_arithmetics_nat.times q b))
                 (matita_basics_logic.absurd
                    (matita_arithmetics_primes.divides p q) H notdivpq))
              (H :
                 cic.Term cic.prop (matita_arithmetics_primes.divides p b) =>
               matita_arithmetics_primes.match_divides p b cic.prop
                 (__ :
                    cic.Term cic.prop (matita_arithmetics_primes.divides p b) =>
                  matita_arithmetics_primes.divides
                    (matita_arithmetics_nat.times p q)
                    (matita_arithmetics_nat.times q b))
                 (c : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  eqb :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         b (matita_arithmetics_nat.times p c)) =>
                  matita_arithmetics_primes.quotient
                    (matita_arithmetics_nat.times p q)
                    (matita_arithmetics_nat.times q b) c
                    (matita_basics_logic.eq_ind_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.times p c)
                       (x :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        __ :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               x (matita_arithmetics_nat.times p c)) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times q x)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times p q) c))
                       (matita_basics_logic.eq_ind
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.times
                             (matita_arithmetics_nat.times q p) c)
                          (x_1 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_nat.times
                                     (matita_arithmetics_nat.times q p) c)
                                  x_1) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             x_1
                             (matita_arithmetics_nat.times
                                (matita_arithmetics_nat.times p q) c))
                          (matita_basics_logic.rewrite_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.times p q)
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2
                                       matita_arithmetics_nat.nat)
                                    (matita_arithmetics_nat.times x c)
                                    (matita_arithmetics_nat.times
                                       (matita_arithmetics_nat.times p q) c))
                                   __))
                             (matita_basics_logic.rewrite_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_nat.times c
                                   (matita_arithmetics_nat.times p q))
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       x
                                       (matita_arithmetics_nat.times
                                          (matita_arithmetics_nat.times p q)
                                          c))
                                      __))
                                (matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (matita_arithmetics_nat.times p
                                      (matita_arithmetics_nat.times c q))
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          x
                                          (matita_arithmetics_nat.times
                                             (matita_arithmetics_nat.times p
                                                q)
                                             c))
                                         __))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (matita_arithmetics_nat.times q c)
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             (matita_arithmetics_nat.times p
                                                x)
                                             (matita_arithmetics_nat.times
                                                (matita_arithmetics_nat.times
                                                   p q)
                                                c))
                                            __))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.times c
                                            (matita_arithmetics_nat.times p q))
                                         (__ :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                (matita_arithmetics_nat.times
                                                   p
                                                   (matita_arithmetics_nat.times
                                                      q c))
                                                x)
                                               __))
                                         (matita_basics_logic.rewrite_r
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.times p
                                               (matita_arithmetics_nat.times
                                                  c q))
                                            (__ :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop univs.Type2
                                               ((x :
                                                   cic.Term univs.Type0
                                                     matita_arithmetics_nat.nat =>
                                                 matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   (matita_arithmetics_nat.times
                                                      p
                                                      (matita_arithmetics_nat.times
                                                         q c))
                                                   x)
                                                  __))
                                            (matita_basics_logic.rewrite_r
                                               (cic.lift univs.Type0
                                                  univs.Type2
                                                  matita_arithmetics_nat.nat)
                                               (matita_arithmetics_nat.times
                                                  q c)
                                               (__ :
                                                  cic.Term univs.Type0
                                                    matita_arithmetics_nat.nat =>
                                                cic.lift cic.prop univs.Type2
                                                  ((x :
                                                      cic.Term univs.Type0
                                                        matita_arithmetics_nat.nat =>
                                                    matita_basics_logic.eq
                                                      (cic.lift univs.Type0
                                                         univs.Type2
                                                         matita_arithmetics_nat.nat)
                                                      (matita_arithmetics_nat.times
                                                         p
                                                         (matita_arithmetics_nat.times
                                                            q c))
                                                      (matita_arithmetics_nat.times
                                                         p x))
                                                     __))
                                               (matita_basics_logic.refl
                                                  (cic.lift univs.Type0
                                                     univs.Type2
                                                     matita_arithmetics_nat.nat)
                                                  (matita_arithmetics_nat.times
                                                     p
                                                     (matita_arithmetics_nat.times
                                                        q c)))
                                               (matita_arithmetics_nat.times
                                                  c q)
                                               (matita_arithmetics_nat.commutative_times
                                                  c q))
                                            (matita_arithmetics_nat.times c
                                               (matita_arithmetics_nat.times
                                                  p q))
                                            (matita_arithmetics_nat.times_times
                                               c p q))
                                         (matita_arithmetics_nat.times
                                            (matita_arithmetics_nat.times p q)
                                            c)
                                         (matita_arithmetics_nat.commutative_times
                                            (matita_arithmetics_nat.times p q)
                                            c))
                                      (matita_arithmetics_nat.times c q)
                                      (matita_arithmetics_nat.commutative_times
                                         c q))
                                   (matita_arithmetics_nat.times c
                                      (matita_arithmetics_nat.times p q))
                                   (matita_arithmetics_nat.times_times c p q))
                                (matita_arithmetics_nat.times
                                   (matita_arithmetics_nat.times p q) c)
                                (matita_arithmetics_nat.commutative_times
                                   (matita_arithmetics_nat.times p q) c))
                             (matita_arithmetics_nat.times q p)
                             (matita_arithmetics_nat.commutative_times q p))
                          (matita_arithmetics_nat.times q
                             (matita_arithmetics_nat.times p c))
                          (matita_arithmetics_nat.associative_times q p c))
                       b eqb))
                 H)
              (matita_arithmetics_gcd.divides_times_to_divides p q b primep
                 divpn0))
           n eqn divpn)
        _clearme.


