(; This file was automatically generated from Matita. ;)

#NAME matita_arithmetics_permutation.

def injn :
      __ :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Univ cic.prop :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
        (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.le j n)
                 (__1 : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
                  cic.prod cic.prop cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f i) (f j))
                    (__2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f i) (f j)) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       i j))))).

def injn_Sn_n :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n)) ->
      cic.Term cic.prop (matita_arithmetics_permutation.injn f n) :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        cic.Term cic.prop
          (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S n)) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lei : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      lej : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      eqf :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f i) (f j)) =>
      H i j (matita_arithmetics_nat.le_S i n lei)
        (matita_arithmetics_nat.le_S j n lej)
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f i)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (f i) x)
                 __))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f i))
           (f j) eqf).

def injective_to_injn :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_relations.{|injective|} matita_arithmetics_nat.nat
             matita_arithmetics_nat.nat f) ->
      cic.Term cic.prop (matita_arithmetics_permutation.injn f n) :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hinj :
        cic.Term cic.prop
          (matita_basics_relations.{|injective|} matita_arithmetics_nat.nat
             matita_arithmetics_nat.nat f) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      _0 : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      eqf :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f i) (f j)) =>
      Hinj i j
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f i)
           (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  (f i) x)
                 __1))
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f i))
           (f j) eqf).

def permut :
      __ :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Univ cic.prop :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.And
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i m)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
               matita_arithmetics_nat.le (f i) m)))
        (matita_arithmetics_permutation.injn f m).

def permut_O_to_eq_O :
      h :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_permutation.permut h matita_arithmetics_nat.O) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (h matita_arithmetics_nat.O) matita_arithmetics_nat.O)
      :=
      h :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_permutation.permut h matita_arithmetics_nat.O) =>
      matita_basics_logic.match_And
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
              (__ :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le i matita_arithmetics_nat.O) =>
               matita_arithmetics_nat.le (h i) matita_arithmetics_nat.O)))
        (matita_arithmetics_permutation.injn h matita_arithmetics_nat.O)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                      (__ :
                         cic.Term cic.prop
                           (matita_arithmetics_nat.le i
                              matita_arithmetics_nat.O) =>
                       matita_arithmetics_nat.le (h i)
                         matita_arithmetics_nat.O)))
                (matita_arithmetics_permutation.injn h
                   matita_arithmetics_nat.O)) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (h matita_arithmetics_nat.O) matita_arithmetics_nat.O)
        (H1 :
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le i matita_arithmetics_nat.O) ->
            cic.Term cic.prop
              (matita_arithmetics_nat.le (h i) matita_arithmetics_nat.O)) =>
         __ :
           cic.Term cic.prop
             (matita_arithmetics_permutation.injn h matita_arithmetics_nat.O) =>
         matita_basics_logic.sym_eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           matita_arithmetics_nat.O (h matita_arithmetics_nat.O)
           (matita_arithmetics_nat.le_n_O_to_eq (h matita_arithmetics_nat.O)
              (H1 matita_arithmetics_nat.O
                 (matita_arithmetics_nat.le_O_n matita_arithmetics_nat.O))))
        _clearme.

def permut_S_to_permut :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_permutation.permut f
             (matita_arithmetics_nat.S m)) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m)) ->
      cic.Term cic.prop (matita_arithmetics_permutation.permut f m) :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_permutation.permut f
             (matita_arithmetics_nat.S m)) =>
      matita_basics_logic.match_And
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))
              (__ :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m)) =>
               matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m))))
        (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S m))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le i
                         (matita_arithmetics_nat.S m))
                      (__ :
                         cic.Term cic.prop
                           (matita_arithmetics_nat.le i
                              (matita_arithmetics_nat.S m)) =>
                       matita_arithmetics_nat.le (f i)
                         (matita_arithmetics_nat.S m))))
                (matita_arithmetics_permutation.injn f
                   (matita_arithmetics_nat.S m))) =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m))
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f (matita_arithmetics_nat.S m))
                   (matita_arithmetics_nat.S m)) =>
            matita_arithmetics_permutation.permut f m))
        (H1 :
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m)) ->
            cic.Term cic.prop
              (matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m))) =>
         H2 :
           cic.Term cic.prop
             (matita_arithmetics_permutation.injn f
                (matita_arithmetics_nat.S m)) =>
         Hf :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m)) =>
         matita_basics_logic.conj
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i m)
                 (__ : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
                  matita_arithmetics_nat.le (f i) m)))
           (matita_arithmetics_permutation.injn f m)
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            leim : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
            matita_basics_logic.match_Or
              (matita_arithmetics_nat.lt (f i) (matita_arithmetics_nat.S m))
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f i) (matita_arithmetics_nat.S m))
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_arithmetics_nat.lt (f i)
                         (matita_arithmetics_nat.S m))
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f i) (matita_arithmetics_nat.S m))) =>
               matita_arithmetics_nat.le (f i) m)
              (H :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.lt (f i)
                      (matita_arithmetics_nat.S m)) =>
               matita_arithmetics_nat.le_S_S_to_le (f i) m H)
              (H :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f i) (matita_arithmetics_nat.S m)) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  matita_arithmetics_nat.le (f i) m)
                 (matita_basics_logic.absurd (matita_arithmetics_nat.le i m)
                    leim
                    (matita_arithmetics_nat.lt_to_not_le m i
                       (matita_basics_logic.eq_ind
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f i)
                          (x_1 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (f i) x_1) =>
                           cic.prod cic.prop cic.prop
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (f (matita_arithmetics_nat.S m)) x_1)
                             (__ :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     (f (matita_arithmetics_nat.S m)) x_1) =>
                              matita_arithmetics_nat.lt m i))
                          (H0 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (f (matita_arithmetics_nat.S m)) (f i)) =>
                           matita_basics_logic.eq_ind
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_nat.S m)
                             (x_1 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              _x_2 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_nat.S m) x_1) =>
                              matita_arithmetics_nat.lt m x_1)
                             (matita_arithmetics_nat.le_n
                                (matita_arithmetics_nat.S m))
                             i
                             (H2 (matita_arithmetics_nat.S m) i
                                (matita_arithmetics_nat.le_n
                                   (matita_arithmetics_nat.S m))
                                (matita_arithmetics_nat.le_S i m leim) H0))
                          (matita_arithmetics_nat.S m) H Hf))))
              (matita_arithmetics_nat.le_to_or_lt_eq (f i)
                 (matita_arithmetics_nat.S m)
                 (H1 i (matita_arithmetics_nat.le_S i m leim))))
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            lei : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
            lej : cic.Term cic.prop (matita_arithmetics_nat.le j m) =>
            eqf :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f i) (f j)) =>
            H2 i j (matita_arithmetics_nat.le_S i m lei)
              (matita_arithmetics_nat.le_S j m lej)
              (matita_basics_logic.rewrite_l
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f i)
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        (f i) x)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f i))
                 (f j) eqf)))
        _clearme.

def transpose :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_bool.match_bool univs.Type0
        (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
         matita_arithmetics_nat.nat)
        j
        (matita_basics_bool.match_bool univs.Type0
           (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
            matita_arithmetics_nat.nat)
           i n (matita_arithmetics_nat.eqb n j))
        (matita_arithmetics_nat.eqb n i).

def transpose_i_j_i :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_permutation.transpose i j i) j)
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.eq_ind_r
        (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
        matita_basics_bool.true
        (x : cic.Term univs.Type0 matita_basics_bool.bool =>
         __ :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool) x
                matita_basics_bool.true) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              j
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i i (matita_arithmetics_nat.eqb i j))
              x)
           j)
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              j
              (matita_basics_bool.match_bool univs.Type0
                 (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i i (matita_arithmetics_nat.eqb i j))
              matita_basics_bool.true))
        (matita_arithmetics_nat.eqb i i) (matita_arithmetics_nat.eqb_n_n i).

def transpose_i_j_j :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_permutation.transpose i j j) i)
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb j i) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb j i) matita_basics_bool.false)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb j i) matita_basics_bool.true)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb j i) matita_basics_bool.false)) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              j
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i j (matita_arithmetics_nat.eqb j j))
              (matita_arithmetics_nat.eqb j i))
           i)
        (Hc :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb j i) matita_basics_bool.true) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i j (matita_arithmetics_nat.eqb j j))
                 x)
              i)
           (matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x i) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 x i)
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 i)
              j (matita_arithmetics_nat.eqb_true_to_eq j i Hc))
           (matita_arithmetics_nat.eqb j i) Hc)
        (Hc :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb j i) matita_basics_bool.false) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.false) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i j (matita_arithmetics_nat.eqb j j))
                 x)
              i)
           (matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term univs.Type0 matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i j x)
                    matita_basics_bool.false)
                 i)
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i j matita_basics_bool.true)
                    matita_basics_bool.false))
              (matita_arithmetics_nat.eqb j j)
              (matita_arithmetics_nat.eqb_n_n j))
           (matita_arithmetics_nat.eqb j i) Hc)
        (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb j i)).

def transpose_i_i :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_permutation.transpose i i n) n)
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n i) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n i) matita_basics_bool.false)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n i) matita_basics_bool.true)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n i) matita_basics_bool.false)) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              i
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i n (matita_arithmetics_nat.eqb n i))
              (matita_arithmetics_nat.eqb n i))
           n)
        (Hc :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n i) matita_basics_bool.true) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i n x)
                 x)
              n)
           (matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i
              (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      x i) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 i x)
              (matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 i)
              n (matita_arithmetics_nat.eqb_true_to_eq n i Hc))
           (matita_arithmetics_nat.eqb n i) Hc)
        (Hc :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n i) matita_basics_bool.false) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.false) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i n x)
                 x)
              n)
           (matita_basics_logic.refl
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i n matita_basics_bool.false)
                 matita_basics_bool.false))
           (matita_arithmetics_nat.eqb n i) Hc)
        (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb n i)).

def transpose_i_j_j_i :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_permutation.transpose i j n)
           (matita_arithmetics_permutation.transpose j i n))
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n i) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n i) matita_basics_bool.false)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n i) matita_basics_bool.true)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n i) matita_basics_bool.false)) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              j
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i n (matita_arithmetics_nat.eqb n j))
              (matita_arithmetics_nat.eqb n i))
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              i
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j n (matita_arithmetics_nat.eqb n i))
              (matita_arithmetics_nat.eqb n j)))
        (Hni :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n i) matita_basics_bool.true) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i n (matita_arithmetics_nat.eqb n j))
                 x)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j n x)
                 (matita_arithmetics_nat.eqb n j)))
           (matita_basics_logic.match_Or
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb n j) matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb n j) matita_basics_bool.false)
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb n j)
                         matita_basics_bool.true)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb n j)
                         matita_basics_bool.false)) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i n (matita_arithmetics_nat.eqb n j))
                    matita_basics_bool.true)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j n matita_basics_bool.true)
                    (matita_arithmetics_nat.eqb n j)))
              (Hnj :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb n j)
                      matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n x)
                       matita_basics_bool.true)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j n matita_basics_bool.true)
                       x))
                 (matita_basics_logic.eq_ind
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n
                    (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            n x_1) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       j x_1)
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               n x_1) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          x_1 n)
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          n)
                       j (matita_arithmetics_nat.eqb_true_to_eq n j Hnj))
                    i (matita_arithmetics_nat.eqb_true_to_eq n i Hni))
                 (matita_arithmetics_nat.eqb n j) Hnj)
              (Hnj :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb n j)
                      matita_basics_bool.false) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.false) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n x)
                       matita_basics_bool.true)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j n matita_basics_bool.true)
                       x))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    j)
                 (matita_arithmetics_nat.eqb n j) Hnj)
              (matita_basics_bool.true_or_false
                 (matita_arithmetics_nat.eqb n j)))
           (matita_arithmetics_nat.eqb n i) Hni)
        (Hni :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n i) matita_basics_bool.false) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.false) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i n (matita_arithmetics_nat.eqb n j))
                 x)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j n x)
                 (matita_arithmetics_nat.eqb n j)))
           (matita_basics_logic.match_Or
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb n j) matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb n j) matita_basics_bool.false)
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb n j)
                         matita_basics_bool.true)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb n j)
                         matita_basics_bool.false)) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i n (matita_arithmetics_nat.eqb n j))
                    matita_basics_bool.false)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j n matita_basics_bool.false)
                    (matita_arithmetics_nat.eqb n j)))
              (Hnj :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb n j)
                      matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n x)
                       matita_basics_bool.false)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j n matita_basics_bool.false)
                       x))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    i)
                 (matita_arithmetics_nat.eqb n j) Hnj)
              (Hnj :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb n j)
                      matita_basics_bool.false) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.false) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n x)
                       matita_basics_bool.false)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j n matita_basics_bool.false)
                       x))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    n)
                 (matita_arithmetics_nat.eqb n j) Hnj)
              (matita_basics_bool.true_or_false
                 (matita_arithmetics_nat.eqb n j)))
           (matita_arithmetics_nat.eqb n i) Hni)
        (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb n i)).

def transpose_transpose :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_permutation.transpose i j
              (matita_arithmetics_permutation.transpose i j n))
           n)
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_basics_logic.match_Or
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n i) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n i) matita_basics_bool.false)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n i) matita_basics_bool.true)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n i) matita_basics_bool.false)) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              j
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i n (matita_arithmetics_nat.eqb n j))
                    (matita_arithmetics_nat.eqb n i))
                 (matita_arithmetics_nat.eqb
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n (matita_arithmetics_nat.eqb n j))
                       (matita_arithmetics_nat.eqb n i))
                    j))
              (matita_arithmetics_nat.eqb
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i n (matita_arithmetics_nat.eqb n j))
                    (matita_arithmetics_nat.eqb n i))
                 i))
           n)
        (Hni :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n i) matita_basics_bool.true) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n (matita_arithmetics_nat.eqb n j))
                       x)
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n j))
                          x)
                       j))
                 (matita_arithmetics_nat.eqb
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n (matita_arithmetics_nat.eqb n j))
                       x)
                    i))
              n)
           (matita_basics_logic.match_Or
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb j i) matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb j i) matita_basics_bool.false)
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb j i)
                         matita_basics_bool.true)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb j i)
                         matita_basics_bool.false)) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i j (matita_arithmetics_nat.eqb j j))
                    (matita_arithmetics_nat.eqb j i))
                 n)
              (Hji :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb j i)
                      matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i j (matita_arithmetics_nat.eqb j j))
                       x)
                    n)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    i
                    (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            x i) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       j x)
                    (matita_arithmetics_nat.eqb_true_to_eq j i Hji) n
                    (matita_arithmetics_nat.eqb_true_to_eq n i Hni))
                 (matita_arithmetics_nat.eqb j i) Hji)
              (Hji :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb j i)
                      matita_basics_bool.false) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.false) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i j (matita_arithmetics_nat.eqb j j))
                       x)
                    n)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.true) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i j x)
                       n)
                    (matita_basics_logic.sym_eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n i (matita_arithmetics_nat.eqb_true_to_eq n i Hni))
                    (matita_arithmetics_nat.eqb j j)
                    (matita_arithmetics_nat.eqb_n_n j))
                 (matita_arithmetics_nat.eqb j i) Hji)
              (matita_basics_bool.true_or_false
                 (matita_arithmetics_nat.eqb j i)))
           (matita_arithmetics_nat.eqb n i) Hni)
        (Hni :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n i) matita_basics_bool.false) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.false) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n (matita_arithmetics_nat.eqb n j))
                       x)
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n j))
                          x)
                       j))
                 (matita_arithmetics_nat.eqb
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n (matita_arithmetics_nat.eqb n j))
                       x)
                    i))
              n)
           (matita_basics_logic.match_Or
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb n j) matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb n j) matita_basics_bool.false)
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb n j)
                         matita_basics_bool.true)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb n j)
                         matita_basics_bool.false)) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n (matita_arithmetics_nat.eqb n j))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n j))
                          j))
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n (matita_arithmetics_nat.eqb n j))
                       i))
                 n)
              (Hnj :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb n j)
                      matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n x)
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n x)
                             j))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n x)
                          i))
                    n)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.true) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i i (matita_arithmetics_nat.eqb i j))
                          x)
                       n)
                    (matita_basics_logic.sym_eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       n j (matita_arithmetics_nat.eqb_true_to_eq n j Hnj))
                    (matita_arithmetics_nat.eqb i i)
                    (matita_arithmetics_nat.eqb_n_n i))
                 (matita_arithmetics_nat.eqb n j) Hnj)
              (Hnj :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb n j)
                      matita_basics_bool.false) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.false) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n x)
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n x)
                             j))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n x)
                          i))
                    n)
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.false) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n j))
                          x)
                       n)
                    (matita_basics_logic.eq_ind_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                        __ :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_basics_bool.bool)
                               x matita_basics_bool.false) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n x)
                             matita_basics_bool.false)
                          n)
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n matita_basics_bool.false)
                             matita_basics_bool.false))
                       (matita_arithmetics_nat.eqb n j) Hnj)
                    (matita_arithmetics_nat.eqb n i) Hni)
                 (matita_arithmetics_nat.eqb n j) Hnj)
              (matita_basics_bool.true_or_false
                 (matita_arithmetics_nat.eqb n j)))
           (matita_arithmetics_nat.eqb n i) Hni)
        (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb n i)).

def injective_transpose :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term cic.prop
        (matita_basics_relations.{|injective|} matita_arithmetics_nat.nat
           matita_arithmetics_nat.nat
           (matita_arithmetics_permutation.transpose i j))
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      y : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (matita_arithmetics_permutation.transpose i j x)
             (matita_arithmetics_permutation.transpose i j y)) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               x0 y)
              __))
        (matita_basics_logic.refl
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) y)
        x
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_permutation.transpose i j
              (matita_arithmetics_permutation.transpose i j x))
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x0 y)
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_permutation.transpose i j y)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (matita_arithmetics_permutation.transpose i j x0) y)
                    __))
              (matita_arithmetics_permutation.transpose_transpose i j y)
              (matita_arithmetics_permutation.transpose i j x) auto)
           x (matita_arithmetics_permutation.transpose_transpose i j x)).

def permut_transpose :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le j n) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.permut
           (matita_arithmetics_permutation.transpose i j) n)
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      matita_basics_logic.conj
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i0 n)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le i0 n) =>
               matita_arithmetics_nat.le
                 (matita_arithmetics_permutation.transpose i j i0) n)))
        (matita_arithmetics_permutation.injn
           (matita_arithmetics_permutation.transpose i j) n)
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
         matita_basics_bool.match_bool cic.prop
           (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
            matita_arithmetics_nat.le
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i a (matita_arithmetics_nat.eqb a j))
                 __)
              n)
           (matita_basics_bool.match_bool cic.prop
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.le
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i a __)
                    matita_basics_bool.true)
                 n)
              lejn lejn (matita_arithmetics_nat.eqb a j))
           (matita_basics_bool.match_bool cic.prop
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.le
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i a __)
                    matita_basics_bool.false)
                 n)
              lein lean (matita_arithmetics_nat.eqb a j))
           (matita_arithmetics_nat.eqb a i))
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
         lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n) =>
         matita_arithmetics_permutation.injective_to_injn
           (matita_arithmetics_permutation.transpose i j) n
           (matita_arithmetics_permutation.injective_transpose i j) a b lean
           lebn).

def permut_fg :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      g :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_permutation.permut f n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_permutation.permut g n) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.permut
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat => f (g m)) n)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      g :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f n) =>
      matita_basics_logic.match_And
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
               matita_arithmetics_nat.le (f i) n)))
        (matita_arithmetics_permutation.injn f n) cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le i n)
                      (__ :
                         cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                       matita_arithmetics_nat.le (f i) n)))
                (matita_arithmetics_permutation.injn f n)) =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_permutation.permut g n)
           (__1 :
              cic.Term cic.prop (matita_arithmetics_permutation.permut g n) =>
            matita_arithmetics_permutation.permut
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat => f (g m))
              n))
        (permf1 :
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
            cic.Term cic.prop (matita_arithmetics_nat.le (f i) n)) =>
         permf2 :
           cic.Term cic.prop (matita_arithmetics_permutation.injn f n) =>
         _clearme0 :
           cic.Term cic.prop (matita_arithmetics_permutation.permut g n) =>
         matita_basics_logic.match_And
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
                 (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                  matita_arithmetics_nat.le (g i) n)))
           (matita_arithmetics_permutation.injn g n) cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                      (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         (matita_arithmetics_nat.le i n)
                         (__ :
                            cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                          matita_arithmetics_nat.le (g i) n)))
                   (matita_arithmetics_permutation.injn g n)) =>
            matita_arithmetics_permutation.permut
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat => f (g m))
              n)
           (permg1 :
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
               cic.Term cic.prop (matita_arithmetics_nat.le (g i) n)) =>
            permg2 :
              cic.Term cic.prop (matita_arithmetics_permutation.injn g n) =>
            matita_basics_logic.conj
              (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                 (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
                    (__ :
                       cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                     matita_arithmetics_nat.le (f (g i)) n)))
              (matita_arithmetics_permutation.injn
                 (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  f (g m))
                 n)
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
               permf1 (g i) (permg1 i lein))
              (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
               lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n) =>
               Heq :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f (g a)) (f (g b))) =>
               permg2 a b lean lebn
                 (permf2 (g a) (g b) (permg1 a lean) (permg1 b lebn)
                    (matita_basics_logic.rewrite_l
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f (g a))
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (f (g a)) x)
                             __))
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f (g a)))
                       (f (g b)) Heq))))
           _clearme0)
        _clearme.

def permut_transpose_l :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le i m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le j m) ->
      __2 : cic.Term cic.prop (matita_arithmetics_permutation.permut f m) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.permut
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_permutation.transpose i j (f n))
           m)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      leim : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
      lejm : cic.Term cic.prop (matita_arithmetics_nat.le j m) =>
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f m) =>
      matita_arithmetics_permutation.permut_fg
        (matita_arithmetics_permutation.transpose i j) f m
        (matita_arithmetics_permutation.permut_transpose i j m leim lejm)
        permf.

def permut_transpose_r :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le i m) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le j m) ->
      __2 : cic.Term cic.prop (matita_arithmetics_permutation.permut f m) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.permut
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            f (matita_arithmetics_permutation.transpose i j n))
           m)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      leim : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
      lejm : cic.Term cic.prop (matita_arithmetics_nat.le j m) =>
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f m) =>
      matita_arithmetics_permutation.permut_fg f
        (matita_arithmetics_permutation.transpose i j) m permf
        (matita_arithmetics_permutation.permut_transpose i j m leim lejm).

def eq_transpose :
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      k : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                j i)) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                i k)) ->
      __2 :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                j k)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_permutation.transpose i j n)
           (matita_arithmetics_permutation.transpose i k
              (matita_arithmetics_permutation.transpose k j
                 (matita_arithmetics_permutation.transpose i k n))))
      :=
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      k : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      Hji :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                j i)) =>
      Hik :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                i k)) =>
      Hjk :
        cic.Term cic.prop
          (matita_basics_logic.Not
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                j k)) =>
      matita_basics_logic.match_Or
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n i) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb n i) matita_basics_bool.false)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n i) matita_basics_bool.true)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb n i) matita_basics_bool.false)) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              j
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i n (matita_arithmetics_nat.eqb n j))
              (matita_arithmetics_nat.eqb n i))
           (matita_basics_bool.match_bool univs.Type0
              (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.nat)
              k
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 i
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       k
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n k))
                          (matita_arithmetics_nat.eqb n i))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             (matita_arithmetics_nat.eqb n i))
                          j))
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n k))
                          (matita_arithmetics_nat.eqb n i))
                       k))
                 (matita_arithmetics_nat.eqb
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             (matita_arithmetics_nat.eqb n i))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                (matita_arithmetics_nat.eqb n i))
                             j))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             (matita_arithmetics_nat.eqb n i))
                          k))
                    k))
              (matita_arithmetics_nat.eqb
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       k
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n k))
                          (matita_arithmetics_nat.eqb n i))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             (matita_arithmetics_nat.eqb n i))
                          j))
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n k))
                          (matita_arithmetics_nat.eqb n i))
                       k))
                 i)))
        (Hni :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n i) matita_basics_bool.true) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.true
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.true) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i n (matita_arithmetics_nat.eqb n j))
                 x)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 k
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             x)
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                x)
                             j))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             x)
                          k))
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                x)
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n (matita_arithmetics_nat.eqb n k))
                                   x)
                                j))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                x)
                             k))
                       k))
                 (matita_arithmetics_nat.eqb
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             x)
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                x)
                             j))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             x)
                          k))
                    i)))
           (matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term univs.Type0 matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    k
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k k (matita_arithmetics_nat.eqb k j))
                          x)
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k k (matita_arithmetics_nat.eqb k j))
                             x)
                          k))
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k k (matita_arithmetics_nat.eqb k j))
                          x)
                       i)))
              (matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.false) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    j
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       k
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i j (matita_arithmetics_nat.eqb j k))
                       x))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.false) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i j x)
                          matita_basics_bool.false))
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       j)
                    (matita_arithmetics_nat.eqb j k)
                    (matita_arithmetics_nat.not_eq_to_eqb_false j k Hjk))
                 (matita_arithmetics_nat.eqb j i)
                 (matita_arithmetics_nat.not_eq_to_eqb_false j i Hji))
              (matita_arithmetics_nat.eqb k k)
              (matita_arithmetics_nat.eqb_n_n k))
           (matita_arithmetics_nat.eqb n i) Hni)
        (Hni :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb n i) matita_basics_bool.false) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.false) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 j
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i n (matita_arithmetics_nat.eqb n j))
                 x)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 k
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             x)
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                x)
                             j))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             x)
                          k))
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                x)
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n (matita_arithmetics_nat.eqb n k))
                                   x)
                                j))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                x)
                             k))
                       k))
                 (matita_arithmetics_nat.eqb
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       j
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             x)
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                x)
                             j))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             x)
                          k))
                    i)))
           (matita_basics_logic.match_Or
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb n k) matita_basics_bool.true)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 (matita_arithmetics_nat.eqb n k) matita_basics_bool.false)
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb n k)
                         matita_basics_bool.true)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         (matita_arithmetics_nat.eqb n k)
                         matita_basics_bool.false)) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    i n (matita_arithmetics_nat.eqb n j))
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    k
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                j))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             k))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n (matita_arithmetics_nat.eqb n k))
                                   j))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                k))
                          k))
                    (matita_arithmetics_nat.eqb
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n (matita_arithmetics_nat.eqb n k))
                                j))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n (matita_arithmetics_nat.eqb n k))
                             k))
                       i)))
              (Hnk :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb n k)
                      matita_basics_bool.true) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.true
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.true) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i n (matita_arithmetics_nat.eqb n j))
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       k
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n x)
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n x)
                                   j))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n x)
                                k))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                j
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n x)
                                   (matita_arithmetics_nat.eqb
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         i n x)
                                      j))
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n x)
                                   k))
                             k))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n x)
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n x)
                                   j))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n x)
                                k))
                          i)))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.false) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n x)
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                j
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k i (matita_arithmetics_nat.eqb i j))
                                (matita_arithmetics_nat.eqb i k))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   j
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k i (matita_arithmetics_nat.eqb i j))
                                   (matita_arithmetics_nat.eqb i k))
                                k))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                j
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k i (matita_arithmetics_nat.eqb i j))
                                (matita_arithmetics_nat.eqb i k))
                             i)))
                    (matita_basics_logic.eq_ind_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                        __ :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_basics_bool.bool)
                               x matita_basics_bool.false) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n matita_basics_bool.false)
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   j
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k i (matita_arithmetics_nat.eqb i j))
                                   x)
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      j
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         k i (matita_arithmetics_nat.eqb i j))
                                      x)
                                   k))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   j
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k i (matita_arithmetics_nat.eqb i j))
                                   x)
                                i)))
                       (matita_basics_logic.eq_ind_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_basics_bool.bool)
                          matita_basics_bool.false
                          (x :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           __ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_basics_bool.bool)
                                  x matita_basics_bool.false) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n matita_basics_bool.false)
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      j
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         k i x)
                                      matita_basics_bool.false)
                                   (matita_arithmetics_nat.eqb
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         j
                                         (matita_basics_bool.match_bool
                                            univs.Type0
                                            (_0 :
                                               cic.Term univs.Type0
                                                 matita_basics_bool.bool =>
                                             matita_arithmetics_nat.nat)
                                            k i x)
                                         matita_basics_bool.false)
                                      k))
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      j
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         k i x)
                                      matita_basics_bool.false)
                                   i)))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_basics_bool.bool)
                             matita_basics_bool.true
                             (x :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              __ :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_basics_bool.bool)
                                     x matita_basics_bool.true) =>
                              matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                n
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i i (matita_arithmetics_nat.eqb i k))
                                   x))
                             (matita_arithmetics_nat.eqb_true_to_eq n k Hnk)
                             (matita_arithmetics_nat.eqb i i)
                             (matita_arithmetics_nat.eqb_n_n i))
                          (matita_arithmetics_nat.eqb i j)
                          (matita_arithmetics_nat.not_eq_to_eqb_false i j
                             (matita_basics_logic.not_to_not
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   i j)
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   j i)
                                (auto :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        i j) =>
                                 matita_basics_logic.rewrite_l
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   i
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          x i)
                                         __))
                                   (matita_basics_logic.refl
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      i)
                                   j auto)
                                Hji)))
                       (matita_arithmetics_nat.eqb i k)
                       (matita_arithmetics_nat.not_eq_to_eqb_false i k Hik))
                    (matita_arithmetics_nat.eqb n j)
                    (matita_arithmetics_nat.not_eq_to_eqb_false n j
                       (matita_basics_logic.not_to_not
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             n j)
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             j k)
                          (matita_basics_logic.eq_ind
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             n
                             (x_1 :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              _x_2 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     n x_1) =>
                              cic.prod cic.prop cic.prop
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   n j)
                                (__ :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        n j) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   j x_1))
                             (auto :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     n j) =>
                              matita_basics_logic.rewrite_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                j
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       j x)
                                      __))
                                (matita_basics_logic.refl
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   j)
                                n auto)
                             k
                             (matita_arithmetics_nat.eqb_true_to_eq n k Hnk))
                          Hjk)))
                 (matita_arithmetics_nat.eqb n k) Hnk)
              (Hnk :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb n k)
                      matita_basics_bool.false) =>
               matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                 matita_basics_bool.false
                 (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_basics_bool.bool)
                         x matita_basics_bool.false) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       i n (matita_arithmetics_nat.eqb n j))
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       k
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n x)
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n x)
                                   j))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n x)
                                k))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                j
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n x)
                                   (matita_arithmetics_nat.eqb
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         i n x)
                                      j))
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n x)
                                   k))
                             k))
                       (matita_arithmetics_nat.eqb
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n x)
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n x)
                                   j))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i n x)
                                k))
                          i)))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.false) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          i n (matita_arithmetics_nat.eqb n j))
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          k
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                j
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k n (matita_arithmetics_nat.eqb n j))
                                x)
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   j
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k n (matita_arithmetics_nat.eqb n j))
                                   x)
                                k))
                          (matita_arithmetics_nat.eqb
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                j
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k n (matita_arithmetics_nat.eqb n j))
                                x)
                             i)))
                    (matita_basics_logic.match_Or
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_basics_bool.bool)
                          (matita_arithmetics_nat.eqb n j)
                          matita_basics_bool.true)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_basics_bool.bool)
                          (matita_arithmetics_nat.eqb n j)
                          matita_basics_bool.false)
                       cic.prop
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_logic.Or
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_basics_bool.bool)
                                  (matita_arithmetics_nat.eqb n j)
                                  matita_basics_bool.true)
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_basics_bool.bool)
                                  (matita_arithmetics_nat.eqb n j)
                                  matita_basics_bool.false)) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i n (matita_arithmetics_nat.eqb n j))
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             k
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k n (matita_arithmetics_nat.eqb n j))
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k n (matita_arithmetics_nat.eqb n j))
                                   k))
                             (matita_arithmetics_nat.eqb
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k n (matita_arithmetics_nat.eqb n j))
                                i)))
                       (Hnj :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_basics_bool.bool)
                               (matita_arithmetics_nat.eqb n j)
                               matita_basics_bool.true) =>
                        matita_basics_logic.eq_ind_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_basics_bool.bool)
                          matita_basics_bool.true
                          (x :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           __ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_basics_bool.bool)
                                  x matita_basics_bool.true) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n x)
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k n x)
                                   (matita_arithmetics_nat.eqb
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         k n x)
                                      k))
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k n x)
                                   i)))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_basics_bool.bool)
                             matita_basics_bool.false
                             (x :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              __ :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_basics_bool.bool)
                                     x matita_basics_bool.false) =>
                              matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                i
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i k (matita_arithmetics_nat.eqb k k))
                                   x))
                             (matita_basics_logic.eq_ind_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_basics_bool.bool)
                                matita_basics_bool.true
                                (x :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 __ :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_basics_bool.bool)
                                        x matita_basics_bool.true) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   i
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i k x))
                                (matita_basics_logic.refl
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   i)
                                (matita_arithmetics_nat.eqb k k)
                                (matita_arithmetics_nat.eqb_n_n k))
                             (matita_arithmetics_nat.eqb k i)
                             (matita_arithmetics_nat.not_eq_to_eqb_false k i
                                (matita_basics_logic.not_to_not
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      k i)
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      i k)
                                   (auto :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              matita_arithmetics_nat.nat)
                                           k i) =>
                                    matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      i
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             i x)
                                            __))
                                      (matita_basics_logic.refl
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         i)
                                      k auto)
                                   Hik)))
                          (matita_arithmetics_nat.eqb n j) Hnj)
                       (Hnj :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_basics_bool.bool)
                               (matita_arithmetics_nat.eqb n j)
                               matita_basics_bool.false) =>
                        matita_basics_logic.eq_ind_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_basics_bool.bool)
                          matita_basics_bool.false
                          (x :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           __ :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_basics_bool.bool)
                                  x matita_basics_bool.false) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i n x)
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                k
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   i
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k n x)
                                   (matita_arithmetics_nat.eqb
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         k n x)
                                      k))
                                (matita_arithmetics_nat.eqb
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k n x)
                                   i)))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_basics_bool.bool)
                             matita_basics_bool.false
                             (x :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              __ :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_basics_bool.bool)
                                     x matita_basics_bool.false) =>
                              matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                n
                                (matita_basics_bool.match_bool univs.Type0
                                   (_0 :
                                      cic.Term univs.Type0
                                        matita_basics_bool.bool =>
                                    matita_arithmetics_nat.nat)
                                   k
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      i n (matita_arithmetics_nat.eqb n k))
                                   x))
                             (matita_basics_logic.eq_ind_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_basics_bool.bool)
                                matita_basics_bool.false
                                (x :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 __ :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_basics_bool.bool)
                                        x matita_basics_bool.false) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   n
                                   (matita_basics_bool.match_bool univs.Type0
                                      (_0 :
                                         cic.Term univs.Type0
                                           matita_basics_bool.bool =>
                                       matita_arithmetics_nat.nat)
                                      k
                                      (matita_basics_bool.match_bool
                                         univs.Type0
                                         (_0 :
                                            cic.Term univs.Type0
                                              matita_basics_bool.bool =>
                                          matita_arithmetics_nat.nat)
                                         i n x)
                                      matita_basics_bool.false))
                                (matita_basics_logic.refl
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   n)
                                (matita_arithmetics_nat.eqb n k) Hnk)
                             (matita_arithmetics_nat.eqb n i) Hni)
                          (matita_arithmetics_nat.eqb n j) Hnj)
                       (matita_basics_bool.true_or_false
                          (matita_arithmetics_nat.eqb n j)))
                    (matita_arithmetics_nat.eqb n k) Hnk)
                 (matita_arithmetics_nat.eqb n k) Hnk)
              (matita_basics_bool.true_or_false
                 (matita_arithmetics_nat.eqb n k)))
           (matita_arithmetics_nat.eqb n i) Hni)
        (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb n i)).

def permut_S_to_permut_transpose :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_permutation.permut f
             (matita_arithmetics_nat.S m)) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.permut
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_permutation.transpose
              (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m)
              (f n))
           m)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          (matita_arithmetics_permutation.permut f
             (matita_arithmetics_nat.S m)) =>
      matita_basics_logic.match_And
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m))
              (__ :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m)) =>
               matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m))))
        (matita_arithmetics_permutation.injn f (matita_arithmetics_nat.S m))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le i
                         (matita_arithmetics_nat.S m))
                      (__ :
                         cic.Term cic.prop
                           (matita_arithmetics_nat.le i
                              (matita_arithmetics_nat.S m)) =>
                       matita_arithmetics_nat.le (f i)
                         (matita_arithmetics_nat.S m))))
                (matita_arithmetics_permutation.injn f
                   (matita_arithmetics_nat.S m))) =>
         matita_arithmetics_permutation.permut
           (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_permutation.transpose
              (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m)
              (f n))
           m)
        (permf1 :
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ :
              cic.Term cic.prop
                (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m)) ->
            cic.Term cic.prop
              (matita_arithmetics_nat.le (f i) (matita_arithmetics_nat.S m))) =>
         permf2 :
           cic.Term cic.prop
             (matita_arithmetics_permutation.injn f
                (matita_arithmetics_nat.S m)) =>
         matita_basics_logic.conj
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i m)
                 (__ : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
                  matita_arithmetics_nat.le
                    (matita_arithmetics_permutation.transpose
                       (f (matita_arithmetics_nat.S m))
                       (matita_arithmetics_nat.S m) (f i))
                    m)))
           (matita_arithmetics_permutation.injn
              (n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_permutation.transpose
                 (f (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.S m) (f n))
              m)
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            leim : cic.Term cic.prop (matita_arithmetics_nat.le i m) =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.false
              (x : cic.Term univs.Type0 matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      x matita_basics_bool.false) =>
               matita_arithmetics_nat.le
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S m)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (f (matita_arithmetics_nat.S m)) (f i)
                       (matita_arithmetics_nat.eqb (f i)
                          (matita_arithmetics_nat.S m)))
                    x)
                 m)
              (matita_basics_logic.match_Or
                 (matita_arithmetics_nat.lt (f i)
                    (matita_arithmetics_nat.S m))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f i) (matita_arithmetics_nat.S m))
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.Or
                         (matita_arithmetics_nat.lt (f i)
                            (matita_arithmetics_nat.S m))
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f i) (matita_arithmetics_nat.S m))) =>
                  matita_arithmetics_nat.le
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (f (matita_arithmetics_nat.S m)) (f i)
                       (matita_arithmetics_nat.eqb (f i)
                          (matita_arithmetics_nat.S m)))
                    m)
                 (Hfi :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.lt (f i)
                         (matita_arithmetics_nat.S m)) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.false) =>
                     matita_arithmetics_nat.le
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          (f (matita_arithmetics_nat.S m)) (f i) x)
                       m)
                    (matita_arithmetics_nat.le_S_S_to_le (f i) m Hfi)
                    (matita_arithmetics_nat.eqb (f i)
                       (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.not_eq_to_eqb_false (f i)
                       (matita_arithmetics_nat.S m)
                       (matita_arithmetics_nat.lt_to_not_eq (f i)
                          (matita_arithmetics_nat.S m) Hfi)))
                 (Hfi :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f i) (matita_arithmetics_nat.S m)) =>
                  matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.true) =>
                     matita_arithmetics_nat.le
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          (f (matita_arithmetics_nat.S m)) (f i) x)
                       m)
                    (matita_basics_logic.match_Or
                       (matita_arithmetics_nat.lt
                          (f (matita_arithmetics_nat.S m))
                          (matita_arithmetics_nat.S m))
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f (matita_arithmetics_nat.S m))
                          (matita_arithmetics_nat.S m))
                       cic.prop
                       (__ :
                          cic.Term cic.prop
                            (matita_basics_logic.Or
                               (matita_arithmetics_nat.lt
                                  (f (matita_arithmetics_nat.S m))
                                  (matita_arithmetics_nat.S m))
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (f (matita_arithmetics_nat.S m))
                                  (matita_arithmetics_nat.S m))) =>
                        matita_arithmetics_nat.le
                          (f (matita_arithmetics_nat.S m)) m)
                       (H :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.lt
                               (f (matita_arithmetics_nat.S m))
                               (matita_arithmetics_nat.S m)) =>
                        matita_arithmetics_nat.le_S_S_to_le
                          (f (matita_arithmetics_nat.S m)) m H)
                       (H :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (f (matita_arithmetics_nat.S m))
                               (matita_arithmetics_nat.S m)) =>
                        matita_basics_logic.False_ind
                          (_x_66 :
                             cic.Term cic.prop matita_basics_logic.False =>
                           matita_arithmetics_nat.le
                             (f (matita_arithmetics_nat.S m)) m)
                          (matita_basics_logic.absurd
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                i (matita_arithmetics_nat.S m))
                             (permf2 i (matita_arithmetics_nat.S m)
                                (matita_arithmetics_nat.le_S i m leim)
                                (matita_arithmetics_nat.le_n
                                   (matita_arithmetics_nat.S m))
                                (matita_basics_logic.rewrite_l
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (f i)
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          (f i) (f x))
                                         __))
                                   (matita_basics_logic.rewrite_r
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (f i)
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             (f i) x)
                                            __))
                                      (matita_basics_logic.refl
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (f i))
                                      (f (f i))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         (matita_arithmetics_nat.S m)
                                         (__ :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                (f (f i)) x)
                                               __))
                                         (matita_basics_logic.rewrite_r
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            (matita_arithmetics_nat.S m)
                                            (__ :
                                               cic.Term univs.Type0
                                                 matita_arithmetics_nat.nat =>
                                             cic.lift cic.prop univs.Type2
                                               ((x :
                                                   cic.Term univs.Type0
                                                     matita_arithmetics_nat.nat =>
                                                 matita_basics_logic.eq
                                                   (cic.lift univs.Type0
                                                      univs.Type2
                                                      matita_arithmetics_nat.nat)
                                                   (f x)
                                                   (matita_arithmetics_nat.S
                                                      m))
                                                  __))
                                            H (f i) Hfi)
                                         (f i) Hfi))
                                   (matita_arithmetics_nat.S m) Hfi))
                             (matita_basics_logic.not_to_not
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   i (matita_arithmetics_nat.S m))
                                (matita_arithmetics_nat.le
                                   (matita_arithmetics_nat.S m) m)
                                (auto :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        i (matita_arithmetics_nat.S m)) =>
                                 matita_basics_logic.eq_coerc
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_nat.le i m))
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_nat.le
                                         (matita_arithmetics_nat.S m) m))
                                   leim
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      i
                                      (__ :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift (cic.succ univs.Type0)
                                                univs.Type2
                                                (cic.univ univs.Type0))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_arithmetics_nat.le i
                                                   m))
                                             (cic.lift cic.prop univs.Type0
                                                (matita_arithmetics_nat.le x
                                                   m)))
                                            __))
                                      (matita_basics_logic.refl
                                         (cic.lift (cic.succ univs.Type0)
                                            univs.Type2
                                            (cic.univ univs.Type0))
                                         (cic.lift cic.prop univs.Type0
                                            (matita_arithmetics_nat.le i m)))
                                      (matita_arithmetics_nat.S m) auto))
                                (matita_arithmetics_nat.lt_to_not_le m
                                   (matita_arithmetics_nat.S m)
                                   (matita_arithmetics_nat.le_n
                                      (matita_arithmetics_nat.S m))))))
                       (matita_arithmetics_nat.le_to_or_lt_eq
                          (f (matita_arithmetics_nat.S m))
                          (matita_arithmetics_nat.S m)
                          (permf1 (matita_arithmetics_nat.S m)
                             (matita_arithmetics_nat.le_n
                                (matita_arithmetics_nat.S m)))))
                    (matita_arithmetics_nat.eqb (f i)
                       (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.eq_to_eqb_true (f i)
                       (matita_arithmetics_nat.S m) Hfi))
                 (matita_arithmetics_nat.le_to_or_lt_eq (f i)
                    (matita_arithmetics_nat.S m)
                    (permf1 i (matita_arithmetics_nat.le_S i m leim))))
              (matita_arithmetics_nat.eqb (f i)
                 (f (matita_arithmetics_nat.S m)))
              (matita_arithmetics_nat.not_eq_to_eqb_false (f i)
                 (f (matita_arithmetics_nat.S m))
                 (matita_basics_logic.nmk
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f i) (f (matita_arithmetics_nat.S m)))
                    (H :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f i) (f (matita_arithmetics_nat.S m))) =>
                     matita_basics_logic.absurd
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          i (matita_arithmetics_nat.S m))
                       (permf2 i (matita_arithmetics_nat.S m)
                          (matita_arithmetics_nat.le_S i m leim)
                          (matita_arithmetics_nat.le_n
                             (matita_arithmetics_nat.S m))
                          H)
                       (matita_arithmetics_nat.lt_to_not_eq i
                          (matita_arithmetics_nat.S m)
                          (matita_arithmetics_nat.le_S_S i m leim))))))
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            leam : cic.Term cic.prop (matita_arithmetics_nat.le a m) =>
            lebm : cic.Term cic.prop (matita_arithmetics_nat.le b m) =>
            H :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_permutation.transpose
                      (f (matita_arithmetics_nat.S m))
                      (matita_arithmetics_nat.S m) (f a))
                   (matita_arithmetics_permutation.transpose
                      (f (matita_arithmetics_nat.S m))
                      (matita_arithmetics_nat.S m) (f b))) =>
            permf2 a b (matita_arithmetics_nat.le_S a m leam)
              (matita_arithmetics_nat.le_S b m lebm)
              (matita_arithmetics_permutation.injective_transpose
                 (f (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.S m) (f a) (f b) H)))
        _clearme.

def bijn :
      __ :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Univ cic.prop :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod cic.prop cic.prop (matita_arithmetics_nat.le m n)
           (__ : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f p) m)))).

def eq_to_bijn :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      g :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
         cic.Term cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f i) (g i))) ->
      __1 : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) ->
      cic.Term cic.prop (matita_arithmetics_permutation.bijn g n) :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      g :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      H :
        (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
         cic.Term cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f i) (g i))) =>
      bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      matita_basics_logic.match_ex matita_arithmetics_nat.nat
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.And (matita_arithmetics_nat.le p n)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f p) i))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.ex matita_arithmetics_nat.nat
                (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                 matita_basics_logic.And (matita_arithmetics_nat.le p n)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f p) i))) =>
         matita_basics_logic.ex matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le p n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (g p) i)))
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.And (matita_arithmetics_nat.le a n)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) i)) =>
         matita_basics_logic.match_And (matita_arithmetics_nat.le a n)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f a) i)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And (matita_arithmetics_nat.le a n)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f a) i)) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (g p) i)))
           (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
            fa :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) i) =>
            matita_basics_logic.ex_intro matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (g p) i))
              a
              (matita_basics_logic.conj (matita_arithmetics_nat.le a n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (g a) i)
                 lean
                 (matita_basics_logic.eq_ind
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f a)
                    (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     _x_2 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f a) x_1) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (g a) x_1)
                    (matita_basics_logic.sym_eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f a) (g a) (H a lean))
                    i fa)))
           _clearme)
        (bijf i lein).

def let_clause_1075 :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      bijf :
        cic.Term cic.prop
          (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n)) ->
      fS :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n)) ->
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.And
             (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) i)) ->
      lean :
        cic.Term cic.prop
          (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) ->
      fa :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a) i) ->
      Hc :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a
             (matita_arithmetics_nat.S n)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i a)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      bijf :
        cic.Term cic.prop
          (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n)) =>
      fS :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n)) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.And
             (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n))
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) i)) =>
      lean :
        cic.Term cic.prop
          (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) =>
      fa :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a) i) =>
      Hc :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a
             (matita_arithmetics_nat.S n)) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
        (matita_arithmetics_nat.S n)
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               i x)
              __))
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f a)
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x (matita_arithmetics_nat.S n))
                 __))
           (matita_basics_logic.rewrite_r
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_nat.S n)
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.lift cic.prop univs.Type2
                 ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                   matita_basics_logic.eq
                     (cic.lift univs.Type0 univs.Type2
                        matita_arithmetics_nat.nat)
                     (f x) (matita_arithmetics_nat.S n))
                    __))
              fS a Hc)
           i fa)
        a Hc.

def bijn_Sn_n :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ :
        cic.Term cic.prop
          (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n)) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n)) ->
      cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      bijf :
        cic.Term cic.prop
          (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n)) =>
      fS :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n)) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      matita_basics_logic.match_ex matita_arithmetics_nat.nat
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.And
           (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n))
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f p) i))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.ex matita_arithmetics_nat.nat
                (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                 matita_basics_logic.And
                   (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n))
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f p) i))) =>
         matita_basics_logic.ex matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le p n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f p) i)))
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.And
                (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) i)) =>
         matita_basics_logic.match_And
           (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n))
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f a) i)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n))
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f a) i)) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f p) i)))
           (lean :
              cic.Term cic.prop
                (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n)) =>
            fa :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) i) =>
            matita_basics_logic.match_Or
              (matita_arithmetics_nat.lt a (matita_arithmetics_nat.S n))
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 a (matita_arithmetics_nat.S n))
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_arithmetics_nat.lt a
                         (matita_arithmetics_nat.S n))
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         a (matita_arithmetics_nat.S n))) =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.And (matita_arithmetics_nat.le p n)
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f p) i)))
              (Hc :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.lt a (matita_arithmetics_nat.S n)) =>
               matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                 (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.And (matita_arithmetics_nat.le p n)
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f p) i))
                 a
                 (matita_basics_logic.conj (matita_arithmetics_nat.le a n)
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f a) i)
                    (matita_arithmetics_nat.le_S_S_to_le a n Hc) fa))
              (Hc :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      a (matita_arithmetics_nat.S n)) =>
               matita_basics_logic.False_ind
                 (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.And (matita_arithmetics_nat.le p n)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f p) i)))
                 (matita_basics_logic.absurd
                    (matita_arithmetics_nat.le (matita_arithmetics_nat.S n) n)
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f (matita_arithmetics_nat.S n))
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (f (matita_arithmetics_nat.S n)) x_1) =>
                        matita_arithmetics_nat.le x_1 n)
                       (matita_basics_logic.eq_coerc
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le i n))
                          (cic.lift cic.prop univs.Type0
                             (matita_arithmetics_nat.le
                                (f (matita_arithmetics_nat.S n)) n))
                          lein
                          (matita_basics_logic.rewrite_l
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             i
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift (cic.succ univs.Type0)
                                       univs.Type2 (cic.univ univs.Type0))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.le i n))
                                    (cic.lift cic.prop univs.Type0
                                       (matita_arithmetics_nat.le (f x) n)))
                                   __))
                             (matita_basics_logic.rewrite_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                i
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift (cic.succ univs.Type0)
                                          univs.Type2 (cic.univ univs.Type0))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_arithmetics_nat.le i n))
                                       (cic.lift cic.prop univs.Type0
                                          (matita_arithmetics_nat.le x n)))
                                      __))
                                (matita_basics_logic.refl
                                   (cic.lift (cic.succ univs.Type0)
                                      univs.Type2 (cic.univ univs.Type0))
                                   (cic.lift cic.prop univs.Type0
                                      (matita_arithmetics_nat.le i n)))
                                (f i)
                                (matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   a
                                   (__ :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          (f x) i)
                                         __))
                                   fa i
                                   (matita_arithmetics_permutation.let_clause_1075
                                      f n bijf fS i lein a _clearme lean fa
                                      Hc)))
                             (matita_arithmetics_nat.S n)
                             (matita_basics_logic.rewrite_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                a
                                (__ :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 cic.lift cic.prop univs.Type2
                                   ((x :
                                       cic.Term univs.Type0
                                         matita_arithmetics_nat.nat =>
                                     matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       x (matita_arithmetics_nat.S n))
                                      __))
                                Hc i
                                (matita_arithmetics_permutation.let_clause_1075
                                   f n bijf fS i lein a _clearme lean fa Hc))))
                       (matita_arithmetics_nat.S n) fS)
                    (matita_arithmetics_nat.not_le_Sn_n n)))
              (matita_arithmetics_nat.le_to_or_lt_eq a
                 (matita_arithmetics_nat.S n) lean))
           _clearme)
        (bijf i (matita_arithmetics_nat.le_S i n lein)).

def bijn_n_Sn :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) ->
      __1 :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n)) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.bijn f (matita_arithmetics_nat.S n))
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) =>
      fS :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f (matita_arithmetics_nat.S n)) (matita_arithmetics_nat.S n)) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein :
        cic.Term cic.prop
          (matita_arithmetics_nat.le i (matita_arithmetics_nat.S n)) =>
      matita_basics_logic.match_Or
        (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n))
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i
           (matita_arithmetics_nat.S n))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n))
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   i (matita_arithmetics_nat.S n))) =>
         matita_basics_logic.ex matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And
              (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n))
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f p) i)))
        (Hi :
           cic.Term cic.prop
             (matita_arithmetics_nat.lt i (matita_arithmetics_nat.S n)) =>
         matita_basics_logic.match_ex matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le p n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f p) i))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.ex matita_arithmetics_nat.nat
                   (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    matita_basics_logic.And (matita_arithmetics_nat.le p n)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f p) i))) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And
                 (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n))
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f p) i)))
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            _clearme :
              cic.Term cic.prop
                (matita_basics_logic.And (matita_arithmetics_nat.le a n)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f a) i)) =>
            matita_basics_logic.match_And (matita_arithmetics_nat.le a n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f a) i)
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.And (matita_arithmetics_nat.le a n)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f a) i)) =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.And
                    (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f p) i)))
              (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
               fa :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f a) i) =>
               matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                 (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.And
                    (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f p) i))
                 a
                 (matita_basics_logic.conj
                    (matita_arithmetics_nat.le a (matita_arithmetics_nat.S n))
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f a) i)
                    (matita_arithmetics_nat.le_S a n lean)
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       i
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              x i)
                             __))
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          i)
                       (f a) fa)))
              _clearme)
           (bijf i (matita_arithmetics_nat.le_S_S_to_le i n Hi)))
        (Hi :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                i (matita_arithmetics_nat.S n)) =>
         matita_basics_logic.ex_intro matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And
              (matita_arithmetics_nat.le p (matita_arithmetics_nat.S n))
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f p) i))
           i
           (matita_basics_logic.conj
              (matita_arithmetics_nat.le i (matita_arithmetics_nat.S n))
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f i) i)
              (matita_basics_logic.eq_coerc
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le i i))
                 (cic.lift cic.prop univs.Type0
                    (matita_arithmetics_nat.le i (matita_arithmetics_nat.S n)))
                 (matita_arithmetics_nat.le_n i)
                 (matita_basics_logic.rewrite_l
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    i
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift (cic.succ univs.Type0) univs.Type2
                              (cic.univ univs.Type0))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le i i))
                           (cic.lift cic.prop univs.Type0
                              (matita_arithmetics_nat.le i x)))
                          __))
                    (matita_basics_logic.refl
                       (cic.lift (cic.succ univs.Type0) univs.Type2
                          (cic.univ univs.Type0))
                       (cic.lift cic.prop univs.Type0
                          (matita_arithmetics_nat.le i i)))
                    (matita_arithmetics_nat.S n) Hi))
              (matita_basics_logic.rewrite_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 i
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.lift cic.prop univs.Type2
                    ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                      matita_basics_logic.eq
                        (cic.lift univs.Type0 univs.Type2
                           matita_arithmetics_nat.nat)
                        x i)
                       __))
                 (matita_basics_logic.refl
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    i)
                 (f i)
                 (matita_basics_logic.rewrite_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n)
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.lift cic.prop univs.Type2
                       ((x :
                           cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                         matita_basics_logic.eq
                           (cic.lift univs.Type0 univs.Type2
                              matita_arithmetics_nat.nat)
                           (f i) x)
                          __))
                    (matita_basics_logic.rewrite_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S n)
                       (__ :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.lift cic.prop univs.Type2
                          ((x :
                              cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                            matita_basics_logic.eq
                              (cic.lift univs.Type0 univs.Type2
                                 matita_arithmetics_nat.nat)
                              (f x) (matita_arithmetics_nat.S n))
                             __))
                       fS i Hi)
                    i Hi))))
        (matita_arithmetics_nat.le_to_or_lt_eq i (matita_arithmetics_nat.S n)
           lein).

def bijn_fg :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      g :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_permutation.bijn g n) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.bijn
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat => f (g p)) n)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      g :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) =>
      bijg : cic.Term cic.prop (matita_arithmetics_permutation.bijn g n) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      matita_basics_logic.match_ex matita_arithmetics_nat.nat
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.And (matita_arithmetics_nat.le p n)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f p) i))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.ex matita_arithmetics_nat.nat
                (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                 matita_basics_logic.And (matita_arithmetics_nat.le p n)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f p) i))) =>
         matita_basics_logic.ex matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le p n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (f (g p)) i)))
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.And (matita_arithmetics_nat.le a n)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) i)) =>
         matita_basics_logic.match_And (matita_arithmetics_nat.le a n)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f a) i)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And (matita_arithmetics_nat.le a n)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f a) i)) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f (g p)) i)))
           (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
            ga :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) i) =>
            matita_basics_logic.match_ex matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (g p) a))
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.ex matita_arithmetics_nat.nat
                      (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       matita_basics_logic.And
                         (matita_arithmetics_nat.le p n)
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (g p) a))) =>
               matita_basics_logic.ex matita_arithmetics_nat.nat
                 (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_basics_logic.And (matita_arithmetics_nat.le p n)
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f (g p)) i)))
              (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _clearme0 :
                 cic.Term cic.prop
                   (matita_basics_logic.And (matita_arithmetics_nat.le b n)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (g b) a)) =>
               matita_basics_logic.match_And (matita_arithmetics_nat.le b n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (g b) a)
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.And
                         (matita_arithmetics_nat.le b n)
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (g b) a)) =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.And (matita_arithmetics_nat.le p n)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f (g p)) i)))
                 (lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n) =>
                  gb :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (g b) a) =>
                  matita_basics_logic.ex_intro matita_arithmetics_nat.nat
                    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.And (matita_arithmetics_nat.le p n)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f (g p)) i))
                    b
                    (matita_basics_logic.conj (matita_arithmetics_nat.le b n)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f (g b)) i)
                       lebn
                       (matita_basics_logic.rewrite_r
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          a
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 (f x) i)
                                __))
                          (matita_basics_logic.rewrite_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             i
                             (__ :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              cic.lift cic.prop univs.Type2
                                ((x :
                                    cic.Term univs.Type0
                                      matita_arithmetics_nat.nat =>
                                  matita_basics_logic.eq
                                    (cic.lift univs.Type0 univs.Type2
                                       matita_arithmetics_nat.nat)
                                    x i)
                                   __))
                             (matita_basics_logic.refl
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                i)
                             (f a) ga)
                          (g b) gb)))
                 _clearme0)
              (bijg a lean))
           _clearme)
        (bijf i lein).

def bijn_transpose :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le j n) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.bijn
           (matita_arithmetics_permutation.transpose i j) n)
      :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
      matita_basics_logic.match_Or
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb a i) matita_basics_bool.true)
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           (matita_arithmetics_nat.eqb a i) matita_basics_bool.false)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.Or
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb a i) matita_basics_bool.true)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb a i) matita_basics_bool.false)) =>
         matita_basics_logic.ex matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le p n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_permutation.transpose i j p) a)))
        (Hi :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb a i) matita_basics_bool.true) =>
         matita_basics_logic.ex_intro matita_arithmetics_nat.nat
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.And (matita_arithmetics_nat.le p n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_permutation.transpose i j p) a))
           j
           (matita_basics_logic.conj (matita_arithmetics_nat.le j n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_permutation.transpose i j j) a)
              lejn
              (matita_basics_logic.eq_ind_r
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 i
                 (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  __ :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         x i) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    x a)
                 (matita_basics_logic.sym_eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    a i (matita_arithmetics_nat.eqb_true_to_eq a i Hi))
                 (matita_arithmetics_permutation.transpose i j j)
                 (matita_arithmetics_permutation.transpose_i_j_j i j))))
        (Hi :
           cic.Term cic.prop
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                (matita_arithmetics_nat.eqb a i) matita_basics_bool.false) =>
         matita_basics_logic.match_Or
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              (matita_arithmetics_nat.eqb a j) matita_basics_bool.true)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              (matita_arithmetics_nat.eqb a j) matita_basics_bool.false)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb a j)
                      matita_basics_bool.true)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      (matita_arithmetics_nat.eqb a j)
                      matita_basics_bool.false)) =>
            matita_basics_logic.ex matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_permutation.transpose i j p) a)))
           (Hj :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb a j) matita_basics_bool.true) =>
            matita_basics_logic.ex_intro matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_permutation.transpose i j p) a))
              i
              (matita_basics_logic.conj (matita_arithmetics_nat.le i n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_permutation.transpose i j i) a)
                 lein
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    j
                    (x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            x j) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       x a)
                    (matita_basics_logic.sym_eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       a j (matita_arithmetics_nat.eqb_true_to_eq a j Hj))
                    (matita_arithmetics_permutation.transpose i j i)
                    (matita_arithmetics_permutation.transpose_i_j_i i j))))
           (Hj :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   (matita_arithmetics_nat.eqb a j) matita_basics_bool.false) =>
            matita_basics_logic.ex_intro matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_permutation.transpose i j p) a))
              a
              (matita_basics_logic.conj (matita_arithmetics_nat.le a n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_permutation.transpose i j a) a)
                 lean
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.false
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.false) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          j
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             i a (matita_arithmetics_nat.eqb a j))
                          x)
                       a)
                    (matita_basics_logic.eq_ind_r
                       (cic.lift univs.Type0 univs.Type2
                          matita_basics_bool.bool)
                       matita_basics_bool.false
                       (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                        __ :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_basics_bool.bool)
                               x matita_basics_bool.false) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (_0 :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i a x)
                             matita_basics_bool.false)
                          a)
                       (matita_basics_logic.refl
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_basics_bool.match_bool univs.Type0
                             (__ :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             j
                             (matita_basics_bool.match_bool univs.Type0
                                (__ :
                                   cic.Term univs.Type0
                                     matita_basics_bool.bool =>
                                 matita_arithmetics_nat.nat)
                                i a matita_basics_bool.false)
                             matita_basics_bool.false))
                       (matita_arithmetics_nat.eqb a j) Hj)
                    (matita_arithmetics_nat.eqb a i) Hi)))
           (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb a j)))
        (matita_basics_bool.true_or_false (matita_arithmetics_nat.eqb a i)).

def bijn_transpose_r :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le j n) ->
      __2 : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.bijn
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            f (matita_arithmetics_permutation.transpose i j p))
           n)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) =>
      matita_arithmetics_permutation.bijn_fg f
        (matita_arithmetics_permutation.transpose i j) n bijf
        (matita_arithmetics_permutation.bijn_transpose n i j lein lejn).

def bijn_transpose_l :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_nat.le j n) ->
      __2 : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.bijn
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_permutation.transpose i j (f p))
           n)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      bijf : cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) =>
      matita_arithmetics_permutation.bijn_fg
        (matita_arithmetics_permutation.transpose i j) f n
        (matita_arithmetics_permutation.bijn_transpose n i j lein lejn) bijf.

def permut_to_bijn :
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __ : cic.Term cic.prop (matita_arithmetics_permutation.permut f n) ->
      cic.Term cic.prop (matita_arithmetics_permutation.bijn f n) :=
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      matita_arithmetics_nat.nat_ind
        (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.prod univs.Type0 cic.prop
           (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_nat.nat))
           (f :
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_permutation.permut f _x_365)
              (__ :
                 cic.Term cic.prop
                   (matita_arithmetics_permutation.permut f _x_365) =>
               matita_arithmetics_permutation.bijn f _x_365)))
        (f :
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                      (__ :
                         cic.Term cic.prop
                           (matita_arithmetics_nat.le i
                              matita_arithmetics_nat.O) =>
                       matita_arithmetics_nat.le (f i)
                         matita_arithmetics_nat.O)))
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                      (j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         (matita_arithmetics_nat.le i
                            matita_arithmetics_nat.O)
                         (__ :
                            cic.Term cic.prop
                              (matita_arithmetics_nat.le i
                                 matita_arithmetics_nat.O) =>
                          cic.prod cic.prop cic.prop
                            (matita_arithmetics_nat.le j
                               matita_arithmetics_nat.O)
                            (__1 :
                               cic.Term cic.prop
                                 (matita_arithmetics_nat.le j
                                    matita_arithmetics_nat.O) =>
                             cic.prod cic.prop cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (f i) (f j))
                               (__2 :
                                  cic.Term cic.prop
                                    (matita_basics_logic.eq
                                       (cic.lift univs.Type0 univs.Type2
                                          matita_arithmetics_nat.nat)
                                       (f i) (f j)) =>
                                matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  i j))))))) =>
         matita_basics_logic.match_And
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                 (__ :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le i matita_arithmetics_nat.O) =>
                  matita_arithmetics_nat.le (f i) matita_arithmetics_nat.O)))
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                 (j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  cic.prod cic.prop cic.prop
                    (matita_arithmetics_nat.le i matita_arithmetics_nat.O)
                    (__ :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.le i
                            matita_arithmetics_nat.O) =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_nat.le j matita_arithmetics_nat.O)
                       (__1 :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.le j
                               matita_arithmetics_nat.O) =>
                        cic.prod cic.prop cic.prop
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (f i) (f j))
                          (__2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (f i) (f j)) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             i j))))))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                      (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         (matita_arithmetics_nat.le i
                            matita_arithmetics_nat.O)
                         (__ :
                            cic.Term cic.prop
                              (matita_arithmetics_nat.le i
                                 matita_arithmetics_nat.O) =>
                          matita_arithmetics_nat.le (f i)
                            matita_arithmetics_nat.O)))
                   (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                      (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       cic.prod univs.Type0 cic.prop
                         matita_arithmetics_nat.nat
                         (j :
                            cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                          cic.prod cic.prop cic.prop
                            (matita_arithmetics_nat.le i
                               matita_arithmetics_nat.O)
                            (__ :
                               cic.Term cic.prop
                                 (matita_arithmetics_nat.le i
                                    matita_arithmetics_nat.O) =>
                             cic.prod cic.prop cic.prop
                               (matita_arithmetics_nat.le j
                                  matita_arithmetics_nat.O)
                               (__1 :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.le j
                                       matita_arithmetics_nat.O) =>
                                cic.prod cic.prop cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     (f i) (f j))
                                  (__2 :
                                     cic.Term cic.prop
                                       (matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          (f i) (f j)) =>
                                   matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     i j))))))) =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop
                 (matita_arithmetics_nat.le m matita_arithmetics_nat.O)
                 (__1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le m matita_arithmetics_nat.O) =>
                  matita_basics_logic.ex matita_arithmetics_nat.nat
                    (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_basics_logic.And
                       (matita_arithmetics_nat.le p matita_arithmetics_nat.O)
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f p) m)))))
           (H :
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               __ :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le i matita_arithmetics_nat.O) ->
               cic.Term cic.prop
                 (matita_arithmetics_nat.le (f i) matita_arithmetics_nat.O)) =>
            H1 :
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               __ :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le i matita_arithmetics_nat.O) ->
               __1 :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.le j matita_arithmetics_nat.O) ->
               __2 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f i) (f j)) ->
               cic.Term cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    i j)) =>
            m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            lem0 :
              cic.Term cic.prop
                (matita_arithmetics_nat.le m matita_arithmetics_nat.O) =>
            matita_basics_logic.ex_intro matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And
                 (matita_arithmetics_nat.le p matita_arithmetics_nat.O)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f p) m))
              matita_arithmetics_nat.O
              (matita_basics_logic.conj
                 (matita_arithmetics_nat.le matita_arithmetics_nat.O
                    matita_arithmetics_nat.O)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f matita_arithmetics_nat.O) m)
                 (matita_arithmetics_nat.le_O_n matita_arithmetics_nat.O)
                 (matita_arithmetics_nat.le_n_O_elim m lem0
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f matita_arithmetics_nat.O))
                    (matita_basics_logic.sym_eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O (f matita_arithmetics_nat.O)
                       (matita_arithmetics_nat.le_n_O_to_eq
                          (f matita_arithmetics_nat.O)
                          (H matita_arithmetics_nat.O
                             (matita_arithmetics_nat.le_O_n
                                matita_arithmetics_nat.O)))))))
           _clearme)
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         Hind :
           (f :
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
            __ :
              cic.Term cic.prop (matita_arithmetics_permutation.permut f m) ->
            cic.Term cic.prop (matita_arithmetics_permutation.bijn f m)) =>
         f :
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
         permf :
           cic.Term cic.prop
             (matita_arithmetics_permutation.permut f
                (matita_arithmetics_nat.S m)) =>
         matita_arithmetics_permutation.eq_to_bijn
           (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_permutation.transpose
              (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m)
              (matita_arithmetics_permutation.transpose
                 (f (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.S m) (f p)))
           f (matita_arithmetics_nat.S m)
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            lei :
              cic.Term cic.prop
                (matita_arithmetics_nat.le i (matita_arithmetics_nat.S m)) =>
            matita_arithmetics_permutation.transpose_transpose
              (f (matita_arithmetics_nat.S m)) (matita_arithmetics_nat.S m)
              (f i))
           (matita_arithmetics_permutation.bijn_fg
              (matita_arithmetics_permutation.transpose
                 (f (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.S m))
              (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_arithmetics_permutation.transpose
                 (f (matita_arithmetics_nat.S m))
                 (matita_arithmetics_nat.S m) (f __))
              (matita_arithmetics_nat.S m)
              (matita_basics_logic.match_And
                 (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.prod cic.prop cic.prop
                       (matita_arithmetics_nat.le i
                          (matita_arithmetics_nat.S m))
                       (__ :
                          cic.Term cic.prop
                            (matita_arithmetics_nat.le i
                               (matita_arithmetics_nat.S m)) =>
                        matita_arithmetics_nat.le (f i)
                          (matita_arithmetics_nat.S m))))
                 (matita_arithmetics_permutation.injn f
                    (matita_arithmetics_nat.S m))
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.And
                         (cic.prod univs.Type0 cic.prop
                            matita_arithmetics_nat.nat
                            (i :
                               cic.Term univs.Type0
                                 matita_arithmetics_nat.nat =>
                             cic.prod cic.prop cic.prop
                               (matita_arithmetics_nat.le i
                                  (matita_arithmetics_nat.S m))
                               (__ :
                                  cic.Term cic.prop
                                    (matita_arithmetics_nat.le i
                                       (matita_arithmetics_nat.S m)) =>
                                matita_arithmetics_nat.le (f i)
                                  (matita_arithmetics_nat.S m))))
                         (matita_arithmetics_permutation.injn f
                            (matita_arithmetics_nat.S m))) =>
                  matita_arithmetics_permutation.bijn
                    (matita_arithmetics_permutation.transpose
                       (f (matita_arithmetics_nat.S m))
                       (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.S m))
                 (lef :
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                     __ :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.le i
                            (matita_arithmetics_nat.S m)) ->
                     cic.Term cic.prop
                       (matita_arithmetics_nat.le (f i)
                          (matita_arithmetics_nat.S m))) =>
                  __ :
                    cic.Term cic.prop
                      (matita_arithmetics_permutation.injn f
                         (matita_arithmetics_nat.S m)) =>
                  matita_arithmetics_permutation.bijn_transpose
                    (matita_arithmetics_nat.S m)
                    (f (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.S m)
                    (lef (matita_arithmetics_nat.S m)
                       (matita_arithmetics_nat.le_n
                          (matita_arithmetics_nat.S m)))
                    (matita_arithmetics_nat.le_n (matita_arithmetics_nat.S m)))
                 permf)
              (matita_arithmetics_permutation.bijn_n_Sn
                 (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  matita_arithmetics_permutation.transpose
                    (f (matita_arithmetics_nat.S m))
                    (matita_arithmetics_nat.S m) (f __))
                 m
                 (Hind
                    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     matita_arithmetics_permutation.transpose
                       (f (matita_arithmetics_nat.S m))
                       (matita_arithmetics_nat.S m) (f __))
                    (matita_arithmetics_permutation.permut_S_to_permut_transpose
                       f m permf))
                 (matita_basics_logic.eq_ind_r
                    (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                    matita_basics_bool.true
                    (x : cic.Term univs.Type0 matita_basics_bool.bool =>
                     __ :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_basics_bool.bool)
                            x matita_basics_bool.true) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool univs.Type0
                          (_0 :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S m)
                          (matita_basics_bool.match_bool univs.Type0
                             (_0 :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             (f (matita_arithmetics_nat.S m))
                             (f (matita_arithmetics_nat.S m))
                             (matita_arithmetics_nat.eqb
                                (f (matita_arithmetics_nat.S m))
                                (matita_arithmetics_nat.S m)))
                          x)
                       (matita_arithmetics_nat.S m))
                    (matita_basics_logic.refl
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_basics_bool.match_bool univs.Type0
                          (__ :
                             cic.Term univs.Type0 matita_basics_bool.bool =>
                           matita_arithmetics_nat.nat)
                          (matita_arithmetics_nat.S m)
                          (matita_basics_bool.match_bool univs.Type0
                             (__ :
                                cic.Term univs.Type0 matita_basics_bool.bool =>
                              matita_arithmetics_nat.nat)
                             (f (matita_arithmetics_nat.S m))
                             (f (matita_arithmetics_nat.S m))
                             (matita_arithmetics_nat.eqb
                                (f (matita_arithmetics_nat.S m))
                                (matita_arithmetics_nat.S m)))
                          matita_basics_bool.true))
                    (matita_arithmetics_nat.eqb
                       (f (matita_arithmetics_nat.S m))
                       (f (matita_arithmetics_nat.S m)))
                    (matita_arithmetics_nat.eqb_n_n
                       (f (matita_arithmetics_nat.S m)))))))
        n.

def invert_permut :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 :
        (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

def invert_permut_body :
      __ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __1 :
        (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      __2 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      cic.Term univs.Type0 matita_arithmetics_nat.nat.

[ __ ] invert_permut __ -->
  matita_arithmetics_nat.filter_nat univs.Type0
    (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
     cic.prod univs.Type0 univs.Type0
       (cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
          (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.nat))
       (__1 :
          (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
           cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
        cic.prod univs.Type0 univs.Type0 matita_arithmetics_nat.nat
          (__2 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
           matita_arithmetics_nat.nat)))
    matita_arithmetics_permutation.invert_permut_body __.

[ __ ] invert_permut_body __ -->
  f :
    (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
     cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
  m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
  matita_basics_bool.match_bool univs.Type0
    (__1 : cic.Term univs.Type0 matita_basics_bool.bool =>
     matita_arithmetics_nat.nat)
    __
    (matita_arithmetics_nat.match_nat univs.Type0
       (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_nat.nat)
       matita_arithmetics_nat.O
       (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
        matita_arithmetics_permutation.invert_permut p f m)
       __)
    (matita_arithmetics_nat.eqb m (f __)).

def invert_permut_f :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_permutation.injn f n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (matita_arithmetics_permutation.invert_permut n f (f m)) m)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lenm : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
      matita_arithmetics_nat.le_ind m
        (x_417 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _x_418 : cic.Term cic.prop (matita_arithmetics_nat.le m x_417) =>
         cic.prod cic.prop cic.prop
           (matita_arithmetics_permutation.injn f x_417)
           (__ :
              cic.Term cic.prop (matita_arithmetics_permutation.injn f x_417) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_permutation.invert_permut x_417 f (f m)) m))
        (matita_arithmetics_nat.match_nat cic.prop
           (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop
              (matita_arithmetics_permutation.injn f __)
              (__1 :
                 cic.Term cic.prop (matita_arithmetics_permutation.injn f __) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_permutation.invert_permut __ f (f __))
                 __))
           (matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term univs.Type0 matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.prod cic.prop cic.prop
                 (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                       (j :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          (matita_arithmetics_nat.le i
                             matita_arithmetics_nat.O)
                          (__1 :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.le i
                                  matita_arithmetics_nat.O) =>
                           cic.prod cic.prop cic.prop
                             (matita_arithmetics_nat.le j
                                matita_arithmetics_nat.O)
                             (__2 :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le j
                                     matita_arithmetics_nat.O) =>
                              cic.prod cic.prop cic.prop
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (f i) (f j))
                                (__3 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        (f i) (f j)) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   i j))))))
                 (__1 :
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                     j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                     __1 :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.le i
                            matita_arithmetics_nat.O) ->
                     __2 :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.le j
                            matita_arithmetics_nat.O) ->
                     __3 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f i) (f j)) ->
                     cic.Term cic.prop
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          i j)) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       matita_arithmetics_nat.O matita_arithmetics_nat.O x)
                    matita_arithmetics_nat.O))
              (auto :
                 (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  __ :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le i matita_arithmetics_nat.O) ->
                  __1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le j matita_arithmetics_nat.O) ->
                  __2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f i) (f j)) ->
                  cic.Term cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       i j)) =>
               matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.O
                    matita_basics_bool.true))
              (matita_arithmetics_nat.eqb (f matita_arithmetics_nat.O)
                 (f matita_arithmetics_nat.O))
              (matita_arithmetics_nat.eqb_n_n (f matita_arithmetics_nat.O)))
           (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_basics_logic.eq_ind_r
              (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
              matita_basics_bool.true
              (x : cic.Term univs.Type0 matita_basics_bool.bool =>
               __ :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_basics_bool.bool)
                      x matita_basics_bool.true) =>
               cic.prod cic.prop cic.prop
                 (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                     cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                       (j :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          (matita_arithmetics_nat.le i
                             (matita_arithmetics_nat.S a))
                          (__1 :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.le i
                                  (matita_arithmetics_nat.S a)) =>
                           cic.prod cic.prop cic.prop
                             (matita_arithmetics_nat.le j
                                (matita_arithmetics_nat.S a))
                             (__2 :
                                cic.Term cic.prop
                                  (matita_arithmetics_nat.le j
                                     (matita_arithmetics_nat.S a)) =>
                              cic.prod cic.prop cic.prop
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (f i) (f j))
                                (__3 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        (f i) (f j)) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   i j))))))
                 (__1 :
                    (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                     j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                     __1 :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.le i
                            (matita_arithmetics_nat.S a)) ->
                     __2 :
                       cic.Term cic.prop
                         (matita_arithmetics_nat.le j
                            (matita_arithmetics_nat.S a)) ->
                     __3 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f i) (f j)) ->
                     cic.Term cic.prop
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          i j)) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_basics_bool.match_bool univs.Type0
                       (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                        matita_arithmetics_nat.nat)
                       (matita_arithmetics_nat.S a)
                       (matita_arithmetics_permutation.invert_permut a f
                          (f (matita_arithmetics_nat.S a)))
                       x)
                    (matita_arithmetics_nat.S a)))
              (auto :
                 (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                  __ :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le i
                         (matita_arithmetics_nat.S a)) ->
                  __1 :
                    cic.Term cic.prop
                      (matita_arithmetics_nat.le j
                         (matita_arithmetics_nat.S a)) ->
                  __2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f i) (f j)) ->
                  cic.Term cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       i j)) =>
               matita_basics_logic.refl
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S a)
                    (matita_arithmetics_permutation.invert_permut a f
                       (f (matita_arithmetics_nat.S a)))
                    matita_basics_bool.true))
              (matita_arithmetics_nat.eqb (f (matita_arithmetics_nat.S a))
                 (f (matita_arithmetics_nat.S a)))
              (matita_arithmetics_nat.eqb_n_n
                 (f (matita_arithmetics_nat.S a))))
           m)
        (m0 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         lem : cic.Term cic.prop (matita_arithmetics_nat.le m m0) =>
         H :
           (__ :
              cic.Term cic.prop (matita_arithmetics_permutation.injn f m0) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_permutation.invert_permut m0 f (f m)) m)) =>
         H1 :
           cic.Term cic.prop
             (matita_arithmetics_permutation.injn f
                (matita_arithmetics_nat.S m0)) =>
         matita_basics_logic.eq_ind_r
           (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
           matita_basics_bool.false
           (x : cic.Term univs.Type0 matita_basics_bool.bool =>
            __ :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2 matita_basics_bool.bool)
                   x matita_basics_bool.false) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_basics_bool.match_bool univs.Type0
                 (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                  matita_arithmetics_nat.nat)
                 (matita_arithmetics_nat.S m0)
                 (matita_arithmetics_permutation.invert_permut m0 f (f m)) x)
              m)
           (H (matita_arithmetics_permutation.injn_Sn_n f m0 H1))
           (matita_arithmetics_nat.eqb (f m)
              (f (matita_arithmetics_nat.S m0)))
           (matita_arithmetics_nat.not_eq_to_eqb_false (f m)
              (f (matita_arithmetics_nat.S m0))
              (matita_basics_logic.nmk
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f m) (f (matita_arithmetics_nat.S m0)))
                 (eqf :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f m) (f (matita_arithmetics_nat.S m0))) =>
                  matita_basics_logic.absurd
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       m (matita_arithmetics_nat.S m0))
                    (H1 m (matita_arithmetics_nat.S m0)
                       (matita_arithmetics_nat.le_S m m0 lem)
                       (matita_arithmetics_nat.le_n
                          (matita_arithmetics_nat.S m0))
                       (matita_basics_logic.rewrite_l
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f m)
                          (__ :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           cic.lift cic.prop univs.Type2
                             ((x :
                                 cic.Term univs.Type0
                                   matita_arithmetics_nat.nat =>
                               matita_basics_logic.eq
                                 (cic.lift univs.Type0 univs.Type2
                                    matita_arithmetics_nat.nat)
                                 (f m) x)
                                __))
                          (matita_basics_logic.refl
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (f m))
                          (f (matita_arithmetics_nat.S m0)) eqf))
                    (matita_arithmetics_nat.lt_to_not_eq m
                       (matita_arithmetics_nat.S m0)
                       (matita_arithmetics_nat.le_S_S m m0 lem))))))
        n lenm.

def let_clause_1063 :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f n) ->
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.And (matita_arithmetics_nat.le a n)
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) i)) ->
      lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) ->
      fa :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a) i) ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.And (matita_arithmetics_nat.le b n)
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f b) j)) ->
      lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n) ->
      fb :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f b) j) ->
      __ :
        (i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le i0 n) ->
         cic.Term cic.prop (matita_arithmetics_nat.le (f i0) n)) ->
      injf : cic.Term cic.prop (matita_arithmetics_permutation.injn f n) ->
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a
             b) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f a) j)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f n) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.And (matita_arithmetics_nat.le a n)
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) i)) =>
      lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
      fa :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a) i) =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.And (matita_arithmetics_nat.le b n)
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f b) j)) =>
      lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n) =>
      fb :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f b) j) =>
      __ :
        (i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le i0 n) ->
         cic.Term cic.prop (matita_arithmetics_nat.le (f i0) n)) =>
      injf : cic.Term cic.prop (matita_arithmetics_permutation.injn f n) =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a
             b) =>
      matita_basics_logic.rewrite_r
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) b
        (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (f x) j)
              __1))
        fb a auto.

def let_clause_1068 :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f n) ->
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) ->
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.And (matita_arithmetics_nat.le a n)
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) i)) ->
      lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) ->
      fa :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a) i) ->
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.And (matita_arithmetics_nat.le b n)
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f b) j)) ->
      lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n) ->
      fb :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f b) j) ->
      __ :
        (i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le i0 n) ->
         cic.Term cic.prop (matita_arithmetics_nat.le (f i0) n)) ->
      injf : cic.Term cic.prop (matita_arithmetics_permutation.injn f n) ->
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a
             b) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f a) i)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f n) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme :
        cic.Term cic.prop
          (matita_basics_logic.And (matita_arithmetics_nat.le a n)
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f a) i)) =>
      lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
      fa :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f a) i) =>
      b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      _clearme0 :
        cic.Term cic.prop
          (matita_basics_logic.And (matita_arithmetics_nat.le b n)
             (matita_basics_logic.eq
                (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                (f b) j)) =>
      lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n) =>
      fb :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
             (f b) j) =>
      __ :
        (i0 : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __ : cic.Term cic.prop (matita_arithmetics_nat.le i0 n) ->
         cic.Term cic.prop (matita_arithmetics_nat.le (f i0) n)) =>
      injf : cic.Term cic.prop (matita_arithmetics_permutation.injn f n) =>
      auto :
        cic.Term cic.prop
          (matita_basics_logic.eq
             (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) a
             b) =>
      matita_basics_logic.rewrite_l
        (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) j
        (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         cic.lift cic.prop univs.Type2
           ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
             matita_basics_logic.eq
               (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
               (f a) x)
              __1))
        (matita_arithmetics_permutation.let_clause_1063 f n permf i j lein
           lejn a _clearme lean fa b _clearme0 lebn fb __ injf auto)
        i
        (matita_basics_logic.rewrite_l
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f a)
           (__1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.lift cic.prop univs.Type2
              ((x : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                matita_basics_logic.eq
                  (cic.lift univs.Type0 univs.Type2
                     matita_arithmetics_nat.nat)
                  x i)
                 __1))
           fa j
           (matita_arithmetics_permutation.let_clause_1063 f n permf i j lein
              lejn a _clearme lean fa b _clearme0 lebn fb __ injf auto)).

def injective_invert_permut :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_permutation.permut f n) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.injn
           (matita_arithmetics_permutation.invert_permut n f) n)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f n) =>
      i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
      lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
      matita_basics_logic.match_ex matita_arithmetics_nat.nat
        (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         matita_basics_logic.And (matita_arithmetics_nat.le p n)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f p) i))
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.ex matita_arithmetics_nat.nat
                (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                 matita_basics_logic.And (matita_arithmetics_nat.le p n)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f p) i))) =>
         cic.prod cic.prop cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (matita_arithmetics_permutation.invert_permut n f i)
              (matita_arithmetics_permutation.invert_permut n f j))
           (__1 :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (matita_arithmetics_permutation.invert_permut n f i)
                   (matita_arithmetics_permutation.invert_permut n f j)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat) i
              j))
        (a : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         _clearme :
           cic.Term cic.prop
             (matita_basics_logic.And (matita_arithmetics_nat.le a n)
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) i)) =>
         matita_basics_logic.match_And (matita_arithmetics_nat.le a n)
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f a) i)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And (matita_arithmetics_nat.le a n)
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (f a) i)) =>
            cic.prod cic.prop cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_permutation.invert_permut n f i)
                 (matita_arithmetics_permutation.invert_permut n f j))
              (__1 :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_permutation.invert_permut n f i)
                      (matita_arithmetics_permutation.invert_permut n f j)) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 i j))
           (lean : cic.Term cic.prop (matita_arithmetics_nat.le a n) =>
            fa :
              cic.Term cic.prop
                (matita_basics_logic.eq
                   (cic.lift univs.Type0 univs.Type2
                      matita_arithmetics_nat.nat)
                   (f a) i) =>
            matita_basics_logic.match_ex matita_arithmetics_nat.nat
              (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               matita_basics_logic.And (matita_arithmetics_nat.le p n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f p) j))
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.ex matita_arithmetics_nat.nat
                      (p : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       matita_basics_logic.And
                         (matita_arithmetics_nat.le p n)
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f p) j))) =>
               cic.prod cic.prop cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (matita_arithmetics_permutation.invert_permut n f i)
                    (matita_arithmetics_permutation.invert_permut n f j))
                 (__1 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_permutation.invert_permut n f i)
                         (matita_arithmetics_permutation.invert_permut n f j)) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    i j))
              (b : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               _clearme0 :
                 cic.Term cic.prop
                   (matita_basics_logic.And (matita_arithmetics_nat.le b n)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f b) j)) =>
               matita_basics_logic.match_And (matita_arithmetics_nat.le b n)
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (f b) j)
                 cic.prop
                 (__ :
                    cic.Term cic.prop
                      (matita_basics_logic.And
                         (matita_arithmetics_nat.le b n)
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (f b) j)) =>
                  cic.prod cic.prop cic.prop
                    (matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (matita_arithmetics_permutation.invert_permut n f i)
                       (matita_arithmetics_permutation.invert_permut n f j))
                    (__1 :
                       cic.Term cic.prop
                         (matita_basics_logic.eq
                            (cic.lift univs.Type0 univs.Type2
                               matita_arithmetics_nat.nat)
                            (matita_arithmetics_permutation.invert_permut n f
                               i)
                            (matita_arithmetics_permutation.invert_permut n f
                               j)) =>
                     matita_basics_logic.eq
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       i j))
                 (lebn : cic.Term cic.prop (matita_arithmetics_nat.le b n) =>
                  fb :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (f b) j) =>
                  matita_basics_logic.match_And
                    (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                       (i1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        cic.prod cic.prop cic.prop
                          (matita_arithmetics_nat.le i1 n)
                          (__ :
                             cic.Term cic.prop
                               (matita_arithmetics_nat.le i1 n) =>
                           matita_arithmetics_nat.le (f i1) n)))
                    (matita_arithmetics_permutation.injn f n) cic.prop
                    (__ :
                       cic.Term cic.prop
                         (matita_basics_logic.And
                            (cic.prod univs.Type0 cic.prop
                               matita_arithmetics_nat.nat
                               (i0 :
                                  cic.Term univs.Type0
                                    matita_arithmetics_nat.nat =>
                                cic.prod cic.prop cic.prop
                                  (matita_arithmetics_nat.le i0 n)
                                  (__ :
                                     cic.Term cic.prop
                                       (matita_arithmetics_nat.le i0 n) =>
                                   matita_arithmetics_nat.le (f i0) n)))
                            (matita_arithmetics_permutation.injn f n)) =>
                     cic.prod cic.prop cic.prop
                       (matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (matita_arithmetics_permutation.invert_permut n f i)
                          (matita_arithmetics_permutation.invert_permut n f j))
                       (__1 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (matita_arithmetics_permutation.invert_permut
                                  n f i)
                               (matita_arithmetics_permutation.invert_permut
                                  n f j)) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          i j))
                    (__ :
                       (i0 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat ->
                        __ :
                          cic.Term cic.prop (matita_arithmetics_nat.le i0 n) ->
                        cic.Term cic.prop
                          (matita_arithmetics_nat.le (f i0) n)) =>
                     injf :
                       cic.Term cic.prop
                         (matita_arithmetics_permutation.injn f n) =>
                     matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (f a)
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (f a) x_1) =>
                        cic.prod cic.prop cic.prop
                          (matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             (matita_arithmetics_permutation.invert_permut n
                                f x_1)
                             (matita_arithmetics_permutation.invert_permut n
                                f j))
                          (__1 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (matita_arithmetics_permutation.invert_permut
                                     n f x_1)
                                  (matita_arithmetics_permutation.invert_permut
                                     n f j)) =>
                           matita_basics_logic.eq
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             x_1 j))
                       (matita_basics_logic.eq_ind
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          (f b)
                          (x_1 :
                             cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                           _x_2 :
                             cic.Term cic.prop
                               (matita_basics_logic.eq
                                  (cic.lift univs.Type0 univs.Type2
                                     matita_arithmetics_nat.nat)
                                  (f b) x_1) =>
                           cic.prod cic.prop cic.prop
                             (matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (matita_arithmetics_permutation.invert_permut
                                   n f (f a))
                                (matita_arithmetics_permutation.invert_permut
                                   n f x_1))
                             (__1 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     (matita_arithmetics_permutation.invert_permut
                                        n f (f a))
                                     (matita_arithmetics_permutation.invert_permut
                                        n f x_1)) =>
                              matita_basics_logic.eq
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                (f a) x_1))
                          (matita_basics_logic.eq_ind_r
                             (cic.lift univs.Type0 univs.Type2
                                matita_arithmetics_nat.nat)
                             a
                             (x :
                                cic.Term univs.Type0
                                  matita_arithmetics_nat.nat =>
                              _0 :
                                cic.Term cic.prop
                                  (matita_basics_logic.eq
                                     (cic.lift univs.Type0 univs.Type2
                                        matita_arithmetics_nat.nat)
                                     x a) =>
                              cic.prod cic.prop cic.prop
                                (matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   x
                                   (matita_arithmetics_permutation.invert_permut
                                      n f (f b)))
                                (__1 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        x
                                        (matita_arithmetics_permutation.invert_permut
                                           n f (f b))) =>
                                 matita_basics_logic.eq
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   (f a) (f b)))
                             (matita_basics_logic.eq_ind_r
                                (cic.lift univs.Type0 univs.Type2
                                   matita_arithmetics_nat.nat)
                                b
                                (x :
                                   cic.Term univs.Type0
                                     matita_arithmetics_nat.nat =>
                                 _0 :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        x b) =>
                                 cic.prod cic.prop cic.prop
                                   (matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      a x)
                                   (__1 :
                                      cic.Term cic.prop
                                        (matita_basics_logic.eq
                                           (cic.lift univs.Type0 univs.Type2
                                              matita_arithmetics_nat.nat)
                                           a x) =>
                                    matita_basics_logic.eq
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      (f a) (f b)))
                                (auto :
                                   cic.Term cic.prop
                                     (matita_basics_logic.eq
                                        (cic.lift univs.Type0 univs.Type2
                                           matita_arithmetics_nat.nat)
                                        a b) =>
                                 matita_basics_logic.rewrite_r
                                   (cic.lift univs.Type0 univs.Type2
                                      matita_arithmetics_nat.nat)
                                   i
                                   (__1 :
                                      cic.Term univs.Type0
                                        matita_arithmetics_nat.nat =>
                                    cic.lift cic.prop univs.Type2
                                      ((x :
                                          cic.Term univs.Type0
                                            matita_arithmetics_nat.nat =>
                                        matita_basics_logic.eq
                                          (cic.lift univs.Type0 univs.Type2
                                             matita_arithmetics_nat.nat)
                                          x (f b))
                                         __1))
                                   (matita_basics_logic.rewrite_l
                                      (cic.lift univs.Type0 univs.Type2
                                         matita_arithmetics_nat.nat)
                                      a
                                      (__1 :
                                         cic.Term univs.Type0
                                           matita_arithmetics_nat.nat =>
                                       cic.lift cic.prop univs.Type2
                                         ((x :
                                             cic.Term univs.Type0
                                               matita_arithmetics_nat.nat =>
                                           matita_basics_logic.eq
                                             (cic.lift univs.Type0
                                                univs.Type2
                                                matita_arithmetics_nat.nat)
                                             i (f x))
                                            __1))
                                      (matita_basics_logic.rewrite_r
                                         (cic.lift univs.Type0 univs.Type2
                                            matita_arithmetics_nat.nat)
                                         i
                                         (__1 :
                                            cic.Term univs.Type0
                                              matita_arithmetics_nat.nat =>
                                          cic.lift cic.prop univs.Type2
                                            ((x :
                                                cic.Term univs.Type0
                                                  matita_arithmetics_nat.nat =>
                                              matita_basics_logic.eq
                                                (cic.lift univs.Type0
                                                   univs.Type2
                                                   matita_arithmetics_nat.nat)
                                                i x)
                                               __1))
                                         (matita_basics_logic.refl
                                            (cic.lift univs.Type0 univs.Type2
                                               matita_arithmetics_nat.nat)
                                            i)
                                         (f a)
                                         (matita_arithmetics_permutation.let_clause_1068
                                            f n permf i j lein lejn a
                                            _clearme lean fa b _clearme0 lebn
                                            fb __ injf auto))
                                      b auto)
                                   (f a)
                                   (matita_arithmetics_permutation.let_clause_1068
                                      f n permf i j lein lejn a _clearme lean
                                      fa b _clearme0 lebn fb __ injf auto))
                                (matita_arithmetics_permutation.invert_permut
                                   n f (f b))
                                (matita_arithmetics_permutation.invert_permut_f
                                   f n b lebn injf))
                             (matita_arithmetics_permutation.invert_permut n
                                f (f a))
                             (matita_arithmetics_permutation.invert_permut_f
                                f n a lean injf))
                          j fb)
                       i fa)
                    permf)
                 _clearme0)
              (matita_arithmetics_permutation.permut_to_bijn n f permf j lejn))
           _clearme)
        (matita_arithmetics_permutation.permut_to_bijn n f permf i lein).

def permut_invert_permut :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_permutation.permut f n) ->
      cic.Term cic.prop
        (matita_arithmetics_permutation.permut
           (matita_arithmetics_permutation.invert_permut n f) n)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f n) =>
      matita_basics_logic.conj
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
               matita_arithmetics_nat.le
                 (matita_arithmetics_permutation.invert_permut n f i) n)))
        (matita_arithmetics_permutation.injn
           (matita_arithmetics_permutation.invert_permut n f) n)
        (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         lein : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
         matita_arithmetics_nat.nat_ind
           (_x_365 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            matita_arithmetics_nat.le
              (matita_arithmetics_permutation.invert_permut _x_365 f i)
              _x_365)
           (matita_basics_bool.match_bool cic.prop
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.le
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.O __)
                 matita_arithmetics_nat.O)
              (matita_arithmetics_nat.le_n
                 (matita_basics_bool.match_bool univs.Type0
                    (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.O
                    matita_basics_bool.true))
              (matita_arithmetics_nat.le_n
                 (matita_basics_bool.match_bool univs.Type0
                    (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    matita_arithmetics_nat.O matita_arithmetics_nat.O
                    matita_basics_bool.false))
              (matita_arithmetics_nat.eqb i (f matita_arithmetics_nat.O)))
           (n1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            Hind :
              cic.Term cic.prop
                (matita_arithmetics_nat.le
                   (matita_arithmetics_permutation.invert_permut n1 f i) n1) =>
            matita_basics_bool.match_bool cic.prop
              (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
               matita_arithmetics_nat.le
                 (matita_basics_bool.match_bool univs.Type0
                    (_0 : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n1)
                    (matita_arithmetics_permutation.invert_permut n1 f i) __)
                 (matita_arithmetics_nat.S n1))
              (matita_arithmetics_nat.le_n
                 (matita_basics_bool.match_bool univs.Type0
                    (__ : cic.Term univs.Type0 matita_basics_bool.bool =>
                     matita_arithmetics_nat.nat)
                    (matita_arithmetics_nat.S n1)
                    (matita_arithmetics_permutation.invert_permut n1 f i)
                    matita_basics_bool.true))
              (matita_arithmetics_nat.le_S
                 (matita_arithmetics_permutation.invert_permut n1 f i) n1
                 Hind)
              (matita_arithmetics_nat.eqb i (f (matita_arithmetics_nat.S n1))))
           n)
        (matita_arithmetics_permutation.injective_invert_permut f n permf).

def f_invert_permut :
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le m n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_permutation.permut f n) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f (matita_arithmetics_permutation.invert_permut n f m)) m)
      :=
      f :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lemn : cic.Term cic.prop (matita_arithmetics_nat.le m n) =>
      permf :
        cic.Term cic.prop (matita_arithmetics_permutation.permut f n) =>
      matita_basics_logic.match_And
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
               matita_arithmetics_nat.le
                 (matita_arithmetics_permutation.invert_permut n f i) n)))
        (matita_arithmetics_permutation.injn
           (matita_arithmetics_permutation.invert_permut n f) n)
        cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le i n)
                      (__ :
                         cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                       matita_arithmetics_nat.le
                         (matita_arithmetics_permutation.invert_permut n f i)
                         n)))
                (matita_arithmetics_permutation.injn
                   (matita_arithmetics_permutation.invert_permut n f) n)) =>
         matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (f (matita_arithmetics_permutation.invert_permut n f m)) m)
        (Hle :
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
            cic.Term cic.prop
              (matita_arithmetics_nat.le
                 (matita_arithmetics_permutation.invert_permut n f i) n)) =>
         Hinj :
           cic.Term cic.prop
             (matita_arithmetics_permutation.injn
                (matita_arithmetics_permutation.invert_permut n f) n) =>
         matita_basics_logic.match_And
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
                 (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                  matita_arithmetics_nat.le (f i) n)))
           (matita_arithmetics_permutation.injn f n) cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                      (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         (matita_arithmetics_nat.le i n)
                         (__ :
                            cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                          matita_arithmetics_nat.le (f i) n)))
                   (matita_arithmetics_permutation.injn f n)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (f (matita_arithmetics_permutation.invert_permut n f m)) m)
           (lef :
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
               cic.Term cic.prop (matita_arithmetics_nat.le (f i) n)) =>
            injf :
              cic.Term cic.prop (matita_arithmetics_permutation.injn f n) =>
            matita_arithmetics_permutation.injective_invert_permut f n permf
              (f (matita_arithmetics_permutation.invert_permut n f m)) m
              (lef (matita_arithmetics_permutation.invert_permut n f m)
                 (Hle m lemn))
              lemn
              (matita_arithmetics_permutation.invert_permut_f f n
                 (matita_arithmetics_permutation.invert_permut n f m)
                 (Hle m lemn) injf))
           permf)
        (matita_arithmetics_permutation.permut_invert_permut f n permf).

def permut_n_to_eq_n :
      h :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_permutation.permut h n) ->
      __1 :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __1 : cic.Term cic.prop (matita_arithmetics_nat.lt m n) ->
         cic.Term cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (h m) m)) ->
      cic.Term cic.prop
        (matita_basics_logic.eq
           (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
           (h n) n)
      :=
      h :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      permh :
        cic.Term cic.prop (matita_arithmetics_permutation.permut h n) =>
      matita_basics_logic.match_And
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
               matita_arithmetics_nat.le (h i) n)))
        (matita_arithmetics_permutation.injn h n) cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le i n)
                      (__ :
                         cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                       matita_arithmetics_nat.le (h i) n)))
                (matita_arithmetics_permutation.injn h n)) =>
         cic.prod cic.prop cic.prop
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt m n)
                 (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m n) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (h m) m)))
           (__1 :
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               __1 : cic.Term cic.prop (matita_arithmetics_nat.lt m n) ->
               cic.Term cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (h m) m)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (h n) n))
        (leh :
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
            cic.Term cic.prop (matita_arithmetics_nat.le (h i) n)) =>
         injh :
           cic.Term cic.prop (matita_arithmetics_permutation.injn h n) =>
         eqh :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt m n) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (h m) m)) =>
         matita_basics_logic.match_And
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
                 (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                  matita_arithmetics_nat.le
                    (matita_arithmetics_permutation.invert_permut n h i) n)))
           (matita_arithmetics_permutation.injn
              (matita_arithmetics_permutation.invert_permut n h) n)
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.And
                   (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                      (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                       cic.prod cic.prop cic.prop
                         (matita_arithmetics_nat.le i n)
                         (__ :
                            cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                          matita_arithmetics_nat.le
                            (matita_arithmetics_permutation.invert_permut n h
                               i)
                            n)))
                   (matita_arithmetics_permutation.injn
                      (matita_arithmetics_permutation.invert_permut n h) n)) =>
            matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (h n) n)
           (Hle :
              (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
               cic.Term cic.prop
                 (matita_arithmetics_nat.le
                    (matita_arithmetics_permutation.invert_permut n h i) n)) =>
            Hinj :
              cic.Term cic.prop
                (matita_arithmetics_permutation.injn
                   (matita_arithmetics_permutation.invert_permut n h) n) =>
            matita_basics_logic.match_Or
              (matita_arithmetics_nat.lt
                 (matita_arithmetics_permutation.invert_permut n h n) n)
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_permutation.invert_permut n h n) n)
              cic.prop
              (__ :
                 cic.Term cic.prop
                   (matita_basics_logic.Or
                      (matita_arithmetics_nat.lt
                         (matita_arithmetics_permutation.invert_permut n h n)
                         n)
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_permutation.invert_permut n h n)
                         n)) =>
               matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (h n) n)
              (Hc :
                 cic.Term cic.prop
                   (matita_arithmetics_nat.lt
                      (matita_arithmetics_permutation.invert_permut n h n) n) =>
               matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (h (matita_arithmetics_permutation.invert_permut n h n))
                 (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (h
                            (matita_arithmetics_permutation.invert_permut n h
                               n))
                         x_1) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (h n) x_1)
                 (matita_basics_logic.eq_f
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    h n (matita_arithmetics_permutation.invert_permut n h n)
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (h
                          (matita_arithmetics_permutation.invert_permut n h n))
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (h
                                  (matita_arithmetics_permutation.invert_permut
                                     n h n))
                               x_1) =>
                        matita_basics_logic.eq
                          (cic.lift univs.Type0 univs.Type2
                             matita_arithmetics_nat.nat)
                          x_1
                          (matita_arithmetics_permutation.invert_permut n h n))
                       (eqh
                          (matita_arithmetics_permutation.invert_permut n h n)
                          Hc)
                       n
                       (matita_arithmetics_permutation.f_invert_permut h n n
                          (matita_arithmetics_nat.le_n n) permh)))
                 n
                 (matita_arithmetics_permutation.f_invert_permut h n n
                    (matita_arithmetics_nat.le_n n) permh))
              (Hc :
                 cic.Term cic.prop
                   (matita_basics_logic.eq
                      (cic.lift univs.Type0 univs.Type2
                         matita_arithmetics_nat.nat)
                      (matita_arithmetics_permutation.invert_permut n h n) n) =>
               matita_basics_logic.eq_ind
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (matita_arithmetics_permutation.invert_permut n h n)
                 (x_1 : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                  _x_2 :
                    cic.Term cic.prop
                      (matita_basics_logic.eq
                         (cic.lift univs.Type0 univs.Type2
                            matita_arithmetics_nat.nat)
                         (matita_arithmetics_permutation.invert_permut n h n)
                         x_1) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (h x_1) n)
                 (matita_arithmetics_permutation.f_invert_permut h n n
                    (matita_arithmetics_nat.le_n n) permh)
                 n Hc)
              (matita_arithmetics_nat.le_to_or_lt_eq
                 (matita_arithmetics_permutation.invert_permut n h n) n
                 (Hle n (matita_arithmetics_nat.le_n n))))
           (matita_arithmetics_permutation.permut_invert_permut h n permh))
        permh.

def permut_n_to_le :
      h :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) ->
      k : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __ : cic.Term cic.prop (matita_arithmetics_nat.le k n) ->
      __1 : cic.Term cic.prop (matita_arithmetics_permutation.permut h n) ->
      __2 :
        (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         __2 : cic.Term cic.prop (matita_arithmetics_nat.lt m k) ->
         cic.Term cic.prop
           (matita_basics_logic.eq
              (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
              (h m) m)) ->
      j : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
      __3 : cic.Term cic.prop (matita_arithmetics_nat.le k j) ->
      __4 : cic.Term cic.prop (matita_arithmetics_nat.le j n) ->
      cic.Term cic.prop (matita_arithmetics_nat.le k (h j)) :=
      h :
        (__ : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
         cic.Term univs.Type0 matita_arithmetics_nat.nat) =>
      k : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      n : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
      lekn : cic.Term cic.prop (matita_arithmetics_nat.le k n) =>
      _clearme :
        cic.Term cic.prop (matita_arithmetics_permutation.permut h n) =>
      matita_basics_logic.match_And
        (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
            cic.prod cic.prop cic.prop (matita_arithmetics_nat.le i n)
              (__ : cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
               matita_arithmetics_nat.le (h i) n)))
        (matita_arithmetics_permutation.injn h n) cic.prop
        (__ :
           cic.Term cic.prop
             (matita_basics_logic.And
                (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
                   (i : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                    cic.prod cic.prop cic.prop
                      (matita_arithmetics_nat.le i n)
                      (__ :
                         cic.Term cic.prop (matita_arithmetics_nat.le i n) =>
                       matita_arithmetics_nat.le (h i) n)))
                (matita_arithmetics_permutation.injn h n)) =>
         cic.prod cic.prop cic.prop
           (cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.lt m k)
                 (__1 : cic.Term cic.prop (matita_arithmetics_nat.lt m k) =>
                  matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (h m) m)))
           (__1 :
              (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
               __1 : cic.Term cic.prop (matita_arithmetics_nat.lt m k) ->
               cic.Term cic.prop
                 (matita_basics_logic.eq
                    (cic.lift univs.Type0 univs.Type2
                       matita_arithmetics_nat.nat)
                    (h m) m)) =>
            cic.prod univs.Type0 cic.prop matita_arithmetics_nat.nat
              (j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
               cic.prod cic.prop cic.prop (matita_arithmetics_nat.le k j)
                 (__2 : cic.Term cic.prop (matita_arithmetics_nat.le k j) =>
                  cic.prod cic.prop cic.prop (matita_arithmetics_nat.le j n)
                    (__3 :
                       cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
                     matita_arithmetics_nat.le k (h j))))))
        (leh :
           (i : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.le i n) ->
            cic.Term cic.prop (matita_arithmetics_nat.le (h i) n)) =>
         injh :
           cic.Term cic.prop (matita_arithmetics_permutation.injn h n) =>
         H :
           (m : cic.Term univs.Type0 matita_arithmetics_nat.nat ->
            __ : cic.Term cic.prop (matita_arithmetics_nat.lt m k) ->
            cic.Term cic.prop
              (matita_basics_logic.eq
                 (cic.lift univs.Type0 univs.Type2 matita_arithmetics_nat.nat)
                 (h m) m)) =>
         j : cic.Term univs.Type0 matita_arithmetics_nat.nat =>
         lekj : cic.Term cic.prop (matita_arithmetics_nat.le k j) =>
         lejn : cic.Term cic.prop (matita_arithmetics_nat.le j n) =>
         matita_basics_logic.match_Or (matita_arithmetics_nat.lt (h j) k)
           (matita_basics_logic.Not (matita_arithmetics_nat.lt (h j) k))
           cic.prop
           (__ :
              cic.Term cic.prop
                (matita_basics_logic.Or (matita_arithmetics_nat.lt (h j) k)
                   (matita_basics_logic.Not
                      (matita_arithmetics_nat.lt (h j) k))) =>
            matita_arithmetics_nat.le k (h j))
           (Hh : cic.Term cic.prop (matita_arithmetics_nat.lt (h j) k) =>
            matita_basics_logic.False_ind
              (_x_66 : cic.Term cic.prop matita_basics_logic.False =>
               matita_arithmetics_nat.le k (h j))
              (matita_basics_logic.absurd (matita_arithmetics_nat.le k j)
                 lekj
                 (matita_arithmetics_nat.lt_to_not_le j k
                    (matita_basics_logic.eq_ind
                       (cic.lift univs.Type0 univs.Type2
                          matita_arithmetics_nat.nat)
                       (h j)
                       (x_1 :
                          cic.Term univs.Type0 matita_arithmetics_nat.nat =>
                        _x_2 :
                          cic.Term cic.prop
                            (matita_basics_logic.eq
                               (cic.lift univs.Type0 univs.Type2
                                  matita_arithmetics_nat.nat)
                               (h j) x_1) =>
                        matita_arithmetics_nat.lt x_1 k)
                       Hh j
                       (injh (h j) j
                          (matita_arithmetics_nat.transitive_le (h j) k n
                             (matita_arithmetics_nat.lt_to_le (h j) k Hh)
                             lekn)
                          lejn (H (h j) Hh))))))
           (Hh :
              cic.Term cic.prop
                (matita_basics_logic.Not (matita_arithmetics_nat.lt (h j) k)) =>
            matita_arithmetics_nat.not_lt_to_le (h j) k Hh)
           (matita_arithmetics_nat.decidable_lt (h j) k))
        _clearme.


