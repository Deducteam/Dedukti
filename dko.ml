open Types

exception BadVersionNumber

module S = Set.Make (
struct
  type t = string
  let compare = String.compare
end )

let marshal deps env =
  try
    begin
      let out = open_out (string_of_ident !Global.name ^ ".dko" ) in
        Marshal.to_channel out Global.version [] ;
        Marshal.to_channel out deps [] ;
        Marshal.to_channel out env [Marshal.Closures] ;
        close_out out
    end
  with
    | _ -> Global.fail dloc "Fail to export module '%a'." pp_ident !Global.name

let unmarshal (lc:loc) (m:string) =
  try
    begin
      let chan = open_in ( m ^ ".dko" ) in
      let ver:string = Marshal.from_channel chan in
        if String.compare ver Global.version = 0 then
          begin
            let deps:string list = Marshal.from_channel chan in
            let ctx:rw_infos H.t = Marshal.from_channel chan in
              close_in chan ; (deps,ctx)
          end
        else raise BadVersionNumber
    end
  with
    | BadVersionNumber -> Global.fail lc "Fail to open\
module '%s' (file generated by a different version?)." m
    | Sys_error s -> Global.fail lc "Fail to open module '%s' (%s)." m s
    | _ -> Global.fail lc "Fail to open module '%s'." m

(*let get_rule _ = failwith "TODO"*)

let get_rules md = failwith "TODO" (*
  let set = S.empty in
  let rec load m rlst =
    let (deps,ctx) = unmarshal dloc m in
    let 
  in
    List.fold_left load md []
                                    *)
