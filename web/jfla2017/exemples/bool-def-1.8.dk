
(; This file was generated by Holide. ;)

#NAME bool_2Ddef.

type_0 : hol.type :=
  hol.bool.

type_1 : hol.type :=
  hol.arr type_0 type_0.

type_2 : hol.type :=
  hol.arr type_1 type_0.

term_0 : hol.term (hol.arr type_1 type_2) :=
  hol.eq type_1.

term_1 : p_1 : hol.term type_0 -> hol.term type_0 :=
  p_1 : hol.term type_0 => p_1.

term_2 : hol.term type_1 :=
  p_1 : hol.term type_0 => term_1 p_1.

term_3 : hol.term type_0 :=
  term_0 term_2 term_2.

(; Constant Data.Bool.T ;)

Data_2EBool_2ET : hol.term type_0.

(; defineConst ;)

thm_0 : hol.proof (hol.eq type_0 Data_2EBool_2ET term_3).

type_3 : hol.type :=
  hol.arr type_0 type_1.

term_4 : hol.term type_3 :=
  hol.eq type_0.

term_5 : hol.term type_0 :=
  Data_2EBool_2ET.

type_4 : hol.type :=
  hol.arr type_3 type_0.

term_6 : f_1 : hol.term type_3 -> hol.term type_3 :=
  f_1 : hol.term type_3 => f_1.

term_7 : q_1 : hol.term type_0 -> hol.term type_0 :=
  q_1 : hol.term type_0 => q_1.

term_8 : hol.term type_3 :=
  p_1 : hol.term type_0 => q_2 : hol.term type_0 => hol.eq type_4 (f_3 : hol.term type_3 => term_6 f_3 (term_1 p_1) (term_7 q_2)) (f_3 : hol.term type_3 => term_6 f_3 term_5 term_5).

(; Constant Data.Bool./\ ;)

Data_2EBool_2E_2F_5C : hol.term type_3.

(; defineConst ;)

thm_1 : hol.proof (hol.eq type_3 Data_2EBool_2E_2F_5C term_8).

term_9 : hol.term (hol.arr type_3 type_4) :=
  hol.eq type_3.

term_10 : hol.term type_3 :=
  Data_2EBool_2E_2F_5C.

term_11 : hol.term type_3 :=
  p_1 : hol.term type_0 => q_2 : hol.term type_0 => term_4 (term_10 (term_1 p_1) (term_7 q_2)) (term_1 p_1).

(; Constant Data.Bool.==> ;)

Data_2EBool_2E_3D_3D_3E : hol.term type_3.

(; defineConst ;)

thm_2 : hol.proof (term_9 Data_2EBool_2E_3D_3D_3E term_11).

term_12 : hol.term type_3 :=
  Data_2EBool_2E_3D_3D_3E.

type_5 : hol.type -> hol.type :=
  A : hol.type => A.

type_6 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_5 A) type_0.

type_7 : hol.type -> hol.type :=
  A : hol.type => hol.arr (type_6 A) type_0.

term_13 : A : hol.type -> p_1 : hol.term (type_6 A) -> hol.term (type_6 A) :=
  A : hol.type => p_1 : hol.term (type_6 A) => p_1.

term_14 : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => p_1 : hol.term (type_6 A) => hol.eq (type_6 A) (term_13 A p_1) (x_2 : hol.term (type_5 A) => term_5).

(; Constant Data.Bool.! ;)

Data_2EBool_2E_21 : A : hol.type -> hol.term (type_7 A).

(; defineConst ;)

thm_3 : A : hol.type -> hol.proof (hol.eq (type_7 A) (Data_2EBool_2E_21 (type_5 A)) (term_14 A)).

term_15 : A : hol.type -> hol.term (hol.arr (type_7 A) (hol.arr (type_7 A) type_0)) :=
  A : hol.type => hol.eq (type_7 A).

term_16 : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => Data_2EBool_2E_21 (type_5 A).

term_17 : hol.term type_2 :=
  Data_2EBool_2E_21 type_0.

term_18 : A : hol.type -> x_1 : hol.term (type_5 A) -> hol.term (type_5 A) :=
  A : hol.type => x_1 : hol.term (type_5 A) => x_1.

term_19 : A : hol.type -> x_1 : hol.term (type_5 A) -> p_2 : hol.term (type_6 A) -> hol.term type_0 :=
  A : hol.type => x_1 : hol.term (type_5 A) => p_2 : hol.term (type_6 A) => term_13 A p_2 (term_18 A x_1).

term_20 : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => p_1 : hol.term (type_6 A) => term_17 (q_2 : hol.term type_0 => term_12 (term_16 A (x_3 : hol.term (type_5 A) => term_12 (term_19 A x_3 p_1) (term_7 q_2))) (term_7 q_2)).

(; Constant Data.Bool.? ;)

Data_2EBool_2E_3F : A : hol.type -> hol.term (type_7 A).

(; defineConst ;)

thm_4 : A : hol.type -> hol.proof (term_15 A (Data_2EBool_2E_3F (type_5 A)) (term_20 A)).

term_21 : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => Data_2EBool_2E_3F (type_5 A).

term_22 : p_1 : hol.term type_0 -> hol.term type_1 :=
  p_1 : hol.term type_0 => term_12 (term_1 p_1).

term_23 : r_1 : hol.term type_0 -> hol.term type_0 :=
  r_1 : hol.term type_0 => r_1.

term_24 : hol.term type_3 :=
  p_1 : hol.term type_0 => q_2 : hol.term type_0 => term_17 (r_3 : hol.term type_0 => term_12 (term_22 p_1 (term_23 r_3)) (term_12 (term_12 (term_7 q_2) (term_23 r_3)) (term_23 r_3))).

(; Constant Data.Bool.\/ ;)

Data_2EBool_2E_5C_2F : hol.term type_3.

(; defineConst ;)

thm_5 : hol.proof (term_9 Data_2EBool_2E_5C_2F term_24).

term_25 : hol.term type_0 :=
  term_17 term_2.

(; Constant Data.Bool.F ;)

Data_2EBool_2EF : hol.term type_0.

(; defineConst ;)

thm_6 : hol.proof (term_4 Data_2EBool_2EF term_25).

term_26 : hol.term type_0 :=
  Data_2EBool_2EF.

term_27 : hol.term type_1 :=
  p_1 : hol.term type_0 => term_22 p_1 term_26.

(; Constant Data.Bool.~ ;)

Data_2EBool_2E_7E : hol.term type_1.

(; defineConst ;)

thm_7 : hol.proof (term_0 Data_2EBool_2E_7E term_27).

term_28 : A : hol.type -> y_1 : hol.term (type_5 A) -> hol.term (type_5 A) :=
  A : hol.type => y_1 : hol.term (type_5 A) => y_1.

term_29 : A : hol.type -> x_1 : hol.term (type_5 A) -> hol.term (type_6 A) :=
  A : hol.type => x_1 : hol.term (type_5 A) => hol.eq (type_5 A) (term_18 A x_1).

term_30 : A : hol.type -> hol.term (type_7 A) :=
  A : hol.type => p_1 : hol.term (type_6 A) => term_10 (term_21 A (term_13 A p_1)) (term_16 A (x_2 : hol.term (type_5 A) => term_16 A (y_3 : hol.term (type_5 A) => term_12 (term_10 (term_19 A x_2 p_1) (term_13 A p_1 (term_28 A y_3))) (term_29 A x_2 (term_28 A y_3))))).

(; Constant Data.Bool.?! ;)

Data_2EBool_2E_3F_21 : A : hol.type -> hol.term (type_7 A).

(; defineConst ;)

thm_8 : A : hol.type -> hol.proof (term_15 A (Data_2EBool_2E_3F_21 (type_5 A)) (term_30 A)).

term_31 : t_1 : hol.term type_0 -> hol.term type_1 :=
  t_1 : hol.term type_0 => term_4 t_1.

term_32 : A : hol.type -> hol.term (hol.arr type_0 (hol.arr (type_5 A) (hol.arr (type_5 A) (type_5 A)))) :=
  A : hol.type => t_1 : hol.term type_0 => t1_2 : hol.term (type_5 A) => t2_3 : hol.term (type_5 A) => hol.select (type_5 A) (x_4 : hol.term (type_5 A) => term_10 (term_12 (term_31 t_1 term_5) (term_29 A x_4 t1_2)) (term_12 (term_31 t_1 term_26) (term_29 A x_4 t2_3))).

(; Constant Data.Bool.cond ;)

Data_2EBool_2Econd : A : hol.type -> hol.term (hol.arr type_0 (hol.arr (type_5 A) (hol.arr (type_5 A) (type_5 A)))).

(; defineConst ;)

thm_9 : A : hol.type -> hol.proof (hol.eq (hol.arr type_0 (hol.arr (type_5 A) (hol.arr (type_5 A) (type_5 A)))) (Data_2EBool_2Econd (type_5 A)) (term_32 A)).

type_8 : hol.type -> hol.type :=
  A : hol.type => hol.arr type_0 (hol.arr (type_5 A) (hol.arr (type_5 A) (type_5 A))).
