#NAME ML.

(; Deep embedding of types ;)

type : Type.
o : type.
i : type.
arrow : type -> type -> type.

(; Shallowing types ;)

def term : type -> Type.
[a : type, b : type] term (arrow a b) --> term a -> term b.

(; type nat = O | S of nat ;)

nat : type.
O : term nat.
S : term nat -> term nat.
def destrO : r : type -> term nat -> term r -> term r -> term r.
def destrS : r : type -> term nat -> (term nat -> term r) -> term r -> term r.

[R,f,d] destrO R O f d --> f.
[R,f,d] destrO R (S _) f d --> d.

[R,f,d] destrS R O f d --> d.
[R,f,d,n] destrS R (S n) f d --> (f n).

def block : A : type -> B : type -> term (arrow (arrow A B) (arrow A B)).
[R, f] block nat R f O --> f O.
[R, f, n] block nat R f (S n) --> f (S n).

(; let prec n = match n with O -> O | S p -> p ;)

def prec : term (arrow nat nat) :=
	   n => destrO nat n O (destrS nat n (p => p) n).

#SNF prec (S (S O)).

(; let plus n m = match n with O -> m | S p -> S (plus p m) ;)

def plus : term (arrow nat (arrow nat nat)).
[] plus --> n => m => destrO nat n m (destrS nat n (p => S (block nat (arrow nat nat) plus p m)) m).

#SNF plus (S (S (S O))) (S (S (S O))).


