#NAME classical_predicate.

(; Deep embedding ;)

alpha : Type.			(; Type of atoms ;)
o : Type. 			(; Type of propositions ;)

s : Type.

bot : o.
top : o.
not : o -> o.
imp : o -> o -> o.
and : o -> o -> o.
or : o -> o -> o.
all_s : (s -> o) -> o.
ex_s : (s -> o) -> o.

atom : alpha -> o.

f : s -> s.
a : s.
P : s -> alpha.
A : alpha.

(; Shallowing translation ;)

def eps : o -> Type.

[] eps bot --> z : o -> eps z.
[] eps top --> z : o -> eps z -> eps z.
[p] eps (not p) --> eps p -> eps bot.
[a, b] eps (imp a b) --> eps a -> eps b.
[a, b] eps (and a b) --> z : o -> (eps a -> eps b -> eps z) -> eps z.
[a, b] eps (or a b) --> z : o -> (eps a -> eps z) -> (eps b -> eps z) -> eps z.
[f] eps (all_s f) --> x : s -> eps (f x).
[f] eps (ex_s f) --> z : o -> (x : s -> eps (f x) -> eps z) -> eps z.



(; classical logic ;)

def atom_c : alpha -> o := a => not (not (atom a)).
def bot_c : o :=  not (not bot).
def top_c : o :=  not (not top).
def not_c : o -> o  := a => not (not (not a)).
def imp_c : o -> o -> o := a => b => not (not (imp a b)).
def and_c : o -> o -> o := a => b => not (not (and a b)).
def or_c : o -> o -> o := a => b => not (not (or a b)).
def all_s_c : (s -> o) -> o := f => not (not (all_s f)).
def ex_s_c : (s -> o) -> o := f => not (not (ex_s f)).


(; proofs ;)

def nnpp : eps (imp_c (not_c (not_c (atom_c A))) (atom_c A)) :=
	   h1 => h1 (h2 => h3 => h2 (h4 => h4 (h5 => h5 (h6 => h6 h3)))).
					  
def chapeau : eps (ex_s_c (x => imp_c (atom_c (P x))
				      (all_s_c (y => atom_c (P y))))) :=
	      h => h
	      (z => h0 => h0 a
			    (h1 => h1 (p => h3 => h3 (x => h4 =>
						 h (z0 => h5 =>
						    h5 x (h6 => h6 (h7 =>
								    po =>
								    h7 h4))))))).
			     