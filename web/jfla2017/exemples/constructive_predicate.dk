#NAME constructive_predicate.
(; Deep embedding ;)

o : Type. 			(; Type of propositions ;)
s1 : Type.
s2 : Type.

bot : o.
top : o.
not : o -> o.
imp : o -> o -> o.
and : o -> o -> o.
or : o -> o -> o.
all_s1 : (s1 -> o) -> o.
all_s2 : (s2 -> o) -> o.
ex_s1 : (s1 -> o) -> o.
ex_s2 : (s2 -> o) -> o.

f : s1 -> s1.
a : s1.
b : s2.
P : s1 -> o.
Q : s1 -> s2 -> o.
A : o.
B : o.

(; Shallowing translation ;)

def eps : o -> Type.

[] eps bot --> z : o -> eps z.
[] eps top --> z : o -> eps z -> eps z.
[p] eps (not p) --> eps p -> eps bot.
[a, b] eps (imp a b) --> eps a -> eps b.
[a, b] eps (and a b) --> z : o -> (eps a -> eps b -> eps z) -> eps z.
[a, b] eps (or a b) --> z : o -> (eps a -> eps z) -> (eps b -> eps z) -> eps z.
[f] eps (all_s1 f) --> x : s1 -> eps (f x).
[f] eps (all_s2 f) --> x : s2 -> eps (f x).
[f] eps (ex_s1 f) --> z : o -> (x : s1 -> eps (f x) -> eps z) -> eps z.
[f] eps (ex_s2 f) --> z : o -> (x : s2 -> eps (f x) -> eps z) -> eps z.

(; Proof ;)

def thm1 : eps (imp (and A B) (or A B)) :=
	p => z => pa => pb => p z (ta => tb => pa ta).   


def thm2 : eps (imp (all_s1 (x => imp (P x) (P (f x)))) (imp (P a) (P (f (f a))))) :=
	   pall => ppa => pall (f a) (pall a ppa).
