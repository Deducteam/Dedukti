#NAME simply_typed.

(; Deep embedding of types ;)

type : Type.
o : type.
i : type.
arrow : type -> type -> type.

(; Shallowing types ;)

def term : type -> Type.
[a : type, b : type] term (arrow a b) --> term a -> term b.

(; Not so deep embedding of terms ;)

def lam : a : type -> b : type -> (term a -> term b) -> term (arrow a b) :=
      a => b => f => f.
def app : a : type -> b : type -> term (arrow a b) -> term a -> term b :=
      a => b => f => f.


def fix : a : type -> b : type ->
		      ((term a -> term b) -> term a -> term b) ->
		      term a -> term b.
[a, b, f, x] fix a b f x --> f (fix a b f) x.

nat : type.
0 : term nat.
S : term nat -> term nat.

def match_nat : r : type -> term r -> (term nat -> term r) -> term nat -> term r.
[f0] match_nat _ f0 _ 0 --> f0.
[fS, n] match_nat _ _ fS (S n) --> fS n.

def plus : term nat -> term nat -> term nat :=
	   n => fix nat nat (plusn => m =>
			     match_nat nat n (m' => S (plusn m')) m).

#SNF plus (S (S 0)) (S (S 0)).