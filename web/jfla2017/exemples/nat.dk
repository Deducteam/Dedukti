#NAME exemples.
nat : Type.
0 : nat.
S : nat -> nat.
def 1 := S 0.

def plus_2 := x : nat => S (S x).
(; plus_2 1 ;)

def plus : nat -> nat -> nat.
[x : nat] plus x 0 --> x.
[x : nat,y : nat] plus x (S y) --> S (plus x y).
(; plus 1 1 ;)

vect : nat -> Type.
nil : vect 0.
cons : n : nat -> nat -> vect n -> vect (S n).

def tail : n : nat -> vect (S n) -> vect n.
[n : nat, m : nat, a : nat, v : vect n] tail n (cons m a v) --> v.

[x : nat ] plus 0 x --> x.
[x : nat,y : nat] plus (S y) x --> S (plus y x).

def append : n : nat -> m : nat -> vect n -> vect m -> vect (plus n m).
[n, v] append 0 n nil v --> v.
[n, m, a, v, w] append (S n) m (cons _ a v) w -->
			      cons (plus n m) a (append n m v w).
