(; OK ;)

T : Type.
t : T.
u : T.

defac o [T].

[] o t t --> u.
[] o u u --> t.

(; The following rules are silently added:
     o{t t X} --> o{u X}
     o{u u X} --> o{t X}
;)

(;# assert  o t t == u #;)
(;# assert  o u u == t #;)
(;# assert  o u t == o t u #;)

(;# assert  o (o t u) (o u t) == o u t #;)
(;# assert  o t (o u (o u t)) == o u t #;)

(;# assert  o t (o t (o t t)) == t #;)

(;# assert  (x:T => o (o t x) t) == (x:T => o u x) #;)
(;# assert  (x:T => o (o x t) t) == (x:T => o u x) #;)
(;# assert  (x:T => o t (o t x)) == (x:T => o x u) #;)
(;# assert  (x:T => o t (o x t)) == (x:T => o x u) #;)
