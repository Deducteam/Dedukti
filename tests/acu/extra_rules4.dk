(; OK ;)

T : Type.

def f : T -> T.

defac o [T].

[X] o X X --> f X.

(; The following rule is silently added:
     o{X X Y} --> o{ (f X)    Y }
;)

[X,Y] o (f X) (f Y) --> f (o X Y).


t : T.
u : T.

(;# assert  o t t == f t #;)
(;# assert  o u u == f u #;)
(;# assert  o u t == o t u #;)

(;# assert  f (o u t) == o (f u) (f t) #;)

(;# assert  o (o t u) (o u t) == o (f u) (f t) #;)
(;# assert  o t (o u (o u t)) == o (f u) (f t) #;)

(;# assert  o t (o t (o t t)) == f (f t) #;)

(;# assert  (x:T => o (o t x) t) == (x:T => o (f t) x) #;)
(;# assert  (x:T => o (o x t) t) == (x:T => o (f t) x) #;)
(;# assert  (x:T => o t (o t x)) == (x:T => o x (f t)) #;)
(;# assert  (x:T => o t (o x t)) == (x:T => o x (f t)) #;)

(;# assert  (x:T => o x (o t x)) == (x:T => o t (f x)) #;)
(;# assert  (x:T => o t (o x x)) == (x:T => o t (f x)) #;)
