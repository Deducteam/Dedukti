tests/tezt/_regressions/tests/OK/hott.dk_pretty.out

./dkpretty.native --no-color -q tests/OK/hott.dk
Nat : Type.

Fin : Nat -> Type.

type : Type.

e : type -> Type.

def Finm : Nat -> Nat -> Type := i:Nat => j:Nat => (Fin i) -> Fin j.

def comp
  :=
  i:Nat => j:Nat => k:Nat => f:(Finm i j) => g:(Finm j k) => x:(Fin i) => g (f x).

Sn1 : Type.

Bn : Sn1 -> Nat -> Type.

def mapBn :
  Ln1:Sn1 -> i:Nat -> ip:Nat -> (Finm i ip) -> (Bn Ln1 ip) -> Bn Ln1 i.

[p, g, k, ?_2, ?_1, f, j, i, Ln1]
  mapBn Ln1 i j f (mapBn ?_1 ?_2 k g p) --> mapBn Ln1 i k (comp i j k f g) p.

n : Nat.

Sn : Type.

Ln1 : Sn -> Sn1.

Xn : Ln:Sn -> (Bn (Ln1 Ln) n) -> Type.

Bsn : Sn -> Nat -> Type.

def bn : Ln:Sn -> i:Nat -> (Bsn Ln i) -> Bn (Ln1 Ln) i.

def bsn :
  Ln:Sn -> i:Nat -> p:(Bsn Ln i) -> f:(Finm n i) -> Xn Ln (mapBn (Ln1 Ln) n i f (bn Ln i p)).

mkBsn :
  Ln:Sn ->
  i:Nat -> bn:(Bn (Ln1 Ln) i) -> bsn:(f:(Finm n i) -> Xn Ln (mapBn (Ln1 Ln) n i f bn)) -> Bsn Ln i.

[?_5, bn2, ?_4, ?_3, ?_2, ?_1] bn ?_1 ?_2 (mkBsn ?_3 ?_4 bn2 ?_5) --> bn2.

[bsn2, ?_5, ?_4, ?_3, ?_2, ?_1] bsn ?_1 ?_2 (mkBsn ?_3 ?_4 ?_5 bsn2) --> bsn2.

