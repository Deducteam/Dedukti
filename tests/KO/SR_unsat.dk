A : Type.
B : A -> Type.
f : a:A -> B a -> A.

cons  : a : A -> b : B a -> B (f a b).

(; This example relies on substitution to generate the unsatisfiable constraint ;)

def calc : a : A -> b : A -> B a -> B b -> Type.
[a,b,c,d] calc a b (cons b d) (cons a c) --> A.
(;
Inferred constraints:
  a  ==  f b d
  b  ==  f a c

This rule is well-typed because constraints imply
  a  ==  f (f a c) d
which is only possible in a system allowing non terminating terms.
;)
