(; KO 101 ;)

N : Type.
A : Type.
T : A -> Type.

P : (N -> A) -> Type.
p : f : (N -> A) -> P f.

g : (x : N) -> f : (N -> A) -> T (f x).
def h : f : (N -> A) -> (x : N -> T (f x)) -> P f.

[X,Y] h (y => Y y) (x => g x X) --> p X.
(;
Inferred constraints:
  T (X x) = T ((y => Y y) x)
LHS Type : P (y => Y y)
RHS Type : P X

This rule is ill-typed because
  X x  ==  (y => Y y) x
doesn't necessarily imply
  X    ==  (y => Y y)
which is necessary to type check the RHS
;)
