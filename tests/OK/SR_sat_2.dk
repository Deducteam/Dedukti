(; OK --type-lhs ;)

type : Type.
def Term : type -> Type.

Sigma : A : type -> (Term A -> type) -> Type.

pair : A : type -> B : (Term A -> type) -> x : Term A -> Term (B x) -> Sigma A (x => B x).

def fst : A : type -> B : (Term A -> type) -> Sigma A (x => B x) -> Term A.
[A,A',B,B',x] fst A B (pair A' B' x _) --> x.
(;
Generated constraint
  Sigma A (x => B x)   ==   Sigma A' (x => B' x)
since Sigma is injective, it is deconstructed into
  A == A'              which is turned into a typing substitution
  z  |-  B z == B' z   which is dropped *without warning* as it is satisfiable
;)
