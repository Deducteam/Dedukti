N : Type.

0 : N.
S : N -> N.

def plus : N -> N -> N.
[x] plus 0 x --> x
[x,y] plus (S x) y --> S (plus x y).


#ASSERT S (S 0) ==
 (x1 : N := 0   ) =>
 (x2 : N := S x1) =>
 (x3 : N := plus x1 x2) =>
   plus x3 x2.

#ASSERT S (S (S 0)) ==
 (x1 : N := 0   ) =>
 (x2 : N := S x1) =>
 (x3 : N := plus x1 x2) =>
 (x4 : N := plus x2 x3) =>
   plus x4 x3.

#ASSERT S (S (S (S (S 0)))) ==
 (x1 : N := 0   ) =>
 (x2 : N := S x1) =>
 (x3 : N := plus x1 x2) =>
 (x4 : N := plus x2 x3) =>
 (x5 : N := plus x3 x4) =>
   plus x5 x4.

#ASSERT S (S (S 0)) ==
 (x : N := 0  ) =>
 (x : N := S x) =>
 (x : N := S x) =>
 (x : N := S x) =>
   x.

#ASSERT S (S (S (S 0))) ==
  (succ   : (N -> N)      := S) =>
  (zero   : N             := 0) =>
  (one    : N             := succ zero) =>
  (p      : (N -> N -> N) := plus) =>
  (double : (N -> N)      := (x => p x x)) => 
  double (double one).
