#NAME dot.

def plus: nat -> nat -> nat.
[y] 		plus 0     y --> y
[x,y]		plus (S x) y --> S (plus x y).

#SNF (plus 2 2).

V:   nat -> Type.
Nil: V 0.
Con: n:nat -> V n -> nat -> V (S n).

def hd: n:nat -> V (S n) -> nat.

[m] hd _ (Con _ _ m) --> m.


def app: n:nat -> m:nat -> V n -> V m -> V (plus n m).
[y] app _ _ Nil y --> y
[n,m,x,y,k] app _ m (Con n x k) y --> Con (plus n m) (app n m x y) k.
