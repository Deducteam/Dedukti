(; IGNORE ;)

N : Type.
0 : N.

A : Type.
T : A -> Type.
p : f : (N -> A) -> T (f 0).

g : (x : N) -> f : (N -> A) -> T (f x).
def h : f : (N -> A) -> (x : N -> T (f x)) -> T (f 0).

(; The following rules are well-typed because

we infer the constraint
  (under 1 lambda)  X x[0] = Y x[0]

and we need to deduce
  T (X 0) = T (Y 0)
;)

[X,Y] h       Y    (z => g z       X   ) --> p X.
[X,Y] h (y => Y y) (z => g z       X   ) --> p X.
[X,Y] h       Y    (z => g z (x => X x)) --> p (x => X x).
[X,Y] h (y => Y y) (z => g z (x => X x)) --> p (x => X x).
