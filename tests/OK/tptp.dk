
#NAME test
Term : Type.
Prop: Type.
prf: Prop -> Type.
anyterm: Term.

not: Prop -> Prop.
notc: Prop -> Prop :=
  A:Prop => not (not (not (not (not A)))).
True: Prop.
Truec: Prop := not (not (True)).
False: Prop.
Falsec: Prop := not (not (False)).
and: Prop -> Prop -> Prop.
andc: Prop -> Prop -> Prop :=
  A:Prop => B:Prop => not (not (and (not (not A)) (not (not B)))).
or: Prop -> Prop -> Prop.
orc: Prop -> Prop -> Prop :=
  A:Prop => B:Prop => not (not (or (not (not A)) (not (not B)))).
imply: Prop -> Prop -> Prop.
implyc: Prop -> Prop -> Prop :=
  A:Prop => B:Prop => not (not (imply (not (not A)) (not (not B)))).
forall: (Term -> Prop) -> Prop.
forallc: (Term -> Prop) -> Prop :=
  P:(Term -> Prop) => 
  not (not (forall (x:Term => not (not (P x))))).
exists: (Term -> Prop) -> Prop.
existsc: (Term -> Prop) -> Prop :=
  P:(Term -> Prop) => 
  not (not (exists (x:Term => not (not (P x))))).
equal: Term -> Term -> Prop.
equalc: Term -> Term -> Prop :=
  a:Term => b:Term => not (not (equal a b)).
equiv: Prop -> Prop -> Prop := 
  A:Prop => B:Prop => and (imply A B) (imply B A).


[] prf True --> P:Prop -> (prf P -> prf P)
[] prf False --> P:Prop -> prf P
[A: Prop, B: Prop] prf (and A B) --> P:Prop -> (prf A -> prf B -> prf P) -> prf P
[A: Prop, B: Prop] prf (or A B) --> P:Prop -> (prf A -> prf P) -> (prf B -> prf P) -> prf P
[A: Prop, B: Prop] prf (imply A B) --> prf A -> prf B
[A: Prop] prf (not A) --> prf A -> prf False
[A: Term -> Prop] prf (forall A) --> x:Term -> prf (A x)
[A: Term -> Prop] prf (exists A) --> 
P:Prop -> (x:Term -> prf (A x) -> prf P) -> prf P
[x: Term, y: Term] prf (equal x y) --> P:(Term -> Prop) -> prf (imply (P x) (P y)).

leq : Term -> Term -> Prop.
one : Term.
c : Term -> Term.
test : Term -> Prop.
complement : Term -> Term -> Prop.
addition : Term -> Term -> Term.
zero : Term.
multiplication : Term -> Term -> Term.
[B : Term, A : Term] leq A B --> (equal (addition A B) B).
[X0 : Term] test X0 --> (exists (X1:Term => (complement X1 X0))).
[X0 : Term, X1 : Term] complement X1 X0 --> (and (equal (multiplication X0 X1) zero) (and (equal (multiplication X1 X0) zero) (equal (addition X0 X1) one))).
[C : Term, B : Term, A : Term] addition A (addition B C) --> (addition (addition A B) C)
[A : Term] addition A zero --> A.
[C : Term, B : Term, A : Term] multiplication A (multiplication B C) --> (multiplication (multiplication A B) C)
[A : Term] multiplication A one --> A
[A : Term] multiplication one A --> A
[C : Term, B : Term, A : Term] multiplication A (addition B C) --> (addition (multiplication A B) (multiplication A C))
[C : Term, B : Term, A : Term] multiplication (addition A B) C --> (addition (multiplication A C) (multiplication B C))
[A : Term] multiplication A zero --> zero
[A : Term] multiplication zero A --> zero.
conjecture_proof : prf (imply (forall (A:Term => (forall (B:Term => (equal (addition A B) (addition B A)))))) (imply (forall (X0:Term => (forall (X1:Term => (imply (exists (X1:Term => (and (equal (multiplication X0 X1) zero) (and (equal (multiplication X1 X0) zero) (equal (addition X0 X1) one))))) (equiv (equal (c X0) X1) (and (equal (multiplication X1 X0) zero) (and (equal (multiplication X0 X1) zero) (equal (addition X1 X0) one))))))))) (imply (forall (X0:Term => (imply (not (exists (X1:Term => (and (equal (multiplication X0 X1) zero) (and (equal (multiplication X1 X0) zero) (equal (addition X0 X1) one)))))) (equal (c X0) zero)))) (equalc (c one) zero)))) :=
(H0 : prf (forall (A:Term => (forall (B:Term => (equal (addition A B) (addition B A)))))) => (H1 : prf (forall (X0:Term => (forall (X1:Term => (imply (exists (X1:Term => (and (equal (multiplication X0 X1) zero) (and (equal (multiplication X1 X0) zero) (equal (addition X0 X1) one))))) (equiv (equal (c X0) X1) (and (equal (multiplication X1 X0) zero) (and (equal (multiplication X0 X1) zero) (equal (addition X1 X0) one))))))))) => (H2 : prf (forall (X0:Term => (imply (not (exists (X1:Term => (and (equal (multiplication X0 X1) zero) (and (equal (multiplication X1 X0) zero) (equal (addition X0 X1) one)))))) (equal (c X0) zero)))) => (H3 : prf (not (equal (c one) zero)) => (H3 ((H2 one) (H4 : prf (exists (X1:Term => (and (equal X1 zero) (and (equal X1 zero) (equal (addition one X1) one))))) => ((((H1 one) (c one)) H4) False (H5 : prf (imply (equal (c one) (c one)) (and (equal (c one) zero) (and (equal (c one) zero) (equal (addition (c one) one) one)))) => H6 : prf (imply (and (equal (c one) zero) (and (equal (c one) zero) (equal (addition (c one) one) one))) (equal (c one) (c one))) => ((H5 (P9 : (Term -> Prop) => (H10 : prf (P9 (c one)) => H10))) False (H7 : prf (equal (c one) zero) => H8 : prf (and (equal (c one) zero) (equal (addition (c one) one) one)) => (H8 False (H11 : prf (equal (c one) zero) => H12 : prf (equal (addition (c one) one) one) => (H3 H11)))))))))))))).