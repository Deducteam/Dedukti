#NAME miller1.

R : Type.
0 : R.

sh : R -> R.
ch : R -> R.
def d : (R -> R) -> (R -> R).
[] d sh --> ch.
[] d ch --> sh.
[] d (x => sh x) --> ch.
[] d (x => ch x) --> sh.

R2 : Type.
pair : R -> R -> R2.

def dx : (R -> R -> R) -> (R -> R -> R).
[F] dx (x => y => F x) --> x => y => (d (x => F x)) x.
[F] dx (x => y => F y) --> x => y => 0.

def dy : (R -> R -> R) -> (R -> R -> R).
[F] dy (x => y => F x) --> x => y => 0.
[F] dy (x => y => F y) --> x => y => (d (x => F x)) x.

def grad : (R -> R -> R) -> (R -> R -> R2).
[F] grad F --> x => y => pair ((dx F) x y) ((dy F) x y).


def trans : (R -> R -> R) -> (R -> R -> R).
[F] trans (x => y => F x y) --> x => y => F y x.

def flip : (R -> R -> R2) -> (R -> R -> R2).
[F,G] flip (x => y => pair (F x y) (G x y)) --> x => y => pair (G x y) (F x y).


def f : R -> R -> R := x : R => y : R => ch x.

#EVAL grad (trans f).
#EVAL flip (grad f).

#ASSERT grad (trans f) == flip (grad f).
